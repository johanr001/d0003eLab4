
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000025da  0000266e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800154  00800154  000026c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b2d  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b3  00000000  00000000  00006551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019fc  00000000  00000000  00007804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eb4  00000000  00000000  00009200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a65  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000347f  00000000  00000000  0000ab19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000df98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_1>
       8:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__vector_2>
       c:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_3>
      10:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_4>
      14:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_9>
      28:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_10>
      2c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_11>
      30:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_12>
      34:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_13>
      38:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__vector_14>
      3c:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_15>
      40:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_16>
      44:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_17>
      48:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_18>
      4c:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__vector_19>
      50:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_20>
      54:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__vector_21>
      58:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea ed       	ldi	r30, 0xDA	; 218
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 35       	cpi	r26, 0x54	; 84
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e5       	ldi	r26, 0x54	; 84
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 3a       	cpi	r26, 0xA7	; 167
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 92 04 	call	0x924	; 0x924 <main>
      92:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	}
	toggle = !toggle;
	AFTER(MSEC(69), self, pressSimulator, 0);
	
	return 0;
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	fc 01       	movw	r30, r24
      ac:	20 85       	ldd	r18, Z+8	; 0x08
      ae:	22 23       	and	r18, r18
      b0:	41 f1       	breq	.+80     	; 0x102 <holdCheckerUp+0x68>
      b2:	1e 99       	sbic	0x03, 6	; 3
      b4:	24 c0       	rjmp	.+72     	; 0xfe <holdCheckerUp+0x64>
      b6:	ec 01       	movw	r28, r24
      b8:	04 81       	ldd	r16, Z+4	; 0x04
      ba:	15 81       	ldd	r17, Z+5	; 0x05
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	f8 e2       	ldi	r31, 0x28	; 40
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
      dc:	0f 2e       	mov	r0, r31
      de:	fd e4       	ldi	r31, 0x4D	; 77
      e0:	ef 2e       	mov	r14, r31
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	8e 01       	movw	r16, r28
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	a9 01       	movw	r20, r18
      f0:	65 e3       	ldi	r22, 0x35	; 53
      f2:	7c e0       	ldi	r23, 0x0C	; 12
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <holdCheckerUp+0x68>
      fe:	fc 01       	movw	r30, r24
     100:	10 86       	std	Z+8, r1	; 0x08
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	1f 91       	pop	r17
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	df 90       	pop	r13
     114:	cf 90       	pop	r12
     116:	08 95       	ret

00000118 <holdCheckerDown>:
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	fc 01       	movw	r30, r24
     12a:	21 85       	ldd	r18, Z+9	; 0x09
     12c:	22 23       	and	r18, r18
     12e:	41 f1       	breq	.+80     	; 0x180 <holdCheckerDown+0x68>
     130:	1f 99       	sbic	0x03, 7	; 3
     132:	24 c0       	rjmp	.+72     	; 0x17c <holdCheckerDown+0x64>
     134:	ec 01       	movw	r28, r24
     136:	04 81       	ldd	r16, Z+4	; 0x04
     138:	15 81       	ldd	r17, Z+5	; 0x05
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	0f 2e       	mov	r0, r31
     140:	f5 e7       	ldi	r31, 0x75	; 117
     142:	ef 2e       	mov	r14, r31
     144:	f3 e0       	ldi	r31, 0x03	; 3
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	a9 01       	movw	r20, r18
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	cb 01       	movw	r24, r22
     156:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     15a:	0f 2e       	mov	r0, r31
     15c:	fc e8       	ldi	r31, 0x8C	; 140
     15e:	ef 2e       	mov	r14, r31
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ff 2e       	mov	r15, r31
     164:	f0 2d       	mov	r31, r0
     166:	8e 01       	movw	r16, r28
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	a9 01       	movw	r20, r18
     16e:	65 e3       	ldi	r22, 0x35	; 53
     170:	7c e0       	ldi	r23, 0x0C	; 12
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     17a:	02 c0       	rjmp	.+4      	; 0x180 <holdCheckerDown+0x68>
     17c:	fc 01       	movw	r30, r24
     17e:	11 86       	std	Z+9, r1	; 0x09
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	08 95       	ret

00000196 <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     196:	85 b1       	in	r24, 0x05	; 5
     198:	80 6d       	ori	r24, 0xD0	; 208
     19a:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     19c:	8e b1       	in	r24, 0x0e	; 14
     19e:	8c 60       	ori	r24, 0x0C	; 12
     1a0:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     1a2:	8d b3       	in	r24, 0x1d	; 29
     1a4:	80 6c       	ori	r24, 0xC0	; 192
     1a6:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a8:	eb e6       	ldi	r30, 0x6B	; 107
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8c 60       	ori	r24, 0x0C	; 12
     1b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1b2:	ec e6       	ldi	r30, 0x6C	; 108
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 6d       	ori	r24, 0xD0	; 208
     1ba:	80 83       	st	Z, r24
     1bc:	08 95       	ret

000001be <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
	if (PRESSEDLT) {
     1ca:	62 99       	sbic	0x0c, 2	; 12
     1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <leftdir+0x36>
     1ce:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     1d0:	04 81       	ldd	r16, Z+4	; 0x04
     1d2:	15 81       	ldd	r17, Z+5	; 0x05
     1d4:	c1 2c       	mov	r12, r1
     1d6:	d1 2c       	mov	r13, r1
     1d8:	0f 2e       	mov	r0, r31
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	ef 2e       	mov	r14, r31
     1de:	f3 e0       	ldi	r31, 0x03	; 3
     1e0:	ff 2e       	mov	r15, r31
     1e2:	f0 2d       	mov	r31, r0
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	}
	return 0;
}
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	08 95       	ret

00000206 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
	if (PRESSEDRT) {
     212:	63 99       	sbic	0x0c, 3	; 12
     214:	14 c0       	rjmp	.+40     	; 0x23e <rightdir+0x38>
     216:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     218:	04 81       	ldd	r16, Z+4	; 0x04
     21a:	15 81       	ldd	r17, Z+5	; 0x05
     21c:	cc 24       	eor	r12, r12
     21e:	c3 94       	inc	r12
     220:	d1 2c       	mov	r13, r1
     222:	0f 2e       	mov	r0, r31
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	ef 2e       	mov	r14, r31
     228:	f3 e0       	ldi	r31, 0x03	; 3
     22a:	ff 2e       	mov	r15, r31
     22c:	f0 2d       	mov	r31, r0
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	a9 01       	movw	r20, r18
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	cb 01       	movw	r24, r22
     23a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	}
	return 0;
}
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	08 95       	ret

00000250 <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     256:	62 99       	sbic	0x0c, 2	; 12
     258:	04 c0       	rjmp	.+8      	; 0x262 <buttonCheckerLR+0x12>
		leftdir(self, 0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 df 00 	call	0x1be	; 0x1be <leftdir>
	}
	if (PRESSEDRT) {
     262:	63 99       	sbic	0x0c, 3	; 12
     264:	05 c0       	rjmp	.+10     	; 0x270 <buttonCheckerLR+0x20>
		rightdir(self, 0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	ce 01       	movw	r24, r28
     26c:	0e 94 03 01 	call	0x206	; 0x206 <rightdir>
	}
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     28a:	1e 99       	sbic	0x03, 6	; 3
     28c:	2f c0       	rjmp	.+94     	; 0x2ec <updir+0x72>
     28e:	fc 01       	movw	r30, r24
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	21 11       	cpse	r18, r1
     294:	2b c0       	rjmp	.+86     	; 0x2ec <updir+0x72>
     296:	ec 01       	movw	r28, r24
		self->heldUp = true; // Markera att knappen hålls nere
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     29c:	04 81       	ldd	r16, Z+4	; 0x04
     29e:	15 81       	ldd	r17, Z+5	; 0x05
     2a0:	c1 2c       	mov	r12, r1
     2a2:	d1 2c       	mov	r13, r1
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f8 e2       	ldi	r31, 0x28	; 40
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f3 e0       	ldi	r31, 0x03	; 3
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	cb 01       	movw	r24, r22
     2bc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     2c0:	88 85       	ldd	r24, Y+8	; 0x08
     2c2:	81 11       	cpse	r24, r1
     2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <updir+0x7a>
			self->holdUpRunning = true;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	88 87       	std	Y+8, r24	; 0x08
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     2ca:	0f 2e       	mov	r0, r31
     2cc:	fd e4       	ldi	r31, 0x4D	; 77
     2ce:	ef 2e       	mov	r14, r31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ff 2e       	mov	r15, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	8e 01       	movw	r16, r28
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	a9 01       	movw	r20, r18
     2de:	69 e0       	ldi	r22, 0x09	; 9
     2e0:	7d e3       	ldi	r23, 0x3D	; 61
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <updir+0x7a>
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     2ec:	1e 9b       	sbis	0x03, 6	; 3
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <updir+0x7a>
		self->heldUp = false;
     2f0:	fc 01       	movw	r30, r24
     2f2:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     31a:	1f 99       	sbic	0x03, 7	; 3
     31c:	2f c0       	rjmp	.+94     	; 0x37c <downdir+0x72>
     31e:	fc 01       	movw	r30, r24
     320:	27 81       	ldd	r18, Z+7	; 0x07
     322:	21 11       	cpse	r18, r1
     324:	2b c0       	rjmp	.+86     	; 0x37c <downdir+0x72>
     326:	ec 01       	movw	r28, r24
		self->heldDown = true; // Markera att knappen hålls nere
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	87 83       	std	Z+7, r24	; 0x07
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     32c:	04 81       	ldd	r16, Z+4	; 0x04
     32e:	15 81       	ldd	r17, Z+5	; 0x05
     330:	c1 2c       	mov	r12, r1
     332:	d1 2c       	mov	r13, r1
     334:	0f 2e       	mov	r0, r31
     336:	f5 e7       	ldi	r31, 0x75	; 117
     338:	ef 2e       	mov	r14, r31
     33a:	f3 e0       	ldi	r31, 0x03	; 3
     33c:	ff 2e       	mov	r15, r31
     33e:	f0 2d       	mov	r31, r0
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	a9 01       	movw	r20, r18
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	cb 01       	movw	r24, r22
     34c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     350:	89 85       	ldd	r24, Y+9	; 0x09
     352:	81 11       	cpse	r24, r1
     354:	17 c0       	rjmp	.+46     	; 0x384 <downdir+0x7a>
			self->holdDownRunning = true;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	89 87       	std	Y+9, r24	; 0x09
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     35a:	0f 2e       	mov	r0, r31
     35c:	fc e8       	ldi	r31, 0x8C	; 140
     35e:	ef 2e       	mov	r14, r31
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	8e 01       	movw	r16, r28
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	a9 01       	movw	r20, r18
     36e:	69 e0       	ldi	r22, 0x09	; 9
     370:	7d e3       	ldi	r23, 0x3D	; 61
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <downdir+0x7a>
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     37c:	1f 9b       	sbis	0x03, 7	; 3
     37e:	02 c0       	rjmp	.+4      	; 0x384 <downdir+0x7a>
		self->heldDown = false;
     380:	fc 01       	movw	r30, r24
     382:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <centerdir>:
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
	if (PRESSEDCN) {
     3a6:	1c 99       	sbic	0x03, 4	; 3
     3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <centerdir+0x38>
     3aa:	fc 01       	movw	r30, r24
		AFTER(MSEC(100),self->gui, guiFrecReset, 0);
     3ac:	04 81       	ldd	r16, Z+4	; 0x04
     3ae:	15 81       	ldd	r17, Z+5	; 0x05
     3b0:	c1 2c       	mov	r12, r1
     3b2:	d1 2c       	mov	r13, r1
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f2 ec       	ldi	r31, 0xC2	; 194
     3b8:	ef 2e       	mov	r14, r31
     3ba:	f3 e0       	ldi	r31, 0x03	; 3
     3bc:	ff 2e       	mov	r15, r31
     3be:	f0 2d       	mov	r31, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	a9 01       	movw	r20, r18
     3c6:	65 e3       	ldi	r22, 0x35	; 53
     3c8:	7c e0       	ldi	r23, 0x0C	; 12
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	}
	return 0;
}
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     3ea:	1e 99       	sbic	0x03, 6	; 3
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <buttonCheckerUDC+0x14>
		updir(self, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 3d 01 	call	0x27a	; 0x27a <updir>
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <buttonCheckerUDC+0x16>
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     3f8:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN) {
     3fa:	1f 99       	sbic	0x03, 7	; 3
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		downdir(self, 0); // Hantera ner-knappen
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	ce 01       	movw	r24, r28
     404:	0e 94 85 01 	call	0x30a	; 0x30a <downdir>
     408:	01 c0       	rjmp	.+2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     40a:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN) {
     40c:	1c 99       	sbic	0x03, 4	; 3
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		centerdir(self, 0);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	ce 01       	movw	r24, r28
     416:	0e 94 cd 01 	call	0x39a	; 0x39a <centerdir>
	}
	return 0;
}
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     424:	80 ec       	ldi	r24, 0xC0	; 192
     426:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     42a:	87 eb       	ldi	r24, 0xB7	; 183
     42c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     436:	08 95       	ret

00000438 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     438:	66 30       	cpi	r22, 0x06	; 6
     43a:	71 05       	cpc	r23, r1
     43c:	08 f0       	brcs	.+2      	; 0x440 <writeChar+0x8>
     43e:	6b c0       	rjmp	.+214    	; 0x516 <__stack+0x17>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     440:	90 ed       	ldi	r25, 0xD0	; 208
     442:	98 0f       	add	r25, r24
     444:	9a 30       	cpi	r25, 0x0A	; 10
     446:	48 f4       	brcc	.+18     	; 0x45a <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     448:	e8 2f       	mov	r30, r24
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	e1 52       	subi	r30, 0x21	; 33
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	02 c0       	rjmp	.+4      	; 0x45e <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     45e:	fb 01       	movw	r30, r22
     460:	77 23       	and	r23, r23
     462:	0c f4       	brge	.+2      	; 0x466 <writeChar+0x2e>
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	f5 95       	asr	r31
     468:	e7 95       	ror	r30
     46a:	e4 51       	subi	r30, 0x14	; 20
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     46e:	61 70       	andi	r22, 0x01	; 1
     470:	70 78       	andi	r23, 0x80	; 128
     472:	77 23       	and	r23, r23
     474:	34 f4       	brge	.+12     	; 0x482 <writeChar+0x4a>
     476:	61 50       	subi	r22, 0x01	; 1
     478:	71 09       	sbc	r23, r1
     47a:	6e 6f       	ori	r22, 0xFE	; 254
     47c:	7f 6f       	ori	r23, 0xFF	; 255
     47e:	6f 5f       	subi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	66 0f       	add	r22, r22
     488:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	06 2e       	mov	r0, r22
     490:	02 c0       	rjmp	.+4      	; 0x496 <writeChar+0x5e>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <writeChar+0x5a>
     49a:	80 95       	com	r24
     49c:	40 81       	ld	r20, Z
     49e:	98 2f       	mov	r25, r24
     4a0:	94 23       	and	r25, r20
     4a2:	a9 01       	movw	r20, r18
     4a4:	4f 70       	andi	r20, 0x0F	; 15
     4a6:	55 27       	eor	r21, r21
     4a8:	06 2e       	mov	r0, r22
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <writeChar+0x78>
     4ac:	44 0f       	add	r20, r20
     4ae:	55 1f       	adc	r21, r21
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <writeChar+0x74>
     4b4:	49 2b       	or	r20, r25
     4b6:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     4b8:	a9 01       	movw	r20, r18
     4ba:	52 95       	swap	r21
     4bc:	42 95       	swap	r20
     4be:	4f 70       	andi	r20, 0x0F	; 15
     4c0:	45 27       	eor	r20, r21
     4c2:	5f 70       	andi	r21, 0x0F	; 15
     4c4:	45 27       	eor	r20, r21
     4c6:	4f 70       	andi	r20, 0x0F	; 15
     4c8:	55 27       	eor	r21, r21
     4ca:	06 2e       	mov	r0, r22
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <writeChar+0x9a>
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	0a 94       	dec	r0
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <writeChar+0x96>
     4d6:	95 81       	ldd	r25, Z+5	; 0x05
     4d8:	98 23       	and	r25, r24
     4da:	49 2b       	or	r20, r25
     4dc:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     4de:	43 2f       	mov	r20, r19
     4e0:	55 27       	eor	r21, r21
     4e2:	4f 70       	andi	r20, 0x0F	; 15
     4e4:	55 27       	eor	r21, r21
     4e6:	06 2e       	mov	r0, r22
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <writeChar+0xb6>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	0a 94       	dec	r0
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <writeChar+0xb2>
     4f2:	92 85       	ldd	r25, Z+10	; 0x0a
     4f4:	98 23       	and	r25, r24
     4f6:	49 2b       	or	r20, r25
     4f8:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     4fa:	47 85       	ldd	r20, Z+15	; 0x0f
     4fc:	48 23       	and	r20, r24
     4fe:	c9 01       	movw	r24, r18
     500:	89 2f       	mov	r24, r25
     502:	99 27       	eor	r25, r25
     504:	82 95       	swap	r24
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	02 c0       	rjmp	.+4      	; 0x50e <__stack+0xf>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	6a 95       	dec	r22
     510:	e2 f7       	brpl	.-8      	; 0x50a <__stack+0xb>
     512:	84 2b       	or	r24, r20
     514:	87 87       	std	Z+15, r24	; 0x0f
     516:	08 95       	ret

00000518 <printAt>:
}

void printAt(long num, int pos) {
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	4b 01       	movw	r8, r22
     52e:	5c 01       	movw	r10, r24
     530:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     532:	24 e6       	ldi	r18, 0x64	; 100
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 3f 12 	call	0x247e	; 0x247e <__divmodsi4>
     53e:	0f 2e       	mov	r0, r31
     540:	fa e0       	ldi	r31, 0x0A	; 10
     542:	cf 2e       	mov	r12, r31
     544:	d1 2c       	mov	r13, r1
     546:	e1 2c       	mov	r14, r1
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	a7 01       	movw	r20, r14
     54e:	96 01       	movw	r18, r12
     550:	0e 94 3f 12 	call	0x247e	; 0x247e <__divmodsi4>
     554:	be 01       	movw	r22, r28
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	82 0f       	add	r24, r18
     55a:	0e 94 1c 02 	call	0x438	; 0x438 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     55e:	21 96       	adiw	r28, 0x01	; 1
     560:	c5 01       	movw	r24, r10
     562:	b4 01       	movw	r22, r8
     564:	a7 01       	movw	r20, r14
     566:	96 01       	movw	r18, r12
     568:	0e 94 3f 12 	call	0x247e	; 0x247e <__divmodsi4>
     56c:	86 2f       	mov	r24, r22
     56e:	be 01       	movw	r22, r28
     570:	80 5d       	subi	r24, 0xD0	; 208
     572:	0e 94 1c 02 	call	0x438	; 0x438 <writeChar>
	
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	9f 90       	pop	r9
     588:	8f 90       	pop	r8
     58a:	08 95       	ret

0000058c <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	6f e1       	ldi	r22, 0x1F	; 31
     598:	75 e0       	ldi	r23, 0x05	; 5
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	0e 94 c8 10 	call	0x2190	; 0x2190 <sync>
     5a2:	bc 01       	movw	r22, r24
     5a4:	99 0f       	add	r25, r25
     5a6:	88 0b       	sbc	r24, r24
     5a8:	99 0b       	sbc	r25, r25
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	6f e1       	ldi	r22, 0x1F	; 31
     5b8:	75 e0       	ldi	r23, 0x05	; 5
     5ba:	8e 81       	ldd	r24, Y+6	; 0x06
     5bc:	9f 81       	ldd	r25, Y+7	; 0x07
     5be:	0e 94 c8 10 	call	0x2190	; 0x2190 <sync>
     5c2:	bc 01       	movw	r22, r24
     5c4:	99 0f       	add	r25, r25
     5c6:	88 0b       	sbc	r24, r24
     5c8:	99 0b       	sbc	r25, r25
     5ca:	44 e0       	ldi	r20, 0x04	; 4
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	81 11       	cpse	r24, r1
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <updateDisplay+0x5e>
		printAt(10, 2);
     5d8:	42 e0       	ldi	r20, 0x02	; 2
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	6a e0       	ldi	r22, 0x0A	; 10
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     5ea:	42 e0       	ldi	r20, 0x02	; 2
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
	}
	return 0;
}
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	67 2b       	or	r22, r23
     614:	09 f4       	brne	.+2      	; 0x618 <switchGen+0x14>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	0f 2e       	mov	r0, r31
     622:	f6 ec       	ldi	r31, 0xC6	; 198
     624:	ef 2e       	mov	r14, r31
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	ff 2e       	mov	r15, r31
     62a:	f0 2d       	mov	r31, r0
     62c:	8c 01       	movw	r16, r24
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	cb 01       	movw	r24, r22
     63a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	return 0;
}
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret

00000650 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     662:	88 85       	ldd	r24, Y+8	; 0x08
     664:	81 11       	cpse	r24, r1
     666:	13 c0       	rjmp	.+38     	; 0x68e <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     668:	0c 81       	ldd	r16, Y+4	; 0x04
     66a:	1d 81       	ldd	r17, Y+5	; 0x05
     66c:	c1 2c       	mov	r12, r1
     66e:	d1 2c       	mov	r13, r1
     670:	0f 2e       	mov	r0, r31
     672:	f3 e2       	ldi	r31, 0x23	; 35
     674:	ef 2e       	mov	r14, r31
     676:	f5 e0       	ldi	r31, 0x05	; 5
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	cb 01       	movw	r24, r22
     688:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     68c:	12 c0       	rjmp	.+36     	; 0x6b2 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     68e:	0e 81       	ldd	r16, Y+6	; 0x06
     690:	1f 81       	ldd	r17, Y+7	; 0x07
     692:	c1 2c       	mov	r12, r1
     694:	d1 2c       	mov	r13, r1
     696:	0f 2e       	mov	r0, r31
     698:	f3 e2       	ldi	r31, 0x23	; 35
     69a:	ef 2e       	mov	r14, r31
     69c:	f5 e0       	ldi	r31, 0x05	; 5
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	}
	ASYNC(self, updateDisplay, 0);
     6b2:	c1 2c       	mov	r12, r1
     6b4:	d1 2c       	mov	r13, r1
     6b6:	0f 2e       	mov	r0, r31
     6b8:	f6 ec       	ldi	r31, 0xC6	; 198
     6ba:	ef 2e       	mov	r14, r31
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	ff 2e       	mov	r15, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	8e 01       	movw	r16, r28
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	cb 01       	movw	r24, r22
     6d0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	return 0;

}
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6fc:	88 85       	ldd	r24, Y+8	; 0x08
     6fe:	81 11       	cpse	r24, r1
     700:	13 c0       	rjmp	.+38     	; 0x728 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     702:	0c 81       	ldd	r16, Y+4	; 0x04
     704:	1d 81       	ldd	r17, Y+5	; 0x05
     706:	c1 2c       	mov	r12, r1
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	f3 e5       	ldi	r31, 0x53	; 83
     70e:	ef 2e       	mov	r14, r31
     710:	f5 e0       	ldi	r31, 0x05	; 5
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     726:	12 c0       	rjmp	.+36     	; 0x74c <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     728:	0e 81       	ldd	r16, Y+6	; 0x06
     72a:	1f 81       	ldd	r17, Y+7	; 0x07
     72c:	c1 2c       	mov	r12, r1
     72e:	d1 2c       	mov	r13, r1
     730:	0f 2e       	mov	r0, r31
     732:	f3 e5       	ldi	r31, 0x53	; 83
     734:	ef 2e       	mov	r14, r31
     736:	f5 e0       	ldi	r31, 0x05	; 5
     738:	ff 2e       	mov	r15, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	a9 01       	movw	r20, r18
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	cb 01       	movw	r24, r22
     748:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	}
	ASYNC(self, updateDisplay, 0);
     74c:	c1 2c       	mov	r12, r1
     74e:	d1 2c       	mov	r13, r1
     750:	0f 2e       	mov	r0, r31
     752:	f6 ec       	ldi	r31, 0xC6	; 198
     754:	ef 2e       	mov	r14, r31
     756:	f2 e0       	ldi	r31, 0x02	; 2
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	8e 01       	movw	r16, r28
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	return 0;
}
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	08 95       	ret

00000784 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     796:	88 85       	ldd	r24, Y+8	; 0x08
     798:	81 11       	cpse	r24, r1
     79a:	13 c0       	rjmp	.+38     	; 0x7c2 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     79c:	0c 81       	ldd	r16, Y+4	; 0x04
     79e:	1d 81       	ldd	r17, Y+5	; 0x05
     7a0:	c1 2c       	mov	r12, r1
     7a2:	d1 2c       	mov	r13, r1
     7a4:	0f 2e       	mov	r0, r31
     7a6:	fc e5       	ldi	r31, 0x5C	; 92
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f5 e0       	ldi	r31, 0x05	; 5
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     7c2:	0e 81       	ldd	r16, Y+6	; 0x06
     7c4:	1f 81       	ldd	r17, Y+7	; 0x07
     7c6:	c1 2c       	mov	r12, r1
     7c8:	d1 2c       	mov	r13, r1
     7ca:	0f 2e       	mov	r0, r31
     7cc:	fc e5       	ldi	r31, 0x5C	; 92
     7ce:	ef 2e       	mov	r14, r31
     7d0:	f5 e0       	ldi	r31, 0x05	; 5
     7d2:	ff 2e       	mov	r15, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	a9 01       	movw	r20, r18
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	cb 01       	movw	r24, r22
     7e2:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	}
	ASYNC(self, updateDisplay, 0);
     7e6:	c1 2c       	mov	r12, r1
     7e8:	d1 2c       	mov	r13, r1
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f6 ec       	ldi	r31, 0xC6	; 198
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	8e 01       	movw	r16, r28
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a9 01       	movw	r20, r18
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	cb 01       	movw	r24, r22
     804:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	return 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     82a:	fc 01       	movw	r30, r24
     82c:	04 81       	ldd	r16, Z+4	; 0x04
     82e:	15 81       	ldd	r17, Z+5	; 0x05
     830:	c1 2c       	mov	r12, r1
     832:	d1 2c       	mov	r13, r1
     834:	0f 2e       	mov	r0, r31
     836:	f8 e2       	ldi	r31, 0x28	; 40
     838:	ef 2e       	mov	r14, r31
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	ff 2e       	mov	r15, r31
     83e:	f0 2d       	mov	r31, r0
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	cb 01       	movw	r24, r22
     84c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	return 0;
}
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	08 95       	ret

00000862 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     86e:	fc 01       	movw	r30, r24
     870:	04 81       	ldd	r16, Z+4	; 0x04
     872:	15 81       	ldd	r17, Z+5	; 0x05
     874:	c1 2c       	mov	r12, r1
     876:	d1 2c       	mov	r13, r1
     878:	0f 2e       	mov	r0, r31
     87a:	f2 ef       	ldi	r31, 0xF2	; 242
     87c:	ef 2e       	mov	r14, r31
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	ff 2e       	mov	r15, r31
     882:	f0 2d       	mov	r31, r0
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a9 01       	movw	r20, r18
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	cb 01       	movw	r24, r22
     890:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	return 0;
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
     8bc:	0f 2e       	mov	r0, r31
     8be:	ff ea       	ldi	r31, 0xAF	; 175
     8c0:	ef 2e       	mov	r14, r31
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	ff 2e       	mov	r15, r31
     8c6:	f0 2d       	mov	r31, r0
     8c8:	03 e2       	ldi	r16, 0x23	; 35
     8ca:	11 e0       	ldi	r17, 0x01	; 1
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	cb 01       	movw	r24, r22
     8d8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	ASYNC(&pulseGen2, setPulse, 0);
     8dc:	09 e1       	ldi	r16, 0x19	; 25
     8de:	11 e0       	ldi	r17, 0x01	; 1
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	a9 01       	movw	r20, r18
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	cb 01       	movw	r24, r22
     8ec:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f6 ec       	ldi	r31, 0xC6	; 198
     8f4:	ef 2e       	mov	r14, r31
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	ff 2e       	mov	r15, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	8e 01       	movw	r16, r28
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	cb 01       	movw	r24, r22
     90a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	
	// AFTER(MSEC(500), &button, pressSimulator, 0);
	
	return 0;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	08 95       	ret

00000924 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     924:	0e 94 99 05 	call	0xb32	; 0xb32 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     928:	0e 94 12 02 	call	0x424	; 0x424 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     92c:	0e 94 cb 00 	call	0x196	; 0x196 <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	6f e0       	ldi	r22, 0x0F	; 15
     934:	74 e0       	ldi	r23, 0x04	; 4
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 c3 11 	call	0x2386	; 0x2386 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     93e:	42 e0       	ldi	r20, 0x02	; 2
     940:	61 e3       	ldi	r22, 0x31	; 49
     942:	74 e0       	ldi	r23, 0x04	; 4
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 c3 11 	call	0x2386	; 0x2386 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	63 e5       	ldi	r22, 0x53	; 83
     952:	74 e0       	ldi	r23, 0x04	; 4
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 dd 11 	call	0x23ba	; 0x23ba <tinytimber>
}
     95c:	08 95       	ret

0000095e <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	81 11       	cpse	r24, r1
     974:	14 c0       	rjmp	.+40     	; 0x99e <setPulse+0x40>
	    ASYNC(self->wbit, writeBit, 0);
     976:	0f 81       	ldd	r16, Y+7	; 0x07
     978:	18 85       	ldd	r17, Y+8	; 0x08
     97a:	c1 2c       	mov	r12, r1
     97c:	d1 2c       	mov	r13, r1
     97e:	0f 2e       	mov	r0, r31
     980:	f9 ef       	ldi	r31, 0xF9	; 249
     982:	ef 2e       	mov	r14, r31
     984:	f1 e1       	ldi	r31, 0x11	; 17
     986:	ff 2e       	mov	r15, r31
     988:	f0 2d       	mov	r31, r0
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	cb 01       	movw	r24, r22
     996:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
		self->pulseActive = false;
     99a:	19 86       	std	Y+9, r1	; 0x09
	    return 0;
     99c:	45 c0       	rjmp	.+138    	; 0xa28 <setPulse+0xca>
    }
	
	// Inom setPulse callar vi med arg 1, så arg == 0 är utanför denna funktion.
    if (arg == 0) { // Om den är utanför,
     99e:	67 2b       	or	r22, r23
     9a0:	29 f4       	brne	.+10     	; 0x9ac <setPulse+0x4e>
	    if (self->pulseActive) { // Om den redan är aktiv returna bara,
     9a2:	89 85       	ldd	r24, Y+9	; 0x09
     9a4:	81 11       	cpse	r24, r1
     9a6:	40 c0       	rjmp	.+128    	; 0xa28 <setPulse+0xca>
		    return 0;
	    }
	    self->pulseActive = true; // Om den inte är aktiv, sätt den till aktiv och fortsätt
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	89 87       	std	Y+9, r24	; 0x09
    } // Sedan kommer SetPulse, 1 after att skippa denna check eftersom den passar arg = 1.
	
	// Annars toggla outputHigh.
    ASYNC(self->wbit, toggleBit, 0);
     9ac:	0f 81       	ldd	r16, Y+7	; 0x07
     9ae:	18 85       	ldd	r17, Y+8	; 0x08
     9b0:	c1 2c       	mov	r12, r1
     9b2:	d1 2c       	mov	r13, r1
     9b4:	0f 2e       	mov	r0, r31
     9b6:	fc e1       	ldi	r31, 0x1C	; 28
     9b8:	ef 2e       	mov	r14, r31
     9ba:	f2 e1       	ldi	r31, 0x12	; 18
     9bc:	ff 2e       	mov	r15, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	a9 01       	movw	r20, r18
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	cb 01       	movw	r24, r22
     9cc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
	
	// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
    int delay = 1000 / self->frec;
    AFTER(MSEC(delay), self, setPulse, 1);
     9d0:	6c 81       	ldd	r22, Y+4	; 0x04
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	88 ee       	ldi	r24, 0xE8	; 232
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 2b 12 	call	0x2456	; 0x2456 <__divmodhi4>
     9dc:	2d e7       	ldi	r18, 0x7D	; 125
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	db 01       	movw	r26, r22
     9e2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__usmulhisi3>
     9e6:	8b 01       	movw	r16, r22
     9e8:	9c 01       	movw	r18, r24
     9ea:	99 23       	and	r25, r25
     9ec:	24 f4       	brge	.+8      	; 0x9f6 <setPulse+0x98>
     9ee:	0d 5f       	subi	r16, 0xFD	; 253
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	2f 4f       	sbci	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	c9 01       	movw	r24, r18
     9f8:	b8 01       	movw	r22, r16
     9fa:	95 95       	asr	r25
     9fc:	87 95       	ror	r24
     9fe:	77 95       	ror	r23
     a00:	67 95       	ror	r22
     a02:	95 95       	asr	r25
     a04:	87 95       	ror	r24
     a06:	77 95       	ror	r23
     a08:	67 95       	ror	r22
     a0a:	cc 24       	eor	r12, r12
     a0c:	c3 94       	inc	r12
     a0e:	d1 2c       	mov	r13, r1
     a10:	0f 2e       	mov	r0, r31
     a12:	ff ea       	ldi	r31, 0xAF	; 175
     a14:	ef 2e       	mov	r14, r31
     a16:	f4 e0       	ldi	r31, 0x04	; 4
     a18:	ff 2e       	mov	r15, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	8e 01       	movw	r16, r28
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	a9 01       	movw	r20, r18
     a24:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
    return 0;
}
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	08 95       	ret

00000a3e <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     a3e:	fc 01       	movw	r30, r24
     a40:	84 81       	ldd	r24, Z+4	; 0x04
}
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	08 95       	ret

00000a46 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	ec 01       	movw	r28, r24
    unsigned char old = self->frec;
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
    if (self->frec < 99) {
     a5a:	83 36       	cpi	r24, 0x63	; 99
     a5c:	18 f4       	brcc	.+6      	; 0xa64 <FrecInc+0x1e>
	    self->frec++;
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	98 0f       	add	r25, r24
     a62:	9c 83       	std	Y+4, r25	; 0x04
    }
    // Om går från 0 till mer än 0 starta.
    if (old == 0 && self->frec > 0) {
     a64:	81 11       	cpse	r24, r1
     a66:	14 c0       	rjmp	.+40     	; 0xa90 <FrecInc+0x4a>
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	88 23       	and	r24, r24
     a6c:	89 f0       	breq	.+34     	; 0xa90 <FrecInc+0x4a>
	    ASYNC(self, setPulse, 0);
     a6e:	c1 2c       	mov	r12, r1
     a70:	d1 2c       	mov	r13, r1
     a72:	0f 2e       	mov	r0, r31
     a74:	ff ea       	ldi	r31, 0xAF	; 175
     a76:	ef 2e       	mov	r14, r31
     a78:	f4 e0       	ldi	r31, 0x04	; 4
     a7a:	ff 2e       	mov	r15, r31
     a7c:	f0 2d       	mov	r31, r0
     a7e:	8e 01       	movw	r16, r28
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	a9 01       	movw	r20, r18
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	cb 01       	movw	r24, r22
     a8c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
    }
    return self->frec;
     a90:	8c 81       	ldd	r24, Y+4	; 0x04
    }
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	08 95       	ret

00000aa6 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     aa6:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     aa8:	94 81       	ldd	r25, Z+4	; 0x04
     aaa:	99 23       	and	r25, r25
     aac:	11 f0       	breq	.+4      	; 0xab2 <FrecDec+0xc>
		self->frec--;
     aae:	91 50       	subi	r25, 0x01	; 1
     ab0:	94 83       	std	Z+4, r25	; 0x04
	}
	return self->frec;
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
}
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     ac6:	84 81       	ldd	r24, Z+4	; 0x04
     ac8:	81 11       	cpse	r24, r1
     aca:	16 c0       	rjmp	.+44     	; 0xaf8 <FrecReset+0x40>
	    self->frec = self->frec_old;
     acc:	85 81       	ldd	r24, Z+5	; 0x05
     ace:	84 83       	std	Z+4, r24	; 0x04
	    if (self->frec > 0) {
     ad0:	88 23       	and	r24, r24
     ad2:	31 f1       	breq	.+76     	; 0xb20 <FrecReset+0x68>
		    ASYNC(self, setPulse, 0);
     ad4:	c1 2c       	mov	r12, r1
     ad6:	d1 2c       	mov	r13, r1
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff ea       	ldi	r31, 0xAF	; 175
     adc:	ef 2e       	mov	r14, r31
     ade:	f4 e0       	ldi	r31, 0x04	; 4
     ae0:	ff 2e       	mov	r15, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	8f 01       	movw	r16, r30
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	a9 01       	movw	r20, r18
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	cb 01       	movw	r24, r22
     af2:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
     af6:	14 c0       	rjmp	.+40     	; 0xb20 <FrecReset+0x68>
	    }
	    } else {
	    self->frec_old = self->frec;
     af8:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     afa:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     afc:	07 81       	ldd	r16, Z+7	; 0x07
     afe:	10 85       	ldd	r17, Z+8	; 0x08
     b00:	c1 2c       	mov	r12, r1
     b02:	d1 2c       	mov	r13, r1
     b04:	0f 2e       	mov	r0, r31
     b06:	f9 ef       	ldi	r31, 0xF9	; 249
     b08:	ef 2e       	mov	r14, r31
     b0a:	f1 e1       	ldi	r31, 0x11	; 17
     b0c:	ff 2e       	mov	r15, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	a9 01       	movw	r20, r18
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	cb 01       	movw	r24, r22
     b1c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
    }
    return 0;
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	08 95       	ret

00000b32 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     b32:	e1 e6       	ldi	r30, 0x61	; 97
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 e8       	ldi	r24, 0x80	; 128
     b38:	80 83       	st	Z, r24
	CLKPR = 0x00;
     b3a:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     b3c:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     b3e:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     b40:	e1 e8       	ldi	r30, 0x81	; 129
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8d 60       	ori	r24, 0x0D	; 13
     b48:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     b4a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b4e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     b52:	ef e6       	ldi	r30, 0x6F	; 111
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     b5c:	82 ec       	ldi	r24, 0xC2	; 194
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b64:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b68:	08 95       	ret

00000b6a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <initialize+0x6>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <initialize+0x8>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	87 e4       	ldi	r24, 0x47	; 71
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	27 e2       	ldi	r18, 0x27	; 39
     b7c:	33 e0       	ldi	r19, 0x03	; 3
     b7e:	fc 01       	movw	r30, r24
     b80:	70 97       	sbiw	r30, 0x10	; 16
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	80 83       	st	Z, r24
     b86:	40 96       	adiw	r24, 0x10	; 16
     b88:	82 17       	cp	r24, r18
     b8a:	93 07       	cpc	r25, r19
     b8c:	c1 f7       	brne	.-16     	; 0xb7e <initialize+0x14>
     b8e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <messages+0xe1>
     b92:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <messages+0xe0>
     b96:	e2 e8       	ldi	r30, 0x82	; 130
     b98:	f1 e0       	ldi	r31, 0x01	; 1
     b9a:	8f e9       	ldi	r24, 0x9F	; 159
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	8c eb       	ldi	r24, 0xBC	; 188
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	96 8f       	std	Z+30, r25	; 0x1e
     ba8:	85 8f       	std	Z+29, r24	; 0x1d
     baa:	a9 ed       	ldi	r26, 0xD9	; 217
     bac:	b1 e0       	ldi	r27, 0x01	; 1
     bae:	b3 af       	std	Z+59, r27	; 0x3b
     bb0:	a2 af       	std	Z+58, r26	; 0x3a
     bb2:	1d 92       	st	X+, r1
     bb4:	1c 92       	st	X, r1
     bb6:	fa 83       	std	Y+2, r31	; 0x02
     bb8:	e9 83       	std	Y+1, r30	; 0x01
     bba:	e3 e8       	ldi	r30, 0x83	; 131
     bbc:	f3 e0       	ldi	r31, 0x03	; 3
     bbe:	fc 83       	std	Y+4, r31	; 0x04
     bc0:	eb 83       	std	Y+3, r30	; 0x03
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	06 96       	adiw	r24, 0x06	; 6
     bc8:	0e 94 aa 12 	call	0x2554	; 0x2554 <setjmp>
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	e9 81       	ldd	r30, Y+1	; 0x01
     bd2:	fa 81       	ldd	r31, Y+2	; 0x02
     bd4:	97 8b       	std	Z+23, r25	; 0x17
     bd6:	86 8b       	std	Z+22, r24	; 0x16
     bd8:	91 8f       	std	Z+25, r25	; 0x19
     bda:	80 8f       	std	Z+24, r24	; 0x18
     bdc:	85 e5       	ldi	r24, 0x55	; 85
     bde:	91 e1       	ldi	r25, 0x11	; 17
     be0:	94 8f       	std	Z+28, r25	; 0x1c
     be2:	83 8f       	std	Z+27, r24	; 0x1b
     be4:	15 82       	std	Z+5, r1	; 0x05
     be6:	14 82       	std	Z+4, r1	; 0x04
     be8:	7d 96       	adiw	r30, 0x1d	; 29
     bea:	fa 83       	std	Y+2, r31	; 0x02
     bec:	e9 83       	std	Y+1, r30	; 0x01
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	e0 5a       	subi	r30, 0xA0	; 160
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	fc 83       	std	Y+4, r31	; 0x04
     bf8:	eb 83       	std	Y+3, r30	; 0x03
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	86 5f       	subi	r24, 0xF6	; 246
     c00:	91 40       	sbci	r25, 0x01	; 1
     c02:	f9 f6       	brne	.-66     	; 0xbc2 <initialize+0x58>
     c04:	ea e1       	ldi	r30, 0x1A	; 26
     c06:	f2 e0       	ldi	r31, 0x02	; 2
     c08:	11 82       	std	Z+1, r1	; 0x01
     c0a:	10 82       	st	Z, r1
     c0c:	15 82       	std	Z+5, r1	; 0x05
     c0e:	14 82       	std	Z+4, r1	; 0x04
     c10:	13 82       	std	Z+3, r1	; 0x03
     c12:	12 82       	std	Z+2, r1	; 0x02
     c14:	e1 e6       	ldi	r30, 0x61	; 97
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 e8       	ldi	r24, 0x80	; 128
     c1a:	80 83       	st	Z, r24
     c1c:	10 82       	st	Z, r1
     c1e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c22:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <dispatch>:
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	00 d0       	rcall	.+0      	; 0xc46 <dispatch+0x6>
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current>
     c52:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <current+0x1>
     c56:	06 96       	adiw	r24, 0x06	; 6
     c58:	0e 94 aa 12 	call	0x2554	; 0x2554 <setjmp>
     c5c:	89 2b       	or	r24, r25
     c5e:	59 f4       	brne	.+22     	; 0xc76 <dispatch+0x36>
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <current+0x1>
     c68:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <current>
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	06 96       	adiw	r24, 0x06	; 6
     c72:	0e 94 ca 12 	call	0x2594	; 0x2594 <longjmp>
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <schedule>:
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <msgQ>
     c8c:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <msgQ+0x1>
     c90:	30 97       	sbiw	r30, 0x00	; 0
     c92:	61 f1       	breq	.+88     	; 0xcec <schedule+0x6c>
     c94:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
     c98:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	31 f1       	breq	.+76     	; 0xcec <schedule+0x6c>
     ca0:	c0 91 39 01 	lds	r28, 0x0139	; 0x800139 <activeStack>
     ca4:	d0 91 3a 01 	lds	r29, 0x013A	; 0x80013a <activeStack+0x1>
     ca8:	aa 81       	ldd	r26, Y+2	; 0x02
     caa:	bb 81       	ldd	r27, Y+3	; 0x03
     cac:	10 97       	sbiw	r26, 0x00	; 0
     cae:	79 f0       	breq	.+30     	; 0xcce <schedule+0x4e>
     cb0:	46 81       	ldd	r20, Z+6	; 0x06
     cb2:	57 81       	ldd	r21, Z+7	; 0x07
     cb4:	60 85       	ldd	r22, Z+8	; 0x08
     cb6:	71 85       	ldd	r23, Z+9	; 0x09
     cb8:	16 96       	adiw	r26, 0x06	; 6
     cba:	0d 91       	ld	r16, X+
     cbc:	1d 91       	ld	r17, X+
     cbe:	2d 91       	ld	r18, X+
     cc0:	3c 91       	ld	r19, X
     cc2:	19 97       	sbiw	r26, 0x09	; 9
     cc4:	40 1b       	sub	r20, r16
     cc6:	51 0b       	sbc	r21, r17
     cc8:	62 0b       	sbc	r22, r18
     cca:	73 0b       	sbc	r23, r19
     ccc:	7a f4       	brpl	.+30     	; 0xcec <schedule+0x6c>
     cce:	fc 01       	movw	r30, r24
     cd0:	20 81       	ld	r18, Z
     cd2:	31 81       	ldd	r19, Z+1	; 0x01
     cd4:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <threadPool+0x1>
     cd8:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <threadPool>
     cdc:	d1 83       	std	Z+1, r29	; 0x01
     cde:	c0 83       	st	Z, r28
     ce0:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <activeStack+0x1>
     ce4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <activeStack>
     ce8:	0e 94 20 06 	call	0xc40	; 0xc40 <dispatch>
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	08 95       	ret

00000cf6 <__vector_1>:
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	2f 93       	push	r18
     d02:	3f 93       	push	r19
     d04:	4f 93       	push	r20
     d06:	5f 93       	push	r21
     d08:	6f 93       	push	r22
     d0a:	7f 93       	push	r23
     d0c:	8f 93       	push	r24
     d0e:	9f 93       	push	r25
     d10:	af 93       	push	r26
     d12:	bf 93       	push	r27
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31
     d18:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     d1c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     d20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d28:	c9 01       	movw	r24, r18
     d2a:	03 2e       	mov	r0, r19
     d2c:	00 0c       	add	r0, r0
     d2e:	aa 0b       	sbc	r26, r26
     d30:	bb 0b       	sbc	r27, r27
     d32:	dc 01       	movw	r26, r24
     d34:	99 27       	eor	r25, r25
     d36:	88 27       	eor	r24, r24
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	84 2b       	or	r24, r20
     d3e:	95 2b       	or	r25, r21
     d40:	a6 2b       	or	r26, r22
     d42:	b7 2b       	or	r27, r23
     d44:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     d48:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     d4c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     d50:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     d54:	b0 9b       	sbis	0x16, 0	; 22
     d56:	1b c0       	rjmp	.+54     	; 0xd8e <__vector_1+0x98>
     d58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d60:	c9 01       	movw	r24, r18
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	09 2e       	mov	r0, r25
     d66:	00 0c       	add	r0, r0
     d68:	aa 0b       	sbc	r26, r26
     d6a:	bb 0b       	sbc	r27, r27
     d6c:	dc 01       	movw	r26, r24
     d6e:	99 27       	eor	r25, r25
     d70:	88 27       	eor	r24, r24
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	84 2b       	or	r24, r20
     d78:	95 2b       	or	r25, r21
     d7a:	a6 2b       	or	r26, r22
     d7c:	b7 2b       	or	r27, r23
     d7e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     d82:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     d86:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     d8a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     d8e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable>
     d92:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1>
     d96:	30 97       	sbiw	r30, 0x00	; 0
     d98:	39 f0       	breq	.+14     	; 0xda8 <__vector_1+0xb2>
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable>
     da2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1>
     da6:	09 95       	icall
     da8:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_2>:
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     df4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     df8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dfc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e00:	c9 01       	movw	r24, r18
     e02:	03 2e       	mov	r0, r19
     e04:	00 0c       	add	r0, r0
     e06:	aa 0b       	sbc	r26, r26
     e08:	bb 0b       	sbc	r27, r27
     e0a:	dc 01       	movw	r26, r24
     e0c:	99 27       	eor	r25, r25
     e0e:	88 27       	eor	r24, r24
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	84 2b       	or	r24, r20
     e16:	95 2b       	or	r25, r21
     e18:	a6 2b       	or	r26, r22
     e1a:	b7 2b       	or	r27, r23
     e1c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     e20:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     e24:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     e28:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     e2c:	b0 9b       	sbis	0x16, 0	; 22
     e2e:	1b c0       	rjmp	.+54     	; 0xe66 <__vector_2+0x98>
     e30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e38:	c9 01       	movw	r24, r18
     e3a:	01 96       	adiw	r24, 0x01	; 1
     e3c:	09 2e       	mov	r0, r25
     e3e:	00 0c       	add	r0, r0
     e40:	aa 0b       	sbc	r26, r26
     e42:	bb 0b       	sbc	r27, r27
     e44:	dc 01       	movw	r26, r24
     e46:	99 27       	eor	r25, r25
     e48:	88 27       	eor	r24, r24
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	84 2b       	or	r24, r20
     e50:	95 2b       	or	r25, r21
     e52:	a6 2b       	or	r26, r22
     e54:	b7 2b       	or	r27, r23
     e56:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     e5a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     e5e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     e62:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     e66:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x2>
     e6a:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x3>
     e6e:	30 97       	sbiw	r30, 0x00	; 0
     e70:	39 f0       	breq	.+14     	; 0xe80 <__vector_2+0xb2>
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x2>
     e7a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x3>
     e7e:	09 95       	icall
     e80:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__vector_3>:
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	2f 93       	push	r18
     eb2:	3f 93       	push	r19
     eb4:	4f 93       	push	r20
     eb6:	5f 93       	push	r21
     eb8:	6f 93       	push	r22
     eba:	7f 93       	push	r23
     ebc:	8f 93       	push	r24
     ebe:	9f 93       	push	r25
     ec0:	af 93       	push	r26
     ec2:	bf 93       	push	r27
     ec4:	ef 93       	push	r30
     ec6:	ff 93       	push	r31
     ec8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     ecc:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     ed0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ed4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ed8:	c9 01       	movw	r24, r18
     eda:	03 2e       	mov	r0, r19
     edc:	00 0c       	add	r0, r0
     ede:	aa 0b       	sbc	r26, r26
     ee0:	bb 0b       	sbc	r27, r27
     ee2:	dc 01       	movw	r26, r24
     ee4:	99 27       	eor	r25, r25
     ee6:	88 27       	eor	r24, r24
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	84 2b       	or	r24, r20
     eee:	95 2b       	or	r25, r21
     ef0:	a6 2b       	or	r26, r22
     ef2:	b7 2b       	or	r27, r23
     ef4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     ef8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     efc:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     f00:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     f04:	b0 9b       	sbis	0x16, 0	; 22
     f06:	1b c0       	rjmp	.+54     	; 0xf3e <__vector_3+0x98>
     f08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f10:	c9 01       	movw	r24, r18
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	09 2e       	mov	r0, r25
     f16:	00 0c       	add	r0, r0
     f18:	aa 0b       	sbc	r26, r26
     f1a:	bb 0b       	sbc	r27, r27
     f1c:	dc 01       	movw	r26, r24
     f1e:	99 27       	eor	r25, r25
     f20:	88 27       	eor	r24, r24
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	84 2b       	or	r24, r20
     f28:	95 2b       	or	r25, r21
     f2a:	a6 2b       	or	r26, r22
     f2c:	b7 2b       	or	r27, r23
     f2e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     f32:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     f36:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     f3a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     f3e:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x4>
     f42:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x5>
     f46:	30 97       	sbiw	r30, 0x00	; 0
     f48:	39 f0       	breq	.+14     	; 0xf58 <__vector_3+0xb2>
     f4a:	62 e0       	ldi	r22, 0x02	; 2
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x4>
     f52:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x5>
     f56:	09 95       	icall
     f58:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_4>:
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     fa4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     fa8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fb0:	c9 01       	movw	r24, r18
     fb2:	03 2e       	mov	r0, r19
     fb4:	00 0c       	add	r0, r0
     fb6:	aa 0b       	sbc	r26, r26
     fb8:	bb 0b       	sbc	r27, r27
     fba:	dc 01       	movw	r26, r24
     fbc:	99 27       	eor	r25, r25
     fbe:	88 27       	eor	r24, r24
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	84 2b       	or	r24, r20
     fc6:	95 2b       	or	r25, r21
     fc8:	a6 2b       	or	r26, r22
     fca:	b7 2b       	or	r27, r23
     fcc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     fd0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     fd4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     fd8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     fdc:	b0 9b       	sbis	0x16, 0	; 22
     fde:	1b c0       	rjmp	.+54     	; 0x1016 <__vector_4+0x98>
     fe0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fe4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fe8:	c9 01       	movw	r24, r18
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	09 2e       	mov	r0, r25
     fee:	00 0c       	add	r0, r0
     ff0:	aa 0b       	sbc	r26, r26
     ff2:	bb 0b       	sbc	r27, r27
     ff4:	dc 01       	movw	r26, r24
     ff6:	99 27       	eor	r25, r25
     ff8:	88 27       	eor	r24, r24
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	84 2b       	or	r24, r20
    1000:	95 2b       	or	r25, r21
    1002:	a6 2b       	or	r26, r22
    1004:	b7 2b       	or	r27, r23
    1006:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    100a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    100e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1012:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1016:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x6>
    101a:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x7>
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	39 f0       	breq	.+14     	; 0x1030 <__vector_4+0xb2>
    1022:	63 e0       	ldi	r22, 0x03	; 3
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x6>
    102a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x7>
    102e:	09 95       	icall
    1030:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <__vector_5>:
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
    1078:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    107c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1080:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1084:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1088:	c9 01       	movw	r24, r18
    108a:	03 2e       	mov	r0, r19
    108c:	00 0c       	add	r0, r0
    108e:	aa 0b       	sbc	r26, r26
    1090:	bb 0b       	sbc	r27, r27
    1092:	dc 01       	movw	r26, r24
    1094:	99 27       	eor	r25, r25
    1096:	88 27       	eor	r24, r24
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	84 2b       	or	r24, r20
    109e:	95 2b       	or	r25, r21
    10a0:	a6 2b       	or	r26, r22
    10a2:	b7 2b       	or	r27, r23
    10a4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    10a8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    10ac:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    10b0:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    10b4:	b0 9b       	sbis	0x16, 0	; 22
    10b6:	1b c0       	rjmp	.+54     	; 0x10ee <__vector_5+0x98>
    10b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10c0:	c9 01       	movw	r24, r18
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	09 2e       	mov	r0, r25
    10c6:	00 0c       	add	r0, r0
    10c8:	aa 0b       	sbc	r26, r26
    10ca:	bb 0b       	sbc	r27, r27
    10cc:	dc 01       	movw	r26, r24
    10ce:	99 27       	eor	r25, r25
    10d0:	88 27       	eor	r24, r24
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	84 2b       	or	r24, r20
    10d8:	95 2b       	or	r25, r21
    10da:	a6 2b       	or	r26, r22
    10dc:	b7 2b       	or	r27, r23
    10de:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    10e2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    10e6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    10ea:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    10ee:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x8>
    10f2:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x9>
    10f6:	30 97       	sbiw	r30, 0x00	; 0
    10f8:	39 f0       	breq	.+14     	; 0x1108 <__vector_5+0xb2>
    10fa:	64 e0       	ldi	r22, 0x04	; 4
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x8>
    1102:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x9>
    1106:	09 95       	icall
    1108:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <__vector_10>:
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	2f 93       	push	r18
    113a:	3f 93       	push	r19
    113c:	4f 93       	push	r20
    113e:	5f 93       	push	r21
    1140:	6f 93       	push	r22
    1142:	7f 93       	push	r23
    1144:	8f 93       	push	r24
    1146:	9f 93       	push	r25
    1148:	af 93       	push	r26
    114a:	bf 93       	push	r27
    114c:	ef 93       	push	r30
    114e:	ff 93       	push	r31
    1150:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1154:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1158:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    115c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1160:	c9 01       	movw	r24, r18
    1162:	03 2e       	mov	r0, r19
    1164:	00 0c       	add	r0, r0
    1166:	aa 0b       	sbc	r26, r26
    1168:	bb 0b       	sbc	r27, r27
    116a:	dc 01       	movw	r26, r24
    116c:	99 27       	eor	r25, r25
    116e:	88 27       	eor	r24, r24
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	84 2b       	or	r24, r20
    1176:	95 2b       	or	r25, r21
    1178:	a6 2b       	or	r26, r22
    117a:	b7 2b       	or	r27, r23
    117c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1180:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1184:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1188:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    118c:	b0 9b       	sbis	0x16, 0	; 22
    118e:	1b c0       	rjmp	.+54     	; 0x11c6 <__vector_10+0x98>
    1190:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1194:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1198:	c9 01       	movw	r24, r18
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	09 2e       	mov	r0, r25
    119e:	00 0c       	add	r0, r0
    11a0:	aa 0b       	sbc	r26, r26
    11a2:	bb 0b       	sbc	r27, r27
    11a4:	dc 01       	movw	r26, r24
    11a6:	99 27       	eor	r25, r25
    11a8:	88 27       	eor	r24, r24
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	84 2b       	or	r24, r20
    11b0:	95 2b       	or	r25, r21
    11b2:	a6 2b       	or	r26, r22
    11b4:	b7 2b       	or	r27, r23
    11b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    11ba:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    11be:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    11c2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    11c6:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0xa>
    11ca:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0xb>
    11ce:	30 97       	sbiw	r30, 0x00	; 0
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__vector_10+0xb2>
    11d2:	65 e0       	ldi	r22, 0x05	; 5
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xa>
    11da:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xb>
    11de:	09 95       	icall
    11e0:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    11e4:	ff 91       	pop	r31
    11e6:	ef 91       	pop	r30
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_11>:
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
    1228:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    122c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1230:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1234:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1238:	c9 01       	movw	r24, r18
    123a:	03 2e       	mov	r0, r19
    123c:	00 0c       	add	r0, r0
    123e:	aa 0b       	sbc	r26, r26
    1240:	bb 0b       	sbc	r27, r27
    1242:	dc 01       	movw	r26, r24
    1244:	99 27       	eor	r25, r25
    1246:	88 27       	eor	r24, r24
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	84 2b       	or	r24, r20
    124e:	95 2b       	or	r25, r21
    1250:	a6 2b       	or	r26, r22
    1252:	b7 2b       	or	r27, r23
    1254:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1258:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    125c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1260:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1264:	b0 9b       	sbis	0x16, 0	; 22
    1266:	1b c0       	rjmp	.+54     	; 0x129e <__vector_11+0x98>
    1268:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    126c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1270:	c9 01       	movw	r24, r18
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	09 2e       	mov	r0, r25
    1276:	00 0c       	add	r0, r0
    1278:	aa 0b       	sbc	r26, r26
    127a:	bb 0b       	sbc	r27, r27
    127c:	dc 01       	movw	r26, r24
    127e:	99 27       	eor	r25, r25
    1280:	88 27       	eor	r24, r24
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	84 2b       	or	r24, r20
    1288:	95 2b       	or	r25, r21
    128a:	a6 2b       	or	r26, r22
    128c:	b7 2b       	or	r27, r23
    128e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1292:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1296:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    129a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    129e:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xc>
    12a2:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xd>
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	39 f0       	breq	.+14     	; 0x12b8 <__vector_11+0xb2>
    12aa:	66 e0       	ldi	r22, 0x06	; 6
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xc>
    12b2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xd>
    12b6:	09 95       	icall
    12b8:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <__vector_12>:
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	4f 93       	push	r20
    12ee:	5f 93       	push	r21
    12f0:	6f 93       	push	r22
    12f2:	7f 93       	push	r23
    12f4:	8f 93       	push	r24
    12f6:	9f 93       	push	r25
    12f8:	af 93       	push	r26
    12fa:	bf 93       	push	r27
    12fc:	ef 93       	push	r30
    12fe:	ff 93       	push	r31
    1300:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1304:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1308:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    130c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1310:	c9 01       	movw	r24, r18
    1312:	03 2e       	mov	r0, r19
    1314:	00 0c       	add	r0, r0
    1316:	aa 0b       	sbc	r26, r26
    1318:	bb 0b       	sbc	r27, r27
    131a:	dc 01       	movw	r26, r24
    131c:	99 27       	eor	r25, r25
    131e:	88 27       	eor	r24, r24
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	84 2b       	or	r24, r20
    1326:	95 2b       	or	r25, r21
    1328:	a6 2b       	or	r26, r22
    132a:	b7 2b       	or	r27, r23
    132c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1330:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1334:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1338:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    133c:	b0 9b       	sbis	0x16, 0	; 22
    133e:	1b c0       	rjmp	.+54     	; 0x1376 <__vector_12+0x98>
    1340:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1344:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1348:	c9 01       	movw	r24, r18
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	09 2e       	mov	r0, r25
    134e:	00 0c       	add	r0, r0
    1350:	aa 0b       	sbc	r26, r26
    1352:	bb 0b       	sbc	r27, r27
    1354:	dc 01       	movw	r26, r24
    1356:	99 27       	eor	r25, r25
    1358:	88 27       	eor	r24, r24
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	84 2b       	or	r24, r20
    1360:	95 2b       	or	r25, r21
    1362:	a6 2b       	or	r26, r22
    1364:	b7 2b       	or	r27, r23
    1366:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    136a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    136e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1372:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1376:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xe>
    137a:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xf>
    137e:	30 97       	sbiw	r30, 0x00	; 0
    1380:	39 f0       	breq	.+14     	; 0x1390 <__vector_12+0xb2>
    1382:	67 e0       	ldi	r22, 0x07	; 7
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xe>
    138a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xf>
    138e:	09 95       	icall
    1390:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1394:	ff 91       	pop	r31
    1396:	ef 91       	pop	r30
    1398:	bf 91       	pop	r27
    139a:	af 91       	pop	r26
    139c:	9f 91       	pop	r25
    139e:	8f 91       	pop	r24
    13a0:	7f 91       	pop	r23
    13a2:	6f 91       	pop	r22
    13a4:	5f 91       	pop	r21
    13a6:	4f 91       	pop	r20
    13a8:	3f 91       	pop	r19
    13aa:	2f 91       	pop	r18
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <__vector_13>:
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	ef 93       	push	r30
    13d6:	ff 93       	push	r31
    13d8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    13dc:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    13e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e8:	c9 01       	movw	r24, r18
    13ea:	03 2e       	mov	r0, r19
    13ec:	00 0c       	add	r0, r0
    13ee:	aa 0b       	sbc	r26, r26
    13f0:	bb 0b       	sbc	r27, r27
    13f2:	dc 01       	movw	r26, r24
    13f4:	99 27       	eor	r25, r25
    13f6:	88 27       	eor	r24, r24
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	84 2b       	or	r24, r20
    13fe:	95 2b       	or	r25, r21
    1400:	a6 2b       	or	r26, r22
    1402:	b7 2b       	or	r27, r23
    1404:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1408:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    140c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1410:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1414:	b0 9b       	sbis	0x16, 0	; 22
    1416:	1b c0       	rjmp	.+54     	; 0x144e <__vector_13+0x98>
    1418:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    141c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1420:	c9 01       	movw	r24, r18
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	09 2e       	mov	r0, r25
    1426:	00 0c       	add	r0, r0
    1428:	aa 0b       	sbc	r26, r26
    142a:	bb 0b       	sbc	r27, r27
    142c:	dc 01       	movw	r26, r24
    142e:	99 27       	eor	r25, r25
    1430:	88 27       	eor	r24, r24
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	84 2b       	or	r24, r20
    1438:	95 2b       	or	r25, r21
    143a:	a6 2b       	or	r26, r22
    143c:	b7 2b       	or	r27, r23
    143e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1442:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1446:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    144a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    144e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x10>
    1452:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x11>
    1456:	30 97       	sbiw	r30, 0x00	; 0
    1458:	39 f0       	breq	.+14     	; 0x1468 <__vector_13+0xb2>
    145a:	68 e0       	ldi	r22, 0x08	; 8
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x10>
    1462:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x11>
    1466:	09 95       	icall
    1468:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30
    1470:	bf 91       	pop	r27
    1472:	af 91       	pop	r26
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	7f 91       	pop	r23
    147a:	6f 91       	pop	r22
    147c:	5f 91       	pop	r21
    147e:	4f 91       	pop	r20
    1480:	3f 91       	pop	r19
    1482:	2f 91       	pop	r18
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	0f 90       	pop	r0
    148a:	1f 90       	pop	r1
    148c:	18 95       	reti

0000148e <__vector_14>:
    148e:	1f 92       	push	r1
    1490:	0f 92       	push	r0
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	0f 92       	push	r0
    1496:	11 24       	eor	r1, r1
    1498:	2f 93       	push	r18
    149a:	3f 93       	push	r19
    149c:	4f 93       	push	r20
    149e:	5f 93       	push	r21
    14a0:	6f 93       	push	r22
    14a2:	7f 93       	push	r23
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	af 93       	push	r26
    14aa:	bf 93       	push	r27
    14ac:	ef 93       	push	r30
    14ae:	ff 93       	push	r31
    14b0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    14b4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    14b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14c0:	c9 01       	movw	r24, r18
    14c2:	03 2e       	mov	r0, r19
    14c4:	00 0c       	add	r0, r0
    14c6:	aa 0b       	sbc	r26, r26
    14c8:	bb 0b       	sbc	r27, r27
    14ca:	dc 01       	movw	r26, r24
    14cc:	99 27       	eor	r25, r25
    14ce:	88 27       	eor	r24, r24
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	84 2b       	or	r24, r20
    14d6:	95 2b       	or	r25, r21
    14d8:	a6 2b       	or	r26, r22
    14da:	b7 2b       	or	r27, r23
    14dc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    14e0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    14e4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    14e8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    14ec:	b0 9b       	sbis	0x16, 0	; 22
    14ee:	1b c0       	rjmp	.+54     	; 0x1526 <__vector_14+0x98>
    14f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14f8:	c9 01       	movw	r24, r18
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	09 2e       	mov	r0, r25
    14fe:	00 0c       	add	r0, r0
    1500:	aa 0b       	sbc	r26, r26
    1502:	bb 0b       	sbc	r27, r27
    1504:	dc 01       	movw	r26, r24
    1506:	99 27       	eor	r25, r25
    1508:	88 27       	eor	r24, r24
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	84 2b       	or	r24, r20
    1510:	95 2b       	or	r25, r21
    1512:	a6 2b       	or	r26, r22
    1514:	b7 2b       	or	r27, r23
    1516:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    151a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    151e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1522:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1526:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x12>
    152a:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x13>
    152e:	30 97       	sbiw	r30, 0x00	; 0
    1530:	39 f0       	breq	.+14     	; 0x1540 <__vector_14+0xb2>
    1532:	69 e0       	ldi	r22, 0x09	; 9
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x12>
    153a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x13>
    153e:	09 95       	icall
    1540:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1544:	ff 91       	pop	r31
    1546:	ef 91       	pop	r30
    1548:	bf 91       	pop	r27
    154a:	af 91       	pop	r26
    154c:	9f 91       	pop	r25
    154e:	8f 91       	pop	r24
    1550:	7f 91       	pop	r23
    1552:	6f 91       	pop	r22
    1554:	5f 91       	pop	r21
    1556:	4f 91       	pop	r20
    1558:	3f 91       	pop	r19
    155a:	2f 91       	pop	r18
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_15>:
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	2f 93       	push	r18
    1572:	3f 93       	push	r19
    1574:	4f 93       	push	r20
    1576:	5f 93       	push	r21
    1578:	6f 93       	push	r22
    157a:	7f 93       	push	r23
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	af 93       	push	r26
    1582:	bf 93       	push	r27
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
    1588:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    158c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1590:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1594:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1598:	c9 01       	movw	r24, r18
    159a:	03 2e       	mov	r0, r19
    159c:	00 0c       	add	r0, r0
    159e:	aa 0b       	sbc	r26, r26
    15a0:	bb 0b       	sbc	r27, r27
    15a2:	dc 01       	movw	r26, r24
    15a4:	99 27       	eor	r25, r25
    15a6:	88 27       	eor	r24, r24
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	84 2b       	or	r24, r20
    15ae:	95 2b       	or	r25, r21
    15b0:	a6 2b       	or	r26, r22
    15b2:	b7 2b       	or	r27, r23
    15b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    15b8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    15bc:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    15c0:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    15c4:	b0 9b       	sbis	0x16, 0	; 22
    15c6:	1b c0       	rjmp	.+54     	; 0x15fe <__vector_15+0x98>
    15c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15d0:	c9 01       	movw	r24, r18
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	09 2e       	mov	r0, r25
    15d6:	00 0c       	add	r0, r0
    15d8:	aa 0b       	sbc	r26, r26
    15da:	bb 0b       	sbc	r27, r27
    15dc:	dc 01       	movw	r26, r24
    15de:	99 27       	eor	r25, r25
    15e0:	88 27       	eor	r24, r24
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	84 2b       	or	r24, r20
    15e8:	95 2b       	or	r25, r21
    15ea:	a6 2b       	or	r26, r22
    15ec:	b7 2b       	or	r27, r23
    15ee:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    15f2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    15f6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    15fa:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    15fe:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x14>
    1602:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x15>
    1606:	30 97       	sbiw	r30, 0x00	; 0
    1608:	39 f0       	breq	.+14     	; 0x1618 <__vector_15+0xb2>
    160a:	6a e0       	ldi	r22, 0x0A	; 10
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x14>
    1612:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x15>
    1616:	09 95       	icall
    1618:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_16>:
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
    1660:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1664:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1668:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    166c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1670:	c9 01       	movw	r24, r18
    1672:	03 2e       	mov	r0, r19
    1674:	00 0c       	add	r0, r0
    1676:	aa 0b       	sbc	r26, r26
    1678:	bb 0b       	sbc	r27, r27
    167a:	dc 01       	movw	r26, r24
    167c:	99 27       	eor	r25, r25
    167e:	88 27       	eor	r24, r24
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	84 2b       	or	r24, r20
    1686:	95 2b       	or	r25, r21
    1688:	a6 2b       	or	r26, r22
    168a:	b7 2b       	or	r27, r23
    168c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1690:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1694:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1698:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    169c:	b0 9b       	sbis	0x16, 0	; 22
    169e:	1b c0       	rjmp	.+54     	; 0x16d6 <__vector_16+0x98>
    16a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16a8:	c9 01       	movw	r24, r18
    16aa:	01 96       	adiw	r24, 0x01	; 1
    16ac:	09 2e       	mov	r0, r25
    16ae:	00 0c       	add	r0, r0
    16b0:	aa 0b       	sbc	r26, r26
    16b2:	bb 0b       	sbc	r27, r27
    16b4:	dc 01       	movw	r26, r24
    16b6:	99 27       	eor	r25, r25
    16b8:	88 27       	eor	r24, r24
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	84 2b       	or	r24, r20
    16c0:	95 2b       	or	r25, r21
    16c2:	a6 2b       	or	r26, r22
    16c4:	b7 2b       	or	r27, r23
    16c6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    16ca:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    16ce:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    16d2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    16d6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x16>
    16da:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x17>
    16de:	30 97       	sbiw	r30, 0x00	; 0
    16e0:	39 f0       	breq	.+14     	; 0x16f0 <__vector_16+0xb2>
    16e2:	6b e0       	ldi	r22, 0x0B	; 11
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x16>
    16ea:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x17>
    16ee:	09 95       	icall
    16f0:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <__vector_17>:
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    173c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1740:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1744:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1748:	c9 01       	movw	r24, r18
    174a:	03 2e       	mov	r0, r19
    174c:	00 0c       	add	r0, r0
    174e:	aa 0b       	sbc	r26, r26
    1750:	bb 0b       	sbc	r27, r27
    1752:	dc 01       	movw	r26, r24
    1754:	99 27       	eor	r25, r25
    1756:	88 27       	eor	r24, r24
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	84 2b       	or	r24, r20
    175e:	95 2b       	or	r25, r21
    1760:	a6 2b       	or	r26, r22
    1762:	b7 2b       	or	r27, r23
    1764:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1768:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    176c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1770:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1774:	b0 9b       	sbis	0x16, 0	; 22
    1776:	1b c0       	rjmp	.+54     	; 0x17ae <__vector_17+0x98>
    1778:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    177c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1780:	c9 01       	movw	r24, r18
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	09 2e       	mov	r0, r25
    1786:	00 0c       	add	r0, r0
    1788:	aa 0b       	sbc	r26, r26
    178a:	bb 0b       	sbc	r27, r27
    178c:	dc 01       	movw	r26, r24
    178e:	99 27       	eor	r25, r25
    1790:	88 27       	eor	r24, r24
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	84 2b       	or	r24, r20
    1798:	95 2b       	or	r25, r21
    179a:	a6 2b       	or	r26, r22
    179c:	b7 2b       	or	r27, r23
    179e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    17a2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    17a6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    17aa:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    17ae:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x18>
    17b2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x19>
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <__vector_17+0xb2>
    17ba:	6c e0       	ldi	r22, 0x0C	; 12
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x18>
    17c2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x19>
    17c6:	09 95       	icall
    17c8:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <__vector_18>:
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
    1810:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1814:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1818:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    181c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1820:	c9 01       	movw	r24, r18
    1822:	03 2e       	mov	r0, r19
    1824:	00 0c       	add	r0, r0
    1826:	aa 0b       	sbc	r26, r26
    1828:	bb 0b       	sbc	r27, r27
    182a:	dc 01       	movw	r26, r24
    182c:	99 27       	eor	r25, r25
    182e:	88 27       	eor	r24, r24
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	84 2b       	or	r24, r20
    1836:	95 2b       	or	r25, r21
    1838:	a6 2b       	or	r26, r22
    183a:	b7 2b       	or	r27, r23
    183c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1840:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1844:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1848:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    184c:	b0 9b       	sbis	0x16, 0	; 22
    184e:	1b c0       	rjmp	.+54     	; 0x1886 <__vector_18+0x98>
    1850:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1854:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1858:	c9 01       	movw	r24, r18
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	09 2e       	mov	r0, r25
    185e:	00 0c       	add	r0, r0
    1860:	aa 0b       	sbc	r26, r26
    1862:	bb 0b       	sbc	r27, r27
    1864:	dc 01       	movw	r26, r24
    1866:	99 27       	eor	r25, r25
    1868:	88 27       	eor	r24, r24
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	84 2b       	or	r24, r20
    1870:	95 2b       	or	r25, r21
    1872:	a6 2b       	or	r26, r22
    1874:	b7 2b       	or	r27, r23
    1876:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    187a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    187e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1882:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1886:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x1a>
    188a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x1b>
    188e:	30 97       	sbiw	r30, 0x00	; 0
    1890:	39 f0       	breq	.+14     	; 0x18a0 <__vector_18+0xb2>
    1892:	6d e0       	ldi	r22, 0x0D	; 13
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1a>
    189a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1b>
    189e:	09 95       	icall
    18a0:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    18a4:	ff 91       	pop	r31
    18a6:	ef 91       	pop	r30
    18a8:	bf 91       	pop	r27
    18aa:	af 91       	pop	r26
    18ac:	9f 91       	pop	r25
    18ae:	8f 91       	pop	r24
    18b0:	7f 91       	pop	r23
    18b2:	6f 91       	pop	r22
    18b4:	5f 91       	pop	r21
    18b6:	4f 91       	pop	r20
    18b8:	3f 91       	pop	r19
    18ba:	2f 91       	pop	r18
    18bc:	0f 90       	pop	r0
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	0f 90       	pop	r0
    18c2:	1f 90       	pop	r1
    18c4:	18 95       	reti

000018c6 <__vector_19>:
    18c6:	1f 92       	push	r1
    18c8:	0f 92       	push	r0
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	0f 92       	push	r0
    18ce:	11 24       	eor	r1, r1
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
    18e8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    18ec:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    18f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f8:	c9 01       	movw	r24, r18
    18fa:	03 2e       	mov	r0, r19
    18fc:	00 0c       	add	r0, r0
    18fe:	aa 0b       	sbc	r26, r26
    1900:	bb 0b       	sbc	r27, r27
    1902:	dc 01       	movw	r26, r24
    1904:	99 27       	eor	r25, r25
    1906:	88 27       	eor	r24, r24
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	84 2b       	or	r24, r20
    190e:	95 2b       	or	r25, r21
    1910:	a6 2b       	or	r26, r22
    1912:	b7 2b       	or	r27, r23
    1914:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1918:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    191c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1920:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1924:	b0 9b       	sbis	0x16, 0	; 22
    1926:	1b c0       	rjmp	.+54     	; 0x195e <__vector_19+0x98>
    1928:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    192c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1930:	c9 01       	movw	r24, r18
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	09 2e       	mov	r0, r25
    1936:	00 0c       	add	r0, r0
    1938:	aa 0b       	sbc	r26, r26
    193a:	bb 0b       	sbc	r27, r27
    193c:	dc 01       	movw	r26, r24
    193e:	99 27       	eor	r25, r25
    1940:	88 27       	eor	r24, r24
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	84 2b       	or	r24, r20
    1948:	95 2b       	or	r25, r21
    194a:	a6 2b       	or	r26, r22
    194c:	b7 2b       	or	r27, r23
    194e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1952:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1956:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    195a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    195e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1c>
    1962:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1d>
    1966:	30 97       	sbiw	r30, 0x00	; 0
    1968:	39 f0       	breq	.+14     	; 0x1978 <__vector_19+0xb2>
    196a:	6e e0       	ldi	r22, 0x0E	; 14
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1c>
    1972:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1d>
    1976:	09 95       	icall
    1978:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	bf 91       	pop	r27
    1982:	af 91       	pop	r26
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_20>:
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	2f 93       	push	r18
    19aa:	3f 93       	push	r19
    19ac:	4f 93       	push	r20
    19ae:	5f 93       	push	r21
    19b0:	6f 93       	push	r22
    19b2:	7f 93       	push	r23
    19b4:	8f 93       	push	r24
    19b6:	9f 93       	push	r25
    19b8:	af 93       	push	r26
    19ba:	bf 93       	push	r27
    19bc:	ef 93       	push	r30
    19be:	ff 93       	push	r31
    19c0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    19c4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    19c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19d0:	c9 01       	movw	r24, r18
    19d2:	03 2e       	mov	r0, r19
    19d4:	00 0c       	add	r0, r0
    19d6:	aa 0b       	sbc	r26, r26
    19d8:	bb 0b       	sbc	r27, r27
    19da:	dc 01       	movw	r26, r24
    19dc:	99 27       	eor	r25, r25
    19de:	88 27       	eor	r24, r24
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	84 2b       	or	r24, r20
    19e6:	95 2b       	or	r25, r21
    19e8:	a6 2b       	or	r26, r22
    19ea:	b7 2b       	or	r27, r23
    19ec:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    19f0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    19f4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    19f8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    19fc:	b0 9b       	sbis	0x16, 0	; 22
    19fe:	1b c0       	rjmp	.+54     	; 0x1a36 <__vector_20+0x98>
    1a00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a08:	c9 01       	movw	r24, r18
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	09 2e       	mov	r0, r25
    1a0e:	00 0c       	add	r0, r0
    1a10:	aa 0b       	sbc	r26, r26
    1a12:	bb 0b       	sbc	r27, r27
    1a14:	dc 01       	movw	r26, r24
    1a16:	99 27       	eor	r25, r25
    1a18:	88 27       	eor	r24, r24
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	84 2b       	or	r24, r20
    1a20:	95 2b       	or	r25, r21
    1a22:	a6 2b       	or	r26, r22
    1a24:	b7 2b       	or	r27, r23
    1a26:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1a2a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1a2e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1a32:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1a36:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1e>
    1a3a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1f>
    1a3e:	30 97       	sbiw	r30, 0x00	; 0
    1a40:	39 f0       	breq	.+14     	; 0x1a50 <__vector_20+0xb2>
    1a42:	6f e0       	ldi	r22, 0x0F	; 15
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1e>
    1a4a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1f>
    1a4e:	09 95       	icall
    1a50:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1a54:	ff 91       	pop	r31
    1a56:	ef 91       	pop	r30
    1a58:	bf 91       	pop	r27
    1a5a:	af 91       	pop	r26
    1a5c:	9f 91       	pop	r25
    1a5e:	8f 91       	pop	r24
    1a60:	7f 91       	pop	r23
    1a62:	6f 91       	pop	r22
    1a64:	5f 91       	pop	r21
    1a66:	4f 91       	pop	r20
    1a68:	3f 91       	pop	r19
    1a6a:	2f 91       	pop	r18
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <__vector_21>:
    1a76:	1f 92       	push	r1
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	0f 92       	push	r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	2f 93       	push	r18
    1a82:	3f 93       	push	r19
    1a84:	4f 93       	push	r20
    1a86:	5f 93       	push	r21
    1a88:	6f 93       	push	r22
    1a8a:	7f 93       	push	r23
    1a8c:	8f 93       	push	r24
    1a8e:	9f 93       	push	r25
    1a90:	af 93       	push	r26
    1a92:	bf 93       	push	r27
    1a94:	ef 93       	push	r30
    1a96:	ff 93       	push	r31
    1a98:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1a9c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1aa0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aa4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aa8:	c9 01       	movw	r24, r18
    1aaa:	03 2e       	mov	r0, r19
    1aac:	00 0c       	add	r0, r0
    1aae:	aa 0b       	sbc	r26, r26
    1ab0:	bb 0b       	sbc	r27, r27
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	99 27       	eor	r25, r25
    1ab6:	88 27       	eor	r24, r24
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	84 2b       	or	r24, r20
    1abe:	95 2b       	or	r25, r21
    1ac0:	a6 2b       	or	r26, r22
    1ac2:	b7 2b       	or	r27, r23
    1ac4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1ac8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1acc:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1ad0:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1ad4:	b0 9b       	sbis	0x16, 0	; 22
    1ad6:	1b c0       	rjmp	.+54     	; 0x1b0e <__vector_21+0x98>
    1ad8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1adc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	09 2e       	mov	r0, r25
    1ae6:	00 0c       	add	r0, r0
    1ae8:	aa 0b       	sbc	r26, r26
    1aea:	bb 0b       	sbc	r27, r27
    1aec:	dc 01       	movw	r26, r24
    1aee:	99 27       	eor	r25, r25
    1af0:	88 27       	eor	r24, r24
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	84 2b       	or	r24, r20
    1af8:	95 2b       	or	r25, r21
    1afa:	a6 2b       	or	r26, r22
    1afc:	b7 2b       	or	r27, r23
    1afe:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1b02:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1b06:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1b0a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1b0e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x20>
    1b12:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x21>
    1b16:	30 97       	sbiw	r30, 0x00	; 0
    1b18:	39 f0       	breq	.+14     	; 0x1b28 <__vector_21+0xb2>
    1b1a:	60 e1       	ldi	r22, 0x10	; 16
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x20>
    1b22:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x21>
    1b26:	09 95       	icall
    1b28:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_22>:
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	af 93       	push	r26
    1b6a:	bf 93       	push	r27
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
    1b70:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1b74:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1b78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b80:	c9 01       	movw	r24, r18
    1b82:	03 2e       	mov	r0, r19
    1b84:	00 0c       	add	r0, r0
    1b86:	aa 0b       	sbc	r26, r26
    1b88:	bb 0b       	sbc	r27, r27
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	99 27       	eor	r25, r25
    1b8e:	88 27       	eor	r24, r24
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	84 2b       	or	r24, r20
    1b96:	95 2b       	or	r25, r21
    1b98:	a6 2b       	or	r26, r22
    1b9a:	b7 2b       	or	r27, r23
    1b9c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1ba0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1ba4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1ba8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1bac:	b0 9b       	sbis	0x16, 0	; 22
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <__vector_22+0x98>
    1bb0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bb4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bb8:	c9 01       	movw	r24, r18
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	09 2e       	mov	r0, r25
    1bbe:	00 0c       	add	r0, r0
    1bc0:	aa 0b       	sbc	r26, r26
    1bc2:	bb 0b       	sbc	r27, r27
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	99 27       	eor	r25, r25
    1bc8:	88 27       	eor	r24, r24
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	84 2b       	or	r24, r20
    1bd0:	95 2b       	or	r25, r21
    1bd2:	a6 2b       	or	r26, r22
    1bd4:	b7 2b       	or	r27, r23
    1bd6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1bda:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1bde:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1be2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1be6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x22>
    1bea:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x23>
    1bee:	30 97       	sbiw	r30, 0x00	; 0
    1bf0:	39 f0       	breq	.+14     	; 0x1c00 <__vector_22+0xb2>
    1bf2:	61 e1       	ldi	r22, 0x11	; 17
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x22>
    1bfa:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x23>
    1bfe:	09 95       	icall
    1c00:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	bf 91       	pop	r27
    1c0a:	af 91       	pop	r26
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	7f 91       	pop	r23
    1c12:	6f 91       	pop	r22
    1c14:	5f 91       	pop	r21
    1c16:	4f 91       	pop	r20
    1c18:	3f 91       	pop	r19
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0f 90       	pop	r0
    1c22:	1f 90       	pop	r1
    1c24:	18 95       	reti

00001c26 <enqueueByDeadline>:
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	7b 01       	movw	r14, r22
    1c34:	eb 01       	movw	r28, r22
    1c36:	a8 81       	ld	r26, Y
    1c38:	b9 81       	ldd	r27, Y+1	; 0x01
    1c3a:	10 97       	sbiw	r26, 0x00	; 0
    1c3c:	61 f1       	breq	.+88     	; 0x1c96 <enqueueByDeadline+0x70>
    1c3e:	fc 01       	movw	r30, r24
    1c40:	06 81       	ldd	r16, Z+6	; 0x06
    1c42:	17 81       	ldd	r17, Z+7	; 0x07
    1c44:	20 85       	ldd	r18, Z+8	; 0x08
    1c46:	31 85       	ldd	r19, Z+9	; 0x09
    1c48:	16 96       	adiw	r26, 0x06	; 6
    1c4a:	4d 91       	ld	r20, X+
    1c4c:	5d 91       	ld	r21, X+
    1c4e:	6d 91       	ld	r22, X+
    1c50:	7c 91       	ld	r23, X
    1c52:	19 97       	sbiw	r26, 0x09	; 9
    1c54:	04 17       	cp	r16, r20
    1c56:	15 07       	cpc	r17, r21
    1c58:	26 07       	cpc	r18, r22
    1c5a:	37 07       	cpc	r19, r23
    1c5c:	14 f4       	brge	.+4      	; 0x1c62 <enqueueByDeadline+0x3c>
    1c5e:	1b c0       	rjmp	.+54     	; 0x1c96 <enqueueByDeadline+0x70>
    1c60:	df 01       	movw	r26, r30
    1c62:	ed 91       	ld	r30, X+
    1c64:	fc 91       	ld	r31, X
    1c66:	11 97       	sbiw	r26, 0x01	; 1
    1c68:	30 97       	sbiw	r30, 0x00	; 0
    1c6a:	49 f0       	breq	.+18     	; 0x1c7e <enqueueByDeadline+0x58>
    1c6c:	46 81       	ldd	r20, Z+6	; 0x06
    1c6e:	57 81       	ldd	r21, Z+7	; 0x07
    1c70:	60 85       	ldd	r22, Z+8	; 0x08
    1c72:	71 85       	ldd	r23, Z+9	; 0x09
    1c74:	04 17       	cp	r16, r20
    1c76:	15 07       	cpc	r17, r21
    1c78:	26 07       	cpc	r18, r22
    1c7a:	37 07       	cpc	r19, r23
    1c7c:	8c f7       	brge	.-30     	; 0x1c60 <enqueueByDeadline+0x3a>
    1c7e:	ec 01       	movw	r28, r24
    1c80:	f9 83       	std	Y+1, r31	; 0x01
    1c82:	e8 83       	st	Y, r30
    1c84:	10 97       	sbiw	r26, 0x00	; 0
    1c86:	21 f4       	brne	.+8      	; 0x1c90 <enqueueByDeadline+0x6a>
    1c88:	f7 01       	movw	r30, r14
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <enqueueByDeadline+0x78>
    1c90:	8d 93       	st	X+, r24
    1c92:	9c 93       	st	X, r25
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <enqueueByDeadline+0x78>
    1c96:	ec 01       	movw	r28, r24
    1c98:	b9 83       	std	Y+1, r27	; 0x01
    1c9a:	a8 83       	st	Y, r26
    1c9c:	f5 cf       	rjmp	.-22     	; 0x1c88 <enqueueByDeadline+0x62>
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	08 95       	ret

00001cac <enqueueByBaseline>:
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	7b 01       	movw	r14, r22
    1cba:	eb 01       	movw	r28, r22
    1cbc:	a8 81       	ld	r26, Y
    1cbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc0:	10 97       	sbiw	r26, 0x00	; 0
    1cc2:	61 f1       	breq	.+88     	; 0x1d1c <enqueueByBaseline+0x70>
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	02 81       	ldd	r16, Z+2	; 0x02
    1cc8:	13 81       	ldd	r17, Z+3	; 0x03
    1cca:	24 81       	ldd	r18, Z+4	; 0x04
    1ccc:	35 81       	ldd	r19, Z+5	; 0x05
    1cce:	12 96       	adiw	r26, 0x02	; 2
    1cd0:	4d 91       	ld	r20, X+
    1cd2:	5d 91       	ld	r21, X+
    1cd4:	6d 91       	ld	r22, X+
    1cd6:	7c 91       	ld	r23, X
    1cd8:	15 97       	sbiw	r26, 0x05	; 5
    1cda:	04 17       	cp	r16, r20
    1cdc:	15 07       	cpc	r17, r21
    1cde:	26 07       	cpc	r18, r22
    1ce0:	37 07       	cpc	r19, r23
    1ce2:	14 f4       	brge	.+4      	; 0x1ce8 <enqueueByBaseline+0x3c>
    1ce4:	1b c0       	rjmp	.+54     	; 0x1d1c <enqueueByBaseline+0x70>
    1ce6:	df 01       	movw	r26, r30
    1ce8:	ed 91       	ld	r30, X+
    1cea:	fc 91       	ld	r31, X
    1cec:	11 97       	sbiw	r26, 0x01	; 1
    1cee:	30 97       	sbiw	r30, 0x00	; 0
    1cf0:	49 f0       	breq	.+18     	; 0x1d04 <enqueueByBaseline+0x58>
    1cf2:	42 81       	ldd	r20, Z+2	; 0x02
    1cf4:	53 81       	ldd	r21, Z+3	; 0x03
    1cf6:	64 81       	ldd	r22, Z+4	; 0x04
    1cf8:	75 81       	ldd	r23, Z+5	; 0x05
    1cfa:	04 17       	cp	r16, r20
    1cfc:	15 07       	cpc	r17, r21
    1cfe:	26 07       	cpc	r18, r22
    1d00:	37 07       	cpc	r19, r23
    1d02:	8c f7       	brge	.-30     	; 0x1ce6 <enqueueByBaseline+0x3a>
    1d04:	ec 01       	movw	r28, r24
    1d06:	f9 83       	std	Y+1, r31	; 0x01
    1d08:	e8 83       	st	Y, r30
    1d0a:	10 97       	sbiw	r26, 0x00	; 0
    1d0c:	21 f4       	brne	.+8      	; 0x1d16 <enqueueByBaseline+0x6a>
    1d0e:	f7 01       	movw	r30, r14
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <enqueueByBaseline+0x78>
    1d16:	8d 93       	st	X+, r24
    1d18:	9c 93       	st	X, r25
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <enqueueByBaseline+0x78>
    1d1c:	ec 01       	movw	r28, r24
    1d1e:	b9 83       	std	Y+1, r27	; 0x01
    1d20:	a8 83       	st	Y, r26
    1d22:	f5 cf       	rjmp	.-22     	; 0x1d0e <enqueueByBaseline+0x62>
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	08 95       	ret

00001d32 <dequeue>:
    1d32:	dc 01       	movw	r26, r24
    1d34:	ed 91       	ld	r30, X+
    1d36:	fc 91       	ld	r31, X
    1d38:	11 97       	sbiw	r26, 0x01	; 1
    1d3a:	30 97       	sbiw	r30, 0x00	; 0
    1d3c:	59 f4       	brne	.+22     	; 0x1d54 <dequeue+0x22>
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1d44:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1d48:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	83 bf       	out	0x33, r24	; 51
    1d50:	88 95       	sleep
    1d52:	fd cf       	rjmp	.-6      	; 0x1d4e <dequeue+0x1c>
    1d54:	20 81       	ld	r18, Z
    1d56:	31 81       	ldd	r19, Z+1	; 0x01
    1d58:	2d 93       	st	X+, r18
    1d5a:	3c 93       	st	X, r19
    1d5c:	cf 01       	movw	r24, r30
    1d5e:	08 95       	ret

00001d60 <__vector_9>:
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	2f 93       	push	r18
    1d6c:	3f 93       	push	r19
    1d6e:	4f 93       	push	r20
    1d70:	5f 93       	push	r21
    1d72:	6f 93       	push	r22
    1d74:	7f 93       	push	r23
    1d76:	8f 93       	push	r24
    1d78:	9f 93       	push	r25
    1d7a:	ef 93       	push	r30
    1d7c:	ff 93       	push	r31
    1d7e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    1d82:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    1d86:	01 96       	adiw	r24, 0x01	; 1
    1d88:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
    1d8c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
    1d90:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1d94:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1d98:	30 97       	sbiw	r30, 0x00	; 0
    1d9a:	01 f1       	breq	.+64     	; 0x1ddc <__vector_9+0x7c>
    1d9c:	42 81       	ldd	r20, Z+2	; 0x02
    1d9e:	53 81       	ldd	r21, Z+3	; 0x03
    1da0:	64 81       	ldd	r22, Z+4	; 0x04
    1da2:	75 81       	ldd	r23, Z+5	; 0x05
    1da4:	86 17       	cp	r24, r22
    1da6:	97 07       	cpc	r25, r23
    1da8:	c9 f4       	brne	.+50     	; 0x1ddc <__vector_9+0x7c>
    1daa:	ca 01       	movw	r24, r20
    1dac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1db0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1db4:	42 1b       	sub	r20, r18
    1db6:	53 0b       	sbc	r21, r19
    1db8:	41 30       	cpi	r20, 0x01	; 1
    1dba:	51 05       	cpc	r21, r1
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <__vector_9+0x68>
    1dbe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dc2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1dcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1dd0:	ef e6       	ldi	r30, 0x6F	; 111
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	82 60       	ori	r24, 0x02	; 2
    1dd8:	80 83       	st	Z, r24
    1dda:	05 c0       	rjmp	.+10     	; 0x1de6 <__vector_9+0x86>
    1ddc:	ef e6       	ldi	r30, 0x6F	; 111
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8d 7f       	andi	r24, 0xFD	; 253
    1de4:	80 83       	st	Z, r24
    1de6:	ff 91       	pop	r31
    1de8:	ef 91       	pop	r30
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <__vector_7>:
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	2f 93       	push	r18
    1e18:	3f 93       	push	r19
    1e1a:	4f 93       	push	r20
    1e1c:	5f 93       	push	r21
    1e1e:	6f 93       	push	r22
    1e20:	7f 93       	push	r23
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
    1e2a:	ef 93       	push	r30
    1e2c:	ff 93       	push	r31
    1e2e:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <__data_end>
    1e32:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <__data_end+0x1>
    1e36:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e3a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e3e:	b0 99       	sbic	0x16, 0	; 22
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <__vector_7+0x5c>
    1e42:	0d 2c       	mov	r0, r13
    1e44:	00 0c       	add	r0, r0
    1e46:	ee 08       	sbc	r14, r14
    1e48:	ff 08       	sbc	r15, r15
    1e4a:	d6 01       	movw	r26, r12
    1e4c:	99 27       	eor	r25, r25
    1e4e:	88 27       	eor	r24, r24
    1e50:	69 01       	movw	r12, r18
    1e52:	e1 2c       	mov	r14, r1
    1e54:	f1 2c       	mov	r15, r1
    1e56:	c8 2a       	or	r12, r24
    1e58:	d9 2a       	or	r13, r25
    1e5a:	ea 2a       	or	r14, r26
    1e5c:	fb 2a       	or	r15, r27
    1e5e:	15 c0       	rjmp	.+42     	; 0x1e8a <__vector_7+0x86>
    1e60:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e64:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	c8 1a       	sub	r12, r24
    1e6c:	d8 0a       	sbc	r13, r24
    1e6e:	0d 2c       	mov	r0, r13
    1e70:	00 0c       	add	r0, r0
    1e72:	ee 08       	sbc	r14, r14
    1e74:	ff 08       	sbc	r15, r15
    1e76:	d6 01       	movw	r26, r12
    1e78:	99 27       	eor	r25, r25
    1e7a:	88 27       	eor	r24, r24
    1e7c:	69 01       	movw	r12, r18
    1e7e:	e1 2c       	mov	r14, r1
    1e80:	f1 2c       	mov	r15, r1
    1e82:	c8 2a       	or	r12, r24
    1e84:	d9 2a       	or	r13, r25
    1e86:	ea 2a       	or	r14, r26
    1e88:	fb 2a       	or	r15, r27
    1e8a:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1e8e:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1e92:	30 97       	sbiw	r30, 0x00	; 0
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <__vector_7+0x94>
    1e96:	42 c0       	rjmp	.+132    	; 0x1f1c <__vector_7+0x118>
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e9e:	b5 81       	ldd	r27, Z+5	; 0x05
    1ea0:	8c 19       	sub	r24, r12
    1ea2:	9d 09       	sbc	r25, r13
    1ea4:	ae 09       	sbc	r26, r14
    1ea6:	bf 09       	sbc	r27, r15
    1ea8:	18 16       	cp	r1, r24
    1eaa:	19 06       	cpc	r1, r25
    1eac:	1a 06       	cpc	r1, r26
    1eae:	1b 06       	cpc	r1, r27
    1eb0:	ec f1       	brlt	.+122    	; 0x1f2c <__vector_7+0x128>
    1eb2:	8a e5       	ldi	r24, 0x5A	; 90
    1eb4:	91 e0       	ldi	r25, 0x01	; 1
    1eb6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <dequeue>
    1eba:	6c e5       	ldi	r22, 0x5C	; 92
    1ebc:	71 e0       	ldi	r23, 0x01	; 1
    1ebe:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <enqueueByDeadline>
    1ec2:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1ec6:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1eca:	30 97       	sbiw	r30, 0x00	; 0
    1ecc:	39 f1       	breq	.+78     	; 0x1f1c <__vector_7+0x118>
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	a4 81       	ldd	r26, Z+4	; 0x04
    1ed4:	b5 81       	ldd	r27, Z+5	; 0x05
    1ed6:	8c 19       	sub	r24, r12
    1ed8:	9d 09       	sbc	r25, r13
    1eda:	ae 09       	sbc	r26, r14
    1edc:	bf 09       	sbc	r27, r15
    1ede:	18 16       	cp	r1, r24
    1ee0:	19 06       	cpc	r1, r25
    1ee2:	1a 06       	cpc	r1, r26
    1ee4:	1b 06       	cpc	r1, r27
    1ee6:	2c f7       	brge	.-54     	; 0x1eb2 <__vector_7+0xae>
    1ee8:	21 c0       	rjmp	.+66     	; 0x1f2c <__vector_7+0x128>
    1eea:	9c 01       	movw	r18, r24
    1eec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ef0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ef4:	84 1b       	sub	r24, r20
    1ef6:	95 0b       	sbc	r25, r21
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	31 f4       	brne	.+12     	; 0x1f08 <__vector_7+0x104>
    1efc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f00:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f04:	2f 5f       	subi	r18, 0xFF	; 255
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f0c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f10:	ef e6       	ldi	r30, 0x6F	; 111
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	82 60       	ori	r24, 0x02	; 2
    1f18:	80 83       	st	Z, r24
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <__vector_7+0x122>
    1f1c:	ef e6       	ldi	r30, 0x6F	; 111
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8d 7f       	andi	r24, 0xFD	; 253
    1f24:	80 83       	st	Z, r24
    1f26:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    1f2a:	0c c0       	rjmp	.+24     	; 0x1f44 <__vector_7+0x140>
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	a4 81       	ldd	r26, Z+4	; 0x04
    1f32:	b5 81       	ldd	r27, Z+5	; 0x05
    1f34:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1f38:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1f3c:	2a 17       	cp	r18, r26
    1f3e:	3b 07       	cpc	r19, r27
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <__vector_7+0x118>
    1f42:	d3 cf       	rjmp	.-90     	; 0x1eea <__vector_7+0xe6>
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	9f 91       	pop	r25
    1f4e:	8f 91       	pop	r24
    1f50:	7f 91       	pop	r23
    1f52:	6f 91       	pop	r22
    1f54:	5f 91       	pop	r21
    1f56:	4f 91       	pop	r20
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	0f 90       	pop	r0
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	0f 90       	pop	r0
    1f6a:	1f 90       	pop	r1
    1f6c:	18 95       	reti

00001f6e <async>:
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	2b 01       	movw	r4, r22
    1f92:	3c 01       	movw	r6, r24
    1f94:	49 01       	movw	r8, r18
    1f96:	5a 01       	movw	r10, r20
    1f98:	8f b7       	in	r24, 0x3f	; 63
    1f9a:	80 78       	andi	r24, 0x80	; 128
    1f9c:	38 2e       	mov	r3, r24
    1f9e:	f8 94       	cli
    1fa0:	8d e3       	ldi	r24, 0x3D	; 61
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <dequeue>
    1fa8:	ec 01       	movw	r28, r24
    1faa:	1b 87       	std	Y+11, r17	; 0x0b
    1fac:	0a 87       	std	Y+10, r16	; 0x0a
    1fae:	fd 86       	std	Y+13, r15	; 0x0d
    1fb0:	ec 86       	std	Y+12, r14	; 0x0c
    1fb2:	df 86       	std	Y+15, r13	; 0x0f
    1fb4:	ce 86       	std	Y+14, r12	; 0x0e
    1fb6:	33 20       	and	r3, r3
    1fb8:	61 f0       	breq	.+24     	; 0x1fd2 <async+0x64>
    1fba:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <current>
    1fbe:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <current+0x1>
    1fc2:	02 80       	ldd	r0, Z+2	; 0x02
    1fc4:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc6:	e0 2d       	mov	r30, r0
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	a4 81       	ldd	r26, Z+4	; 0x04
    1fce:	b5 81       	ldd	r27, Z+5	; 0x05
    1fd0:	08 c0       	rjmp	.+16     	; 0x1fe2 <async+0x74>
    1fd2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timestamp>
    1fd6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timestamp+0x1>
    1fda:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <timestamp+0x2>
    1fde:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <timestamp+0x3>
    1fe2:	48 0e       	add	r4, r24
    1fe4:	59 1e       	adc	r5, r25
    1fe6:	6a 1e       	adc	r6, r26
    1fe8:	7b 1e       	adc	r7, r27
    1fea:	4a 82       	std	Y+2, r4	; 0x02
    1fec:	5b 82       	std	Y+3, r5	; 0x03
    1fee:	6c 82       	std	Y+4, r6	; 0x04
    1ff0:	7d 82       	std	Y+5, r7	; 0x05
    1ff2:	18 14       	cp	r1, r8
    1ff4:	19 04       	cpc	r1, r9
    1ff6:	1a 04       	cpc	r1, r10
    1ff8:	1b 04       	cpc	r1, r11
    1ffa:	44 f0       	brlt	.+16     	; 0x200c <async+0x9e>
    1ffc:	0f 2e       	mov	r0, r31
    1ffe:	88 24       	eor	r8, r8
    2000:	8a 94       	dec	r8
    2002:	98 2c       	mov	r9, r8
    2004:	a8 2c       	mov	r10, r8
    2006:	ff e7       	ldi	r31, 0x7F	; 127
    2008:	bf 2e       	mov	r11, r31
    200a:	f0 2d       	mov	r31, r0
    200c:	84 0c       	add	r8, r4
    200e:	95 1c       	adc	r9, r5
    2010:	a6 1c       	adc	r10, r6
    2012:	b7 1c       	adc	r11, r7
    2014:	8e 82       	std	Y+6, r8	; 0x06
    2016:	9f 82       	std	Y+7, r9	; 0x07
    2018:	a8 86       	std	Y+8, r10	; 0x08
    201a:	b9 86       	std	Y+9, r11	; 0x09
    201c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    2020:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    2024:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2028:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    202c:	b0 99       	sbic	0x16, 0	; 22
    202e:	0e c0       	rjmp	.+28     	; 0x204c <async+0xde>
    2030:	09 2e       	mov	r0, r25
    2032:	00 0c       	add	r0, r0
    2034:	aa 0b       	sbc	r26, r26
    2036:	bb 0b       	sbc	r27, r27
    2038:	dc 01       	movw	r26, r24
    203a:	99 27       	eor	r25, r25
    203c:	88 27       	eor	r24, r24
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	84 2b       	or	r24, r20
    2044:	95 2b       	or	r25, r21
    2046:	a6 2b       	or	r26, r22
    2048:	b7 2b       	or	r27, r23
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <async+0x104>
    204c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2050:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	09 2e       	mov	r0, r25
    2058:	00 0c       	add	r0, r0
    205a:	aa 0b       	sbc	r26, r26
    205c:	bb 0b       	sbc	r27, r27
    205e:	dc 01       	movw	r26, r24
    2060:	99 27       	eor	r25, r25
    2062:	88 27       	eor	r24, r24
    2064:	a9 01       	movw	r20, r18
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	84 2b       	or	r24, r20
    206c:	95 2b       	or	r25, r21
    206e:	a6 2b       	or	r26, r22
    2070:	b7 2b       	or	r27, r23
    2072:	48 1a       	sub	r4, r24
    2074:	59 0a       	sbc	r5, r25
    2076:	6a 0a       	sbc	r6, r26
    2078:	7b 0a       	sbc	r7, r27
    207a:	14 14       	cp	r1, r4
    207c:	15 04       	cpc	r1, r5
    207e:	16 04       	cpc	r1, r6
    2080:	17 04       	cpc	r1, r7
    2082:	ac f5       	brge	.+106    	; 0x20ee <async+0x180>
    2084:	6a e5       	ldi	r22, 0x5A	; 90
    2086:	71 e0       	ldi	r23, 0x01	; 1
    2088:	ce 01       	movw	r24, r28
    208a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <enqueueByBaseline>
    208e:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    2092:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    2096:	30 97       	sbiw	r30, 0x00	; 0
    2098:	21 f1       	breq	.+72     	; 0x20e2 <async+0x174>
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	a4 81       	ldd	r26, Z+4	; 0x04
    20a0:	b5 81       	ldd	r27, Z+5	; 0x05
    20a2:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    20a6:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    20aa:	2a 17       	cp	r18, r26
    20ac:	3b 07       	cpc	r19, r27
    20ae:	c9 f4       	brne	.+50     	; 0x20e2 <async+0x174>
    20b0:	9c 01       	movw	r18, r24
    20b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20ba:	84 1b       	sub	r24, r20
    20bc:	95 0b       	sbc	r25, r21
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	31 f4       	brne	.+12     	; 0x20ce <async+0x160>
    20c2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20c6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20ca:	2f 5f       	subi	r18, 0xFF	; 255
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    20d2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    20d6:	ef e6       	ldi	r30, 0x6F	; 111
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	82 60       	ori	r24, 0x02	; 2
    20de:	80 83       	st	Z, r24
    20e0:	41 c0       	rjmp	.+130    	; 0x2164 <async+0x1f6>
    20e2:	ef e6       	ldi	r30, 0x6F	; 111
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8d 7f       	andi	r24, 0xFD	; 253
    20ea:	80 83       	st	Z, r24
    20ec:	3b c0       	rjmp	.+118    	; 0x2164 <async+0x1f6>
    20ee:	6c e5       	ldi	r22, 0x5C	; 92
    20f0:	71 e0       	ldi	r23, 0x01	; 1
    20f2:	ce 01       	movw	r24, r28
    20f4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <enqueueByDeadline>
    20f8:	33 20       	and	r3, r3
    20fa:	b9 f1       	breq	.+110    	; 0x216a <async+0x1fc>
    20fc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
    2100:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	81 f1       	breq	.+96     	; 0x2168 <async+0x1fa>
    2108:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
    210c:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
    2110:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <msgQ>
    2114:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <msgQ+0x1>
    2118:	02 81       	ldd	r16, Z+2	; 0x02
    211a:	13 81       	ldd	r17, Z+3	; 0x03
    211c:	d9 01       	movw	r26, r18
    211e:	16 96       	adiw	r26, 0x06	; 6
    2120:	4d 91       	ld	r20, X+
    2122:	5d 91       	ld	r21, X+
    2124:	6d 91       	ld	r22, X+
    2126:	7c 91       	ld	r23, X
    2128:	19 97       	sbiw	r26, 0x09	; 9
    212a:	d8 01       	movw	r26, r16
    212c:	16 96       	adiw	r26, 0x06	; 6
    212e:	0d 91       	ld	r16, X+
    2130:	1d 91       	ld	r17, X+
    2132:	2d 91       	ld	r18, X+
    2134:	3c 91       	ld	r19, X
    2136:	19 97       	sbiw	r26, 0x09	; 9
    2138:	40 1b       	sub	r20, r16
    213a:	51 0b       	sbc	r21, r17
    213c:	62 0b       	sbc	r22, r18
    213e:	73 0b       	sbc	r23, r19
    2140:	9a f4       	brpl	.+38     	; 0x2168 <async+0x1fa>
    2142:	dc 01       	movw	r26, r24
    2144:	2d 91       	ld	r18, X+
    2146:	3c 91       	ld	r19, X
    2148:	11 97       	sbiw	r26, 0x01	; 1
    214a:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <threadPool+0x1>
    214e:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <threadPool>
    2152:	ed 93       	st	X+, r30
    2154:	fc 93       	st	X, r31
    2156:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <activeStack+0x1>
    215a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <activeStack>
    215e:	0e 94 20 06 	call	0xc40	; 0xc40 <dispatch>
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <async+0x1fa>
    2164:	33 20       	and	r3, r3
    2166:	09 f0       	breq	.+2      	; 0x216a <async+0x1fc>
    2168:	78 94       	sei
    216a:	ce 01       	movw	r24, r28
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	ff 90       	pop	r15
    2176:	ef 90       	pop	r14
    2178:	df 90       	pop	r13
    217a:	cf 90       	pop	r12
    217c:	bf 90       	pop	r11
    217e:	af 90       	pop	r10
    2180:	9f 90       	pop	r9
    2182:	8f 90       	pop	r8
    2184:	7f 90       	pop	r7
    2186:	6f 90       	pop	r6
    2188:	5f 90       	pop	r5
    218a:	4f 90       	pop	r4
    218c:	3f 90       	pop	r3
    218e:	08 95       	ret

00002190 <sync>:
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	ec 01       	movw	r28, r24
    21a2:	7b 01       	movw	r14, r22
    21a4:	6a 01       	movw	r12, r20
    21a6:	1f b7       	in	r17, 0x3f	; 63
    21a8:	10 78       	andi	r17, 0x80	; 128
    21aa:	f8 94       	cli
    21ac:	a8 81       	ld	r26, Y
    21ae:	b9 81       	ldd	r27, Y+1	; 0x01
    21b0:	10 97       	sbiw	r26, 0x00	; 0
    21b2:	61 f1       	breq	.+88     	; 0x220c <sync+0x7c>
    21b4:	14 96       	adiw	r26, 0x04	; 4
    21b6:	ed 91       	ld	r30, X+
    21b8:	fc 91       	ld	r31, X
    21ba:	15 97       	sbiw	r26, 0x05	; 5
    21bc:	30 97       	sbiw	r30, 0x00	; 0
    21be:	41 f0       	breq	.+16     	; 0x21d0 <sync+0x40>
    21c0:	a0 81       	ld	r26, Z
    21c2:	b1 81       	ldd	r27, Z+1	; 0x01
    21c4:	14 96       	adiw	r26, 0x04	; 4
    21c6:	ed 91       	ld	r30, X+
    21c8:	fc 91       	ld	r31, X
    21ca:	15 97       	sbiw	r26, 0x05	; 5
    21cc:	30 97       	sbiw	r30, 0x00	; 0
    21ce:	c1 f7       	brne	.-16     	; 0x21c0 <sync+0x30>
    21d0:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <current>
    21d4:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <current+0x1>
    21d8:	2a 17       	cp	r18, r26
    21da:	3b 07       	cpc	r19, r27
    21dc:	21 f0       	breq	.+8      	; 0x21e6 <sync+0x56>
    21de:	11 23       	and	r17, r17
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <sync+0x54>
    21e2:	3d c0       	rjmp	.+122    	; 0x225e <sync+0xce>
    21e4:	07 c0       	rjmp	.+14     	; 0x21f4 <sync+0x64>
    21e6:	11 23       	and	r17, r17
    21e8:	09 f4       	brne	.+2      	; 0x21ec <sync+0x5c>
    21ea:	3c c0       	rjmp	.+120    	; 0x2264 <sync+0xd4>
    21ec:	78 94       	sei
    21ee:	8f ef       	ldi	r24, 0xFF	; 255
    21f0:	9f ef       	ldi	r25, 0xFF	; 255
    21f2:	52 c0       	rjmp	.+164    	; 0x2298 <sync+0x108>
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	d1 f1       	breq	.+116    	; 0x2270 <sync+0xe0>
    21fc:	fc 01       	movw	r30, r24
    21fe:	15 82       	std	Z+5, r1	; 0x05
    2200:	14 82       	std	Z+4, r1	; 0x04
    2202:	36 c0       	rjmp	.+108    	; 0x2270 <sync+0xe0>
    2204:	78 94       	sei
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	46 c0       	rjmp	.+140    	; 0x2298 <sync+0x108>
    220c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current>
    2210:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <current+0x1>
    2214:	99 83       	std	Y+1, r25	; 0x01
    2216:	88 83       	st	Y, r24
    2218:	11 23       	and	r17, r17
    221a:	29 f0       	breq	.+10     	; 0x2226 <sync+0x96>
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	9b 81       	ldd	r25, Y+3	; 0x03
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	09 f0       	breq	.+2      	; 0x2226 <sync+0x96>
    2224:	78 94       	sei
    2226:	b6 01       	movw	r22, r12
    2228:	ce 01       	movw	r24, r28
    222a:	f7 01       	movw	r30, r14
    222c:	09 95       	icall
    222e:	f8 2e       	mov	r15, r24
    2230:	09 2f       	mov	r16, r25
    2232:	8f b7       	in	r24, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	18 82       	st	Y, r1
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	91 05       	cpc	r25, r1
    2242:	38 f0       	brcs	.+14     	; 0x2252 <sync+0xc2>
    2244:	1b 82       	std	Y+3, r1	; 0x03
    2246:	1a 82       	std	Y+2, r1	; 0x02
    2248:	fc 01       	movw	r30, r24
    224a:	15 82       	std	Z+5, r1	; 0x05
    224c:	14 82       	std	Z+4, r1	; 0x04
    224e:	0e 94 20 06 	call	0xc40	; 0xc40 <dispatch>
    2252:	11 23       	and	r17, r17
    2254:	51 f0       	breq	.+20     	; 0x226a <sync+0xda>
    2256:	78 94       	sei
    2258:	8f 2d       	mov	r24, r15
    225a:	90 2f       	mov	r25, r16
    225c:	1d c0       	rjmp	.+58     	; 0x2298 <sync+0x108>
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	9f ef       	ldi	r25, 0xFF	; 255
    2262:	1a c0       	rjmp	.+52     	; 0x2298 <sync+0x108>
    2264:	8f ef       	ldi	r24, 0xFF	; 255
    2266:	9f ef       	ldi	r25, 0xFF	; 255
    2268:	17 c0       	rjmp	.+46     	; 0x2298 <sync+0x108>
    226a:	8f 2d       	mov	r24, r15
    226c:	90 2f       	mov	r25, r16
    226e:	14 c0       	rjmp	.+40     	; 0x2298 <sync+0x108>
    2270:	3b 83       	std	Y+3, r19	; 0x03
    2272:	2a 83       	std	Y+2, r18	; 0x02
    2274:	f9 01       	movw	r30, r18
    2276:	d5 83       	std	Z+5, r29	; 0x05
    2278:	c4 83       	std	Z+4, r28	; 0x04
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 20 06 	call	0xc40	; 0xc40 <dispatch>
    2280:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <current>
    2284:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <current+0x1>
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	89 2b       	or	r24, r25
    228e:	09 f4       	brne	.+2      	; 0x2292 <sync+0x102>
    2290:	b9 cf       	rjmp	.-142    	; 0x2204 <sync+0x74>
    2292:	f9 83       	std	Y+1, r31	; 0x01
    2294:	e8 83       	st	Y, r30
    2296:	c2 cf       	rjmp	.-124    	; 0x221c <sync+0x8c>
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	ff 90       	pop	r15
    22a2:	ef 90       	pop	r14
    22a4:	df 90       	pop	r13
    22a6:	cf 90       	pop	r12
    22a8:	08 95       	ret

000022aa <run>:
    22aa:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <current>
    22ae:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <current+0x1>
    22b2:	8c e5       	ldi	r24, 0x5C	; 92
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <dequeue>
    22ba:	ec 01       	movw	r28, r24
    22bc:	d8 01       	movw	r26, r16
    22be:	13 96       	adiw	r26, 0x03	; 3
    22c0:	9c 93       	st	X, r25
    22c2:	8e 93       	st	-X, r24
    22c4:	12 97       	sbiw	r26, 0x02	; 2
    22c6:	78 94       	sei
    22c8:	4e 85       	ldd	r20, Y+14	; 0x0e
    22ca:	5f 85       	ldd	r21, Y+15	; 0x0f
    22cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    22d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d4:	0e 94 c8 10 	call	0x2190	; 0x2190 <sync>
    22d8:	8f b7       	in	r24, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <msgPool>
    22e0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <msgPool+0x1>
    22e4:	99 83       	std	Y+1, r25	; 0x01
    22e6:	88 83       	st	Y, r24
    22e8:	d0 93 3e 01 	sts	0x013E, r29	; 0x80013e <msgPool+0x1>
    22ec:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <msgPool>
    22f0:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
    22f4:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
    22f8:	00 81       	ld	r16, Z
    22fa:	11 81       	ldd	r17, Z+1	; 0x01
    22fc:	e8 01       	movw	r28, r16
    22fe:	2a 81       	ldd	r18, Y+2	; 0x02
    2300:	3b 81       	ldd	r19, Y+3	; 0x03
    2302:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <msgQ>
    2306:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <msgQ+0x1>
    230a:	10 97       	sbiw	r26, 0x00	; 0
    230c:	c1 f0       	breq	.+48     	; 0x233e <run+0x94>
    230e:	21 15       	cp	r18, r1
    2310:	31 05       	cpc	r19, r1
    2312:	59 f2       	breq	.-106    	; 0x22aa <run>
    2314:	16 96       	adiw	r26, 0x06	; 6
    2316:	8d 91       	ld	r24, X+
    2318:	9d 91       	ld	r25, X+
    231a:	0d 90       	ld	r0, X+
    231c:	bc 91       	ld	r27, X
    231e:	a0 2d       	mov	r26, r0
    2320:	e9 01       	movw	r28, r18
    2322:	4e 81       	ldd	r20, Y+6	; 0x06
    2324:	5f 81       	ldd	r21, Y+7	; 0x07
    2326:	68 85       	ldd	r22, Y+8	; 0x08
    2328:	79 85       	ldd	r23, Y+9	; 0x09
    232a:	84 1b       	sub	r24, r20
    232c:	95 0b       	sbc	r25, r21
    232e:	a6 0b       	sbc	r26, r22
    2330:	b7 0b       	sbc	r27, r23
    2332:	18 16       	cp	r1, r24
    2334:	19 06       	cpc	r1, r25
    2336:	1a 06       	cpc	r1, r26
    2338:	1b 06       	cpc	r1, r27
    233a:	0c f0       	brlt	.+2      	; 0x233e <run+0x94>
    233c:	b6 cf       	rjmp	.-148    	; 0x22aa <run>
    233e:	10 93 3a 01 	sts	0x013A, r17	; 0x80013a <activeStack+0x1>
    2342:	00 93 39 01 	sts	0x0139, r16	; 0x800139 <activeStack>
    2346:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
    234a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
    2352:	f0 93 3c 01 	sts	0x013C, r31	; 0x80013c <threadPool+0x1>
    2356:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <threadPool>
    235a:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <activeStack>
    235e:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <activeStack+0x1>
    2362:	14 96       	adiw	r26, 0x04	; 4
    2364:	ed 91       	ld	r30, X+
    2366:	fc 91       	ld	r31, X
    2368:	15 97       	sbiw	r26, 0x05	; 5
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	41 f0       	breq	.+16     	; 0x237e <run+0xd4>
    236e:	a0 81       	ld	r26, Z
    2370:	b1 81       	ldd	r27, Z+1	; 0x01
    2372:	14 96       	adiw	r26, 0x04	; 4
    2374:	ed 91       	ld	r30, X+
    2376:	fc 91       	ld	r31, X
    2378:	15 97       	sbiw	r26, 0x05	; 5
    237a:	30 97       	sbiw	r30, 0x00	; 0
    237c:	c1 f7       	brne	.-16     	; 0x236e <run+0xc4>
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 20 06 	call	0xc40	; 0xc40 <dispatch>
    2384:	92 cf       	rjmp	.-220    	; 0x22aa <run>

00002386 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2386:	42 31       	cpi	r20, 0x12	; 18
    2388:	b8 f4       	brcc	.+46     	; 0x23b8 <install+0x32>
        char status;
        DISABLE(status);
    238a:	2f b7       	in	r18, 0x3f	; 63
    238c:	f8 94       	cli
        otable[i] = obj;
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	44 0f       	add	r20, r20
    2392:	55 1f       	adc	r21, r21
    2394:	fa 01       	movw	r30, r20
    2396:	e2 5a       	subi	r30, 0xA2	; 162
    2398:	fe 4f       	sbci	r31, 0xFE	; 254
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
        mtable[i] = m;
    239e:	fa 01       	movw	r30, r20
    23a0:	ea 50       	subi	r30, 0x0A	; 10
    23a2:	fe 4f       	sbci	r31, 0xFE	; 254
    23a4:	71 83       	std	Z+1, r23	; 0x01
    23a6:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	fc 01       	movw	r30, r24
    23ae:	53 83       	std	Z+3, r21	; 0x03
    23b0:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    23b2:	22 23       	and	r18, r18
    23b4:	0c f4       	brge	.+2      	; 0x23b8 <install+0x32>
    23b6:	78 94       	sei
    23b8:	08 95       	ret

000023ba <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    23ba:	8c 01       	movw	r16, r24
    23bc:	7b 01       	movw	r14, r22
    23be:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    23c0:	8f b7       	in	r24, 0x3f	; 63
    23c2:	f8 94       	cli
    initialize();
    23c4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <initialize>
    ENABLE(1);
    23c8:	78 94       	sei
    if (m != NULL)
    23ca:	e1 14       	cp	r14, r1
    23cc:	f1 04       	cpc	r15, r1
    23ce:	41 f0       	breq	.+16     	; 0x23e0 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	a9 01       	movw	r20, r18
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	cb 01       	movw	r24, r22
    23dc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <async>
    DISABLE(status);
    23e0:	8f b7       	in	r24, 0x3f	; 63
    23e2:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    23e4:	0e 94 40 06 	call	0xc80	; 0xc80 <schedule>
    ENABLE(1);
    23e8:	78 94       	sei
    while (1) {
        SLEEP();
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	83 bf       	out	0x33, r24	; 51
    23ee:	88 95       	sleep
    23f0:	fd cf       	rjmp	.-6      	; 0x23ec <tinytimber+0x32>

000023f2 <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    23f2:	67 2b       	or	r22, r23
    23f4:	79 f0       	breq	.+30     	; 0x2414 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    23f6:	4e b1       	in	r20, 0x0e	; 14
    23f8:	21 e0       	ldi	r18, 0x01	; 1
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	b9 01       	movw	r22, r18
    23fe:	fc 01       	movw	r30, r24
    2400:	04 80       	ldd	r0, Z+4	; 0x04
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <writeBit+0x16>
    2404:	66 0f       	add	r22, r22
    2406:	77 1f       	adc	r23, r23
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <writeBit+0x12>
    240c:	cb 01       	movw	r24, r22
    240e:	84 2b       	or	r24, r20
    2410:	8e b9       	out	0x0e, r24	; 14
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    2414:	4e b1       	in	r20, 0x0e	; 14
    2416:	21 e0       	ldi	r18, 0x01	; 1
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	b9 01       	movw	r22, r18
    241c:	fc 01       	movw	r30, r24
    241e:	04 80       	ldd	r0, Z+4	; 0x04
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <writeBit+0x34>
    2422:	66 0f       	add	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	0a 94       	dec	r0
    2428:	e2 f7       	brpl	.-8      	; 0x2422 <writeBit+0x30>
    242a:	cb 01       	movw	r24, r22
    242c:	80 95       	com	r24
    242e:	84 23       	and	r24, r20
    2430:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	08 95       	ret

00002438 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    2438:	4e b1       	in	r20, 0x0e	; 14
    243a:	21 e0       	ldi	r18, 0x01	; 1
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	fc 01       	movw	r30, r24
    2440:	04 80       	ldd	r0, Z+4	; 0x04
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <toggleBit+0x10>
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <toggleBit+0xc>
    244c:	24 27       	eor	r18, r20
    244e:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	08 95       	ret

00002456 <__divmodhi4>:
    2456:	97 fb       	bst	r25, 7
    2458:	07 2e       	mov	r0, r23
    245a:	16 f4       	brtc	.+4      	; 0x2460 <__divmodhi4+0xa>
    245c:	00 94       	com	r0
    245e:	07 d0       	rcall	.+14     	; 0x246e <__divmodhi4_neg1>
    2460:	77 fd       	sbrc	r23, 7
    2462:	09 d0       	rcall	.+18     	; 0x2476 <__divmodhi4_neg2>
    2464:	0e 94 65 12 	call	0x24ca	; 0x24ca <__udivmodhi4>
    2468:	07 fc       	sbrc	r0, 7
    246a:	05 d0       	rcall	.+10     	; 0x2476 <__divmodhi4_neg2>
    246c:	3e f4       	brtc	.+14     	; 0x247c <__divmodhi4_exit>

0000246e <__divmodhi4_neg1>:
    246e:	90 95       	com	r25
    2470:	81 95       	neg	r24
    2472:	9f 4f       	sbci	r25, 0xFF	; 255
    2474:	08 95       	ret

00002476 <__divmodhi4_neg2>:
    2476:	70 95       	com	r23
    2478:	61 95       	neg	r22
    247a:	7f 4f       	sbci	r23, 0xFF	; 255

0000247c <__divmodhi4_exit>:
    247c:	08 95       	ret

0000247e <__divmodsi4>:
    247e:	05 2e       	mov	r0, r21
    2480:	97 fb       	bst	r25, 7
    2482:	1e f4       	brtc	.+6      	; 0x248a <__divmodsi4+0xc>
    2484:	00 94       	com	r0
    2486:	0e 94 56 12 	call	0x24ac	; 0x24ac <__negsi2>
    248a:	57 fd       	sbrc	r21, 7
    248c:	07 d0       	rcall	.+14     	; 0x249c <__divmodsi4_neg2>
    248e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__udivmodsi4>
    2492:	07 fc       	sbrc	r0, 7
    2494:	03 d0       	rcall	.+6      	; 0x249c <__divmodsi4_neg2>
    2496:	4e f4       	brtc	.+18     	; 0x24aa <__divmodsi4_exit>
    2498:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__negsi2>

0000249c <__divmodsi4_neg2>:
    249c:	50 95       	com	r21
    249e:	40 95       	com	r20
    24a0:	30 95       	com	r19
    24a2:	21 95       	neg	r18
    24a4:	3f 4f       	sbci	r19, 0xFF	; 255
    24a6:	4f 4f       	sbci	r20, 0xFF	; 255
    24a8:	5f 4f       	sbci	r21, 0xFF	; 255

000024aa <__divmodsi4_exit>:
    24aa:	08 95       	ret

000024ac <__negsi2>:
    24ac:	90 95       	com	r25
    24ae:	80 95       	com	r24
    24b0:	70 95       	com	r23
    24b2:	61 95       	neg	r22
    24b4:	7f 4f       	sbci	r23, 0xFF	; 255
    24b6:	8f 4f       	sbci	r24, 0xFF	; 255
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	08 95       	ret

000024bc <__usmulhisi3>:
    24bc:	0e 94 9b 12 	call	0x2536	; 0x2536 <__umulhisi3>

000024c0 <__usmulhisi3_tail>:
    24c0:	b7 ff       	sbrs	r27, 7
    24c2:	08 95       	ret
    24c4:	82 1b       	sub	r24, r18
    24c6:	93 0b       	sbc	r25, r19
    24c8:	08 95       	ret

000024ca <__udivmodhi4>:
    24ca:	aa 1b       	sub	r26, r26
    24cc:	bb 1b       	sub	r27, r27
    24ce:	51 e1       	ldi	r21, 0x11	; 17
    24d0:	07 c0       	rjmp	.+14     	; 0x24e0 <__udivmodhi4_ep>

000024d2 <__udivmodhi4_loop>:
    24d2:	aa 1f       	adc	r26, r26
    24d4:	bb 1f       	adc	r27, r27
    24d6:	a6 17       	cp	r26, r22
    24d8:	b7 07       	cpc	r27, r23
    24da:	10 f0       	brcs	.+4      	; 0x24e0 <__udivmodhi4_ep>
    24dc:	a6 1b       	sub	r26, r22
    24de:	b7 0b       	sbc	r27, r23

000024e0 <__udivmodhi4_ep>:
    24e0:	88 1f       	adc	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	5a 95       	dec	r21
    24e6:	a9 f7       	brne	.-22     	; 0x24d2 <__udivmodhi4_loop>
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	08 95       	ret

000024f2 <__udivmodsi4>:
    24f2:	a1 e2       	ldi	r26, 0x21	; 33
    24f4:	1a 2e       	mov	r1, r26
    24f6:	aa 1b       	sub	r26, r26
    24f8:	bb 1b       	sub	r27, r27
    24fa:	fd 01       	movw	r30, r26
    24fc:	0d c0       	rjmp	.+26     	; 0x2518 <__udivmodsi4_ep>

000024fe <__udivmodsi4_loop>:
    24fe:	aa 1f       	adc	r26, r26
    2500:	bb 1f       	adc	r27, r27
    2502:	ee 1f       	adc	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	a2 17       	cp	r26, r18
    2508:	b3 07       	cpc	r27, r19
    250a:	e4 07       	cpc	r30, r20
    250c:	f5 07       	cpc	r31, r21
    250e:	20 f0       	brcs	.+8      	; 0x2518 <__udivmodsi4_ep>
    2510:	a2 1b       	sub	r26, r18
    2512:	b3 0b       	sbc	r27, r19
    2514:	e4 0b       	sbc	r30, r20
    2516:	f5 0b       	sbc	r31, r21

00002518 <__udivmodsi4_ep>:
    2518:	66 1f       	adc	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	88 1f       	adc	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	1a 94       	dec	r1
    2522:	69 f7       	brne	.-38     	; 0x24fe <__udivmodsi4_loop>
    2524:	60 95       	com	r22
    2526:	70 95       	com	r23
    2528:	80 95       	com	r24
    252a:	90 95       	com	r25
    252c:	9b 01       	movw	r18, r22
    252e:	ac 01       	movw	r20, r24
    2530:	bd 01       	movw	r22, r26
    2532:	cf 01       	movw	r24, r30
    2534:	08 95       	ret

00002536 <__umulhisi3>:
    2536:	a2 9f       	mul	r26, r18
    2538:	b0 01       	movw	r22, r0
    253a:	b3 9f       	mul	r27, r19
    253c:	c0 01       	movw	r24, r0
    253e:	a3 9f       	mul	r26, r19
    2540:	70 0d       	add	r23, r0
    2542:	81 1d       	adc	r24, r1
    2544:	11 24       	eor	r1, r1
    2546:	91 1d       	adc	r25, r1
    2548:	b2 9f       	mul	r27, r18
    254a:	70 0d       	add	r23, r0
    254c:	81 1d       	adc	r24, r1
    254e:	11 24       	eor	r1, r1
    2550:	91 1d       	adc	r25, r1
    2552:	08 95       	ret

00002554 <setjmp>:
    2554:	dc 01       	movw	r26, r24
    2556:	2d 92       	st	X+, r2
    2558:	3d 92       	st	X+, r3
    255a:	4d 92       	st	X+, r4
    255c:	5d 92       	st	X+, r5
    255e:	6d 92       	st	X+, r6
    2560:	7d 92       	st	X+, r7
    2562:	8d 92       	st	X+, r8
    2564:	9d 92       	st	X+, r9
    2566:	ad 92       	st	X+, r10
    2568:	bd 92       	st	X+, r11
    256a:	cd 92       	st	X+, r12
    256c:	dd 92       	st	X+, r13
    256e:	ed 92       	st	X+, r14
    2570:	fd 92       	st	X+, r15
    2572:	0d 93       	st	X+, r16
    2574:	1d 93       	st	X+, r17
    2576:	cd 93       	st	X+, r28
    2578:	dd 93       	st	X+, r29
    257a:	ff 91       	pop	r31
    257c:	ef 91       	pop	r30
    257e:	8d b7       	in	r24, 0x3d	; 61
    2580:	8d 93       	st	X+, r24
    2582:	8e b7       	in	r24, 0x3e	; 62
    2584:	8d 93       	st	X+, r24
    2586:	8f b7       	in	r24, 0x3f	; 63
    2588:	8d 93       	st	X+, r24
    258a:	ed 93       	st	X+, r30
    258c:	fd 93       	st	X+, r31
    258e:	88 27       	eor	r24, r24
    2590:	99 27       	eor	r25, r25
    2592:	09 94       	ijmp

00002594 <longjmp>:
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	91 05       	cpc	r25, r1
    259c:	81 1d       	adc	r24, r1
    259e:	2d 90       	ld	r2, X+
    25a0:	3d 90       	ld	r3, X+
    25a2:	4d 90       	ld	r4, X+
    25a4:	5d 90       	ld	r5, X+
    25a6:	6d 90       	ld	r6, X+
    25a8:	7d 90       	ld	r7, X+
    25aa:	8d 90       	ld	r8, X+
    25ac:	9d 90       	ld	r9, X+
    25ae:	ad 90       	ld	r10, X+
    25b0:	bd 90       	ld	r11, X+
    25b2:	cd 90       	ld	r12, X+
    25b4:	dd 90       	ld	r13, X+
    25b6:	ed 90       	ld	r14, X+
    25b8:	fd 90       	ld	r15, X+
    25ba:	0d 91       	ld	r16, X+
    25bc:	1d 91       	ld	r17, X+
    25be:	cd 91       	ld	r28, X+
    25c0:	dd 91       	ld	r29, X+
    25c2:	ed 91       	ld	r30, X+
    25c4:	fd 91       	ld	r31, X+
    25c6:	0d 90       	ld	r0, X+
    25c8:	f8 94       	cli
    25ca:	fe bf       	out	0x3e, r31	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	ed bf       	out	0x3d, r30	; 61
    25d0:	ed 91       	ld	r30, X+
    25d2:	fd 91       	ld	r31, X+
    25d4:	09 94       	ijmp

000025d6 <_exit>:
    25d6:	f8 94       	cli

000025d8 <__stop_program>:
    25d8:	ff cf       	rjmp	.-2      	; 0x25d8 <__stop_program>
