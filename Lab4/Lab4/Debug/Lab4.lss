
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002514  000025a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000025c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c6e  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001426  00000000  00000000  00006592  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001adb  00000000  00000000  000079b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e20  00000000  00000000  00009494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa9  00000000  00000000  0000a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d56  00000000  00000000  0000ad5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000eab3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_1>
       8:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_2>
       c:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__vector_3>
      10:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__vector_4>
      14:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__vector_9>
      28:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_10>
      2c:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_11>
      30:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_12>
      34:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_13>
      38:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_14>
      3c:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <__vector_15>
      40:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_16>
      44:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_17>
      48:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__vector_18>
      4c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_19>
      50:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_20>
      54:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_21>
      58:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e1       	ldi	r30, 0x14	; 20
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 18 04 	call	0x830	; 0x830 <main>
      92:	0c 94 88 12 	jmp	0x2510	; 0x2510 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      a6:	fc 01       	movw	r30, r24
      a8:	22 85       	ldd	r18, Z+10	; 0x0a
      aa:	22 23       	and	r18, r18
      ac:	21 f0       	breq	.+8      	; 0xb6 <holdCheckerUp+0x1c>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      ae:	1e 9b       	sbis	0x03, 6	; 3
      b0:	0b c0       	rjmp	.+22     	; 0xc8 <holdCheckerUp+0x2e>
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      b2:	fc 01       	movw	r30, r24
      b4:	12 86       	std	Z+10, r1	; 0x0a
	}
	return 0;
}
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	1f 91       	pop	r17
      bc:	0f 91       	pop	r16
      be:	ff 90       	pop	r15
      c0:	ef 90       	pop	r14
      c2:	df 90       	pop	r13
      c4:	cf 90       	pop	r12
      c6:	08 95       	ret
      c8:	8c 01       	movw	r16, r24
int holdCheckerUp(Button *self, int arg) {
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	62 ef       	ldi	r22, 0xF2	; 242
      d0:	72 e0       	ldi	r23, 0x02	; 2
      d2:	84 81       	ldd	r24, Z+4	; 0x04
      d4:	95 81       	ldd	r25, Z+5	; 0x05
      d6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      da:	c1 2c       	mov	r12, r1
      dc:	d1 2c       	mov	r13, r1
      de:	8d e4       	ldi	r24, 0x4D	; 77
      e0:	e8 2e       	mov	r14, r24
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	f8 2e       	mov	r15, r24
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	a9 01       	movw	r20, r18
      ec:	65 e3       	ldi	r22, 0x35	; 53
      ee:	7c e0       	ldi	r23, 0x0C	; 12
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
      f8:	de cf       	rjmp	.-68     	; 0xb6 <holdCheckerUp+0x1c>

000000fa <holdCheckerDown>:
	}
	return 0;
}

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     106:	fc 01       	movw	r30, r24
     108:	23 85       	ldd	r18, Z+11	; 0x0b
     10a:	22 23       	and	r18, r18
     10c:	21 f0       	breq	.+8      	; 0x116 <holdCheckerDown+0x1c>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     10e:	1f 9b       	sbis	0x03, 7	; 3
     110:	0b c0       	rjmp	.+22     	; 0x128 <holdCheckerDown+0x2e>
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     112:	fc 01       	movw	r30, r24
     114:	13 86       	std	Z+11, r1	; 0x0b
	}
	return 0;
}
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret
     128:	8c 01       	movw	r16, r24
int holdCheckerDown(Button *self, int arg) {
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	6b e2       	ldi	r22, 0x2B	; 43
     130:	73 e0       	ldi	r23, 0x03	; 3
     132:	84 81       	ldd	r24, Z+4	; 0x04
     134:	95 81       	ldd	r25, Z+5	; 0x05
     136:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	8d e7       	ldi	r24, 0x7D	; 125
     140:	e8 2e       	mov	r14, r24
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	f8 2e       	mov	r15, r24
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	65 e3       	ldi	r22, 0x35	; 53
     14e:	7c e0       	ldi	r23, 0x0C	; 12
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     158:	de cf       	rjmp	.-68     	; 0x116 <holdCheckerDown+0x1c>

0000015a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     15a:	85 b1       	in	r24, 0x05	; 5
     15c:	80 6d       	ori	r24, 0xD0	; 208
     15e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     160:	8e b1       	in	r24, 0x0e	; 14
     162:	8c 60       	ori	r24, 0x0C	; 12
     164:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     166:	8d b3       	in	r24, 0x1d	; 29
     168:	80 6c       	ori	r24, 0xC0	; 192
     16a:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     16c:	eb e6       	ldi	r30, 0x6B	; 107
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8c 60       	ori	r24, 0x0C	; 12
     174:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     176:	ec e6       	ldi	r30, 0x6C	; 108
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	80 6d       	ori	r24, 0xD0	; 208
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <leftdir>:
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
     182:	62 99       	sbic	0x0c, 2	; 12
     184:	04 c0       	rjmp	.+8      	; 0x18e <leftdir+0xc>
     186:	fc 01       	movw	r30, r24
     188:	20 85       	ldd	r18, Z+8	; 0x08
     18a:	22 23       	and	r18, r18
     18c:	39 f0       	breq	.+14     	; 0x19c <leftdir+0x1a>
		self->heldLeft = true;
		SYNC(self->gui, switchGen, 0);
	}
	
	else if (!PRESSEDLT) {
     18e:	62 9b       	sbis	0x0c, 2	; 12
     190:	02 c0       	rjmp	.+4      	; 0x196 <leftdir+0x14>
		self->heldLeft = false;
     192:	fc 01       	movw	r30, r24
     194:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	08 95       	ret
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		self->heldLeft = true;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 87       	std	Z+8, r24	; 0x08
		SYNC(self->gui, switchGen, 0);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	6e ec       	ldi	r22, 0xCE	; 206
     1a6:	72 e0       	ldi	r23, 0x02	; 2
     1a8:	84 81       	ldd	r24, Z+4	; 0x04
     1aa:	95 81       	ldd	r25, Z+5	; 0x05
     1ac:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
	
	else if (!PRESSEDLT) {
		self->heldLeft = false;
	}
	return 0;
}
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
     1b6:	63 99       	sbic	0x0c, 3	; 12
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <rightdir+0xc>
     1ba:	fc 01       	movw	r30, r24
     1bc:	21 85       	ldd	r18, Z+9	; 0x09
     1be:	22 23       	and	r18, r18
     1c0:	39 f0       	breq	.+14     	; 0x1d0 <rightdir+0x1a>
		self->heldRight = true;
		SYNC(self->gui, switchGen, 1);
	}
	else if (!PRESSEDRT) {
     1c2:	63 9b       	sbis	0x0c, 3	; 12
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <rightdir+0x14>
		self->heldRight = false;
     1c6:	fc 01       	movw	r30, r24
     1c8:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret
}

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
		self->heldRight = true;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	81 87       	std	Z+9, r24	; 0x09
		SYNC(self->gui, switchGen, 1);
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	6e ec       	ldi	r22, 0xCE	; 206
     1da:	72 e0       	ldi	r23, 0x02	; 2
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
	}
	else if (!PRESSEDRT) {
		self->heldRight = false;
	}
	return 0;
}
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	08 95       	ret

000001ea <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	ec 01       	movw	r28, r24
	if (PRESSEDLT && !self->heldLeft) {
     1f0:	62 99       	sbic	0x0c, 2	; 12
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <buttonCheckerLR+0x10>
     1f4:	88 85       	ldd	r24, Y+8	; 0x08
     1f6:	88 23       	and	r24, r24
     1f8:	61 f0       	breq	.+24     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		leftdir(self, 0);
	}
	else {
		self->heldLeft = false;
     1fa:	18 86       	std	Y+8, r1	; 0x08
	}
	if (PRESSEDRT && !self->heldRight) {
     1fc:	63 99       	sbic	0x0c, 3	; 12
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     200:	89 85       	ldd	r24, Y+9	; 0x09
     202:	88 23       	and	r24, r24
     204:	61 f0       	breq	.+24     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		rightdir(self, 0);
	}
	else {
		self->heldRight = false;
     206:	19 86       	std	Y+9, r1	; 0x09
	}
	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		leftdir(self, 0);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	ce 01       	movw	r24, r28
     218:	0e 94 c1 00 	call	0x182	; 0x182 <leftdir>
     21c:	ef cf       	rjmp	.-34     	; 0x1fc <buttonCheckerLR+0x12>
	}
	else {
		self->heldLeft = false;
	}
	if (PRESSEDRT && !self->heldRight) {
		rightdir(self, 0);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	ce 01       	movw	r24, r28
     224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <rightdir>
	}
	else {
		self->heldRight = false;
	}
	return 0;
}
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     23e:	1e 99       	sbic	0x03, 6	; 3
     240:	12 c0       	rjmp	.+36     	; 0x266 <updir+0x34>
     242:	fc 01       	movw	r30, r24
     244:	26 81       	ldd	r18, Z+6	; 0x06
     246:	21 11       	cpse	r18, r1
     248:	0e c0       	rjmp	.+28     	; 0x266 <updir+0x34>
		self->heldUp = true; // Markera att knappen hålls nere
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	26 83       	std	Z+6, r18	; 0x06
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     24e:	32 85       	ldd	r19, Z+10	; 0x0a
     250:	33 23       	and	r19, r19
     252:	71 f0       	breq	.+28     	; 0x270 <updir+0x3e>
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
		self->heldUp = false;
	}
	return 0;
}
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
			self->holdUpRunning = true;
			AFTER(MSEC(50), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 50ms
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     266:	1e 9b       	sbis	0x03, 6	; 3
     268:	f5 cf       	rjmp	.-22     	; 0x254 <updir+0x22>
		self->heldUp = false;
     26a:	fc 01       	movw	r30, r24
     26c:	16 82       	std	Z+6, r1	; 0x06
     26e:	f2 cf       	rjmp	.-28     	; 0x254 <updir+0x22>
     270:	8c 01       	movw	r16, r24
int updir(Button *self, int arg) {
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
		self->heldUp = true; // Markera att knappen hålls nere
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
			self->holdUpRunning = true;
     272:	22 87       	std	Z+10, r18	; 0x0a
			AFTER(MSEC(50), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 50ms
     274:	c1 2c       	mov	r12, r1
     276:	d1 2c       	mov	r13, r1
     278:	8d e4       	ldi	r24, 0x4D	; 77
     27a:	e8 2e       	mov	r14, r24
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	f8 2e       	mov	r15, r24
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	a9 01       	movw	r20, r18
     286:	6a e1       	ldi	r22, 0x1A	; 26
     288:	76 e0       	ldi	r23, 0x06	; 6
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     292:	e0 cf       	rjmp	.-64     	; 0x254 <updir+0x22>

00000294 <downdir>:
	}
	return 0;
}

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     294:	cf 92       	push	r12
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     2a0:	1f 99       	sbic	0x03, 7	; 3
     2a2:	12 c0       	rjmp	.+36     	; 0x2c8 <downdir+0x34>
     2a4:	fc 01       	movw	r30, r24
     2a6:	27 81       	ldd	r18, Z+7	; 0x07
     2a8:	21 11       	cpse	r18, r1
     2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <downdir+0x34>
		self->heldDown = true; // Markera att knappen hålls nere
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	27 83       	std	Z+7, r18	; 0x07
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     2b0:	33 85       	ldd	r19, Z+11	; 0x0b
     2b2:	33 23       	and	r19, r19
     2b4:	71 f0       	breq	.+28     	; 0x2d2 <downdir+0x3e>
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
		self->heldDown = false;
	}
	return 0;
}
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	08 95       	ret
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
			self->holdDownRunning = true;
			AFTER(MSEC(50), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 50ms
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     2c8:	1f 9b       	sbis	0x03, 7	; 3
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <downdir+0x22>
		self->heldDown = false;
     2cc:	fc 01       	movw	r30, r24
     2ce:	17 82       	std	Z+7, r1	; 0x07
     2d0:	f2 cf       	rjmp	.-28     	; 0x2b6 <downdir+0x22>
     2d2:	8c 01       	movw	r16, r24
int downdir(Button *self, int arg) {
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
		self->heldDown = true; // Markera att knappen hålls nere
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
			self->holdDownRunning = true;
     2d4:	23 87       	std	Z+11, r18	; 0x0b
			AFTER(MSEC(50), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 50ms
     2d6:	c1 2c       	mov	r12, r1
     2d8:	d1 2c       	mov	r13, r1
     2da:	8d e7       	ldi	r24, 0x7D	; 125
     2dc:	e8 2e       	mov	r14, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	f8 2e       	mov	r15, r24
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	a9 01       	movw	r20, r18
     2e8:	6a e1       	ldi	r22, 0x1A	; 26
     2ea:	76 e0       	ldi	r23, 0x06	; 6
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     2f4:	e0 cf       	rjmp	.-64     	; 0x2b6 <downdir+0x22>

000002f6 <centerdir>:
	}
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
     2f6:	1c 99       	sbic	0x03, 4	; 3
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <centerdir+0xc>
     2fa:	fc 01       	movw	r30, r24
     2fc:	24 85       	ldd	r18, Z+12	; 0x0c
     2fe:	22 23       	and	r18, r18
     300:	39 f0       	breq	.+14     	; 0x310 <centerdir+0x1a>
		self->heldCenter = true;
		SYNC(self->gui, guiFrecReset, 0);
	}
	else if (!PRESSEDCN) {
     302:	1c 9b       	sbis	0x03, 4	; 3
     304:	02 c0       	rjmp	.+4      	; 0x30a <centerdir+0x14>
		self->heldCenter = false;
     306:	fc 01       	movw	r30, r24
     308:	14 86       	std	Z+12, r1	; 0x0c
	}
	return 0;
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
		self->heldCenter = true;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	84 87       	std	Z+12, r24	; 0x0c
		SYNC(self->gui, guiFrecReset, 0);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	64 e6       	ldi	r22, 0x64	; 100
     31a:	73 e0       	ldi	r23, 0x03	; 3
     31c:	84 81       	ldd	r24, Z+4	; 0x04
     31e:	95 81       	ldd	r25, Z+5	; 0x05
     320:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
	}
	else if (!PRESSEDCN) {
		self->heldCenter = false;
	}
	return 0;
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	08 95       	ret

0000032a <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ec 01       	movw	r28, r24
	if (PRESSEDUP && !self->heldUp) {
     330:	1e 99       	sbic	0x03, 6	; 3
     332:	03 c0       	rjmp	.+6      	; 0x33a <buttonCheckerUDC+0x10>
     334:	8e 81       	ldd	r24, Y+6	; 0x06
     336:	88 23       	and	r24, r24
     338:	c1 f0       	breq	.+48     	; 0x36a <buttonCheckerUDC+0x40>
		updir(self, 0);
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     33a:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN && !self->heldDown) {
     33c:	1f 99       	sbic	0x03, 7	; 3
     33e:	03 c0       	rjmp	.+6      	; 0x346 <buttonCheckerUDC+0x1c>
     340:	8f 81       	ldd	r24, Y+7	; 0x07
     342:	88 23       	and	r24, r24
     344:	61 f0       	breq	.+24     	; 0x35e <buttonCheckerUDC+0x34>
		downdir(self, 0); // Hantera ner-knappen
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     346:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN && !self->heldCenter) {
     348:	1c 99       	sbic	0x03, 4	; 3
     34a:	03 c0       	rjmp	.+6      	; 0x352 <buttonCheckerUDC+0x28>
     34c:	8c 85       	ldd	r24, Y+12	; 0x0c
     34e:	88 23       	and	r24, r24
     350:	91 f0       	breq	.+36     	; 0x376 <buttonCheckerUDC+0x4c>
		centerdir(self, 0);
	}
	else {
		self->heldCenter = false;
     352:	1c 86       	std	Y+12, r1	; 0x0c
	}
	return 0;
}
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
	}
	if (PRESSEDDN && !self->heldDown) {
		downdir(self, 0); // Hantera ner-knappen
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	ce 01       	movw	r24, r28
     364:	0e 94 4a 01 	call	0x294	; 0x294 <downdir>
     368:	ef cf       	rjmp	.-34     	; 0x348 <buttonCheckerUDC+0x1e>


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
	if (PRESSEDUP && !self->heldUp) {
		updir(self, 0);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	ce 01       	movw	r24, r28
     370:	0e 94 19 01 	call	0x232	; 0x232 <updir>
     374:	e3 cf       	rjmp	.-58     	; 0x33c <buttonCheckerUDC+0x12>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
	}
	if (PRESSEDCN && !self->heldCenter) {
		centerdir(self, 0);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	ce 01       	movw	r24, r28
     37c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <centerdir>
	}
	else {
		self->heldCenter = false;
	}
	return 0;
}
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <writeChar.part.0>:
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     38a:	90 ed       	ldi	r25, 0xD0	; 208
     38c:	98 0f       	add	r25, r24
     38e:	9a 30       	cpi	r25, 0x0A	; 10
     390:	60 f1       	brcs	.+88     	; 0x3ea <writeChar.part.0+0x60>
     392:	9b 01       	movw	r18, r22
     394:	21 70       	andi	r18, 0x01	; 1
     396:	30 78       	andi	r19, 0x80	; 128
     398:	37 fd       	sbrc	r19, 7
     39a:	71 c0       	rjmp	.+226    	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
     39c:	22 0f       	add	r18, r18
     39e:	33 1f       	adc	r19, r19
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	77 fd       	sbrc	r23, 7
     3ae:	5d c0       	rjmp	.+186    	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
     3b0:	75 95       	asr	r23
     3b2:	67 95       	ror	r22
     3b4:	fb 01       	movw	r30, r22
     3b6:	e4 51       	subi	r30, 0x14	; 20
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	8f e0       	ldi	r24, 0x0F	; 15
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <writeChar.part.0+0x38>
     3c0:	88 0f       	add	r24, r24
     3c2:	2a 95       	dec	r18
     3c4:	ea f7       	brpl	.-6      	; 0x3c0 <writeChar.part.0+0x36>
     3c6:	80 95       	com	r24
     3c8:	90 81       	ld	r25, Z
     3ca:	98 23       	and	r25, r24
     3cc:	9b 2b       	or	r25, r27
     3ce:	90 83       	st	Z, r25
     3d0:	95 81       	ldd	r25, Z+5	; 0x05
     3d2:	98 23       	and	r25, r24
     3d4:	9a 2b       	or	r25, r26
     3d6:	95 83       	std	Z+5, r25	; 0x05
     3d8:	92 85       	ldd	r25, Z+10	; 0x0a
     3da:	98 23       	and	r25, r24
     3dc:	94 2b       	or	r25, r20
     3de:	92 87       	std	Z+10, r25	; 0x0a
     3e0:	97 85       	ldd	r25, Z+15	; 0x0f
     3e2:	89 23       	and	r24, r25
     3e4:	85 2b       	or	r24, r21
     3e6:	87 87       	std	Z+15, r24	; 0x0f
     3e8:	08 95       	ret
     3ea:	e8 2f       	mov	r30, r24
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	e8 55       	subi	r30, 0x58	; 88
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	40 81       	ld	r20, Z
     3f8:	51 81       	ldd	r21, Z+1	; 0x01
     3fa:	9b 01       	movw	r18, r22
     3fc:	21 70       	andi	r18, 0x01	; 1
     3fe:	30 78       	andi	r19, 0x80	; 128
     400:	37 fd       	sbrc	r19, 7
     402:	36 c0       	rjmp	.+108    	; 0x470 <__DATA_REGION_LENGTH__+0x70>
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	ca 01       	movw	r24, r20
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	99 27       	eor	r25, r25
     412:	98 2f       	mov	r25, r24
     414:	02 2e       	mov	r0, r18
     416:	01 c0       	rjmp	.+2      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     418:	99 0f       	add	r25, r25
     41a:	0a 94       	dec	r0
     41c:	ea f7       	brpl	.-6      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     41e:	b9 2f       	mov	r27, r25
     420:	ca 01       	movw	r24, r20
     422:	92 95       	swap	r25
     424:	82 95       	swap	r24
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	89 27       	eor	r24, r25
     42a:	9f 70       	andi	r25, 0x0F	; 15
     42c:	89 27       	eor	r24, r25
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	99 27       	eor	r25, r25
     432:	98 2f       	mov	r25, r24
     434:	02 2e       	mov	r0, r18
     436:	01 c0       	rjmp	.+2      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     438:	99 0f       	add	r25, r25
     43a:	0a 94       	dec	r0
     43c:	ea f7       	brpl	.-6      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     43e:	a9 2f       	mov	r26, r25
     440:	85 2f       	mov	r24, r21
     442:	99 27       	eor	r25, r25
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	99 27       	eor	r25, r25
     448:	02 2e       	mov	r0, r18
     44a:	01 c0       	rjmp	.+2      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
     44c:	88 0f       	add	r24, r24
     44e:	0a 94       	dec	r0
     450:	ea f7       	brpl	.-6      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
     452:	48 2f       	mov	r20, r24
     454:	85 2f       	mov	r24, r21
     456:	82 95       	swap	r24
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	02 2e       	mov	r0, r18
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__DATA_REGION_LENGTH__+0x60>
     45e:	88 0f       	add	r24, r24
     460:	0a 94       	dec	r0
     462:	ea f7       	brpl	.-6      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
     464:	58 2f       	mov	r21, r24
     466:	77 ff       	sbrs	r23, 7
     468:	a3 cf       	rjmp	.-186    	; 0x3b0 <writeChar.part.0+0x26>
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	a0 cf       	rjmp	.-192    	; 0x3b0 <writeChar.part.0+0x26>
     470:	21 50       	subi	r18, 0x01	; 1
     472:	31 09       	sbc	r19, r1
     474:	2e 6f       	ori	r18, 0xFE	; 254
     476:	3f 6f       	ori	r19, 0xFF	; 255
     478:	2f 5f       	subi	r18, 0xFF	; 255
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
     47c:	c3 cf       	rjmp	.-122    	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	31 09       	sbc	r19, r1
     482:	2e 6f       	ori	r18, 0xFE	; 254
     484:	3f 6f       	ori	r19, 0xFF	; 255
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	88 cf       	rjmp	.-240    	; 0x39c <writeChar.part.0+0x12>

0000048c <lcd_init>:
     48c:	80 ec       	ldi	r24, 0xC0	; 192
     48e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     492:	87 eb       	ldi	r24, 0xB7	; 183
     494:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     498:	8f e0       	ldi	r24, 0x0F	; 15
     49a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     49e:	08 95       	ret

000004a0 <printAt>:
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
}

void printAt(long num, int pos) {
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	6b 01       	movw	r12, r22
     4ae:	7c 01       	movw	r14, r24
     4b0:	ea 01       	movw	r28, r20
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4b2:	46 30       	cpi	r20, 0x06	; 6
     4b4:	51 05       	cpc	r21, r1
     4b6:	f0 f0       	brcs	.+60     	; 0x4f4 <printAt+0x54>
}

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
     4b8:	21 96       	adiw	r28, 0x01	; 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4ba:	c6 30       	cpi	r28, 0x06	; 6
     4bc:	d1 05       	cpc	r29, r1
     4be:	38 f0       	brcs	.+14     	; 0x4ce <printAt+0x2e>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
	
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	2a e0       	ldi	r18, 0x0A	; 10
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodsi4>
     4de:	86 2f       	mov	r24, r22
     4e0:	be 01       	movw	r22, r28
     4e2:	80 5d       	subi	r24, 0xD0	; 208
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	0c 94 c5 01 	jmp	0x38a	; 0x38a <writeChar.part.0>
     4f4:	24 e6       	ldi	r18, 0x64	; 100
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodsi4>
     500:	2a e0       	ldi	r18, 0x0A	; 10
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodsi4>
     50c:	be 01       	movw	r22, r28
     50e:	80 e3       	ldi	r24, 0x30	; 48
     510:	82 0f       	add	r24, r18
     512:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     516:	d0 cf       	rjmp	.-96     	; 0x4b8 <printAt+0x18>

00000518 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	69 ee       	ldi	r22, 0xE9	; 233
     524:	74 e0       	ldi	r23, 0x04	; 4
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	9d 81       	ldd	r25, Y+5	; 0x05
     52a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
     52e:	bc 01       	movw	r22, r24
     530:	99 0f       	add	r25, r25
     532:	88 0b       	sbc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	69 ee       	ldi	r22, 0xE9	; 233
     544:	74 e0       	ldi	r23, 0x04	; 4
     546:	8e 81       	ldd	r24, Y+6	; 0x06
     548:	9f 81       	ldd	r25, Y+7	; 0x07
     54a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
     54e:	bc 01       	movw	r22, r24
     550:	99 0f       	add	r25, r25
     552:	88 0b       	sbc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	44 e0       	ldi	r20, 0x04	; 4
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     55e:	88 85       	ldd	r24, Y+8	; 0x08
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	88 23       	and	r24, r24
     566:	69 f0       	breq	.+26     	; 0x582 <updateDisplay+0x6a>
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     56e:	63 e0       	ldi	r22, 0x03	; 3
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	81 e3       	ldi	r24, 0x31	; 49
     574:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
		printAt(10, 2);
		} else {
		printAt(1, 2);
	}
	return 0;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret
     582:	81 e3       	ldi	r24, 0x31	; 49
     584:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     588:	63 e0       	ldi	r22, 0x03	; 3
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 e3       	ldi	r24, 0x30	; 48
     58e:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     59c:	cf 92       	push	r12
     59e:	df 92       	push	r13
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	67 2b       	or	r22, r23
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <switchGen+0x14>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     5b4:	c1 2c       	mov	r12, r1
     5b6:	d1 2c       	mov	r13, r1
     5b8:	2c e8       	ldi	r18, 0x8C	; 140
     5ba:	e2 2e       	mov	r14, r18
     5bc:	22 e0       	ldi	r18, 0x02	; 2
     5be:	f2 2e       	mov	r15, r18
     5c0:	8c 01       	movw	r16, r24
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	a9 01       	movw	r20, r18
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	cb 01       	movw	r24, r22
     5ce:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	return 0;
}
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	08 95       	ret

000005e4 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     5f6:	88 85       	ldd	r24, Y+8	; 0x08
     5f8:	88 23       	and	r24, r24
     5fa:	51 f1       	breq	.+84     	; 0x650 <guiFrecInc+0x6c>
		ASYNC(self->gen1, FrecInc, 0);
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     5fc:	0e 81       	ldd	r16, Y+6	; 0x06
     5fe:	1f 81       	ldd	r17, Y+7	; 0x07
     600:	c1 2c       	mov	r12, r1
     602:	d1 2c       	mov	r13, r1
     604:	8d ee       	ldi	r24, 0xED	; 237
     606:	e8 2e       	mov	r14, r24
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	f8 2e       	mov	r15, r24
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	cb 01       	movw	r24, r22
     618:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	}
	ASYNC(self, updateDisplay, 0);
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	9c e8       	ldi	r25, 0x8C	; 140
     622:	e9 2e       	mov	r14, r25
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	f9 2e       	mov	r15, r25
     628:	8e 01       	movw	r16, r28
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	a9 01       	movw	r20, r18
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	cb 01       	movw	r24, r22
     636:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	return 0;

}
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecInc, 0);
     650:	0c 81       	ldd	r16, Y+4	; 0x04
     652:	1d 81       	ldd	r17, Y+5	; 0x05
     654:	d5 cf       	rjmp	.-86     	; 0x600 <guiFrecInc+0x1c>

00000656 <guiFrecDec>:

}

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     668:	88 85       	ldd	r24, Y+8	; 0x08
     66a:	88 23       	and	r24, r24
     66c:	51 f1       	breq	.+84     	; 0x6c2 <guiFrecDec+0x6c>
		ASYNC(self->gen1, FrecDec, 0);
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     66e:	0e 81       	ldd	r16, Y+6	; 0x06
     670:	1f 81       	ldd	r17, Y+7	; 0x07
     672:	c1 2c       	mov	r12, r1
     674:	d1 2c       	mov	r13, r1
     676:	86 ef       	ldi	r24, 0xF6	; 246
     678:	e8 2e       	mov	r14, r24
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	f8 2e       	mov	r15, r24
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	a9 01       	movw	r20, r18
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	cb 01       	movw	r24, r22
     68a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	}
	ASYNC(self, updateDisplay, 0);
     68e:	c1 2c       	mov	r12, r1
     690:	d1 2c       	mov	r13, r1
     692:	9c e8       	ldi	r25, 0x8C	; 140
     694:	e9 2e       	mov	r14, r25
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	f9 2e       	mov	r15, r25
     69a:	8e 01       	movw	r16, r28
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	cb 01       	movw	r24, r22
     6a8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	return 0;
}
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	08 95       	ret

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecDec, 0);
     6c2:	0c 81       	ldd	r16, Y+4	; 0x04
     6c4:	1d 81       	ldd	r17, Y+5	; 0x05
     6c6:	d5 cf       	rjmp	.-86     	; 0x672 <guiFrecDec+0x1c>

000006c8 <guiFrecReset>:
	return 0;
}

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6da:	88 85       	ldd	r24, Y+8	; 0x08
     6dc:	88 23       	and	r24, r24
     6de:	51 f1       	breq	.+84     	; 0x734 <guiFrecReset+0x6c>
		ASYNC(self->gen1, FrecReset, 0);
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     6e0:	0e 81       	ldd	r16, Y+6	; 0x06
     6e2:	1f 81       	ldd	r17, Y+7	; 0x07
     6e4:	c1 2c       	mov	r12, r1
     6e6:	d1 2c       	mov	r13, r1
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	e8 2e       	mov	r14, r24
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	f8 2e       	mov	r15, r24
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	a9 01       	movw	r20, r18
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	cb 01       	movw	r24, r22
     6fc:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	}
	ASYNC(self, updateDisplay, 0);
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	9c e8       	ldi	r25, 0x8C	; 140
     706:	e9 2e       	mov	r14, r25
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	f9 2e       	mov	r15, r25
     70c:	8e 01       	movw	r16, r28
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	cb 01       	movw	r24, r22
     71a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	return 0;
}
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	08 95       	ret

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecReset, 0);
     734:	0c 81       	ldd	r16, Y+4	; 0x04
     736:	1d 81       	ldd	r17, Y+5	; 0x05
     738:	d5 cf       	rjmp	.-86     	; 0x6e4 <guiFrecReset+0x1c>

0000073a <startProgram>:
	return 0;
}

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(self->gen1, setPulse, 0);
     74c:	0c 81       	ldd	r16, Y+4	; 0x04
     74e:	1d 81       	ldd	r17, Y+5	; 0x05
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
     754:	8a e8       	ldi	r24, 0x8A	; 138
     756:	e8 2e       	mov	r14, r24
     758:	84 e0       	ldi	r24, 0x04	; 4
     75a:	f8 2e       	mov	r15, r24
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	a9 01       	movw	r20, r18
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	cb 01       	movw	r24, r22
     768:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	ASYNC(self->gen2, setPulse, 0);
     76c:	0e 81       	ldd	r16, Y+6	; 0x06
     76e:	1f 81       	ldd	r17, Y+7	; 0x07
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	a9 01       	movw	r20, r18
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	cb 01       	movw	r24, r22
     77c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     780:	9c e8       	ldi	r25, 0x8C	; 140
     782:	e9 2e       	mov	r14, r25
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	f9 2e       	mov	r15, r25
     788:	8e 01       	movw	r16, r28
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	a9 01       	movw	r20, r18
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	cb 01       	movw	r24, r22
     796:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	
	return 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	08 95       	ret

000007b0 <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
	ASYNC(self->button, buttonCheckerLR, 0);
     7bc:	fc 01       	movw	r30, r24
     7be:	04 81       	ldd	r16, Z+4	; 0x04
     7c0:	15 81       	ldd	r17, Z+5	; 0x05
     7c2:	c1 2c       	mov	r12, r1
     7c4:	d1 2c       	mov	r13, r1
     7c6:	85 ef       	ldi	r24, 0xF5	; 245
     7c8:	e8 2e       	mov	r14, r24
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	f8 2e       	mov	r15, r24
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	a9 01       	movw	r20, r18
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	cb 01       	movw	r24, r22
     7da:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	return 0;
}
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	08 95       	ret

000007f0 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
	ASYNC(self->button, buttonCheckerUDC, 0);
     7fc:	fc 01       	movw	r30, r24
     7fe:	04 81       	ldd	r16, Z+4	; 0x04
     800:	15 81       	ldd	r17, Z+5	; 0x05
     802:	c1 2c       	mov	r12, r1
     804:	d1 2c       	mov	r13, r1
     806:	85 e9       	ldi	r24, 0x95	; 149
     808:	e8 2e       	mov	r14, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	f8 2e       	mov	r15, r24
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	a9 01       	movw	r20, r18
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	cb 01       	movw	r24, r22
     81a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
	return 0;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <main>:
#include "avr_init.h"
#include "writeBit.h"
#include "interruptHandler.h"


int main(void) {
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	ea 97       	sbiw	r28, 0x3a	; 58
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
	
	// Skapar Writebit-objekt för att kunna skriva/ta bort 1-bitar i PORTE.
	Writebit wbit4 = initWbit(4);
     848:	1f aa       	std	Y+55, r1	; 0x37
     84a:	1e aa       	std	Y+54, r1	; 0x36
     84c:	19 ae       	std	Y+57, r1	; 0x39
     84e:	18 ae       	std	Y+56, r1	; 0x38
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	8a af       	std	Y+58, r24	; 0x3a
	Writebit wbit6 = initWbit(6);
     854:	1a aa       	std	Y+50, r1	; 0x32
     856:	19 aa       	std	Y+49, r1	; 0x31
     858:	1c aa       	std	Y+52, r1	; 0x34
     85a:	1b aa       	std	Y+51, r1	; 0x33
     85c:	86 e0       	ldi	r24, 0x06	; 6
     85e:	8d ab       	std	Y+53, r24	; 0x35
	
	
	// Skapar två pulsgeneratorer (pulseGen1, pulseGen2) som styr bit 4 och bit 6 i PORTE.
	// De får en pekare till wbit så att de kan anropa writeBit-funktioner.
	Pulsegenerator pulseGen1 = initPulse(&wbit4);
     860:	19 8e       	std	Y+25, r1	; 0x19
     862:	18 8e       	std	Y+24, r1	; 0x18
     864:	1b 8e       	std	Y+27, r1	; 0x1b
     866:	1a 8e       	std	Y+26, r1	; 0x1a
     868:	1c 8e       	std	Y+28, r1	; 0x1c
     86a:	1d 8e       	std	Y+29, r1	; 0x1d
     86c:	1e 8e       	std	Y+30, r1	; 0x1e
     86e:	ce 01       	movw	r24, r28
     870:	c6 96       	adiw	r24, 0x36	; 54
     872:	98 a3       	std	Y+32, r25	; 0x20
     874:	8f 8f       	std	Y+31, r24	; 0x1f
     876:	19 a2       	std	Y+33, r1	; 0x21
	Pulsegenerator pulseGen2 = initPulse(&wbit6);
     878:	1f 86       	std	Y+15, r1	; 0x0f
     87a:	1e 86       	std	Y+14, r1	; 0x0e
     87c:	19 8a       	std	Y+17, r1	; 0x11
     87e:	18 8a       	std	Y+16, r1	; 0x10
     880:	1a 8a       	std	Y+18, r1	; 0x12
     882:	1b 8a       	std	Y+19, r1	; 0x13
     884:	1c 8a       	std	Y+20, r1	; 0x14
     886:	05 97       	sbiw	r24, 0x05	; 5
     888:	9e 8b       	std	Y+22, r25	; 0x16
     88a:	8d 8b       	std	Y+21, r24	; 0x15
     88c:	1f 8a       	std	Y+23, r1	; 0x17
	
	// Skapar ett GUI-objekt som refererar båda pulsgeneratorerna,
	// för att kunna visa och styra deras frekvenser på LCD.
	GUI gui = initGUI(&pulseGen1, &pulseGen2);
     88e:	1b a2       	std	Y+35, r1	; 0x23
     890:	1a a2       	std	Y+34, r1	; 0x22
     892:	1d a2       	std	Y+37, r1	; 0x25
     894:	1c a2       	std	Y+36, r1	; 0x24
     896:	49 97       	sbiw	r24, 0x19	; 25
     898:	9f a3       	std	Y+39, r25	; 0x27
     89a:	8e a3       	std	Y+38, r24	; 0x26
     89c:	0a 97       	sbiw	r24, 0x0a	; 10
     89e:	99 a7       	std	Y+41, r25	; 0x29
     8a0:	88 a7       	std	Y+40, r24	; 0x28
     8a2:	1a a6       	std	Y+42, r1	; 0x2a
	
	// Skapar ett Button-objekt som kopplas till GUI för att byta generator/frekvens.
	Button button = initButton(&gui);
     8a4:	fe 01       	movw	r30, r28
     8a6:	31 96       	adiw	r30, 0x01	; 1
     8a8:	8d e0       	ldi	r24, 0x0D	; 13
     8aa:	df 01       	movw	r26, r30
     8ac:	1d 92       	st	X+, r1
     8ae:	8a 95       	dec	r24
     8b0:	e9 f7       	brne	.-6      	; 0x8ac <main+0x7c>
     8b2:	8e 01       	movw	r16, r28
     8b4:	0e 5d       	subi	r16, 0xDE	; 222
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	1e 83       	std	Y+6, r17	; 0x06
     8ba:	0d 83       	std	Y+5, r16	; 0x05
	
	// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
	Interrupthandler interrupt = initInterruptHandler(&button);
     8bc:	1c a6       	std	Y+44, r1	; 0x2c
     8be:	1b a6       	std	Y+43, r1	; 0x2b
     8c0:	1e a6       	std	Y+46, r1	; 0x2e
     8c2:	1d a6       	std	Y+45, r1	; 0x2d
     8c4:	f8 ab       	std	Y+48, r31	; 0x30
     8c6:	ef a7       	std	Y+47, r30	; 0x2f
	
	
	
	// Initiera timer/klocka via avr_init().
	avr_init();
     8c8:	0e 94 27 05 	call	0xa4e	; 0xa4e <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     8cc:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     8d0:	0e 94 ad 00 	call	0x15a	; 0x15a <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	68 ed       	ldi	r22, 0xD8	; 216
     8d8:	73 e0       	ldi	r23, 0x03	; 3
     8da:	ce 01       	movw	r24, r28
     8dc:	8b 96       	adiw	r24, 0x2b	; 43
     8de:	0e 94 61 11 	call	0x22c2	; 0x22c2 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     8e2:	42 e0       	ldi	r20, 0x02	; 2
     8e4:	68 ef       	ldi	r22, 0xF8	; 248
     8e6:	73 e0       	ldi	r23, 0x03	; 3
     8e8:	ce 01       	movw	r24, r28
     8ea:	8b 96       	adiw	r24, 0x2b	; 43
     8ec:	0e 94 61 11 	call	0x22c2	; 0x22c2 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	6d e9       	ldi	r22, 0x9D	; 157
     8f6:	73 e0       	ldi	r23, 0x03	; 3
     8f8:	c8 01       	movw	r24, r16
     8fa:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <tinytimber>
}
     8fe:	ea 96       	adiw	r28, 0x3a	; 58
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <setPulse>:
     914:	cf 92       	push	r12
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	8c 81       	ldd	r24, Y+4	; 0x04
     928:	0f 81       	ldd	r16, Y+7	; 0x07
     92a:	18 85       	ldd	r17, Y+8	; 0x08
     92c:	c1 2c       	mov	r12, r1
     92e:	d1 2c       	mov	r13, r1
     930:	88 23       	and	r24, r24
     932:	a1 f1       	breq	.+104    	; 0x99c <setPulse+0x88>
     934:	89 eb       	ldi	r24, 0xB9	; 185
     936:	e8 2e       	mov	r14, r24
     938:	81 e1       	ldi	r24, 0x11	; 17
     93a:	f8 2e       	mov	r15, r24
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	a9 01       	movw	r20, r18
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	cb 01       	movw	r24, r22
     948:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     94c:	6c 81       	ldd	r22, Y+4	; 0x04
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	84 ef       	ldi	r24, 0xF4	; 244
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 c8 11 	call	0x2390	; 0x2390 <__divmodhi4>
     958:	2d e7       	ldi	r18, 0x7D	; 125
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	db 01       	movw	r26, r22
     95e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__usmulhisi3>
     962:	95 95       	asr	r25
     964:	87 95       	ror	r24
     966:	77 95       	ror	r23
     968:	67 95       	ror	r22
     96a:	95 95       	asr	r25
     96c:	87 95       	ror	r24
     96e:	77 95       	ror	r23
     970:	67 95       	ror	r22
     972:	3a e8       	ldi	r19, 0x8A	; 138
     974:	e3 2e       	mov	r14, r19
     976:	34 e0       	ldi	r19, 0x04	; 4
     978:	f3 2e       	mov	r15, r19
     97a:	8e 01       	movw	r16, r28
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	a9 01       	movw	r20, r18
     982:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	08 95       	ret
     99c:	47 e9       	ldi	r20, 0x97	; 151
     99e:	e4 2e       	mov	r14, r20
     9a0:	41 e1       	ldi	r20, 0x11	; 17
     9a2:	f4 2e       	mov	r15, r20
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	a9 01       	movw	r20, r18
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	cb 01       	movw	r24, r22
     9b0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     9b4:	5a e8       	ldi	r21, 0x8A	; 138
     9b6:	e5 2e       	mov	r14, r21
     9b8:	54 e0       	ldi	r21, 0x04	; 4
     9ba:	f5 2e       	mov	r15, r21
     9bc:	8e 01       	movw	r16, r28
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	a9 01       	movw	r20, r18
     9c4:	62 e1       	ldi	r22, 0x12	; 18
     9c6:	7a e7       	ldi	r23, 0x7A	; 122
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     9d0:	da cf       	rjmp	.-76     	; 0x986 <setPulse+0x72>

000009d2 <getFrec>:
     9d2:	fc 01       	movw	r30, r24
     9d4:	84 81       	ldd	r24, Z+4	; 0x04
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	08 95       	ret

000009da <FrecInc>:
     9da:	fc 01       	movw	r30, r24
     9dc:	94 81       	ldd	r25, Z+4	; 0x04
     9de:	93 36       	cpi	r25, 0x63	; 99
     9e0:	10 f4       	brcc	.+4      	; 0x9e6 <FrecInc+0xc>
     9e2:	9f 5f       	subi	r25, 0xFF	; 255
     9e4:	94 83       	std	Z+4, r25	; 0x04
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	08 95       	ret

000009ec <FrecDec>:
     9ec:	fc 01       	movw	r30, r24
     9ee:	94 81       	ldd	r25, Z+4	; 0x04
     9f0:	99 23       	and	r25, r25
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <FrecDec+0xc>
     9f4:	91 50       	subi	r25, 0x01	; 1
     9f6:	94 83       	std	Z+4, r25	; 0x04
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	08 95       	ret

000009fe <FrecReset>:
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	fc 01       	movw	r30, r24
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
     a0e:	81 11       	cpse	r24, r1
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <FrecReset+0x2a>
     a12:	85 81       	ldd	r24, Z+5	; 0x05
     a14:	84 83       	std	Z+4, r24	; 0x04
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret
     a28:	85 83       	std	Z+5, r24	; 0x05
     a2a:	14 82       	std	Z+4, r1	; 0x04
     a2c:	07 81       	ldd	r16, Z+7	; 0x07
     a2e:	10 85       	ldd	r17, Z+8	; 0x08
     a30:	c1 2c       	mov	r12, r1
     a32:	d1 2c       	mov	r13, r1
     a34:	87 e9       	ldi	r24, 0x97	; 151
     a36:	e8 2e       	mov	r14, r24
     a38:	81 e1       	ldi	r24, 0x11	; 17
     a3a:	f8 2e       	mov	r15, r24
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	a9 01       	movw	r20, r18
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	cb 01       	movw	r24, r22
     a48:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
     a4c:	e4 cf       	rjmp	.-56     	; 0xa16 <FrecReset+0x18>

00000a4e <avr_init>:
     a4e:	e1 e6       	ldi	r30, 0x61	; 97
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 e8       	ldi	r24, 0x80	; 128
     a54:	80 83       	st	Z, r24
     a56:	10 82       	st	Z, r1
     a58:	27 98       	cbi	0x04, 7	; 4
     a5a:	2f 9a       	sbi	0x05, 7	; 5
     a5c:	e1 e8       	ldi	r30, 0x81	; 129
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8d 60       	ori	r24, 0x0D	; 13
     a64:	80 83       	st	Z, r24
     a66:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a6a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a6e:	ef e6       	ldi	r30, 0x6F	; 111
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	82 60       	ori	r24, 0x02	; 2
     a76:	80 83       	st	Z, r24
     a78:	82 ec       	ldi	r24, 0xC2	; 194
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     a80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     a84:	08 95       	ret

00000a86 <initialize>:
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <initialize+0x6>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <initialize+0x8>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	8f e0       	ldi	r24, 0x0F	; 15
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	2f ee       	ldi	r18, 0xEF	; 239
     a98:	32 e0       	ldi	r19, 0x02	; 2
     a9a:	fc 01       	movw	r30, r24
     a9c:	70 97       	sbiw	r30, 0x10	; 16
     a9e:	91 83       	std	Z+1, r25	; 0x01
     aa0:	80 83       	st	Z, r24
     aa2:	40 96       	adiw	r24, 0x10	; 16
     aa4:	82 17       	cp	r24, r18
     aa6:	93 07       	cpc	r25, r19
     aa8:	c1 f7       	brne	.-16     	; 0xa9a <initialize+0x14>
     aaa:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     aae:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     ab2:	ea e4       	ldi	r30, 0x4A	; 74
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	87 e6       	ldi	r24, 0x67	; 103
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	80 83       	st	Z, r24
     abe:	84 e8       	ldi	r24, 0x84	; 132
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	96 8f       	std	Z+30, r25	; 0x1e
     ac4:	85 8f       	std	Z+29, r24	; 0x1d
     ac6:	a1 ea       	ldi	r26, 0xA1	; 161
     ac8:	b1 e0       	ldi	r27, 0x01	; 1
     aca:	b3 af       	std	Z+59, r27	; 0x3b
     acc:	a2 af       	std	Z+58, r26	; 0x3a
     ace:	1d 92       	st	X+, r1
     ad0:	1c 92       	st	X, r1
     ad2:	fa 83       	std	Y+2, r31	; 0x02
     ad4:	e9 83       	std	Y+1, r30	; 0x01
     ad6:	eb e4       	ldi	r30, 0x4B	; 75
     ad8:	f3 e0       	ldi	r31, 0x03	; 3
     ada:	fc 83       	std	Y+4, r31	; 0x04
     adc:	eb 83       	std	Y+3, r30	; 0x03
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	06 96       	adiw	r24, 0x06	; 6
     ae4:	0e 94 47 12 	call	0x248e	; 0x248e <setjmp>
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	e9 81       	ldd	r30, Y+1	; 0x01
     aee:	fa 81       	ldd	r31, Y+2	; 0x02
     af0:	97 8b       	std	Z+23, r25	; 0x17
     af2:	86 8b       	std	Z+22, r24	; 0x16
     af4:	91 8f       	std	Z+25, r25	; 0x19
     af6:	80 8f       	std	Z+24, r24	; 0x18
     af8:	86 ee       	ldi	r24, 0xE6	; 230
     afa:	90 e1       	ldi	r25, 0x10	; 16
     afc:	94 8f       	std	Z+28, r25	; 0x1c
     afe:	83 8f       	std	Z+27, r24	; 0x1b
     b00:	15 82       	std	Z+5, r1	; 0x05
     b02:	14 82       	std	Z+4, r1	; 0x04
     b04:	7d 96       	adiw	r30, 0x1d	; 29
     b06:	fa 83       	std	Y+2, r31	; 0x02
     b08:	e9 83       	std	Y+1, r30	; 0x01
     b0a:	eb 81       	ldd	r30, Y+3	; 0x03
     b0c:	fc 81       	ldd	r31, Y+4	; 0x04
     b0e:	e0 5a       	subi	r30, 0xA0	; 160
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	fc 83       	std	Y+4, r31	; 0x04
     b14:	eb 83       	std	Y+3, r30	; 0x03
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	8e 5b       	subi	r24, 0xBE	; 190
     b1c:	91 40       	sbci	r25, 0x01	; 1
     b1e:	f9 f6       	brne	.-66     	; 0xade <initialize+0x58>
     b20:	e2 ee       	ldi	r30, 0xE2	; 226
     b22:	f1 e0       	ldi	r31, 0x01	; 1
     b24:	11 82       	std	Z+1, r1	; 0x01
     b26:	10 82       	st	Z, r1
     b28:	15 82       	std	Z+5, r1	; 0x05
     b2a:	14 82       	std	Z+4, r1	; 0x04
     b2c:	13 82       	std	Z+3, r1	; 0x03
     b2e:	12 82       	std	Z+2, r1	; 0x02
     b30:	e1 e6       	ldi	r30, 0x61	; 97
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 e8       	ldi	r24, 0x80	; 128
     b36:	80 83       	st	Z, r24
     b38:	10 82       	st	Z, r1
     b3a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b42:	84 e0       	ldi	r24, 0x04	; 4
     b44:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <dispatch>:
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	00 d0       	rcall	.+0      	; 0xb62 <dispatch+0x6>
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b6e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b72:	06 96       	adiw	r24, 0x06	; 6
     b74:	0e 94 47 12 	call	0x248e	; 0x248e <setjmp>
     b78:	89 2b       	or	r24, r25
     b7a:	29 f0       	breq	.+10     	; 0xb86 <dispatch+0x2a>
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b8e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	06 96       	adiw	r24, 0x06	; 6
     b98:	0e 94 67 12 	call	0x24ce	; 0x24ce <longjmp>

00000b9c <schedule>:
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     ba8:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	f1 f0       	breq	.+60     	; 0xbec <schedule+0x50>
     bb0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     bb4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	c1 f0       	breq	.+48     	; 0xbec <schedule+0x50>
     bbc:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     bc0:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     bc4:	aa 81       	ldd	r26, Y+2	; 0x02
     bc6:	bb 81       	ldd	r27, Y+3	; 0x03
     bc8:	10 97       	sbiw	r26, 0x00	; 0
     bca:	a9 f0       	breq	.+42     	; 0xbf6 <schedule+0x5a>
     bcc:	46 81       	ldd	r20, Z+6	; 0x06
     bce:	57 81       	ldd	r21, Z+7	; 0x07
     bd0:	60 85       	ldd	r22, Z+8	; 0x08
     bd2:	71 85       	ldd	r23, Z+9	; 0x09
     bd4:	16 96       	adiw	r26, 0x06	; 6
     bd6:	0d 91       	ld	r16, X+
     bd8:	1d 91       	ld	r17, X+
     bda:	2d 91       	ld	r18, X+
     bdc:	3c 91       	ld	r19, X
     bde:	19 97       	sbiw	r26, 0x09	; 9
     be0:	40 1b       	sub	r20, r16
     be2:	51 0b       	sbc	r21, r17
     be4:	62 0b       	sbc	r22, r18
     be6:	73 0b       	sbc	r23, r19
     be8:	77 fd       	sbrc	r23, 7
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <schedule+0x5a>
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret
     bf6:	fc 01       	movw	r30, r24
     bf8:	20 81       	ld	r18, Z
     bfa:	31 81       	ldd	r19, Z+1	; 0x01
     bfc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     c00:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     c04:	d1 83       	std	Z+1, r29	; 0x01
     c06:	c0 83       	st	Z, r28
     c08:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     c0c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <dispatch>

00000c1c <dequeue.part.0>:
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     c22:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     c26:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	83 bf       	out	0x33, r24	; 51
     c2e:	88 95       	sleep
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <dequeue.part.0+0x10>

00000c32 <__vector_1>:
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
     c54:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     c58:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     c5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c64:	c9 01       	movw	r24, r18
     c66:	03 2e       	mov	r0, r19
     c68:	00 0c       	add	r0, r0
     c6a:	aa 0b       	sbc	r26, r26
     c6c:	bb 0b       	sbc	r27, r27
     c6e:	dc 01       	movw	r26, r24
     c70:	99 27       	eor	r25, r25
     c72:	88 27       	eor	r24, r24
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	84 2b       	or	r24, r20
     c7a:	95 2b       	or	r25, r21
     c7c:	a6 2b       	or	r26, r22
     c7e:	b7 2b       	or	r27, r23
     c80:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     c84:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     c88:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     c8c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     c90:	b0 9b       	sbis	0x16, 0	; 22
     c92:	1b c0       	rjmp	.+54     	; 0xcca <__vector_1+0x98>
     c94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c9c:	c9 01       	movw	r24, r18
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	09 2e       	mov	r0, r25
     ca2:	00 0c       	add	r0, r0
     ca4:	aa 0b       	sbc	r26, r26
     ca6:	bb 0b       	sbc	r27, r27
     ca8:	dc 01       	movw	r26, r24
     caa:	99 27       	eor	r25, r25
     cac:	88 27       	eor	r24, r24
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	84 2b       	or	r24, r20
     cb4:	95 2b       	or	r25, r21
     cb6:	a6 2b       	or	r26, r22
     cb8:	b7 2b       	or	r27, r23
     cba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     cbe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     cc2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     cc6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cca:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     cce:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     cd2:	30 97       	sbiw	r30, 0x00	; 0
     cd4:	39 f0       	breq	.+14     	; 0xce4 <__vector_1+0xb2>
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     cde:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     ce2:	09 95       	icall
     ce4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	bf 91       	pop	r27
     cee:	af 91       	pop	r26
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	7f 91       	pop	r23
     cf6:	6f 91       	pop	r22
     cf8:	5f 91       	pop	r21
     cfa:	4f 91       	pop	r20
     cfc:	3f 91       	pop	r19
     cfe:	2f 91       	pop	r18
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <__vector_2>:
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
     d2c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     d30:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     d34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d3c:	c9 01       	movw	r24, r18
     d3e:	03 2e       	mov	r0, r19
     d40:	00 0c       	add	r0, r0
     d42:	aa 0b       	sbc	r26, r26
     d44:	bb 0b       	sbc	r27, r27
     d46:	dc 01       	movw	r26, r24
     d48:	99 27       	eor	r25, r25
     d4a:	88 27       	eor	r24, r24
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	84 2b       	or	r24, r20
     d52:	95 2b       	or	r25, r21
     d54:	a6 2b       	or	r26, r22
     d56:	b7 2b       	or	r27, r23
     d58:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d5c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d60:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d64:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     d68:	b0 9b       	sbis	0x16, 0	; 22
     d6a:	1b c0       	rjmp	.+54     	; 0xda2 <__vector_2+0x98>
     d6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d74:	c9 01       	movw	r24, r18
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	09 2e       	mov	r0, r25
     d7a:	00 0c       	add	r0, r0
     d7c:	aa 0b       	sbc	r26, r26
     d7e:	bb 0b       	sbc	r27, r27
     d80:	dc 01       	movw	r26, r24
     d82:	99 27       	eor	r25, r25
     d84:	88 27       	eor	r24, r24
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	84 2b       	or	r24, r20
     d8c:	95 2b       	or	r25, r21
     d8e:	a6 2b       	or	r26, r22
     d90:	b7 2b       	or	r27, r23
     d92:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d96:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d9a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d9e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     da2:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     da6:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     daa:	30 97       	sbiw	r30, 0x00	; 0
     dac:	39 f0       	breq	.+14     	; 0xdbc <__vector_2+0xb2>
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     db6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     dba:	09 95       	icall
     dbc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <__vector_3>:
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	3f 93       	push	r19
     df0:	4f 93       	push	r20
     df2:	5f 93       	push	r21
     df4:	6f 93       	push	r22
     df6:	7f 93       	push	r23
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	af 93       	push	r26
     dfe:	bf 93       	push	r27
     e00:	ef 93       	push	r30
     e02:	ff 93       	push	r31
     e04:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     e08:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     e0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e14:	c9 01       	movw	r24, r18
     e16:	03 2e       	mov	r0, r19
     e18:	00 0c       	add	r0, r0
     e1a:	aa 0b       	sbc	r26, r26
     e1c:	bb 0b       	sbc	r27, r27
     e1e:	dc 01       	movw	r26, r24
     e20:	99 27       	eor	r25, r25
     e22:	88 27       	eor	r24, r24
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	84 2b       	or	r24, r20
     e2a:	95 2b       	or	r25, r21
     e2c:	a6 2b       	or	r26, r22
     e2e:	b7 2b       	or	r27, r23
     e30:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e34:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e38:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e3c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e40:	b0 9b       	sbis	0x16, 0	; 22
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <__vector_3+0x98>
     e44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e4c:	c9 01       	movw	r24, r18
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	09 2e       	mov	r0, r25
     e52:	00 0c       	add	r0, r0
     e54:	aa 0b       	sbc	r26, r26
     e56:	bb 0b       	sbc	r27, r27
     e58:	dc 01       	movw	r26, r24
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	84 2b       	or	r24, r20
     e64:	95 2b       	or	r25, r21
     e66:	a6 2b       	or	r26, r22
     e68:	b7 2b       	or	r27, r23
     e6a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e6e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e72:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e76:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e7a:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     e7e:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     e82:	30 97       	sbiw	r30, 0x00	; 0
     e84:	39 f0       	breq	.+14     	; 0xe94 <__vector_3+0xb2>
     e86:	62 e0       	ldi	r22, 0x02	; 2
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     e8e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     e92:	09 95       	icall
     e94:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_4>:
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     ee0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     ee4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ee8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eec:	c9 01       	movw	r24, r18
     eee:	03 2e       	mov	r0, r19
     ef0:	00 0c       	add	r0, r0
     ef2:	aa 0b       	sbc	r26, r26
     ef4:	bb 0b       	sbc	r27, r27
     ef6:	dc 01       	movw	r26, r24
     ef8:	99 27       	eor	r25, r25
     efa:	88 27       	eor	r24, r24
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	84 2b       	or	r24, r20
     f02:	95 2b       	or	r25, r21
     f04:	a6 2b       	or	r26, r22
     f06:	b7 2b       	or	r27, r23
     f08:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f0c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f10:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f14:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f18:	b0 9b       	sbis	0x16, 0	; 22
     f1a:	1b c0       	rjmp	.+54     	; 0xf52 <__vector_4+0x98>
     f1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f24:	c9 01       	movw	r24, r18
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	09 2e       	mov	r0, r25
     f2a:	00 0c       	add	r0, r0
     f2c:	aa 0b       	sbc	r26, r26
     f2e:	bb 0b       	sbc	r27, r27
     f30:	dc 01       	movw	r26, r24
     f32:	99 27       	eor	r25, r25
     f34:	88 27       	eor	r24, r24
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	84 2b       	or	r24, r20
     f3c:	95 2b       	or	r25, r21
     f3e:	a6 2b       	or	r26, r22
     f40:	b7 2b       	or	r27, r23
     f42:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f46:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f4a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f4e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f52:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     f56:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	39 f0       	breq	.+14     	; 0xf6c <__vector_4+0xb2>
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     f66:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     f6a:	09 95       	icall
     f6c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <__vector_5>:
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
     fb8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
     fbc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc4:	c9 01       	movw	r24, r18
     fc6:	03 2e       	mov	r0, r19
     fc8:	00 0c       	add	r0, r0
     fca:	aa 0b       	sbc	r26, r26
     fcc:	bb 0b       	sbc	r27, r27
     fce:	dc 01       	movw	r26, r24
     fd0:	99 27       	eor	r25, r25
     fd2:	88 27       	eor	r24, r24
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	84 2b       	or	r24, r20
     fda:	95 2b       	or	r25, r21
     fdc:	a6 2b       	or	r26, r22
     fde:	b7 2b       	or	r27, r23
     fe0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     fe4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     fe8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     fec:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ff0:	b0 9b       	sbis	0x16, 0	; 22
     ff2:	1b c0       	rjmp	.+54     	; 0x102a <__vector_5+0x98>
     ff4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ff8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ffc:	c9 01       	movw	r24, r18
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	09 2e       	mov	r0, r25
    1002:	00 0c       	add	r0, r0
    1004:	aa 0b       	sbc	r26, r26
    1006:	bb 0b       	sbc	r27, r27
    1008:	dc 01       	movw	r26, r24
    100a:	99 27       	eor	r25, r25
    100c:	88 27       	eor	r24, r24
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	84 2b       	or	r24, r20
    1014:	95 2b       	or	r25, r21
    1016:	a6 2b       	or	r26, r22
    1018:	b7 2b       	or	r27, r23
    101a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    101e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1022:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1026:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    102a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
    102e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
    1032:	30 97       	sbiw	r30, 0x00	; 0
    1034:	39 f0       	breq	.+14     	; 0x1044 <__vector_5+0xb2>
    1036:	64 e0       	ldi	r22, 0x04	; 4
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
    103e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
    1042:	09 95       	icall
    1044:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_10>:
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1090:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1094:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1098:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    109c:	c9 01       	movw	r24, r18
    109e:	03 2e       	mov	r0, r19
    10a0:	00 0c       	add	r0, r0
    10a2:	aa 0b       	sbc	r26, r26
    10a4:	bb 0b       	sbc	r27, r27
    10a6:	dc 01       	movw	r26, r24
    10a8:	99 27       	eor	r25, r25
    10aa:	88 27       	eor	r24, r24
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	84 2b       	or	r24, r20
    10b2:	95 2b       	or	r25, r21
    10b4:	a6 2b       	or	r26, r22
    10b6:	b7 2b       	or	r27, r23
    10b8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    10bc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    10c0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    10c4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    10c8:	b0 9b       	sbis	0x16, 0	; 22
    10ca:	1b c0       	rjmp	.+54     	; 0x1102 <__vector_10+0x98>
    10cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d4:	c9 01       	movw	r24, r18
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	09 2e       	mov	r0, r25
    10da:	00 0c       	add	r0, r0
    10dc:	aa 0b       	sbc	r26, r26
    10de:	bb 0b       	sbc	r27, r27
    10e0:	dc 01       	movw	r26, r24
    10e2:	99 27       	eor	r25, r25
    10e4:	88 27       	eor	r24, r24
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	84 2b       	or	r24, r20
    10ec:	95 2b       	or	r25, r21
    10ee:	a6 2b       	or	r26, r22
    10f0:	b7 2b       	or	r27, r23
    10f2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    10f6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    10fa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    10fe:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1102:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
    1106:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
    110a:	30 97       	sbiw	r30, 0x00	; 0
    110c:	39 f0       	breq	.+14     	; 0x111c <__vector_10+0xb2>
    110e:	65 e0       	ldi	r22, 0x05	; 5
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
    1116:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
    111a:	09 95       	icall
    111c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <__vector_11>:
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	5f 93       	push	r21
    1154:	6f 93       	push	r22
    1156:	7f 93       	push	r23
    1158:	8f 93       	push	r24
    115a:	9f 93       	push	r25
    115c:	af 93       	push	r26
    115e:	bf 93       	push	r27
    1160:	ef 93       	push	r30
    1162:	ff 93       	push	r31
    1164:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1168:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    116c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1170:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1174:	c9 01       	movw	r24, r18
    1176:	03 2e       	mov	r0, r19
    1178:	00 0c       	add	r0, r0
    117a:	aa 0b       	sbc	r26, r26
    117c:	bb 0b       	sbc	r27, r27
    117e:	dc 01       	movw	r26, r24
    1180:	99 27       	eor	r25, r25
    1182:	88 27       	eor	r24, r24
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	84 2b       	or	r24, r20
    118a:	95 2b       	or	r25, r21
    118c:	a6 2b       	or	r26, r22
    118e:	b7 2b       	or	r27, r23
    1190:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1194:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1198:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    119c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    11a0:	b0 9b       	sbis	0x16, 0	; 22
    11a2:	1b c0       	rjmp	.+54     	; 0x11da <__vector_11+0x98>
    11a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ac:	c9 01       	movw	r24, r18
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	09 2e       	mov	r0, r25
    11b2:	00 0c       	add	r0, r0
    11b4:	aa 0b       	sbc	r26, r26
    11b6:	bb 0b       	sbc	r27, r27
    11b8:	dc 01       	movw	r26, r24
    11ba:	99 27       	eor	r25, r25
    11bc:	88 27       	eor	r24, r24
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	84 2b       	or	r24, r20
    11c4:	95 2b       	or	r25, r21
    11c6:	a6 2b       	or	r26, r22
    11c8:	b7 2b       	or	r27, r23
    11ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    11ce:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    11d2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    11d6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    11da:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
    11de:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	39 f0       	breq	.+14     	; 0x11f4 <__vector_11+0xb2>
    11e6:	66 e0       	ldi	r22, 0x06	; 6
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
    11ee:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
    11f2:	09 95       	icall
    11f4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <__vector_12>:
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1240:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1244:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1248:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    124c:	c9 01       	movw	r24, r18
    124e:	03 2e       	mov	r0, r19
    1250:	00 0c       	add	r0, r0
    1252:	aa 0b       	sbc	r26, r26
    1254:	bb 0b       	sbc	r27, r27
    1256:	dc 01       	movw	r26, r24
    1258:	99 27       	eor	r25, r25
    125a:	88 27       	eor	r24, r24
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	84 2b       	or	r24, r20
    1262:	95 2b       	or	r25, r21
    1264:	a6 2b       	or	r26, r22
    1266:	b7 2b       	or	r27, r23
    1268:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    126c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1270:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1274:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1278:	b0 9b       	sbis	0x16, 0	; 22
    127a:	1b c0       	rjmp	.+54     	; 0x12b2 <__vector_12+0x98>
    127c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1280:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1284:	c9 01       	movw	r24, r18
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	09 2e       	mov	r0, r25
    128a:	00 0c       	add	r0, r0
    128c:	aa 0b       	sbc	r26, r26
    128e:	bb 0b       	sbc	r27, r27
    1290:	dc 01       	movw	r26, r24
    1292:	99 27       	eor	r25, r25
    1294:	88 27       	eor	r24, r24
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	84 2b       	or	r24, r20
    129c:	95 2b       	or	r25, r21
    129e:	a6 2b       	or	r26, r22
    12a0:	b7 2b       	or	r27, r23
    12a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12a6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12aa:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12ae:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12b2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    12b6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	39 f0       	breq	.+14     	; 0x12cc <__vector_12+0xb2>
    12be:	67 e0       	ldi	r22, 0x07	; 7
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    12c6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    12ca:	09 95       	icall
    12cc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	bf 91       	pop	r27
    12d6:	af 91       	pop	r26
    12d8:	9f 91       	pop	r25
    12da:	8f 91       	pop	r24
    12dc:	7f 91       	pop	r23
    12de:	6f 91       	pop	r22
    12e0:	5f 91       	pop	r21
    12e2:	4f 91       	pop	r20
    12e4:	3f 91       	pop	r19
    12e6:	2f 91       	pop	r18
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <__vector_13>:
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	0f 92       	push	r0
    12fa:	11 24       	eor	r1, r1
    12fc:	2f 93       	push	r18
    12fe:	3f 93       	push	r19
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31
    1314:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1318:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    131c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1320:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1324:	c9 01       	movw	r24, r18
    1326:	03 2e       	mov	r0, r19
    1328:	00 0c       	add	r0, r0
    132a:	aa 0b       	sbc	r26, r26
    132c:	bb 0b       	sbc	r27, r27
    132e:	dc 01       	movw	r26, r24
    1330:	99 27       	eor	r25, r25
    1332:	88 27       	eor	r24, r24
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	84 2b       	or	r24, r20
    133a:	95 2b       	or	r25, r21
    133c:	a6 2b       	or	r26, r22
    133e:	b7 2b       	or	r27, r23
    1340:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1344:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1348:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    134c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1350:	b0 9b       	sbis	0x16, 0	; 22
    1352:	1b c0       	rjmp	.+54     	; 0x138a <__vector_13+0x98>
    1354:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1358:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    135c:	c9 01       	movw	r24, r18
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	09 2e       	mov	r0, r25
    1362:	00 0c       	add	r0, r0
    1364:	aa 0b       	sbc	r26, r26
    1366:	bb 0b       	sbc	r27, r27
    1368:	dc 01       	movw	r26, r24
    136a:	99 27       	eor	r25, r25
    136c:	88 27       	eor	r24, r24
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	84 2b       	or	r24, r20
    1374:	95 2b       	or	r25, r21
    1376:	a6 2b       	or	r26, r22
    1378:	b7 2b       	or	r27, r23
    137a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    137e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1382:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1386:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    138a:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    138e:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	39 f0       	breq	.+14     	; 0x13a4 <__vector_13+0xb2>
    1396:	68 e0       	ldi	r22, 0x08	; 8
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    139e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    13a2:	09 95       	icall
    13a4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <__vector_14>:
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    13f0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    13f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13fc:	c9 01       	movw	r24, r18
    13fe:	03 2e       	mov	r0, r19
    1400:	00 0c       	add	r0, r0
    1402:	aa 0b       	sbc	r26, r26
    1404:	bb 0b       	sbc	r27, r27
    1406:	dc 01       	movw	r26, r24
    1408:	99 27       	eor	r25, r25
    140a:	88 27       	eor	r24, r24
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	84 2b       	or	r24, r20
    1412:	95 2b       	or	r25, r21
    1414:	a6 2b       	or	r26, r22
    1416:	b7 2b       	or	r27, r23
    1418:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    141c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1420:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1424:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1428:	b0 9b       	sbis	0x16, 0	; 22
    142a:	1b c0       	rjmp	.+54     	; 0x1462 <__vector_14+0x98>
    142c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1430:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1434:	c9 01       	movw	r24, r18
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	09 2e       	mov	r0, r25
    143a:	00 0c       	add	r0, r0
    143c:	aa 0b       	sbc	r26, r26
    143e:	bb 0b       	sbc	r27, r27
    1440:	dc 01       	movw	r26, r24
    1442:	99 27       	eor	r25, r25
    1444:	88 27       	eor	r24, r24
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	84 2b       	or	r24, r20
    144c:	95 2b       	or	r25, r21
    144e:	a6 2b       	or	r26, r22
    1450:	b7 2b       	or	r27, r23
    1452:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1456:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    145a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    145e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1462:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    1466:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    146a:	30 97       	sbiw	r30, 0x00	; 0
    146c:	39 f0       	breq	.+14     	; 0x147c <__vector_14+0xb2>
    146e:	69 e0       	ldi	r22, 0x09	; 9
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    1476:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    147a:	09 95       	icall
    147c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <__vector_15>:
    14a2:	1f 92       	push	r1
    14a4:	0f 92       	push	r0
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	0f 92       	push	r0
    14aa:	11 24       	eor	r1, r1
    14ac:	2f 93       	push	r18
    14ae:	3f 93       	push	r19
    14b0:	4f 93       	push	r20
    14b2:	5f 93       	push	r21
    14b4:	6f 93       	push	r22
    14b6:	7f 93       	push	r23
    14b8:	8f 93       	push	r24
    14ba:	9f 93       	push	r25
    14bc:	af 93       	push	r26
    14be:	bf 93       	push	r27
    14c0:	ef 93       	push	r30
    14c2:	ff 93       	push	r31
    14c4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    14c8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    14cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d4:	c9 01       	movw	r24, r18
    14d6:	03 2e       	mov	r0, r19
    14d8:	00 0c       	add	r0, r0
    14da:	aa 0b       	sbc	r26, r26
    14dc:	bb 0b       	sbc	r27, r27
    14de:	dc 01       	movw	r26, r24
    14e0:	99 27       	eor	r25, r25
    14e2:	88 27       	eor	r24, r24
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	84 2b       	or	r24, r20
    14ea:	95 2b       	or	r25, r21
    14ec:	a6 2b       	or	r26, r22
    14ee:	b7 2b       	or	r27, r23
    14f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    14f4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    14f8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14fc:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1500:	b0 9b       	sbis	0x16, 0	; 22
    1502:	1b c0       	rjmp	.+54     	; 0x153a <__vector_15+0x98>
    1504:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1508:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    150c:	c9 01       	movw	r24, r18
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	09 2e       	mov	r0, r25
    1512:	00 0c       	add	r0, r0
    1514:	aa 0b       	sbc	r26, r26
    1516:	bb 0b       	sbc	r27, r27
    1518:	dc 01       	movw	r26, r24
    151a:	99 27       	eor	r25, r25
    151c:	88 27       	eor	r24, r24
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	84 2b       	or	r24, r20
    1524:	95 2b       	or	r25, r21
    1526:	a6 2b       	or	r26, r22
    1528:	b7 2b       	or	r27, r23
    152a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    152e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1532:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1536:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    153a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    153e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    1542:	30 97       	sbiw	r30, 0x00	; 0
    1544:	39 f0       	breq	.+14     	; 0x1554 <__vector_15+0xb2>
    1546:	6a e0       	ldi	r22, 0x0A	; 10
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    154e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    1552:	09 95       	icall
    1554:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1558:	ff 91       	pop	r31
    155a:	ef 91       	pop	r30
    155c:	bf 91       	pop	r27
    155e:	af 91       	pop	r26
    1560:	9f 91       	pop	r25
    1562:	8f 91       	pop	r24
    1564:	7f 91       	pop	r23
    1566:	6f 91       	pop	r22
    1568:	5f 91       	pop	r21
    156a:	4f 91       	pop	r20
    156c:	3f 91       	pop	r19
    156e:	2f 91       	pop	r18
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	0f 90       	pop	r0
    1576:	1f 90       	pop	r1
    1578:	18 95       	reti

0000157a <__vector_16>:
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	2f 93       	push	r18
    1586:	3f 93       	push	r19
    1588:	4f 93       	push	r20
    158a:	5f 93       	push	r21
    158c:	6f 93       	push	r22
    158e:	7f 93       	push	r23
    1590:	8f 93       	push	r24
    1592:	9f 93       	push	r25
    1594:	af 93       	push	r26
    1596:	bf 93       	push	r27
    1598:	ef 93       	push	r30
    159a:	ff 93       	push	r31
    159c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    15a0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    15a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15ac:	c9 01       	movw	r24, r18
    15ae:	03 2e       	mov	r0, r19
    15b0:	00 0c       	add	r0, r0
    15b2:	aa 0b       	sbc	r26, r26
    15b4:	bb 0b       	sbc	r27, r27
    15b6:	dc 01       	movw	r26, r24
    15b8:	99 27       	eor	r25, r25
    15ba:	88 27       	eor	r24, r24
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	84 2b       	or	r24, r20
    15c2:	95 2b       	or	r25, r21
    15c4:	a6 2b       	or	r26, r22
    15c6:	b7 2b       	or	r27, r23
    15c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    15cc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    15d0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    15d4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    15d8:	b0 9b       	sbis	0x16, 0	; 22
    15da:	1b c0       	rjmp	.+54     	; 0x1612 <__vector_16+0x98>
    15dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15e4:	c9 01       	movw	r24, r18
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	09 2e       	mov	r0, r25
    15ea:	00 0c       	add	r0, r0
    15ec:	aa 0b       	sbc	r26, r26
    15ee:	bb 0b       	sbc	r27, r27
    15f0:	dc 01       	movw	r26, r24
    15f2:	99 27       	eor	r25, r25
    15f4:	88 27       	eor	r24, r24
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	84 2b       	or	r24, r20
    15fc:	95 2b       	or	r25, r21
    15fe:	a6 2b       	or	r26, r22
    1600:	b7 2b       	or	r27, r23
    1602:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1606:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    160a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    160e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1612:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    1616:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    161a:	30 97       	sbiw	r30, 0x00	; 0
    161c:	39 f0       	breq	.+14     	; 0x162c <__vector_16+0xb2>
    161e:	6b e0       	ldi	r22, 0x0B	; 11
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    1626:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    162a:	09 95       	icall
    162c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <__vector_17>:
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	4f 93       	push	r20
    1662:	5f 93       	push	r21
    1664:	6f 93       	push	r22
    1666:	7f 93       	push	r23
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	af 93       	push	r26
    166e:	bf 93       	push	r27
    1670:	ef 93       	push	r30
    1672:	ff 93       	push	r31
    1674:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1678:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    167c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1680:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1684:	c9 01       	movw	r24, r18
    1686:	03 2e       	mov	r0, r19
    1688:	00 0c       	add	r0, r0
    168a:	aa 0b       	sbc	r26, r26
    168c:	bb 0b       	sbc	r27, r27
    168e:	dc 01       	movw	r26, r24
    1690:	99 27       	eor	r25, r25
    1692:	88 27       	eor	r24, r24
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	84 2b       	or	r24, r20
    169a:	95 2b       	or	r25, r21
    169c:	a6 2b       	or	r26, r22
    169e:	b7 2b       	or	r27, r23
    16a0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    16a4:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    16a8:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    16ac:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    16b0:	b0 9b       	sbis	0x16, 0	; 22
    16b2:	1b c0       	rjmp	.+54     	; 0x16ea <__vector_17+0x98>
    16b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16bc:	c9 01       	movw	r24, r18
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	09 2e       	mov	r0, r25
    16c2:	00 0c       	add	r0, r0
    16c4:	aa 0b       	sbc	r26, r26
    16c6:	bb 0b       	sbc	r27, r27
    16c8:	dc 01       	movw	r26, r24
    16ca:	99 27       	eor	r25, r25
    16cc:	88 27       	eor	r24, r24
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	84 2b       	or	r24, r20
    16d4:	95 2b       	or	r25, r21
    16d6:	a6 2b       	or	r26, r22
    16d8:	b7 2b       	or	r27, r23
    16da:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    16de:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    16e2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    16e6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    16ea:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    16ee:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	39 f0       	breq	.+14     	; 0x1704 <__vector_17+0xb2>
    16f6:	6c e0       	ldi	r22, 0x0C	; 12
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    16fe:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    1702:	09 95       	icall
    1704:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	bf 91       	pop	r27
    170e:	af 91       	pop	r26
    1710:	9f 91       	pop	r25
    1712:	8f 91       	pop	r24
    1714:	7f 91       	pop	r23
    1716:	6f 91       	pop	r22
    1718:	5f 91       	pop	r21
    171a:	4f 91       	pop	r20
    171c:	3f 91       	pop	r19
    171e:	2f 91       	pop	r18
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	0f 90       	pop	r0
    1726:	1f 90       	pop	r1
    1728:	18 95       	reti

0000172a <__vector_18>:
    172a:	1f 92       	push	r1
    172c:	0f 92       	push	r0
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	0f 92       	push	r0
    1732:	11 24       	eor	r1, r1
    1734:	2f 93       	push	r18
    1736:	3f 93       	push	r19
    1738:	4f 93       	push	r20
    173a:	5f 93       	push	r21
    173c:	6f 93       	push	r22
    173e:	7f 93       	push	r23
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
    174c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1750:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1754:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1758:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175c:	c9 01       	movw	r24, r18
    175e:	03 2e       	mov	r0, r19
    1760:	00 0c       	add	r0, r0
    1762:	aa 0b       	sbc	r26, r26
    1764:	bb 0b       	sbc	r27, r27
    1766:	dc 01       	movw	r26, r24
    1768:	99 27       	eor	r25, r25
    176a:	88 27       	eor	r24, r24
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	84 2b       	or	r24, r20
    1772:	95 2b       	or	r25, r21
    1774:	a6 2b       	or	r26, r22
    1776:	b7 2b       	or	r27, r23
    1778:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    177c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1780:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1784:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1788:	b0 9b       	sbis	0x16, 0	; 22
    178a:	1b c0       	rjmp	.+54     	; 0x17c2 <__vector_18+0x98>
    178c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1790:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1794:	c9 01       	movw	r24, r18
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	09 2e       	mov	r0, r25
    179a:	00 0c       	add	r0, r0
    179c:	aa 0b       	sbc	r26, r26
    179e:	bb 0b       	sbc	r27, r27
    17a0:	dc 01       	movw	r26, r24
    17a2:	99 27       	eor	r25, r25
    17a4:	88 27       	eor	r24, r24
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	84 2b       	or	r24, r20
    17ac:	95 2b       	or	r25, r21
    17ae:	a6 2b       	or	r26, r22
    17b0:	b7 2b       	or	r27, r23
    17b2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    17b6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    17ba:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    17be:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    17c2:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    17c6:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    17ca:	30 97       	sbiw	r30, 0x00	; 0
    17cc:	39 f0       	breq	.+14     	; 0x17dc <__vector_18+0xb2>
    17ce:	6d e0       	ldi	r22, 0x0D	; 13
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    17d6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    17da:	09 95       	icall
    17dc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    17e0:	ff 91       	pop	r31
    17e2:	ef 91       	pop	r30
    17e4:	bf 91       	pop	r27
    17e6:	af 91       	pop	r26
    17e8:	9f 91       	pop	r25
    17ea:	8f 91       	pop	r24
    17ec:	7f 91       	pop	r23
    17ee:	6f 91       	pop	r22
    17f0:	5f 91       	pop	r21
    17f2:	4f 91       	pop	r20
    17f4:	3f 91       	pop	r19
    17f6:	2f 91       	pop	r18
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <__vector_19>:
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1828:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    182c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1830:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1834:	c9 01       	movw	r24, r18
    1836:	03 2e       	mov	r0, r19
    1838:	00 0c       	add	r0, r0
    183a:	aa 0b       	sbc	r26, r26
    183c:	bb 0b       	sbc	r27, r27
    183e:	dc 01       	movw	r26, r24
    1840:	99 27       	eor	r25, r25
    1842:	88 27       	eor	r24, r24
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	84 2b       	or	r24, r20
    184a:	95 2b       	or	r25, r21
    184c:	a6 2b       	or	r26, r22
    184e:	b7 2b       	or	r27, r23
    1850:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1854:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1858:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    185c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1860:	b0 9b       	sbis	0x16, 0	; 22
    1862:	1b c0       	rjmp	.+54     	; 0x189a <__vector_19+0x98>
    1864:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1868:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    186c:	c9 01       	movw	r24, r18
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	09 2e       	mov	r0, r25
    1872:	00 0c       	add	r0, r0
    1874:	aa 0b       	sbc	r26, r26
    1876:	bb 0b       	sbc	r27, r27
    1878:	dc 01       	movw	r26, r24
    187a:	99 27       	eor	r25, r25
    187c:	88 27       	eor	r24, r24
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	84 2b       	or	r24, r20
    1884:	95 2b       	or	r25, r21
    1886:	a6 2b       	or	r26, r22
    1888:	b7 2b       	or	r27, r23
    188a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    188e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1892:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1896:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    189a:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    189e:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    18a2:	30 97       	sbiw	r30, 0x00	; 0
    18a4:	39 f0       	breq	.+14     	; 0x18b4 <__vector_19+0xb2>
    18a6:	6e e0       	ldi	r22, 0x0E	; 14
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    18ae:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    18b2:	09 95       	icall
    18b4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_20>:
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	2f 93       	push	r18
    18e6:	3f 93       	push	r19
    18e8:	4f 93       	push	r20
    18ea:	5f 93       	push	r21
    18ec:	6f 93       	push	r22
    18ee:	7f 93       	push	r23
    18f0:	8f 93       	push	r24
    18f2:	9f 93       	push	r25
    18f4:	af 93       	push	r26
    18f6:	bf 93       	push	r27
    18f8:	ef 93       	push	r30
    18fa:	ff 93       	push	r31
    18fc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1900:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1904:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1908:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    190c:	c9 01       	movw	r24, r18
    190e:	03 2e       	mov	r0, r19
    1910:	00 0c       	add	r0, r0
    1912:	aa 0b       	sbc	r26, r26
    1914:	bb 0b       	sbc	r27, r27
    1916:	dc 01       	movw	r26, r24
    1918:	99 27       	eor	r25, r25
    191a:	88 27       	eor	r24, r24
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	84 2b       	or	r24, r20
    1922:	95 2b       	or	r25, r21
    1924:	a6 2b       	or	r26, r22
    1926:	b7 2b       	or	r27, r23
    1928:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    192c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1930:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1934:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1938:	b0 9b       	sbis	0x16, 0	; 22
    193a:	1b c0       	rjmp	.+54     	; 0x1972 <__vector_20+0x98>
    193c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1940:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1944:	c9 01       	movw	r24, r18
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	09 2e       	mov	r0, r25
    194a:	00 0c       	add	r0, r0
    194c:	aa 0b       	sbc	r26, r26
    194e:	bb 0b       	sbc	r27, r27
    1950:	dc 01       	movw	r26, r24
    1952:	99 27       	eor	r25, r25
    1954:	88 27       	eor	r24, r24
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	84 2b       	or	r24, r20
    195c:	95 2b       	or	r25, r21
    195e:	a6 2b       	or	r26, r22
    1960:	b7 2b       	or	r27, r23
    1962:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1966:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    196a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    196e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1972:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    1976:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    197a:	30 97       	sbiw	r30, 0x00	; 0
    197c:	39 f0       	breq	.+14     	; 0x198c <__vector_20+0xb2>
    197e:	6f e0       	ldi	r22, 0x0F	; 15
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    1986:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    198a:	09 95       	icall
    198c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1990:	ff 91       	pop	r31
    1992:	ef 91       	pop	r30
    1994:	bf 91       	pop	r27
    1996:	af 91       	pop	r26
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	7f 91       	pop	r23
    199e:	6f 91       	pop	r22
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <__vector_21>:
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	2f 93       	push	r18
    19be:	3f 93       	push	r19
    19c0:	4f 93       	push	r20
    19c2:	5f 93       	push	r21
    19c4:	6f 93       	push	r22
    19c6:	7f 93       	push	r23
    19c8:	8f 93       	push	r24
    19ca:	9f 93       	push	r25
    19cc:	af 93       	push	r26
    19ce:	bf 93       	push	r27
    19d0:	ef 93       	push	r30
    19d2:	ff 93       	push	r31
    19d4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    19d8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    19dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19e4:	c9 01       	movw	r24, r18
    19e6:	03 2e       	mov	r0, r19
    19e8:	00 0c       	add	r0, r0
    19ea:	aa 0b       	sbc	r26, r26
    19ec:	bb 0b       	sbc	r27, r27
    19ee:	dc 01       	movw	r26, r24
    19f0:	99 27       	eor	r25, r25
    19f2:	88 27       	eor	r24, r24
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	84 2b       	or	r24, r20
    19fa:	95 2b       	or	r25, r21
    19fc:	a6 2b       	or	r26, r22
    19fe:	b7 2b       	or	r27, r23
    1a00:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1a04:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1a08:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1a0c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1a10:	b0 9b       	sbis	0x16, 0	; 22
    1a12:	1b c0       	rjmp	.+54     	; 0x1a4a <__vector_21+0x98>
    1a14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a1c:	c9 01       	movw	r24, r18
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	09 2e       	mov	r0, r25
    1a22:	00 0c       	add	r0, r0
    1a24:	aa 0b       	sbc	r26, r26
    1a26:	bb 0b       	sbc	r27, r27
    1a28:	dc 01       	movw	r26, r24
    1a2a:	99 27       	eor	r25, r25
    1a2c:	88 27       	eor	r24, r24
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	84 2b       	or	r24, r20
    1a34:	95 2b       	or	r25, r21
    1a36:	a6 2b       	or	r26, r22
    1a38:	b7 2b       	or	r27, r23
    1a3a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1a3e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1a42:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1a46:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1a4a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1a4e:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    1a52:	30 97       	sbiw	r30, 0x00	; 0
    1a54:	39 f0       	breq	.+14     	; 0x1a64 <__vector_21+0xb2>
    1a56:	60 e1       	ldi	r22, 0x10	; 16
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1a5e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    1a62:	09 95       	icall
    1a64:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	bf 91       	pop	r27
    1a6e:	af 91       	pop	r26
    1a70:	9f 91       	pop	r25
    1a72:	8f 91       	pop	r24
    1a74:	7f 91       	pop	r23
    1a76:	6f 91       	pop	r22
    1a78:	5f 91       	pop	r21
    1a7a:	4f 91       	pop	r20
    1a7c:	3f 91       	pop	r19
    1a7e:	2f 91       	pop	r18
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_22>:
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
    1aac:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1ab0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1ab4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ab8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1abc:	c9 01       	movw	r24, r18
    1abe:	03 2e       	mov	r0, r19
    1ac0:	00 0c       	add	r0, r0
    1ac2:	aa 0b       	sbc	r26, r26
    1ac4:	bb 0b       	sbc	r27, r27
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	99 27       	eor	r25, r25
    1aca:	88 27       	eor	r24, r24
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	84 2b       	or	r24, r20
    1ad2:	95 2b       	or	r25, r21
    1ad4:	a6 2b       	or	r26, r22
    1ad6:	b7 2b       	or	r27, r23
    1ad8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1adc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1ae0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1ae4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1ae8:	b0 9b       	sbis	0x16, 0	; 22
    1aea:	1b c0       	rjmp	.+54     	; 0x1b22 <__vector_22+0x98>
    1aec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1af0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1af4:	c9 01       	movw	r24, r18
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	09 2e       	mov	r0, r25
    1afa:	00 0c       	add	r0, r0
    1afc:	aa 0b       	sbc	r26, r26
    1afe:	bb 0b       	sbc	r27, r27
    1b00:	dc 01       	movw	r26, r24
    1b02:	99 27       	eor	r25, r25
    1b04:	88 27       	eor	r24, r24
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	84 2b       	or	r24, r20
    1b0c:	95 2b       	or	r25, r21
    1b0e:	a6 2b       	or	r26, r22
    1b10:	b7 2b       	or	r27, r23
    1b12:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1b16:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1b1a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1b1e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1b22:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    1b26:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	39 f0       	breq	.+14     	; 0x1b3c <__vector_22+0xb2>
    1b2e:	61 e1       	ldi	r22, 0x11	; 17
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    1b36:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    1b3a:	09 95       	icall
    1b3c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1b40:	ff 91       	pop	r31
    1b42:	ef 91       	pop	r30
    1b44:	bf 91       	pop	r27
    1b46:	af 91       	pop	r26
    1b48:	9f 91       	pop	r25
    1b4a:	8f 91       	pop	r24
    1b4c:	7f 91       	pop	r23
    1b4e:	6f 91       	pop	r22
    1b50:	5f 91       	pop	r21
    1b52:	4f 91       	pop	r20
    1b54:	3f 91       	pop	r19
    1b56:	2f 91       	pop	r18
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	0f 90       	pop	r0
    1b5e:	1f 90       	pop	r1
    1b60:	18 95       	reti

00001b62 <__vector_9>:
    1b62:	1f 92       	push	r1
    1b64:	0f 92       	push	r0
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	0f 92       	push	r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	2f 93       	push	r18
    1b6e:	3f 93       	push	r19
    1b70:	4f 93       	push	r20
    1b72:	5f 93       	push	r21
    1b74:	6f 93       	push	r22
    1b76:	7f 93       	push	r23
    1b78:	8f 93       	push	r24
    1b7a:	9f 93       	push	r25
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1b84:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    1b8e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    1b92:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1b96:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1b9a:	30 97       	sbiw	r30, 0x00	; 0
    1b9c:	39 f0       	breq	.+14     	; 0x1bac <__vector_9+0x4a>
    1b9e:	42 81       	ldd	r20, Z+2	; 0x02
    1ba0:	53 81       	ldd	r21, Z+3	; 0x03
    1ba2:	64 81       	ldd	r22, Z+4	; 0x04
    1ba4:	75 81       	ldd	r23, Z+5	; 0x05
    1ba6:	86 17       	cp	r24, r22
    1ba8:	97 07       	cpc	r25, r23
    1baa:	a1 f0       	breq	.+40     	; 0x1bd4 <__vector_9+0x72>
    1bac:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1bb0:	8d 7f       	andi	r24, 0xFD	; 253
    1bb2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	0f 90       	pop	r0
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	0f 90       	pop	r0
    1bd0:	1f 90       	pop	r1
    1bd2:	18 95       	reti
    1bd4:	ca 01       	movw	r24, r20
    1bd6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bda:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bde:	42 1b       	sub	r20, r18
    1be0:	53 0b       	sbc	r21, r19
    1be2:	41 30       	cpi	r20, 0x01	; 1
    1be4:	51 05       	cpc	r21, r1
    1be6:	51 f0       	breq	.+20     	; 0x1bfc <__vector_9+0x9a>
    1be8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1bec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1bf0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1bf4:	82 60       	ori	r24, 0x02	; 2
    1bf6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1bfa:	dd cf       	rjmp	.-70     	; 0x1bb6 <__vector_9+0x54>
    1bfc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c00:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	f0 cf       	rjmp	.-32     	; 0x1be8 <__vector_9+0x86>

00001c08 <__vector_7>:
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	2f 93       	push	r18
    1c28:	3f 93       	push	r19
    1c2a:	4f 93       	push	r20
    1c2c:	5f 93       	push	r21
    1c2e:	6f 93       	push	r22
    1c30:	7f 93       	push	r23
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	ef 93       	push	r30
    1c40:	ff 93       	push	r31
    1c42:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <__data_end>
    1c46:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <__data_end+0x1>
    1c4a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c4e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c52:	b0 99       	sbic	0x16, 0	; 22
    1c54:	98 c0       	rjmp	.+304    	; 0x1d86 <__vector_7+0x17e>
    1c56:	47 01       	movw	r8, r14
    1c58:	0f 2c       	mov	r0, r15
    1c5a:	00 0c       	add	r0, r0
    1c5c:	aa 08       	sbc	r10, r10
    1c5e:	bb 08       	sbc	r11, r11
    1c60:	54 01       	movw	r10, r8
    1c62:	99 24       	eor	r9, r9
    1c64:	88 24       	eor	r8, r8
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	88 2a       	or	r8, r24
    1c6c:	99 2a       	or	r9, r25
    1c6e:	aa 2a       	or	r10, r26
    1c70:	bb 2a       	or	r11, r27
    1c72:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <timerQ>
    1c76:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <timerQ+0x1>
    1c7a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msgQ>
    1c7e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msgQ+0x1>
    1c82:	20 97       	sbiw	r28, 0x00	; 0
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <__vector_7+0x80>
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <__vector_7+0xfe>
    1c88:	4a 81       	ldd	r20, Y+2	; 0x02
    1c8a:	5b 81       	ldd	r21, Y+3	; 0x03
    1c8c:	6c 81       	ldd	r22, Y+4	; 0x04
    1c8e:	7d 81       	ldd	r23, Y+5	; 0x05
    1c90:	8a 01       	movw	r16, r20
    1c92:	9b 01       	movw	r18, r22
    1c94:	08 19       	sub	r16, r8
    1c96:	19 09       	sbc	r17, r9
    1c98:	2a 09       	sbc	r18, r10
    1c9a:	3b 09       	sbc	r19, r11
    1c9c:	10 16       	cp	r1, r16
    1c9e:	11 06       	cpc	r1, r17
    1ca0:	12 06       	cpc	r1, r18
    1ca2:	13 06       	cpc	r1, r19
    1ca4:	0c f4       	brge	.+2      	; 0x1ca8 <__vector_7+0xa0>
    1ca6:	40 c0       	rjmp	.+128    	; 0x1d28 <__vector_7+0x120>
    1ca8:	d8 80       	ld	r13, Y
    1caa:	c9 80       	ldd	r12, Y+1	; 0x01
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	b9 f1       	breq	.+110    	; 0x1d1e <__vector_7+0x116>
    1cb0:	0e 81       	ldd	r16, Y+6	; 0x06
    1cb2:	1f 81       	ldd	r17, Y+7	; 0x07
    1cb4:	28 85       	ldd	r18, Y+8	; 0x08
    1cb6:	39 85       	ldd	r19, Y+9	; 0x09
    1cb8:	fc 01       	movw	r30, r24
    1cba:	46 81       	ldd	r20, Z+6	; 0x06
    1cbc:	57 81       	ldd	r21, Z+7	; 0x07
    1cbe:	60 85       	ldd	r22, Z+8	; 0x08
    1cc0:	71 85       	ldd	r23, Z+9	; 0x09
    1cc2:	04 17       	cp	r16, r20
    1cc4:	15 07       	cpc	r17, r21
    1cc6:	26 07       	cpc	r18, r22
    1cc8:	37 07       	cpc	r19, r23
    1cca:	4c f1       	brlt	.+82     	; 0x1d1e <__vector_7+0x116>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	0a c0       	rjmp	.+20     	; 0x1ce4 <__vector_7+0xdc>
    1cd0:	46 81       	ldd	r20, Z+6	; 0x06
    1cd2:	57 81       	ldd	r21, Z+7	; 0x07
    1cd4:	60 85       	ldd	r22, Z+8	; 0x08
    1cd6:	71 85       	ldd	r23, Z+9	; 0x09
    1cd8:	04 17       	cp	r16, r20
    1cda:	15 07       	cpc	r17, r21
    1cdc:	26 07       	cpc	r18, r22
    1cde:	37 07       	cpc	r19, r23
    1ce0:	dc f0       	brlt	.+54     	; 0x1d18 <__vector_7+0x110>
    1ce2:	df 01       	movw	r26, r30
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	89 f7       	brne	.-30     	; 0x1cd0 <__vector_7+0xc8>
    1cee:	19 82       	std	Y+1, r1	; 0x01
    1cf0:	18 82       	st	Y, r1
    1cf2:	cd 93       	st	X+, r28
    1cf4:	dc 93       	st	X, r29
    1cf6:	38 2f       	mov	r19, r24
    1cf8:	29 2f       	mov	r18, r25
    1cfa:	cd 2d       	mov	r28, r13
    1cfc:	dc 2d       	mov	r29, r12
    1cfe:	83 2f       	mov	r24, r19
    1d00:	92 2f       	mov	r25, r18
    1d02:	20 97       	sbiw	r28, 0x00	; 0
    1d04:	09 f6       	brne	.-126    	; 0x1c88 <__vector_7+0x80>
    1d06:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timerQ+0x1>
    1d0a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timerQ>
    1d0e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1d12:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1d16:	13 c0       	rjmp	.+38     	; 0x1d3e <__vector_7+0x136>
    1d18:	f9 83       	std	Y+1, r31	; 0x01
    1d1a:	e8 83       	st	Y, r30
    1d1c:	ea cf       	rjmp	.-44     	; 0x1cf2 <__vector_7+0xea>
    1d1e:	99 83       	std	Y+1, r25	; 0x01
    1d20:	88 83       	st	Y, r24
    1d22:	3c 2f       	mov	r19, r28
    1d24:	2d 2f       	mov	r18, r29
    1d26:	e9 cf       	rjmp	.-46     	; 0x1cfa <__vector_7+0xf2>
    1d28:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <timerQ+0x1>
    1d2c:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <timerQ>
    1d30:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    1d34:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    1d38:	e6 16       	cp	r14, r22
    1d3a:	f7 06       	cpc	r15, r23
    1d3c:	d9 f1       	breq	.+118    	; 0x1db4 <__vector_7+0x1ac>
    1d3e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d42:	8d 7f       	andi	r24, 0xFD	; 253
    1d44:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d48:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	bf 90       	pop	r11
    1d76:	af 90       	pop	r10
    1d78:	9f 90       	pop	r9
    1d7a:	8f 90       	pop	r8
    1d7c:	0f 90       	pop	r0
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	0f 90       	pop	r0
    1d82:	1f 90       	pop	r1
    1d84:	18 95       	reti
    1d86:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d8a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d8e:	47 01       	movw	r8, r14
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	88 1a       	sub	r8, r24
    1d94:	98 0a       	sbc	r9, r24
    1d96:	09 2c       	mov	r0, r9
    1d98:	00 0c       	add	r0, r0
    1d9a:	aa 08       	sbc	r10, r10
    1d9c:	bb 08       	sbc	r11, r11
    1d9e:	d4 01       	movw	r26, r8
    1da0:	99 27       	eor	r25, r25
    1da2:	88 27       	eor	r24, r24
    1da4:	49 01       	movw	r8, r18
    1da6:	a1 2c       	mov	r10, r1
    1da8:	b1 2c       	mov	r11, r1
    1daa:	88 2a       	or	r8, r24
    1dac:	99 2a       	or	r9, r25
    1dae:	aa 2a       	or	r10, r26
    1db0:	bb 2a       	or	r11, r27
    1db2:	5f cf       	rjmp	.-322    	; 0x1c72 <__vector_7+0x6a>
    1db4:	ca 01       	movw	r24, r20
    1db6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dba:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dbe:	42 1b       	sub	r20, r18
    1dc0:	53 0b       	sbc	r21, r19
    1dc2:	41 30       	cpi	r20, 0x01	; 1
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	51 f0       	breq	.+20     	; 0x1ddc <__vector_7+0x1d4>
    1dc8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1dcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1dd0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1dd4:	82 60       	ori	r24, 0x02	; 2
    1dd6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1dda:	b6 cf       	rjmp	.-148    	; 0x1d48 <__vector_7+0x140>
    1ddc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1de0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	f0 cf       	rjmp	.-32     	; 0x1dc8 <__vector_7+0x1c0>

00001de8 <async>:
    1de8:	3f 92       	push	r3
    1dea:	4f 92       	push	r4
    1dec:	5f 92       	push	r5
    1dee:	6f 92       	push	r6
    1df0:	7f 92       	push	r7
    1df2:	8f 92       	push	r8
    1df4:	9f 92       	push	r9
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	ef b7       	in	r30, 0x3f	; 63
    1e0c:	e0 78       	andi	r30, 0x80	; 128
    1e0e:	3e 2e       	mov	r3, r30
    1e10:	f8 94       	cli
    1e12:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    1e16:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1e1a:	20 97       	sbiw	r28, 0x00	; 0
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <async+0x38>
    1e1e:	52 c1       	rjmp	.+676    	; 0x20c4 <async+0x2dc>
    1e20:	e8 81       	ld	r30, Y
    1e22:	f9 81       	ldd	r31, Y+1	; 0x01
    1e24:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    1e28:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1e2c:	1b 87       	std	Y+11, r17	; 0x0b
    1e2e:	0a 87       	std	Y+10, r16	; 0x0a
    1e30:	fd 86       	std	Y+13, r15	; 0x0d
    1e32:	ec 86       	std	Y+12, r14	; 0x0c
    1e34:	df 86       	std	Y+15, r13	; 0x0f
    1e36:	ce 86       	std	Y+14, r12	; 0x0e
    1e38:	33 20       	and	r3, r3
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <async+0x56>
    1e3c:	6f c0       	rjmp	.+222    	; 0x1f1c <async+0x134>
    1e3e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e42:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e46:	02 80       	ldd	r0, Z+2	; 0x02
    1e48:	f3 81       	ldd	r31, Z+3	; 0x03
    1e4a:	e0 2d       	mov	r30, r0
    1e4c:	c2 80       	ldd	r12, Z+2	; 0x02
    1e4e:	d3 80       	ldd	r13, Z+3	; 0x03
    1e50:	e4 80       	ldd	r14, Z+4	; 0x04
    1e52:	f5 80       	ldd	r15, Z+5	; 0x05
    1e54:	c6 0e       	add	r12, r22
    1e56:	d7 1e       	adc	r13, r23
    1e58:	e8 1e       	adc	r14, r24
    1e5a:	f9 1e       	adc	r15, r25
    1e5c:	ca 82       	std	Y+2, r12	; 0x02
    1e5e:	db 82       	std	Y+3, r13	; 0x03
    1e60:	ec 82       	std	Y+4, r14	; 0x04
    1e62:	fd 82       	std	Y+5, r15	; 0x05
    1e64:	12 16       	cp	r1, r18
    1e66:	13 06       	cpc	r1, r19
    1e68:	14 06       	cpc	r1, r20
    1e6a:	15 06       	cpc	r1, r21
    1e6c:	0c f0       	brlt	.+2      	; 0x1e70 <async+0x88>
    1e6e:	f8 c0       	rjmp	.+496    	; 0x2060 <async+0x278>
    1e70:	da 01       	movw	r26, r20
    1e72:	c9 01       	movw	r24, r18
    1e74:	8c 01       	movw	r16, r24
    1e76:	9d 01       	movw	r18, r26
    1e78:	0c 0d       	add	r16, r12
    1e7a:	1d 1d       	adc	r17, r13
    1e7c:	2e 1d       	adc	r18, r14
    1e7e:	3f 1d       	adc	r19, r15
    1e80:	0e 83       	std	Y+6, r16	; 0x06
    1e82:	1f 83       	std	Y+7, r17	; 0x07
    1e84:	28 87       	std	Y+8, r18	; 0x08
    1e86:	39 87       	std	Y+9, r19	; 0x09
    1e88:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1e8c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1e90:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e94:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e98:	b0 99       	sbic	0x16, 0	; 22
    1e9a:	49 c0       	rjmp	.+146    	; 0x1f2e <async+0x146>
    1e9c:	2c 01       	movw	r4, r24
    1e9e:	09 2e       	mov	r0, r25
    1ea0:	00 0c       	add	r0, r0
    1ea2:	66 08       	sbc	r6, r6
    1ea4:	77 08       	sbc	r7, r7
    1ea6:	52 01       	movw	r10, r4
    1ea8:	99 24       	eor	r9, r9
    1eaa:	88 24       	eor	r8, r8
    1eac:	2b 01       	movw	r4, r22
    1eae:	61 2c       	mov	r6, r1
    1eb0:	71 2c       	mov	r7, r1
    1eb2:	48 28       	or	r4, r8
    1eb4:	59 28       	or	r5, r9
    1eb6:	6a 28       	or	r6, r10
    1eb8:	7b 28       	or	r7, r11
    1eba:	b7 01       	movw	r22, r14
    1ebc:	a6 01       	movw	r20, r12
    1ebe:	44 19       	sub	r20, r4
    1ec0:	55 09       	sbc	r21, r5
    1ec2:	66 09       	sbc	r22, r6
    1ec4:	77 09       	sbc	r23, r7
    1ec6:	14 16       	cp	r1, r20
    1ec8:	15 06       	cpc	r1, r21
    1eca:	16 06       	cpc	r1, r22
    1ecc:	17 06       	cpc	r1, r23
    1ece:	0c f0       	brlt	.+2      	; 0x1ed2 <async+0xea>
    1ed0:	68 c0       	rjmp	.+208    	; 0x1fa2 <async+0x1ba>
    1ed2:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <timerQ>
    1ed6:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <timerQ+0x1>
    1eda:	10 97       	sbiw	r26, 0x00	; 0
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <async+0xf8>
    1ede:	dc c0       	rjmp	.+440    	; 0x2098 <async+0x2b0>
    1ee0:	12 96       	adiw	r26, 0x02	; 2
    1ee2:	0d 91       	ld	r16, X+
    1ee4:	1d 91       	ld	r17, X+
    1ee6:	2d 91       	ld	r18, X+
    1ee8:	3c 91       	ld	r19, X
    1eea:	15 97       	sbiw	r26, 0x05	; 5
    1eec:	c0 16       	cp	r12, r16
    1eee:	d1 06       	cpc	r13, r17
    1ef0:	e2 06       	cpc	r14, r18
    1ef2:	f3 06       	cpc	r15, r19
    1ef4:	5c f4       	brge	.+22     	; 0x1f0c <async+0x124>
    1ef6:	d0 c0       	rjmp	.+416    	; 0x2098 <async+0x2b0>
    1ef8:	42 81       	ldd	r20, Z+2	; 0x02
    1efa:	53 81       	ldd	r21, Z+3	; 0x03
    1efc:	64 81       	ldd	r22, Z+4	; 0x04
    1efe:	75 81       	ldd	r23, Z+5	; 0x05
    1f00:	c4 16       	cp	r12, r20
    1f02:	d5 06       	cpc	r13, r21
    1f04:	e6 06       	cpc	r14, r22
    1f06:	f7 06       	cpc	r15, r23
    1f08:	4c f1       	brlt	.+82     	; 0x1f5c <async+0x174>
    1f0a:	df 01       	movw	r26, r30
    1f0c:	ed 91       	ld	r30, X+
    1f0e:	fc 91       	ld	r31, X
    1f10:	11 97       	sbiw	r26, 0x01	; 1
    1f12:	30 97       	sbiw	r30, 0x00	; 0
    1f14:	89 f7       	brne	.-30     	; 0x1ef8 <async+0x110>
    1f16:	19 82       	std	Y+1, r1	; 0x01
    1f18:	18 82       	st	Y, r1
    1f1a:	22 c0       	rjmp	.+68     	; 0x1f60 <async+0x178>
    1f1c:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <timestamp>
    1f20:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <timestamp+0x1>
    1f24:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <timestamp+0x2>
    1f28:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <timestamp+0x3>
    1f2c:	93 cf       	rjmp	.-218    	; 0x1e54 <async+0x6c>
    1f2e:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f32:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f36:	2c 01       	movw	r4, r24
    1f38:	4f ef       	ldi	r20, 0xFF	; 255
    1f3a:	44 1a       	sub	r4, r20
    1f3c:	54 0a       	sbc	r5, r20
    1f3e:	05 2c       	mov	r0, r5
    1f40:	00 0c       	add	r0, r0
    1f42:	66 08       	sbc	r6, r6
    1f44:	77 08       	sbc	r7, r7
    1f46:	b2 01       	movw	r22, r4
    1f48:	55 27       	eor	r21, r21
    1f4a:	44 27       	eor	r20, r20
    1f4c:	2f 01       	movw	r4, r30
    1f4e:	61 2c       	mov	r6, r1
    1f50:	71 2c       	mov	r7, r1
    1f52:	44 2a       	or	r4, r20
    1f54:	55 2a       	or	r5, r21
    1f56:	66 2a       	or	r6, r22
    1f58:	77 2a       	or	r7, r23
    1f5a:	af cf       	rjmp	.-162    	; 0x1eba <async+0xd2>
    1f5c:	f9 83       	std	Y+1, r31	; 0x01
    1f5e:	e8 83       	st	Y, r30
    1f60:	cd 93       	st	X+, r28
    1f62:	dc 93       	st	X, r29
    1f64:	82 17       	cp	r24, r18
    1f66:	93 07       	cpc	r25, r19
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <async+0x184>
    1f6a:	7f c0       	rjmp	.+254    	; 0x206a <async+0x282>
    1f6c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1f70:	8d 7f       	andi	r24, 0xFD	; 253
    1f72:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1f76:	33 20       	and	r3, r3
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <async+0x194>
    1f7a:	78 94       	sei
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	bf 90       	pop	r11
    1f90:	af 90       	pop	r10
    1f92:	9f 90       	pop	r9
    1f94:	8f 90       	pop	r8
    1f96:	7f 90       	pop	r7
    1f98:	6f 90       	pop	r6
    1f9a:	5f 90       	pop	r5
    1f9c:	4f 90       	pop	r4
    1f9e:	3f 90       	pop	r3
    1fa0:	08 95       	ret
    1fa2:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <msgQ>
    1fa6:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <msgQ+0x1>
    1faa:	10 97       	sbiw	r26, 0x00	; 0
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <async+0x1c8>
    1fae:	83 c0       	rjmp	.+262    	; 0x20b6 <async+0x2ce>
    1fb0:	16 96       	adiw	r26, 0x06	; 6
    1fb2:	cd 90       	ld	r12, X+
    1fb4:	dd 90       	ld	r13, X+
    1fb6:	ed 90       	ld	r14, X+
    1fb8:	fc 90       	ld	r15, X
    1fba:	19 97       	sbiw	r26, 0x09	; 9
    1fbc:	0c 15       	cp	r16, r12
    1fbe:	1d 05       	cpc	r17, r13
    1fc0:	2e 05       	cpc	r18, r14
    1fc2:	3f 05       	cpc	r19, r15
    1fc4:	64 f4       	brge	.+24     	; 0x1fde <async+0x1f6>
    1fc6:	77 c0       	rjmp	.+238    	; 0x20b6 <async+0x2ce>
    1fc8:	c6 80       	ldd	r12, Z+6	; 0x06
    1fca:	d7 80       	ldd	r13, Z+7	; 0x07
    1fcc:	e0 84       	ldd	r14, Z+8	; 0x08
    1fce:	f1 84       	ldd	r15, Z+9	; 0x09
    1fd0:	0c 15       	cp	r16, r12
    1fd2:	1d 05       	cpc	r17, r13
    1fd4:	2e 05       	cpc	r18, r14
    1fd6:	3f 05       	cpc	r19, r15
    1fd8:	0c f4       	brge	.+2      	; 0x1fdc <async+0x1f4>
    1fda:	5b c0       	rjmp	.+182    	; 0x2092 <async+0x2aa>
    1fdc:	df 01       	movw	r26, r30
    1fde:	ed 91       	ld	r30, X+
    1fe0:	fc 91       	ld	r31, X
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	30 97       	sbiw	r30, 0x00	; 0
    1fe6:	81 f7       	brne	.-32     	; 0x1fc8 <async+0x1e0>
    1fe8:	19 82       	std	Y+1, r1	; 0x01
    1fea:	18 82       	st	Y, r1
    1fec:	cd 93       	st	X+, r28
    1fee:	dc 93       	st	X, r29
    1ff0:	33 20       	and	r3, r3
    1ff2:	21 f2       	breq	.-120    	; 0x1f7c <async+0x194>
    1ff4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1ff8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <async+0x21a>
    2000:	bc cf       	rjmp	.-136    	; 0x1f7a <async+0x192>
    2002:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2006:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    200a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <msgQ>
    200e:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <msgQ+0x1>
    2012:	02 81       	ldd	r16, Z+2	; 0x02
    2014:	13 81       	ldd	r17, Z+3	; 0x03
    2016:	d9 01       	movw	r26, r18
    2018:	16 96       	adiw	r26, 0x06	; 6
    201a:	4d 91       	ld	r20, X+
    201c:	5d 91       	ld	r21, X+
    201e:	6d 91       	ld	r22, X+
    2020:	7c 91       	ld	r23, X
    2022:	19 97       	sbiw	r26, 0x09	; 9
    2024:	d8 01       	movw	r26, r16
    2026:	16 96       	adiw	r26, 0x06	; 6
    2028:	0d 91       	ld	r16, X+
    202a:	1d 91       	ld	r17, X+
    202c:	2d 91       	ld	r18, X+
    202e:	3c 91       	ld	r19, X
    2030:	19 97       	sbiw	r26, 0x09	; 9
    2032:	40 1b       	sub	r20, r16
    2034:	51 0b       	sbc	r21, r17
    2036:	62 0b       	sbc	r22, r18
    2038:	73 0b       	sbc	r23, r19
    203a:	77 ff       	sbrs	r23, 7
    203c:	9e cf       	rjmp	.-196    	; 0x1f7a <async+0x192>
    203e:	dc 01       	movw	r26, r24
    2040:	2d 91       	ld	r18, X+
    2042:	3c 91       	ld	r19, X
    2044:	11 97       	sbiw	r26, 0x01	; 1
    2046:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    204a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    204e:	ed 93       	st	X+, r30
    2050:	fc 93       	st	X, r31
    2052:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    2056:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    205a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <dispatch>
    205e:	8d cf       	rjmp	.-230    	; 0x1f7a <async+0x192>
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	9f ef       	ldi	r25, 0xFF	; 255
    2064:	af ef       	ldi	r26, 0xFF	; 255
    2066:	bf e7       	ldi	r27, 0x7F	; 127
    2068:	05 cf       	rjmp	.-502    	; 0x1e74 <async+0x8c>
    206a:	c8 01       	movw	r24, r16
    206c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2070:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2074:	04 1b       	sub	r16, r20
    2076:	15 0b       	sbc	r17, r21
    2078:	01 30       	cpi	r16, 0x01	; 1
    207a:	11 05       	cpc	r17, r1
    207c:	b1 f0       	breq	.+44     	; 0x20aa <async+0x2c2>
    207e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2082:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2086:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    2090:	72 cf       	rjmp	.-284    	; 0x1f76 <async+0x18e>
    2092:	f9 83       	std	Y+1, r31	; 0x01
    2094:	e8 83       	st	Y, r30
    2096:	aa cf       	rjmp	.-172    	; 0x1fec <async+0x204>
    2098:	b9 83       	std	Y+1, r27	; 0x01
    209a:	a8 83       	st	Y, r26
    209c:	d0 93 23 01 	sts	0x0123, r29	; 0x800123 <timerQ+0x1>
    20a0:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <timerQ>
    20a4:	97 01       	movw	r18, r14
    20a6:	86 01       	movw	r16, r12
    20a8:	5d cf       	rjmp	.-326    	; 0x1f64 <async+0x17c>
    20aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20b2:	01 96       	adiw	r24, 0x01	; 1
    20b4:	e4 cf       	rjmp	.-56     	; 0x207e <async+0x296>
    20b6:	b9 83       	std	Y+1, r27	; 0x01
    20b8:	a8 83       	st	Y, r26
    20ba:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <msgQ+0x1>
    20be:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <msgQ>
    20c2:	96 cf       	rjmp	.-212    	; 0x1ff0 <async+0x208>
    20c4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dequeue.part.0>

000020c8 <sync>:
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	ec 01       	movw	r28, r24
    20da:	7b 01       	movw	r14, r22
    20dc:	6a 01       	movw	r12, r20
    20de:	1f b7       	in	r17, 0x3f	; 63
    20e0:	10 78       	andi	r17, 0x80	; 128
    20e2:	f8 94       	cli
    20e4:	a8 81       	ld	r26, Y
    20e6:	b9 81       	ldd	r27, Y+1	; 0x01
    20e8:	10 97       	sbiw	r26, 0x00	; 0
    20ea:	19 f4       	brne	.+6      	; 0x20f2 <sync+0x2a>
    20ec:	62 c0       	rjmp	.+196    	; 0x21b2 <sync+0xea>
    20ee:	a0 81       	ld	r26, Z
    20f0:	b1 81       	ldd	r27, Z+1	; 0x01
    20f2:	14 96       	adiw	r26, 0x04	; 4
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	15 97       	sbiw	r26, 0x05	; 5
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	c1 f7       	brne	.-16     	; 0x20ee <sync+0x26>
    20fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2102:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2106:	2a 17       	cp	r18, r26
    2108:	3b 07       	cpc	r19, r27
    210a:	09 f4       	brne	.+2      	; 0x210e <sync+0x46>
    210c:	4c c0       	rjmp	.+152    	; 0x21a6 <sync+0xde>
    210e:	11 23       	and	r17, r17
    2110:	a1 f1       	breq	.+104    	; 0x217a <sync+0xb2>
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	19 f0       	breq	.+6      	; 0x2120 <sync+0x58>
    211a:	fc 01       	movw	r30, r24
    211c:	15 82       	std	Z+5, r1	; 0x05
    211e:	14 82       	std	Z+4, r1	; 0x04
    2120:	3b 83       	std	Y+3, r19	; 0x03
    2122:	2a 83       	std	Y+2, r18	; 0x02
    2124:	f9 01       	movw	r30, r18
    2126:	d5 83       	std	Z+5, r29	; 0x05
    2128:	c4 83       	std	Z+4, r28	; 0x04
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <dispatch>
    2130:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2134:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	89 2b       	or	r24, r25
    213e:	09 f4       	brne	.+2      	; 0x2142 <sync+0x7a>
    2140:	41 c0       	rjmp	.+130    	; 0x21c4 <sync+0xfc>
    2142:	f9 83       	std	Y+1, r31	; 0x01
    2144:	e8 83       	st	Y, r30
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	09 f0       	breq	.+2      	; 0x2150 <sync+0x88>
    214e:	78 94       	sei
    2150:	b6 01       	movw	r22, r12
    2152:	ce 01       	movw	r24, r28
    2154:	f7 01       	movw	r30, r14
    2156:	09 95       	icall
    2158:	f8 2e       	mov	r15, r24
    215a:	09 2f       	mov	r16, r25
    215c:	8f b7       	in	r24, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	19 82       	std	Y+1, r1	; 0x01
    2162:	18 82       	st	Y, r1
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	82 30       	cpi	r24, 0x02	; 2
    216a:	91 05       	cpc	r25, r1
    216c:	a0 f4       	brcc	.+40     	; 0x2196 <sync+0xce>
    216e:	11 23       	and	r17, r17
    2170:	79 f0       	breq	.+30     	; 0x2190 <sync+0xc8>
    2172:	78 94       	sei
    2174:	8f 2d       	mov	r24, r15
    2176:	90 2f       	mov	r25, r16
    2178:	02 c0       	rjmp	.+4      	; 0x217e <sync+0xb6>
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	9f ef       	ldi	r25, 0xFF	; 255
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	08 95       	ret
    2190:	8f 2d       	mov	r24, r15
    2192:	90 2f       	mov	r25, r16
    2194:	f4 cf       	rjmp	.-24     	; 0x217e <sync+0xb6>
    2196:	1b 82       	std	Y+3, r1	; 0x03
    2198:	1a 82       	std	Y+2, r1	; 0x02
    219a:	fc 01       	movw	r30, r24
    219c:	15 82       	std	Z+5, r1	; 0x05
    219e:	14 82       	std	Z+4, r1	; 0x04
    21a0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <dispatch>
    21a4:	e4 cf       	rjmp	.-56     	; 0x216e <sync+0xa6>
    21a6:	11 23       	and	r17, r17
    21a8:	41 f3       	breq	.-48     	; 0x217a <sync+0xb2>
    21aa:	78 94       	sei
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	9f ef       	ldi	r25, 0xFF	; 255
    21b0:	e6 cf       	rjmp	.-52     	; 0x217e <sync+0xb6>
    21b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21ba:	99 83       	std	Y+1, r25	; 0x01
    21bc:	88 83       	st	Y, r24
    21be:	11 23       	and	r17, r17
    21c0:	39 f2       	breq	.-114    	; 0x2150 <sync+0x88>
    21c2:	c1 cf       	rjmp	.-126    	; 0x2146 <sync+0x7e>
    21c4:	78 94       	sei
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	d9 cf       	rjmp	.-78     	; 0x217e <sync+0xb6>

000021cc <run>:
    21cc:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    21d0:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    21d4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21d8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21dc:	20 97       	sbiw	r28, 0x00	; 0
    21de:	09 f4       	brne	.+2      	; 0x21e2 <run+0x16>
    21e0:	6e c0       	rjmp	.+220    	; 0x22be <run+0xf2>
    21e2:	88 81       	ld	r24, Y
    21e4:	99 81       	ldd	r25, Y+1	; 0x01
    21e6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msgQ+0x1>
    21ea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msgQ>
    21ee:	d3 83       	std	Z+3, r29	; 0x03
    21f0:	c2 83       	std	Z+2, r28	; 0x02
    21f2:	78 94       	sei
    21f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    21f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    21f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    21fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    21fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    21fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2200:	0e 94 64 10 	call	0x20c8	; 0x20c8 <sync>
    2204:	8f b7       	in	r24, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    220c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2210:	99 83       	std	Y+1, r25	; 0x01
    2212:	88 83       	st	Y, r24
    2214:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    2218:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    221c:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    2220:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    2224:	f7 01       	movw	r30, r14
    2226:	a0 81       	ld	r26, Z
    2228:	b1 81       	ldd	r27, Z+1	; 0x01
    222a:	12 96       	adiw	r26, 0x02	; 2
    222c:	8d 91       	ld	r24, X+
    222e:	9c 91       	ld	r25, X
    2230:	13 97       	sbiw	r26, 0x03	; 3
    2232:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    2236:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    223a:	20 97       	sbiw	r28, 0x00	; 0
    223c:	a9 f0       	breq	.+42     	; 0x2268 <run+0x9c>
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	49 f2       	breq	.-110    	; 0x21d4 <run+0x8>
    2242:	4e 81       	ldd	r20, Y+6	; 0x06
    2244:	5f 81       	ldd	r21, Y+7	; 0x07
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	fc 01       	movw	r30, r24
    224c:	06 81       	ldd	r16, Z+6	; 0x06
    224e:	17 81       	ldd	r17, Z+7	; 0x07
    2250:	20 85       	ldd	r18, Z+8	; 0x08
    2252:	31 85       	ldd	r19, Z+9	; 0x09
    2254:	40 1b       	sub	r20, r16
    2256:	51 0b       	sbc	r21, r17
    2258:	62 0b       	sbc	r22, r18
    225a:	73 0b       	sbc	r23, r19
    225c:	14 16       	cp	r1, r20
    225e:	15 06       	cpc	r1, r21
    2260:	16 06       	cpc	r1, r22
    2262:	17 06       	cpc	r1, r23
    2264:	0c f0       	brlt	.+2      	; 0x2268 <run+0x9c>
    2266:	b6 cf       	rjmp	.-148    	; 0x21d4 <run+0x8>
    2268:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    226c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    2270:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    2274:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    2278:	f7 01       	movw	r30, r14
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    2282:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    2286:	14 96       	adiw	r26, 0x04	; 4
    2288:	ed 91       	ld	r30, X+
    228a:	fc 91       	ld	r31, X
    228c:	15 97       	sbiw	r26, 0x05	; 5
    228e:	30 97       	sbiw	r30, 0x00	; 0
    2290:	41 f0       	breq	.+16     	; 0x22a2 <run+0xd6>
    2292:	a0 81       	ld	r26, Z
    2294:	b1 81       	ldd	r27, Z+1	; 0x01
    2296:	14 96       	adiw	r26, 0x04	; 4
    2298:	ed 91       	ld	r30, X+
    229a:	fc 91       	ld	r31, X
    229c:	15 97       	sbiw	r26, 0x05	; 5
    229e:	30 97       	sbiw	r30, 0x00	; 0
    22a0:	c1 f7       	brne	.-16     	; 0x2292 <run+0xc6>
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <dispatch>
    22a8:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <msgQ>
    22ac:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <msgQ+0x1>
    22b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    22b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    22b8:	20 97       	sbiw	r28, 0x00	; 0
    22ba:	09 f0       	breq	.+2      	; 0x22be <run+0xf2>
    22bc:	92 cf       	rjmp	.-220    	; 0x21e2 <run+0x16>
    22be:	0e 94 0e 06 	call	0xc1c	; 0xc1c <dequeue.part.0>

000022c2 <install>:
    22c2:	42 31       	cpi	r20, 0x12	; 18
    22c4:	b8 f4       	brcc	.+46     	; 0x22f4 <install+0x32>
    22c6:	2f b7       	in	r18, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	44 0f       	add	r20, r20
    22ce:	55 1f       	adc	r21, r21
    22d0:	fa 01       	movw	r30, r20
    22d2:	ea 5d       	subi	r30, 0xDA	; 218
    22d4:	fe 4f       	sbci	r31, 0xFE	; 254
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	fa 01       	movw	r30, r20
    22dc:	e2 54       	subi	r30, 0x42	; 66
    22de:	fe 4f       	sbci	r31, 0xFE	; 254
    22e0:	71 83       	std	Z+1, r23	; 0x01
    22e2:	60 83       	st	Z, r22
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	fc 01       	movw	r30, r24
    22ea:	53 83       	std	Z+3, r21	; 0x03
    22ec:	42 83       	std	Z+2, r20	; 0x02
    22ee:	27 ff       	sbrs	r18, 7
    22f0:	01 c0       	rjmp	.+2      	; 0x22f4 <install+0x32>
    22f2:	78 94       	sei
    22f4:	08 95       	ret

000022f6 <tinytimber>:
    22f6:	8c 01       	movw	r16, r24
    22f8:	7b 01       	movw	r14, r22
    22fa:	6a 01       	movw	r12, r20
    22fc:	8f b7       	in	r24, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	0e 94 43 05 	call	0xa86	; 0xa86 <initialize>
    2304:	78 94       	sei
    2306:	e1 14       	cp	r14, r1
    2308:	f1 04       	cpc	r15, r1
    230a:	41 f0       	breq	.+16     	; 0x231c <tinytimber+0x26>
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	a9 01       	movw	r20, r18
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	cb 01       	movw	r24, r22
    2318:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <async>
    231c:	8f b7       	in	r24, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	0e 94 ce 05 	call	0xb9c	; 0xb9c <schedule>
    2324:	78 94       	sei
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	83 bf       	out	0x33, r24	; 51
    232a:	88 95       	sleep
    232c:	fd cf       	rjmp	.-6      	; 0x2328 <tinytimber+0x32>

0000232e <writeBit>:
    232e:	4e b1       	in	r20, 0x0e	; 14
    2330:	21 e0       	ldi	r18, 0x01	; 1
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	67 2b       	or	r22, r23
    2336:	79 f4       	brne	.+30     	; 0x2356 <writeBit+0x28>
    2338:	b9 01       	movw	r22, r18
    233a:	fc 01       	movw	r30, r24
    233c:	04 80       	ldd	r0, Z+4	; 0x04
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <writeBit+0x16>
    2340:	66 0f       	add	r22, r22
    2342:	77 1f       	adc	r23, r23
    2344:	0a 94       	dec	r0
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <writeBit+0x12>
    2348:	cb 01       	movw	r24, r22
    234a:	80 95       	com	r24
    234c:	84 23       	and	r24, r20
    234e:	8e b9       	out	0x0e, r24	; 14
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	08 95       	ret
    2356:	b9 01       	movw	r22, r18
    2358:	fc 01       	movw	r30, r24
    235a:	04 80       	ldd	r0, Z+4	; 0x04
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <writeBit+0x34>
    235e:	66 0f       	add	r22, r22
    2360:	77 1f       	adc	r23, r23
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <writeBit+0x30>
    2366:	cb 01       	movw	r24, r22
    2368:	84 2b       	or	r24, r20
    236a:	8e b9       	out	0x0e, r24	; 14
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	08 95       	ret

00002372 <toggleBit>:
    2372:	4e b1       	in	r20, 0x0e	; 14
    2374:	21 e0       	ldi	r18, 0x01	; 1
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	fc 01       	movw	r30, r24
    237a:	04 80       	ldd	r0, Z+4	; 0x04
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <toggleBit+0x10>
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	0a 94       	dec	r0
    2384:	e2 f7       	brpl	.-8      	; 0x237e <toggleBit+0xc>
    2386:	24 27       	eor	r18, r20
    2388:	2e b9       	out	0x0e, r18	; 14
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	08 95       	ret

00002390 <__divmodhi4>:
    2390:	97 fb       	bst	r25, 7
    2392:	07 2e       	mov	r0, r23
    2394:	16 f4       	brtc	.+4      	; 0x239a <__divmodhi4+0xa>
    2396:	00 94       	com	r0
    2398:	07 d0       	rcall	.+14     	; 0x23a8 <__divmodhi4_neg1>
    239a:	77 fd       	sbrc	r23, 7
    239c:	09 d0       	rcall	.+18     	; 0x23b0 <__divmodhi4_neg2>
    239e:	0e 94 02 12 	call	0x2404	; 0x2404 <__udivmodhi4>
    23a2:	07 fc       	sbrc	r0, 7
    23a4:	05 d0       	rcall	.+10     	; 0x23b0 <__divmodhi4_neg2>
    23a6:	3e f4       	brtc	.+14     	; 0x23b6 <__divmodhi4_exit>

000023a8 <__divmodhi4_neg1>:
    23a8:	90 95       	com	r25
    23aa:	81 95       	neg	r24
    23ac:	9f 4f       	sbci	r25, 0xFF	; 255
    23ae:	08 95       	ret

000023b0 <__divmodhi4_neg2>:
    23b0:	70 95       	com	r23
    23b2:	61 95       	neg	r22
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255

000023b6 <__divmodhi4_exit>:
    23b6:	08 95       	ret

000023b8 <__divmodsi4>:
    23b8:	05 2e       	mov	r0, r21
    23ba:	97 fb       	bst	r25, 7
    23bc:	1e f4       	brtc	.+6      	; 0x23c4 <__divmodsi4+0xc>
    23be:	00 94       	com	r0
    23c0:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__negsi2>
    23c4:	57 fd       	sbrc	r21, 7
    23c6:	07 d0       	rcall	.+14     	; 0x23d6 <__divmodsi4_neg2>
    23c8:	0e 94 16 12 	call	0x242c	; 0x242c <__udivmodsi4>
    23cc:	07 fc       	sbrc	r0, 7
    23ce:	03 d0       	rcall	.+6      	; 0x23d6 <__divmodsi4_neg2>
    23d0:	4e f4       	brtc	.+18     	; 0x23e4 <__divmodsi4_exit>
    23d2:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__negsi2>

000023d6 <__divmodsi4_neg2>:
    23d6:	50 95       	com	r21
    23d8:	40 95       	com	r20
    23da:	30 95       	com	r19
    23dc:	21 95       	neg	r18
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	4f 4f       	sbci	r20, 0xFF	; 255
    23e2:	5f 4f       	sbci	r21, 0xFF	; 255

000023e4 <__divmodsi4_exit>:
    23e4:	08 95       	ret

000023e6 <__negsi2>:
    23e6:	90 95       	com	r25
    23e8:	80 95       	com	r24
    23ea:	70 95       	com	r23
    23ec:	61 95       	neg	r22
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	8f 4f       	sbci	r24, 0xFF	; 255
    23f2:	9f 4f       	sbci	r25, 0xFF	; 255
    23f4:	08 95       	ret

000023f6 <__usmulhisi3>:
    23f6:	0e 94 38 12 	call	0x2470	; 0x2470 <__umulhisi3>

000023fa <__usmulhisi3_tail>:
    23fa:	b7 ff       	sbrs	r27, 7
    23fc:	08 95       	ret
    23fe:	82 1b       	sub	r24, r18
    2400:	93 0b       	sbc	r25, r19
    2402:	08 95       	ret

00002404 <__udivmodhi4>:
    2404:	aa 1b       	sub	r26, r26
    2406:	bb 1b       	sub	r27, r27
    2408:	51 e1       	ldi	r21, 0x11	; 17
    240a:	07 c0       	rjmp	.+14     	; 0x241a <__udivmodhi4_ep>

0000240c <__udivmodhi4_loop>:
    240c:	aa 1f       	adc	r26, r26
    240e:	bb 1f       	adc	r27, r27
    2410:	a6 17       	cp	r26, r22
    2412:	b7 07       	cpc	r27, r23
    2414:	10 f0       	brcs	.+4      	; 0x241a <__udivmodhi4_ep>
    2416:	a6 1b       	sub	r26, r22
    2418:	b7 0b       	sbc	r27, r23

0000241a <__udivmodhi4_ep>:
    241a:	88 1f       	adc	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	5a 95       	dec	r21
    2420:	a9 f7       	brne	.-22     	; 0x240c <__udivmodhi4_loop>
    2422:	80 95       	com	r24
    2424:	90 95       	com	r25
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	08 95       	ret

0000242c <__udivmodsi4>:
    242c:	a1 e2       	ldi	r26, 0x21	; 33
    242e:	1a 2e       	mov	r1, r26
    2430:	aa 1b       	sub	r26, r26
    2432:	bb 1b       	sub	r27, r27
    2434:	fd 01       	movw	r30, r26
    2436:	0d c0       	rjmp	.+26     	; 0x2452 <__udivmodsi4_ep>

00002438 <__udivmodsi4_loop>:
    2438:	aa 1f       	adc	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	ee 1f       	adc	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	a2 17       	cp	r26, r18
    2442:	b3 07       	cpc	r27, r19
    2444:	e4 07       	cpc	r30, r20
    2446:	f5 07       	cpc	r31, r21
    2448:	20 f0       	brcs	.+8      	; 0x2452 <__udivmodsi4_ep>
    244a:	a2 1b       	sub	r26, r18
    244c:	b3 0b       	sbc	r27, r19
    244e:	e4 0b       	sbc	r30, r20
    2450:	f5 0b       	sbc	r31, r21

00002452 <__udivmodsi4_ep>:
    2452:	66 1f       	adc	r22, r22
    2454:	77 1f       	adc	r23, r23
    2456:	88 1f       	adc	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	1a 94       	dec	r1
    245c:	69 f7       	brne	.-38     	; 0x2438 <__udivmodsi4_loop>
    245e:	60 95       	com	r22
    2460:	70 95       	com	r23
    2462:	80 95       	com	r24
    2464:	90 95       	com	r25
    2466:	9b 01       	movw	r18, r22
    2468:	ac 01       	movw	r20, r24
    246a:	bd 01       	movw	r22, r26
    246c:	cf 01       	movw	r24, r30
    246e:	08 95       	ret

00002470 <__umulhisi3>:
    2470:	a2 9f       	mul	r26, r18
    2472:	b0 01       	movw	r22, r0
    2474:	b3 9f       	mul	r27, r19
    2476:	c0 01       	movw	r24, r0
    2478:	a3 9f       	mul	r26, r19
    247a:	70 0d       	add	r23, r0
    247c:	81 1d       	adc	r24, r1
    247e:	11 24       	eor	r1, r1
    2480:	91 1d       	adc	r25, r1
    2482:	b2 9f       	mul	r27, r18
    2484:	70 0d       	add	r23, r0
    2486:	81 1d       	adc	r24, r1
    2488:	11 24       	eor	r1, r1
    248a:	91 1d       	adc	r25, r1
    248c:	08 95       	ret

0000248e <setjmp>:
    248e:	dc 01       	movw	r26, r24
    2490:	2d 92       	st	X+, r2
    2492:	3d 92       	st	X+, r3
    2494:	4d 92       	st	X+, r4
    2496:	5d 92       	st	X+, r5
    2498:	6d 92       	st	X+, r6
    249a:	7d 92       	st	X+, r7
    249c:	8d 92       	st	X+, r8
    249e:	9d 92       	st	X+, r9
    24a0:	ad 92       	st	X+, r10
    24a2:	bd 92       	st	X+, r11
    24a4:	cd 92       	st	X+, r12
    24a6:	dd 92       	st	X+, r13
    24a8:	ed 92       	st	X+, r14
    24aa:	fd 92       	st	X+, r15
    24ac:	0d 93       	st	X+, r16
    24ae:	1d 93       	st	X+, r17
    24b0:	cd 93       	st	X+, r28
    24b2:	dd 93       	st	X+, r29
    24b4:	ff 91       	pop	r31
    24b6:	ef 91       	pop	r30
    24b8:	8d b7       	in	r24, 0x3d	; 61
    24ba:	8d 93       	st	X+, r24
    24bc:	8e b7       	in	r24, 0x3e	; 62
    24be:	8d 93       	st	X+, r24
    24c0:	8f b7       	in	r24, 0x3f	; 63
    24c2:	8d 93       	st	X+, r24
    24c4:	ed 93       	st	X+, r30
    24c6:	fd 93       	st	X+, r31
    24c8:	88 27       	eor	r24, r24
    24ca:	99 27       	eor	r25, r25
    24cc:	09 94       	ijmp

000024ce <longjmp>:
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	91 05       	cpc	r25, r1
    24d6:	81 1d       	adc	r24, r1
    24d8:	2d 90       	ld	r2, X+
    24da:	3d 90       	ld	r3, X+
    24dc:	4d 90       	ld	r4, X+
    24de:	5d 90       	ld	r5, X+
    24e0:	6d 90       	ld	r6, X+
    24e2:	7d 90       	ld	r7, X+
    24e4:	8d 90       	ld	r8, X+
    24e6:	9d 90       	ld	r9, X+
    24e8:	ad 90       	ld	r10, X+
    24ea:	bd 90       	ld	r11, X+
    24ec:	cd 90       	ld	r12, X+
    24ee:	dd 90       	ld	r13, X+
    24f0:	ed 90       	ld	r14, X+
    24f2:	fd 90       	ld	r15, X+
    24f4:	0d 91       	ld	r16, X+
    24f6:	1d 91       	ld	r17, X+
    24f8:	cd 91       	ld	r28, X+
    24fa:	dd 91       	ld	r29, X+
    24fc:	ed 91       	ld	r30, X+
    24fe:	fd 91       	ld	r31, X+
    2500:	0d 90       	ld	r0, X+
    2502:	f8 94       	cli
    2504:	fe bf       	out	0x3e, r31	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	ed bf       	out	0x3d, r30	; 61
    250a:	ed 91       	ld	r30, X+
    250c:	fd 91       	ld	r31, X+
    250e:	09 94       	ijmp

00002510 <_exit>:
    2510:	f8 94       	cli

00002512 <__stop_program>:
    2512:	ff cf       	rjmp	.-2      	; 0x2512 <__stop_program>
