
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00002330  000023c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000358  00800144  00800144  00002408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032f0  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fa  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001778  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d6c  00000000  00000000  00008384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a2  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f0f  00000000  00000000  00009a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000c9a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_1>
       8:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_2>
       c:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_3>
      10:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_4>
      14:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__vector_9>
      28:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__vector_10>
      2c:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__vector_11>
      30:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_12>
      34:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_13>
      38:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_14>
      3c:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_15>
      40:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_16>
      44:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_17>
      48:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__vector_18>
      4c:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_19>
      50:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_20>
      54:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_21>
      58:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e0 e3       	ldi	r30, 0x30	; 48
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 34       	cpi	r26, 0x44	; 68
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e4       	ldi	r26, 0x44	; 68
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ac 39       	cpi	r26, 0x9C	; 156
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
      92:	0c 94 96 11 	jmp	0x232c	; 0x232c <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
      9a:	85 b1       	in	r24, 0x05	; 5
      9c:	80 6d       	ori	r24, 0xD0	; 208
      9e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
      a0:	8e b1       	in	r24, 0x0e	; 14
      a2:	8c 60       	ori	r24, 0x0C	; 12
      a4:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
      a6:	8d b3       	in	r24, 0x1d	; 29
      a8:	80 6c       	ori	r24, 0xC0	; 192
      aa:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
      ac:	eb e6       	ldi	r30, 0x6B	; 107
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	8c 60       	ori	r24, 0x0C	; 12
      b4:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
      b6:	ec e6       	ldi	r30, 0x6C	; 108
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	80 6d       	ori	r24, 0xD0	; 208
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <leftdir>:
// (så att man inte kör vidare om den hann släppas).
// De använder ASYNC för att starta en metod i en annan "tråd" (d.v.s.
// i TinyTimbers schemaläggning) utan att blockera denna knappkod.

// leftdir => anropar switchGen(0) för att välja "vänster" generator, om PRESSEDLT är sant.
int leftdir(Button *self, int arg) {
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
	if (PRESSEDLT) {
      ce:	62 99       	sbic	0x0c, 2	; 12
      d0:	13 c0       	rjmp	.+38     	; 0xf8 <leftdir+0x36>
      d2:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
      d4:	04 81       	ldd	r16, Z+4	; 0x04
      d6:	15 81       	ldd	r17, Z+5	; 0x05
      d8:	c1 2c       	mov	r12, r1
      da:	d1 2c       	mov	r13, r1
      dc:	0f 2e       	mov	r0, r31
      de:	f0 e3       	ldi	r31, 0x30	; 48
      e0:	ef 2e       	mov	r14, r31
      e2:	f2 e0       	ldi	r31, 0x02	; 2
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	a9 01       	movw	r20, r18
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	cb 01       	movw	r24, r22
      f4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	return 0;
}
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	ff 90       	pop	r15
     102:	ef 90       	pop	r14
     104:	df 90       	pop	r13
     106:	cf 90       	pop	r12
     108:	08 95       	ret

0000010a <rightdir>:

// rightdir => anropar switchGen(1) för "höger" generator.
int rightdir(Button *self, int arg) {
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
	if (PRESSEDRT) {
     116:	63 99       	sbic	0x0c, 3	; 12
     118:	14 c0       	rjmp	.+40     	; 0x142 <rightdir+0x38>
     11a:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     11c:	04 81       	ldd	r16, Z+4	; 0x04
     11e:	15 81       	ldd	r17, Z+5	; 0x05
     120:	cc 24       	eor	r12, r12
     122:	c3 94       	inc	r12
     124:	d1 2c       	mov	r13, r1
     126:	0f 2e       	mov	r0, r31
     128:	f0 e3       	ldi	r31, 0x30	; 48
     12a:	ef 2e       	mov	r14, r31
     12c:	f2 e0       	ldi	r31, 0x02	; 2
     12e:	ff 2e       	mov	r15, r31
     130:	f0 2d       	mov	r31, r0
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	a9 01       	movw	r20, r18
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	cb 01       	movw	r24, r22
     13e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	return 0;
}
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	ff 90       	pop	r15
     14c:	ef 90       	pop	r14
     14e:	df 90       	pop	r13
     150:	cf 90       	pop	r12
     152:	08 95       	ret

00000154 <updir>:

// updir => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
	if (PRESSEDUP) {
     160:	1e 99       	sbic	0x03, 6	; 3
     162:	13 c0       	rjmp	.+38     	; 0x18a <updir+0x36>
     164:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecInc, 0);
     166:	04 81       	ldd	r16, Z+4	; 0x04
     168:	15 81       	ldd	r17, Z+5	; 0x05
     16a:	c1 2c       	mov	r12, r1
     16c:	d1 2c       	mov	r13, r1
     16e:	0f 2e       	mov	r0, r31
     170:	f7 e5       	ldi	r31, 0x57	; 87
     172:	ef 2e       	mov	r14, r31
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	ff 2e       	mov	r15, r31
     178:	f0 2d       	mov	r31, r0
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a9 01       	movw	r20, r18
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	cb 01       	movw	r24, r22
     186:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	return 0;
}
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	df 90       	pop	r13
     198:	cf 90       	pop	r12
     19a:	08 95       	ret

0000019c <downdir>:

// downdir => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
	if (PRESSEDDN) {
     1a8:	1f 99       	sbic	0x03, 7	; 3
     1aa:	13 c0       	rjmp	.+38     	; 0x1d2 <downdir+0x36>
     1ac:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecDec, 0);
     1ae:	04 81       	ldd	r16, Z+4	; 0x04
     1b0:	15 81       	ldd	r17, Z+5	; 0x05
     1b2:	c1 2c       	mov	r12, r1
     1b4:	d1 2c       	mov	r13, r1
     1b6:	0f 2e       	mov	r0, r31
     1b8:	f4 ea       	ldi	r31, 0xA4	; 164
     1ba:	ef 2e       	mov	r14, r31
     1bc:	f2 e0       	ldi	r31, 0x02	; 2
     1be:	ff 2e       	mov	r15, r31
     1c0:	f0 2d       	mov	r31, r0
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	a9 01       	movw	r20, r18
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	cb 01       	movw	r24, r22
     1ce:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	return 0;
}
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	df 90       	pop	r13
     1e0:	cf 90       	pop	r12
     1e2:	08 95       	ret

000001e4 <centerdir>:

// centerdir => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
	if (PRESSEDCN) {
     1f0:	1c 99       	sbic	0x03, 4	; 3
     1f2:	13 c0       	rjmp	.+38     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
     1f4:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecReset, 0);
     1f6:	04 81       	ldd	r16, Z+4	; 0x04
     1f8:	15 81       	ldd	r17, Z+5	; 0x05
     1fa:	c1 2c       	mov	r12, r1
     1fc:	d1 2c       	mov	r13, r1
     1fe:	0f 2e       	mov	r0, r31
     200:	f1 ef       	ldi	r31, 0xF1	; 241
     202:	ef 2e       	mov	r14, r31
     204:	f2 e0       	ldi	r31, 0x02	; 2
     206:	ff 2e       	mov	r15, r31
     208:	f0 2d       	mov	r31, r0
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	a9 01       	movw	r20, r18
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	cb 01       	movw	r24, r22
     216:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	return 0;
}
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	ff 90       	pop	r15
     224:	ef 90       	pop	r14
     226:	df 90       	pop	r13
     228:	cf 90       	pop	r12
     22a:	08 95       	ret

0000022c <debounceButtons>:


// debounceButtons() körs 50 ms senare, vilket ger knappen tid att stabilisera sig
// (mindre risk för studs). Därefter kollar vi vilka knappar som faktiskt är nedtryckta
// och anropar motsvarande funktion.
int debounceButtons(Button *self, int arg) {
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     232:	62 99       	sbic	0x0c, 2	; 12
     234:	04 c0       	rjmp	.+8      	; 0x23e <debounceButtons+0x12>
		leftdir(self, 0);
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	0e 94 61 00 	call	0xc2	; 0xc2 <leftdir>
	}
	if (PRESSEDRT) {
     23e:	63 99       	sbic	0x0c, 3	; 12
     240:	05 c0       	rjmp	.+10     	; 0x24c <debounceButtons+0x20>
		rightdir(self, 0);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	ce 01       	movw	r24, r28
     248:	0e 94 85 00 	call	0x10a	; 0x10a <rightdir>
	}
	if (PRESSEDUP) {
     24c:	1e 99       	sbic	0x03, 6	; 3
     24e:	05 c0       	rjmp	.+10     	; 0x25a <debounceButtons+0x2e>
		updir(self, 0);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	ce 01       	movw	r24, r28
     256:	0e 94 aa 00 	call	0x154	; 0x154 <updir>
	}
	if (PRESSEDDN) {
     25a:	1f 99       	sbic	0x03, 7	; 3
     25c:	05 c0       	rjmp	.+10     	; 0x268 <debounceButtons+0x3c>
		downdir(self, 0);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	ce 01       	movw	r24, r28
     264:	0e 94 ce 00 	call	0x19c	; 0x19c <downdir>
	}
	if (PRESSEDCN) {
     268:	1c 99       	sbic	0x03, 4	; 3
     26a:	05 c0       	rjmp	.+10     	; 0x276 <debounceButtons+0x4a>
		centerdir(self, 0);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	ce 01       	movw	r24, r28
     272:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <centerdir>
	}
	return 0;
}
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     280:	80 ec       	ldi	r24, 0xC0	; 192
     282:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     286:	87 eb       	ldi	r24, 0xB7	; 183
     288:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     28c:	8f e0       	ldi	r24, 0x0F	; 15
     28e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     292:	08 95       	ret

00000294 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     294:	66 30       	cpi	r22, 0x06	; 6
     296:	71 05       	cpc	r23, r1
     298:	08 f0       	brcs	.+2      	; 0x29c <writeChar+0x8>
     29a:	6b c0       	rjmp	.+214    	; 0x372 <writeChar+0xde>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     29c:	90 ed       	ldi	r25, 0xD0	; 208
     29e:	98 0f       	add	r25, r24
     2a0:	9a 30       	cpi	r25, 0x0A	; 10
     2a2:	48 f4       	brcc	.+18     	; 0x2b6 <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     2a4:	e8 2f       	mov	r30, r24
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	e1 53       	subi	r30, 0x31	; 49
     2ae:	ff 4f       	sbci	r31, 0xFF	; 255
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     2ba:	fb 01       	movw	r30, r22
     2bc:	77 23       	and	r23, r23
     2be:	0c f4       	brge	.+2      	; 0x2c2 <writeChar+0x2e>
     2c0:	31 96       	adiw	r30, 0x01	; 1
     2c2:	f5 95       	asr	r31
     2c4:	e7 95       	ror	r30
     2c6:	e4 51       	subi	r30, 0x14	; 20
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     2ca:	61 70       	andi	r22, 0x01	; 1
     2cc:	70 78       	andi	r23, 0x80	; 128
     2ce:	77 23       	and	r23, r23
     2d0:	34 f4       	brge	.+12     	; 0x2de <writeChar+0x4a>
     2d2:	61 50       	subi	r22, 0x01	; 1
     2d4:	71 09       	sbc	r23, r1
     2d6:	6e 6f       	ori	r22, 0xFE	; 254
     2d8:	7f 6f       	ori	r23, 0xFF	; 255
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	66 0f       	add	r22, r22
     2e0:	77 1f       	adc	r23, r23
     2e2:	66 0f       	add	r22, r22
     2e4:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     2e6:	8f e0       	ldi	r24, 0x0F	; 15
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	06 2e       	mov	r0, r22
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <writeChar+0x5e>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <writeChar+0x5a>
     2f6:	80 95       	com	r24
     2f8:	40 81       	ld	r20, Z
     2fa:	98 2f       	mov	r25, r24
     2fc:	94 23       	and	r25, r20
     2fe:	a9 01       	movw	r20, r18
     300:	4f 70       	andi	r20, 0x0F	; 15
     302:	55 27       	eor	r21, r21
     304:	06 2e       	mov	r0, r22
     306:	02 c0       	rjmp	.+4      	; 0x30c <writeChar+0x78>
     308:	44 0f       	add	r20, r20
     30a:	55 1f       	adc	r21, r21
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <writeChar+0x74>
     310:	49 2b       	or	r20, r25
     312:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     314:	a9 01       	movw	r20, r18
     316:	52 95       	swap	r21
     318:	42 95       	swap	r20
     31a:	4f 70       	andi	r20, 0x0F	; 15
     31c:	45 27       	eor	r20, r21
     31e:	5f 70       	andi	r21, 0x0F	; 15
     320:	45 27       	eor	r20, r21
     322:	4f 70       	andi	r20, 0x0F	; 15
     324:	55 27       	eor	r21, r21
     326:	06 2e       	mov	r0, r22
     328:	02 c0       	rjmp	.+4      	; 0x32e <writeChar+0x9a>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <writeChar+0x96>
     332:	95 81       	ldd	r25, Z+5	; 0x05
     334:	98 23       	and	r25, r24
     336:	49 2b       	or	r20, r25
     338:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     33a:	43 2f       	mov	r20, r19
     33c:	55 27       	eor	r21, r21
     33e:	4f 70       	andi	r20, 0x0F	; 15
     340:	55 27       	eor	r21, r21
     342:	06 2e       	mov	r0, r22
     344:	02 c0       	rjmp	.+4      	; 0x34a <writeChar+0xb6>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <writeChar+0xb2>
     34e:	92 85       	ldd	r25, Z+10	; 0x0a
     350:	98 23       	and	r25, r24
     352:	49 2b       	or	r20, r25
     354:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     356:	47 85       	ldd	r20, Z+15	; 0x0f
     358:	48 23       	and	r20, r24
     35a:	c9 01       	movw	r24, r18
     35c:	89 2f       	mov	r24, r25
     35e:	99 27       	eor	r25, r25
     360:	82 95       	swap	r24
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	02 c0       	rjmp	.+4      	; 0x36a <writeChar+0xd6>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	6a 95       	dec	r22
     36c:	e2 f7       	brpl	.-8      	; 0x366 <writeChar+0xd2>
     36e:	84 2b       	or	r24, r20
     370:	87 87       	std	Z+15, r24	; 0x0f
     372:	08 95       	ret

00000374 <printAt>:
}

void printAt(long num, int pos) {
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	4b 01       	movw	r8, r22
     38a:	5c 01       	movw	r10, r24
     38c:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     38e:	24 e6       	ldi	r18, 0x64	; 100
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__divmodsi4>
     39a:	0f 2e       	mov	r0, r31
     39c:	fa e0       	ldi	r31, 0x0A	; 10
     39e:	cf 2e       	mov	r12, r31
     3a0:	d1 2c       	mov	r13, r1
     3a2:	e1 2c       	mov	r14, r1
     3a4:	f1 2c       	mov	r15, r1
     3a6:	f0 2d       	mov	r31, r0
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__divmodsi4>
     3b0:	be 01       	movw	r22, r28
     3b2:	80 e3       	ldi	r24, 0x30	; 48
     3b4:	82 0f       	add	r24, r18
     3b6:	0e 94 4a 01 	call	0x294	; 0x294 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     3ba:	21 96       	adiw	r28, 0x01	; 1
     3bc:	c5 01       	movw	r24, r10
     3be:	b4 01       	movw	r22, r8
     3c0:	a7 01       	movw	r20, r14
     3c2:	96 01       	movw	r18, r12
     3c4:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__divmodsi4>
     3c8:	86 2f       	mov	r24, r22
     3ca:	be 01       	movw	r22, r28
     3cc:	80 5d       	subi	r24, 0xD0	; 208
     3ce:	0e 94 4a 01 	call	0x294	; 0x294 <writeChar>
	
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	8f 90       	pop	r8
     3e6:	08 95       	ret

000003e8 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser synkront (SYNC)
// och visar dem på LCD. Mittpositionen visar "10" om gen1 är vald, "01" om gen2 är vald.
int updateDisplay(GUI *self, int arg) {
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24

	// Vänstra sidan (pos 0..1): frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	64 ef       	ldi	r22, 0xF4	; 244
     3f4:	73 e0       	ldi	r23, 0x03	; 3
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	9d 81       	ldd	r25, Y+5	; 0x05
     3fa:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sync>
     3fe:	bc 01       	movw	r22, r24
     400:	99 0f       	add	r25, r25
     402:	88 0b       	sbc	r24, r24
     404:	99 0b       	sbc	r25, r25
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>

	// Högra sidan (pos 4..5): frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	64 ef       	ldi	r22, 0xF4	; 244
     414:	73 e0       	ldi	r23, 0x03	; 3
     416:	8e 81       	ldd	r24, Y+6	; 0x06
     418:	9f 81       	ldd	r25, Y+7	; 0x07
     41a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sync>
     41e:	bc 01       	movw	r22, r24
     420:	99 0f       	add	r25, r25
     422:	88 0b       	sbc	r24, r24
     424:	99 0b       	sbc	r25, r25
     426:	44 e0       	ldi	r20, 0x04	; 4
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>

	// Mitt (pos 2..3): visa vilken generator som är aktiv ( "10" => gen1, "01" => gen2 )
	if (self->midPos == 0) {
     42e:	88 85       	ldd	r24, Y+8	; 0x08
     430:	81 11       	cpse	r24, r1
     432:	09 c0       	rjmp	.+18     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
		printAt(10, 2);
     434:	42 e0       	ldi	r20, 0x02	; 2
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	6a e0       	ldi	r22, 0x0A	; 10
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>
     444:	08 c0       	rjmp	.+16     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
		} else {
		printAt(1, 2);
     446:	42 e0       	ldi	r20, 0x02	; 2
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>
	}

	return 0;
}
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
	if (self->midPos == arg) {
     46c:	fc 01       	movw	r30, r24
     46e:	20 85       	ldd	r18, Z+8	; 0x08
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	26 17       	cp	r18, r22
     474:	37 07       	cpc	r19, r23
     476:	91 f0       	breq	.+36     	; 0x49c <switchGen+0x3c>
     478:	8c 01       	movw	r16, r24
		// Om samma generator redan är aktiv, gör inget.
		return 0;
	}
	self->midPos = arg;
     47a:	60 87       	std	Z+8, r22	; 0x08
	// Använder ASYNC för att anropa updateDisplay i en asynkron "tråd"
	// så att vi inte blockeras, men ändå uppdaterar displayen direkt.
	ASYNC(self, updateDisplay, 0);
     47c:	c1 2c       	mov	r12, r1
     47e:	d1 2c       	mov	r13, r1
     480:	0f 2e       	mov	r0, r31
     482:	f4 ef       	ldi	r31, 0xF4	; 244
     484:	ef 2e       	mov	r14, r31
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	a9 01       	movw	r20, r18
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	cb 01       	movw	r24, r22
     498:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	return 0;
}
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	08 95       	ret

000004ae <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     4c0:	88 85       	ldd	r24, Y+8	; 0x08
     4c2:	81 11       	cpse	r24, r1
     4c4:	13 c0       	rjmp	.+38     	; 0x4ec <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     4c6:	0c 81       	ldd	r16, Y+4	; 0x04
     4c8:	1d 81       	ldd	r17, Y+5	; 0x05
     4ca:	c1 2c       	mov	r12, r1
     4cc:	d1 2c       	mov	r13, r1
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f8 ef       	ldi	r31, 0xF8	; 248
     4d2:	ef 2e       	mov	r14, r31
     4d4:	f3 e0       	ldi	r31, 0x03	; 3
     4d6:	ff 2e       	mov	r15, r31
     4d8:	f0 2d       	mov	r31, r0
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	a9 01       	movw	r20, r18
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	cb 01       	movw	r24, r22
     4e6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
     4ea:	12 c0       	rjmp	.+36     	; 0x510 <__stack+0x11>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     4ec:	0e 81       	ldd	r16, Y+6	; 0x06
     4ee:	1f 81       	ldd	r17, Y+7	; 0x07
     4f0:	c1 2c       	mov	r12, r1
     4f2:	d1 2c       	mov	r13, r1
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f8 ef       	ldi	r31, 0xF8	; 248
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f3 e0       	ldi	r31, 0x03	; 3
     4fc:	ff 2e       	mov	r15, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	cb 01       	movw	r24, r22
     50c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	ASYNC(self, updateDisplay, 0);
     510:	c1 2c       	mov	r12, r1
     512:	d1 2c       	mov	r13, r1
     514:	0f 2e       	mov	r0, r31
     516:	f4 ef       	ldi	r31, 0xF4	; 244
     518:	ef 2e       	mov	r14, r31
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	ff 2e       	mov	r15, r31
     51e:	f0 2d       	mov	r31, r0
     520:	8e 01       	movw	r16, r28
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	cb 01       	movw	r24, r22
     52e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	return 0;
}
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	08 95       	ret

00000548 <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     55a:	88 85       	ldd	r24, Y+8	; 0x08
     55c:	81 11       	cpse	r24, r1
     55e:	13 c0       	rjmp	.+38     	; 0x586 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     560:	0c 81       	ldd	r16, Y+4	; 0x04
     562:	1d 81       	ldd	r17, Y+5	; 0x05
     564:	c1 2c       	mov	r12, r1
     566:	d1 2c       	mov	r13, r1
     568:	0f 2e       	mov	r0, r31
     56a:	f9 e2       	ldi	r31, 0x29	; 41
     56c:	ef 2e       	mov	r14, r31
     56e:	f4 e0       	ldi	r31, 0x04	; 4
     570:	ff 2e       	mov	r15, r31
     572:	f0 2d       	mov	r31, r0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	a9 01       	movw	r20, r18
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	cb 01       	movw	r24, r22
     580:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
     584:	12 c0       	rjmp	.+36     	; 0x5aa <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     586:	0e 81       	ldd	r16, Y+6	; 0x06
     588:	1f 81       	ldd	r17, Y+7	; 0x07
     58a:	c1 2c       	mov	r12, r1
     58c:	d1 2c       	mov	r13, r1
     58e:	0f 2e       	mov	r0, r31
     590:	f9 e2       	ldi	r31, 0x29	; 41
     592:	ef 2e       	mov	r14, r31
     594:	f4 e0       	ldi	r31, 0x04	; 4
     596:	ff 2e       	mov	r15, r31
     598:	f0 2d       	mov	r31, r0
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	a9 01       	movw	r20, r18
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	cb 01       	movw	r24, r22
     5a6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	ASYNC(self, updateDisplay, 0);
     5aa:	c1 2c       	mov	r12, r1
     5ac:	d1 2c       	mov	r13, r1
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f4 ef       	ldi	r31, 0xF4	; 244
     5b2:	ef 2e       	mov	r14, r31
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	ff 2e       	mov	r15, r31
     5b8:	f0 2d       	mov	r31, r0
     5ba:	8e 01       	movw	r16, r28
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	a9 01       	movw	r20, r18
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	cb 01       	movw	r24, r22
     5c8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	return 0;
}
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens (se FrecReset i pulsegen).
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     5f4:	88 85       	ldd	r24, Y+8	; 0x08
     5f6:	81 11       	cpse	r24, r1
     5f8:	13 c0       	rjmp	.+38     	; 0x620 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     5fa:	0c 81       	ldd	r16, Y+4	; 0x04
     5fc:	1d 81       	ldd	r17, Y+5	; 0x05
     5fe:	c1 2c       	mov	r12, r1
     600:	d1 2c       	mov	r13, r1
     602:	0f 2e       	mov	r0, r31
     604:	f6 e3       	ldi	r31, 0x36	; 54
     606:	ef 2e       	mov	r14, r31
     608:	f4 e0       	ldi	r31, 0x04	; 4
     60a:	ff 2e       	mov	r15, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	a9 01       	movw	r20, r18
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	cb 01       	movw	r24, r22
     61a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
     61e:	12 c0       	rjmp	.+36     	; 0x644 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     620:	0e 81       	ldd	r16, Y+6	; 0x06
     622:	1f 81       	ldd	r17, Y+7	; 0x07
     624:	c1 2c       	mov	r12, r1
     626:	d1 2c       	mov	r13, r1
     628:	0f 2e       	mov	r0, r31
     62a:	f6 e3       	ldi	r31, 0x36	; 54
     62c:	ef 2e       	mov	r14, r31
     62e:	f4 e0       	ldi	r31, 0x04	; 4
     630:	ff 2e       	mov	r15, r31
     632:	f0 2d       	mov	r31, r0
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	a9 01       	movw	r20, r18
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	cb 01       	movw	r24, r22
     640:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	}
	ASYNC(self, updateDisplay, 0);
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1
     648:	0f 2e       	mov	r0, r31
     64a:	f4 ef       	ldi	r31, 0xF4	; 244
     64c:	ef 2e       	mov	r14, r31
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	ff 2e       	mov	r15, r31
     652:	f0 2d       	mov	r31, r0
     654:	8e 01       	movw	r16, r28
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	cb 01       	movw	r24, r22
     662:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	return 0;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret

0000067c <startProgram>:
// Skapar ett Button-objekt som kopplas till GUI för att byta generator/frekvens.
Button button = initButton(&gui);

// startApp() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay asynkront för att initiera LCD-uppdateringar.
int startProgram(GUI *self, int arg) {
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     68e:	c1 2c       	mov	r12, r1
     690:	d1 2c       	mov	r13, r1
     692:	0f 2e       	mov	r0, r31
     694:	fa e9       	ldi	r31, 0x9A	; 154
     696:	ef 2e       	mov	r14, r31
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	ff 2e       	mov	r15, r31
     69c:	f0 2d       	mov	r31, r0
     69e:	0b e1       	ldi	r16, 0x1B	; 27
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	ASYNC(&pulseGen2, setPulse, 0);
     6b2:	0f e0       	ldi	r16, 0x0F	; 15
     6b4:	11 e0       	ldi	r17, 0x01	; 1
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	a9 01       	movw	r20, r18
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	cb 01       	movw	r24, r22
     6c2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     6c6:	0f 2e       	mov	r0, r31
     6c8:	f4 ef       	ldi	r31, 0xF4	; 244
     6ca:	ef 2e       	mov	r14, r31
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0
     6d2:	8e 01       	movw	r16, r28
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	a9 01       	movw	r20, r18
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	cb 01       	movw	r24, r22
     6e0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>

	return 0;
}
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	08 95       	ret

000006fa <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     6fa:	0e 94 6f 04 	call	0x8de	; 0x8de <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     6fe:	0e 94 40 01 	call	0x280	; 0x280 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     702:	0e 94 4d 00 	call	0x9a	; 0x9a <btn_init>

	// Installera knappobjektet som avbrottshanterare för PCINT0 och PCINT1.
	INSTALL(&button, debounceButtons, IRQ_PCINT0);
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	66 e1       	ldi	r22, 0x16	; 22
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 99 10 	call	0x2132	; 0x2132 <install>
	INSTALL(&button, debounceButtons, IRQ_PCINT1);
     714:	42 e0       	ldi	r20, 0x02	; 2
     716:	66 e1       	ldi	r22, 0x16	; 22
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 99 10 	call	0x2132	; 0x2132 <install>

	// TINYTIMBER startar kärnan. Vi anropar startApp på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	6e e3       	ldi	r22, 0x3E	; 62
     728:	73 e0       	ldi	r23, 0x03	; 3
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 b3 10 	call	0x2166	; 0x2166 <tinytimber>
}
     732:	08 95       	ret

00000734 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling (halvperiod).
int setPulse(Pulsegenerator *self, int arg) {
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
	if (self->frec == 0) {
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	9d 81       	ldd	r25, Y+5	; 0x05
     74a:	89 2b       	or	r24, r25
     74c:	51 f4       	brne	.+20     	; 0x762 <setPulse+0x2e>
		self->pos = false;
     74e:	18 86       	std	Y+8, r1	; 0x08
		int packed = PACK_BIT(self->bit, 0);
		SYNC(self->wbitPtr, writeBit, packed);
     750:	59 85       	ldd	r21, Y+9	; 0x09
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	6f ec       	ldi	r22, 0xCF	; 207
     756:	70 e1       	ldi	r23, 0x10	; 16
     758:	8a 85       	ldd	r24, Y+10	; 0x0a
     75a:	9b 85       	ldd	r25, Y+11	; 0x0b
     75c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sync>
		return 0;
     760:	38 c0       	rjmp	.+112    	; 0x7d2 <setPulse+0x9e>
	}
	
	// Annars toggla pos (true/false => bit=1/0).
	self->pos = !(self->pos);
     762:	48 85       	ldd	r20, Y+8	; 0x08
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	48 27       	eor	r20, r24
     768:	48 87       	std	Y+8, r20	; 0x08
	int value = self->pos ? 1 : 0;
	int packed = PACK_BIT(self->bit, value);
	// Skriv ut på PORTE via SYNC för att vänta tills skrivningen är klar.
	SYNC(self->wbitPtr, writeBit, packed);
     76a:	89 85       	ldd	r24, Y+9	; 0x09
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	58 2b       	or	r21, r24
     770:	6f ec       	ldi	r22, 0xCF	; 207
     772:	70 e1       	ldi	r23, 0x10	; 16
     774:	8a 85       	ldd	r24, Y+10	; 0x0a
     776:	9b 85       	ldd	r25, Y+11	; 0x0b
     778:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sync>
	
	// Delay = 500 / frekvens => halvperiod i ms, AFTER planerar nästa anrop.
	int delay = 500 / self->frec;
	AFTER(MSEC(delay), self, setPulse, 0);
     77c:	6c 81       	ldd	r22, Y+4	; 0x04
     77e:	7d 81       	ldd	r23, Y+5	; 0x05
     780:	84 ef       	ldi	r24, 0xF4	; 244
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__udivmodhi4>
     788:	2d e7       	ldi	r18, 0x7D	; 125
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	db 01       	movw	r26, r22
     78e:	0e 94 1d 11 	call	0x223a	; 0x223a <__usmulhisi3>
     792:	8b 01       	movw	r16, r22
     794:	9c 01       	movw	r18, r24
     796:	99 23       	and	r25, r25
     798:	24 f4       	brge	.+8      	; 0x7a2 <setPulse+0x6e>
     79a:	0d 5f       	subi	r16, 0xFD	; 253
     79c:	1f 4f       	sbci	r17, 0xFF	; 255
     79e:	2f 4f       	sbci	r18, 0xFF	; 255
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	c9 01       	movw	r24, r18
     7a4:	b8 01       	movw	r22, r16
     7a6:	95 95       	asr	r25
     7a8:	87 95       	ror	r24
     7aa:	77 95       	ror	r23
     7ac:	67 95       	ror	r22
     7ae:	95 95       	asr	r25
     7b0:	87 95       	ror	r24
     7b2:	77 95       	ror	r23
     7b4:	67 95       	ror	r22
     7b6:	c1 2c       	mov	r12, r1
     7b8:	d1 2c       	mov	r13, r1
     7ba:	0f 2e       	mov	r0, r31
     7bc:	fa e9       	ldi	r31, 0x9A	; 154
     7be:	ef 2e       	mov	r14, r31
     7c0:	f3 e0       	ldi	r31, 0x03	; 3
     7c2:	ff 2e       	mov	r15, r31
     7c4:	f0 2d       	mov	r31, r0
     7c6:	8e 01       	movw	r16, r28
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	a9 01       	movw	r20, r18
     7ce:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
	return 0;
}
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	08 95       	ret

000007e8 <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
}
     7e8:	fc 01       	movw	r30, r24
     7ea:	84 81       	ldd	r24, Z+4	; 0x04
     7ec:	95 81       	ldd	r25, Z+5	; 0x05
     7ee:	08 95       	ret

000007f0 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
// Om frekvens gick från 0 till >0, starta togglingen via ASYNC(setPulse).
int FrecInc(Pulsegenerator *self, int arg) {
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
	int wasZero = (self->frec == 0);
     802:	8c 81       	ldd	r24, Y+4	; 0x04
     804:	9d 81       	ldd	r25, Y+5	; 0x05
	if (self->frec < 99) {
     806:	83 36       	cpi	r24, 0x63	; 99
     808:	91 05       	cpc	r25, r1
     80a:	c0 f4       	brcc	.+48     	; 0x83c <FrecInc+0x4c>
		self->frec++;
     80c:	9c 01       	movw	r18, r24
     80e:	2f 5f       	subi	r18, 0xFF	; 255
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	3d 83       	std	Y+5, r19	; 0x05
     814:	2c 83       	std	Y+4, r18	; 0x04
		if (wasZero && self->frec > 0) {
     816:	89 2b       	or	r24, r25
     818:	89 f4       	brne	.+34     	; 0x83c <FrecInc+0x4c>
			ASYNC(self, setPulse, 0);
     81a:	c1 2c       	mov	r12, r1
     81c:	d1 2c       	mov	r13, r1
     81e:	0f 2e       	mov	r0, r31
     820:	fa e9       	ldi	r31, 0x9A	; 154
     822:	ef 2e       	mov	r14, r31
     824:	f3 e0       	ldi	r31, 0x03	; 3
     826:	ff 2e       	mov	r15, r31
     828:	f0 2d       	mov	r31, r0
     82a:	8e 01       	movw	r16, r28
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	a9 01       	movw	r20, r18
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	cb 01       	movw	r24, r22
     838:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
		}
	}
	return self->frec;
}
     83c:	8c 81       	ldd	r24, Y+4	; 0x04
     83e:	9d 81       	ldd	r25, Y+5	; 0x05
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <FrecDec>:

// FrecDec() minskar frekvensen ned till minst 0 (stannar togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     852:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     854:	24 81       	ldd	r18, Z+4	; 0x04
     856:	35 81       	ldd	r19, Z+5	; 0x05
     858:	21 15       	cp	r18, r1
     85a:	31 05       	cpc	r19, r1
     85c:	21 f0       	breq	.+8      	; 0x866 <FrecDec+0x14>
		self->frec--;
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	31 09       	sbc	r19, r1
     862:	35 83       	std	Z+5, r19	; 0x05
     864:	24 83       	std	Z+4, r18	; 0x04
	}
	return self->frec;
}
     866:	84 81       	ldd	r24, Z+4	; 0x04
     868:	95 81       	ldd	r25, Z+5	; 0x05
     86a:	08 95       	ret

0000086c <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt utgång låg.
int FrecReset(Pulsegenerator *self, int arg) {
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	fc 01       	movw	r30, r24
	if (self->frec == 0) {
     87a:	84 81       	ldd	r24, Z+4	; 0x04
     87c:	95 81       	ldd	r25, Z+5	; 0x05
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	c1 f4       	brne	.+48     	; 0x8b2 <FrecReset+0x46>
		self->frec = self->frec_old;
     882:	86 81       	ldd	r24, Z+6	; 0x06
     884:	97 81       	ldd	r25, Z+7	; 0x07
     886:	95 83       	std	Z+5, r25	; 0x05
     888:	84 83       	std	Z+4, r24	; 0x04
		if (self->frec > 0) {
     88a:	89 2b       	or	r24, r25
     88c:	f9 f0       	breq	.+62     	; 0x8cc <FrecReset+0x60>
			ASYNC(self, setPulse, 0);
     88e:	c1 2c       	mov	r12, r1
     890:	d1 2c       	mov	r13, r1
     892:	0f 2e       	mov	r0, r31
     894:	fa e9       	ldi	r31, 0x9A	; 154
     896:	ef 2e       	mov	r14, r31
     898:	f3 e0       	ldi	r31, 0x03	; 3
     89a:	ff 2e       	mov	r15, r31
     89c:	f0 2d       	mov	r31, r0
     89e:	8f 01       	movw	r16, r30
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	a9 01       	movw	r20, r18
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	cb 01       	movw	r24, r22
     8ac:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
     8b0:	0d c0       	rjmp	.+26     	; 0x8cc <FrecReset+0x60>
		}
		} else {
		self->frec_old = self->frec;
     8b2:	97 83       	std	Z+7, r25	; 0x07
     8b4:	86 83       	std	Z+6, r24	; 0x06
		self->frec = 0;
     8b6:	15 82       	std	Z+5, r1	; 0x05
     8b8:	14 82       	std	Z+4, r1	; 0x04
		self->pos = false;
     8ba:	10 86       	std	Z+8, r1	; 0x08
		int packed = PACK_BIT(self->bit, 0);
		SYNC(self->wbitPtr, writeBit, packed);
     8bc:	51 85       	ldd	r21, Z+9	; 0x09
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	6f ec       	ldi	r22, 0xCF	; 207
     8c2:	70 e1       	ldi	r23, 0x10	; 16
     8c4:	82 85       	ldd	r24, Z+10	; 0x0a
     8c6:	93 85       	ldd	r25, Z+11	; 0x0b
     8c8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sync>
	}
	return 0;
}
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	08 95       	ret

000008de <avr_init>:

// avr_init() initierar klockan och timer1 för att stödja TinyTimber-schemaläggning
// samt tidberäkningar. Den ställer också in prescalers och andra timerregister.
void avr_init(){
	
	CLKPR = 0x80;
     8de:	e1 e6       	ldi	r30, 0x61	; 97
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 e8       	ldi	r24, 0x80	; 128
     8e4:	80 83       	st	Z, r24
	CLKPR = 0x00;
     8e6:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     8e8:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     8ea:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     8ec:	e1 e8       	ldi	r30, 0x81	; 129
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	8d 60       	ori	r24, 0x0D	; 13
     8f4:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     8f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     8fe:	ef e6       	ldi	r30, 0x6F	; 111
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	82 60       	ori	r24, 0x02	; 2
     906:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     908:	82 ec       	ldi	r24, 0xC2	; 194
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     910:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     914:	08 95       	ret

00000916 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	00 d0       	rcall	.+0      	; 0x91c <initialize+0x6>
     91c:	00 d0       	rcall	.+0      	; 0x91e <initialize+0x8>
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	8c e3       	ldi	r24, 0x3C	; 60
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	2c e1       	ldi	r18, 0x1C	; 28
     928:	33 e0       	ldi	r19, 0x03	; 3
     92a:	fc 01       	movw	r30, r24
     92c:	70 97       	sbiw	r30, 0x10	; 16
     92e:	91 83       	std	Z+1, r25	; 0x01
     930:	80 83       	st	Z, r24
     932:	40 96       	adiw	r24, 0x10	; 16
     934:	82 17       	cp	r24, r18
     936:	93 07       	cpc	r25, r19
     938:	c1 f7       	brne	.-16     	; 0x92a <initialize+0x14>
     93a:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <messages+0xe1>
     93e:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <messages+0xe0>
     942:	e7 e7       	ldi	r30, 0x77	; 119
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	84 e9       	ldi	r24, 0x94	; 148
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	91 83       	std	Z+1, r25	; 0x01
     94c:	80 83       	st	Z, r24
     94e:	81 eb       	ldi	r24, 0xB1	; 177
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	96 8f       	std	Z+30, r25	; 0x1e
     954:	85 8f       	std	Z+29, r24	; 0x1d
     956:	ae ec       	ldi	r26, 0xCE	; 206
     958:	b1 e0       	ldi	r27, 0x01	; 1
     95a:	b3 af       	std	Z+59, r27	; 0x3b
     95c:	a2 af       	std	Z+58, r26	; 0x3a
     95e:	1d 92       	st	X+, r1
     960:	1c 92       	st	X, r1
     962:	fa 83       	std	Y+2, r31	; 0x02
     964:	e9 83       	std	Y+1, r30	; 0x01
     966:	e8 e7       	ldi	r30, 0x78	; 120
     968:	f3 e0       	ldi	r31, 0x03	; 3
     96a:	fc 83       	std	Y+4, r31	; 0x04
     96c:	eb 83       	std	Y+3, r30	; 0x03
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	06 96       	adiw	r24, 0x06	; 6
     974:	0e 94 55 11 	call	0x22aa	; 0x22aa <setjmp>
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	e9 81       	ldd	r30, Y+1	; 0x01
     97e:	fa 81       	ldd	r31, Y+2	; 0x02
     980:	97 8b       	std	Z+23, r25	; 0x17
     982:	86 8b       	std	Z+22, r24	; 0x16
     984:	91 8f       	std	Z+25, r25	; 0x19
     986:	80 8f       	std	Z+24, r24	; 0x18
     988:	8b e2       	ldi	r24, 0x2B	; 43
     98a:	90 e1       	ldi	r25, 0x10	; 16
     98c:	94 8f       	std	Z+28, r25	; 0x1c
     98e:	83 8f       	std	Z+27, r24	; 0x1b
     990:	15 82       	std	Z+5, r1	; 0x05
     992:	14 82       	std	Z+4, r1	; 0x04
     994:	7d 96       	adiw	r30, 0x1d	; 29
     996:	fa 83       	std	Y+2, r31	; 0x02
     998:	e9 83       	std	Y+1, r30	; 0x01
     99a:	eb 81       	ldd	r30, Y+3	; 0x03
     99c:	fc 81       	ldd	r31, Y+4	; 0x04
     99e:	e0 5a       	subi	r30, 0xA0	; 160
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	fc 83       	std	Y+4, r31	; 0x04
     9a4:	eb 83       	std	Y+3, r30	; 0x03
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	8b 5e       	subi	r24, 0xEB	; 235
     9ac:	91 40       	sbci	r25, 0x01	; 1
     9ae:	f9 f6       	brne	.-66     	; 0x96e <initialize+0x58>
     9b0:	ef e0       	ldi	r30, 0x0F	; 15
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	11 82       	std	Z+1, r1	; 0x01
     9b6:	10 82       	st	Z, r1
     9b8:	15 82       	std	Z+5, r1	; 0x05
     9ba:	14 82       	std	Z+4, r1	; 0x04
     9bc:	13 82       	std	Z+3, r1	; 0x03
     9be:	12 82       	std	Z+2, r1	; 0x02
     9c0:	e1 e6       	ldi	r30, 0x61	; 97
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 e8       	ldi	r24, 0x80	; 128
     9c6:	80 83       	st	Z, r24
     9c8:	10 82       	st	Z, r1
     9ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9d2:	84 e0       	ldi	r24, 0x04	; 4
     9d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <dispatch>:
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <dispatch+0x6>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <current>
     9fe:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <current+0x1>
     a02:	06 96       	adiw	r24, 0x06	; 6
     a04:	0e 94 55 11 	call	0x22aa	; 0x22aa <setjmp>
     a08:	89 2b       	or	r24, r25
     a0a:	59 f4       	brne	.+22     	; 0xa22 <dispatch+0x36>
     a0c:	89 81       	ldd	r24, Y+1	; 0x01
     a0e:	9a 81       	ldd	r25, Y+2	; 0x02
     a10:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <current+0x1>
     a14:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <current>
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	06 96       	adiw	r24, 0x06	; 6
     a1e:	0e 94 75 11 	call	0x22ea	; 0x22ea <longjmp>
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <schedule>:
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <msgQ>
     a38:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <msgQ+0x1>
     a3c:	30 97       	sbiw	r30, 0x00	; 0
     a3e:	61 f1       	breq	.+88     	; 0xa98 <schedule+0x6c>
     a40:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
     a44:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	31 f1       	breq	.+76     	; 0xa98 <schedule+0x6c>
     a4c:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <activeStack>
     a50:	d0 91 2a 01 	lds	r29, 0x012A	; 0x80012a <activeStack+0x1>
     a54:	aa 81       	ldd	r26, Y+2	; 0x02
     a56:	bb 81       	ldd	r27, Y+3	; 0x03
     a58:	10 97       	sbiw	r26, 0x00	; 0
     a5a:	79 f0       	breq	.+30     	; 0xa7a <schedule+0x4e>
     a5c:	46 81       	ldd	r20, Z+6	; 0x06
     a5e:	57 81       	ldd	r21, Z+7	; 0x07
     a60:	60 85       	ldd	r22, Z+8	; 0x08
     a62:	71 85       	ldd	r23, Z+9	; 0x09
     a64:	16 96       	adiw	r26, 0x06	; 6
     a66:	0d 91       	ld	r16, X+
     a68:	1d 91       	ld	r17, X+
     a6a:	2d 91       	ld	r18, X+
     a6c:	3c 91       	ld	r19, X
     a6e:	19 97       	sbiw	r26, 0x09	; 9
     a70:	40 1b       	sub	r20, r16
     a72:	51 0b       	sbc	r21, r17
     a74:	62 0b       	sbc	r22, r18
     a76:	73 0b       	sbc	r23, r19
     a78:	7a f4       	brpl	.+30     	; 0xa98 <schedule+0x6c>
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 81       	ld	r18, Z
     a7e:	31 81       	ldd	r19, Z+1	; 0x01
     a80:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <threadPool+0x1>
     a84:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <threadPool>
     a88:	d1 83       	std	Z+1, r29	; 0x01
     a8a:	c0 83       	st	Z, r28
     a8c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <activeStack+0x1>
     a90:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <activeStack>
     a94:	0e 94 f6 04 	call	0x9ec	; 0x9ec <dispatch>
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <__vector_1>:
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	ef 93       	push	r30
     ac2:	ff 93       	push	r31
     ac4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     ac8:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     acc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ad0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ad4:	c9 01       	movw	r24, r18
     ad6:	03 2e       	mov	r0, r19
     ad8:	00 0c       	add	r0, r0
     ada:	aa 0b       	sbc	r26, r26
     adc:	bb 0b       	sbc	r27, r27
     ade:	dc 01       	movw	r26, r24
     ae0:	99 27       	eor	r25, r25
     ae2:	88 27       	eor	r24, r24
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	84 2b       	or	r24, r20
     aea:	95 2b       	or	r25, r21
     aec:	a6 2b       	or	r26, r22
     aee:	b7 2b       	or	r27, r23
     af0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     af4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     af8:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     afc:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     b00:	b0 9b       	sbis	0x16, 0	; 22
     b02:	1b c0       	rjmp	.+54     	; 0xb3a <__vector_1+0x98>
     b04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b0c:	c9 01       	movw	r24, r18
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	09 2e       	mov	r0, r25
     b12:	00 0c       	add	r0, r0
     b14:	aa 0b       	sbc	r26, r26
     b16:	bb 0b       	sbc	r27, r27
     b18:	dc 01       	movw	r26, r24
     b1a:	99 27       	eor	r25, r25
     b1c:	88 27       	eor	r24, r24
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	84 2b       	or	r24, r20
     b24:	95 2b       	or	r25, r21
     b26:	a6 2b       	or	r26, r22
     b28:	b7 2b       	or	r27, r23
     b2a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     b2e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     b32:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     b36:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     b3a:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <mtable>
     b3e:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <mtable+0x1>
     b42:	30 97       	sbiw	r30, 0x00	; 0
     b44:	39 f0       	breq	.+14     	; 0xb54 <__vector_1+0xb2>
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <otable>
     b4e:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <otable+0x1>
     b52:	09 95       	icall
     b54:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_2>:
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
     b9c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     ba0:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     ba4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ba8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bac:	c9 01       	movw	r24, r18
     bae:	03 2e       	mov	r0, r19
     bb0:	00 0c       	add	r0, r0
     bb2:	aa 0b       	sbc	r26, r26
     bb4:	bb 0b       	sbc	r27, r27
     bb6:	dc 01       	movw	r26, r24
     bb8:	99 27       	eor	r25, r25
     bba:	88 27       	eor	r24, r24
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	84 2b       	or	r24, r20
     bc2:	95 2b       	or	r25, r21
     bc4:	a6 2b       	or	r26, r22
     bc6:	b7 2b       	or	r27, r23
     bc8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     bcc:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     bd0:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     bd4:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     bd8:	b0 9b       	sbis	0x16, 0	; 22
     bda:	1b c0       	rjmp	.+54     	; 0xc12 <__vector_2+0x98>
     bdc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     be0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be4:	c9 01       	movw	r24, r18
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	09 2e       	mov	r0, r25
     bea:	00 0c       	add	r0, r0
     bec:	aa 0b       	sbc	r26, r26
     bee:	bb 0b       	sbc	r27, r27
     bf0:	dc 01       	movw	r26, r24
     bf2:	99 27       	eor	r25, r25
     bf4:	88 27       	eor	r24, r24
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	84 2b       	or	r24, r20
     bfc:	95 2b       	or	r25, r21
     bfe:	a6 2b       	or	r26, r22
     c00:	b7 2b       	or	r27, r23
     c02:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     c06:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     c0a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     c0e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     c12:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <mtable+0x2>
     c16:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <mtable+0x3>
     c1a:	30 97       	sbiw	r30, 0x00	; 0
     c1c:	39 f0       	breq	.+14     	; 0xc2c <__vector_2+0xb2>
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <otable+0x2>
     c26:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <otable+0x3>
     c2a:	09 95       	icall
     c2c:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	bf 91       	pop	r27
     c36:	af 91       	pop	r26
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	7f 91       	pop	r23
     c3e:	6f 91       	pop	r22
     c40:	5f 91       	pop	r21
     c42:	4f 91       	pop	r20
     c44:	3f 91       	pop	r19
     c46:	2f 91       	pop	r18
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <__vector_3>:
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
     c74:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     c78:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     c7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c84:	c9 01       	movw	r24, r18
     c86:	03 2e       	mov	r0, r19
     c88:	00 0c       	add	r0, r0
     c8a:	aa 0b       	sbc	r26, r26
     c8c:	bb 0b       	sbc	r27, r27
     c8e:	dc 01       	movw	r26, r24
     c90:	99 27       	eor	r25, r25
     c92:	88 27       	eor	r24, r24
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	84 2b       	or	r24, r20
     c9a:	95 2b       	or	r25, r21
     c9c:	a6 2b       	or	r26, r22
     c9e:	b7 2b       	or	r27, r23
     ca0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     ca4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     ca8:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     cac:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     cb0:	b0 9b       	sbis	0x16, 0	; 22
     cb2:	1b c0       	rjmp	.+54     	; 0xcea <__vector_3+0x98>
     cb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cbc:	c9 01       	movw	r24, r18
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	09 2e       	mov	r0, r25
     cc2:	00 0c       	add	r0, r0
     cc4:	aa 0b       	sbc	r26, r26
     cc6:	bb 0b       	sbc	r27, r27
     cc8:	dc 01       	movw	r26, r24
     cca:	99 27       	eor	r25, r25
     ccc:	88 27       	eor	r24, r24
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	84 2b       	or	r24, r20
     cd4:	95 2b       	or	r25, r21
     cd6:	a6 2b       	or	r26, r22
     cd8:	b7 2b       	or	r27, r23
     cda:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     cde:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     ce2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     ce6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     cea:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <mtable+0x4>
     cee:	f0 91 f0 01 	lds	r31, 0x01F0	; 0x8001f0 <mtable+0x5>
     cf2:	30 97       	sbiw	r30, 0x00	; 0
     cf4:	39 f0       	breq	.+14     	; 0xd04 <__vector_3+0xb2>
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <otable+0x4>
     cfe:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <otable+0x5>
     d02:	09 95       	icall
     d04:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <__vector_4>:
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	6f 93       	push	r22
     d3e:	7f 93       	push	r23
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
     d4c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     d50:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     d54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d5c:	c9 01       	movw	r24, r18
     d5e:	03 2e       	mov	r0, r19
     d60:	00 0c       	add	r0, r0
     d62:	aa 0b       	sbc	r26, r26
     d64:	bb 0b       	sbc	r27, r27
     d66:	dc 01       	movw	r26, r24
     d68:	99 27       	eor	r25, r25
     d6a:	88 27       	eor	r24, r24
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	84 2b       	or	r24, r20
     d72:	95 2b       	or	r25, r21
     d74:	a6 2b       	or	r26, r22
     d76:	b7 2b       	or	r27, r23
     d78:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     d7c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     d80:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     d84:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     d88:	b0 9b       	sbis	0x16, 0	; 22
     d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <__vector_4+0x98>
     d8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d94:	c9 01       	movw	r24, r18
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	09 2e       	mov	r0, r25
     d9a:	00 0c       	add	r0, r0
     d9c:	aa 0b       	sbc	r26, r26
     d9e:	bb 0b       	sbc	r27, r27
     da0:	dc 01       	movw	r26, r24
     da2:	99 27       	eor	r25, r25
     da4:	88 27       	eor	r24, r24
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	84 2b       	or	r24, r20
     dac:	95 2b       	or	r25, r21
     dae:	a6 2b       	or	r26, r22
     db0:	b7 2b       	or	r27, r23
     db2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     db6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     dba:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     dbe:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     dc2:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <mtable+0x6>
     dc6:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <mtable+0x7>
     dca:	30 97       	sbiw	r30, 0x00	; 0
     dcc:	39 f0       	breq	.+14     	; 0xddc <__vector_4+0xb2>
     dce:	63 e0       	ldi	r22, 0x03	; 3
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <otable+0x6>
     dd6:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <otable+0x7>
     dda:	09 95       	icall
     ddc:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_5>:
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
     e24:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     e28:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     e2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e34:	c9 01       	movw	r24, r18
     e36:	03 2e       	mov	r0, r19
     e38:	00 0c       	add	r0, r0
     e3a:	aa 0b       	sbc	r26, r26
     e3c:	bb 0b       	sbc	r27, r27
     e3e:	dc 01       	movw	r26, r24
     e40:	99 27       	eor	r25, r25
     e42:	88 27       	eor	r24, r24
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	84 2b       	or	r24, r20
     e4a:	95 2b       	or	r25, r21
     e4c:	a6 2b       	or	r26, r22
     e4e:	b7 2b       	or	r27, r23
     e50:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     e54:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     e58:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     e5c:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     e60:	b0 9b       	sbis	0x16, 0	; 22
     e62:	1b c0       	rjmp	.+54     	; 0xe9a <__vector_5+0x98>
     e64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e6c:	c9 01       	movw	r24, r18
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	09 2e       	mov	r0, r25
     e72:	00 0c       	add	r0, r0
     e74:	aa 0b       	sbc	r26, r26
     e76:	bb 0b       	sbc	r27, r27
     e78:	dc 01       	movw	r26, r24
     e7a:	99 27       	eor	r25, r25
     e7c:	88 27       	eor	r24, r24
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	84 2b       	or	r24, r20
     e84:	95 2b       	or	r25, r21
     e86:	a6 2b       	or	r26, r22
     e88:	b7 2b       	or	r27, r23
     e8a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     e8e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     e92:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     e96:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     e9a:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <mtable+0x8>
     e9e:	f0 91 f4 01 	lds	r31, 0x01F4	; 0x8001f4 <mtable+0x9>
     ea2:	30 97       	sbiw	r30, 0x00	; 0
     ea4:	39 f0       	breq	.+14     	; 0xeb4 <__vector_5+0xb2>
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <otable+0x8>
     eae:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <otable+0x9>
     eb2:	09 95       	icall
     eb4:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <__vector_10>:
     eda:	1f 92       	push	r1
     edc:	0f 92       	push	r0
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	0f 92       	push	r0
     ee2:	11 24       	eor	r1, r1
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
     efc:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     f00:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     f04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f0c:	c9 01       	movw	r24, r18
     f0e:	03 2e       	mov	r0, r19
     f10:	00 0c       	add	r0, r0
     f12:	aa 0b       	sbc	r26, r26
     f14:	bb 0b       	sbc	r27, r27
     f16:	dc 01       	movw	r26, r24
     f18:	99 27       	eor	r25, r25
     f1a:	88 27       	eor	r24, r24
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	84 2b       	or	r24, r20
     f22:	95 2b       	or	r25, r21
     f24:	a6 2b       	or	r26, r22
     f26:	b7 2b       	or	r27, r23
     f28:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     f2c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     f30:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     f34:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     f38:	b0 9b       	sbis	0x16, 0	; 22
     f3a:	1b c0       	rjmp	.+54     	; 0xf72 <__vector_10+0x98>
     f3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f44:	c9 01       	movw	r24, r18
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	09 2e       	mov	r0, r25
     f4a:	00 0c       	add	r0, r0
     f4c:	aa 0b       	sbc	r26, r26
     f4e:	bb 0b       	sbc	r27, r27
     f50:	dc 01       	movw	r26, r24
     f52:	99 27       	eor	r25, r25
     f54:	88 27       	eor	r24, r24
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	84 2b       	or	r24, r20
     f5c:	95 2b       	or	r25, r21
     f5e:	a6 2b       	or	r26, r22
     f60:	b7 2b       	or	r27, r23
     f62:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     f66:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     f6a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     f6e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     f72:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <mtable+0xa>
     f76:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <mtable+0xb>
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	39 f0       	breq	.+14     	; 0xf8c <__vector_10+0xb2>
     f7e:	65 e0       	ldi	r22, 0x05	; 5
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <otable+0xa>
     f86:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <otable+0xb>
     f8a:	09 95       	icall
     f8c:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <__vector_11>:
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
     fd4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     fd8:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     fdc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fe0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fe4:	c9 01       	movw	r24, r18
     fe6:	03 2e       	mov	r0, r19
     fe8:	00 0c       	add	r0, r0
     fea:	aa 0b       	sbc	r26, r26
     fec:	bb 0b       	sbc	r27, r27
     fee:	dc 01       	movw	r26, r24
     ff0:	99 27       	eor	r25, r25
     ff2:	88 27       	eor	r24, r24
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	84 2b       	or	r24, r20
     ffa:	95 2b       	or	r25, r21
     ffc:	a6 2b       	or	r26, r22
     ffe:	b7 2b       	or	r27, r23
    1000:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1004:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1008:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    100c:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1010:	b0 9b       	sbis	0x16, 0	; 22
    1012:	1b c0       	rjmp	.+54     	; 0x104a <__vector_11+0x98>
    1014:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1018:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    101c:	c9 01       	movw	r24, r18
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	09 2e       	mov	r0, r25
    1022:	00 0c       	add	r0, r0
    1024:	aa 0b       	sbc	r26, r26
    1026:	bb 0b       	sbc	r27, r27
    1028:	dc 01       	movw	r26, r24
    102a:	99 27       	eor	r25, r25
    102c:	88 27       	eor	r24, r24
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	84 2b       	or	r24, r20
    1034:	95 2b       	or	r25, r21
    1036:	a6 2b       	or	r26, r22
    1038:	b7 2b       	or	r27, r23
    103a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    103e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1042:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1046:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    104a:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <mtable+0xc>
    104e:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <mtable+0xd>
    1052:	30 97       	sbiw	r30, 0x00	; 0
    1054:	39 f0       	breq	.+14     	; 0x1064 <__vector_11+0xb2>
    1056:	66 e0       	ldi	r22, 0x06	; 6
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <otable+0xc>
    105e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <otable+0xd>
    1062:	09 95       	icall
    1064:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_12>:
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    10ac:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    10b0:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    10b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10bc:	c9 01       	movw	r24, r18
    10be:	03 2e       	mov	r0, r19
    10c0:	00 0c       	add	r0, r0
    10c2:	aa 0b       	sbc	r26, r26
    10c4:	bb 0b       	sbc	r27, r27
    10c6:	dc 01       	movw	r26, r24
    10c8:	99 27       	eor	r25, r25
    10ca:	88 27       	eor	r24, r24
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	84 2b       	or	r24, r20
    10d2:	95 2b       	or	r25, r21
    10d4:	a6 2b       	or	r26, r22
    10d6:	b7 2b       	or	r27, r23
    10d8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    10dc:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    10e0:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    10e4:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    10e8:	b0 9b       	sbis	0x16, 0	; 22
    10ea:	1b c0       	rjmp	.+54     	; 0x1122 <__vector_12+0x98>
    10ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10f4:	c9 01       	movw	r24, r18
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	09 2e       	mov	r0, r25
    10fa:	00 0c       	add	r0, r0
    10fc:	aa 0b       	sbc	r26, r26
    10fe:	bb 0b       	sbc	r27, r27
    1100:	dc 01       	movw	r26, r24
    1102:	99 27       	eor	r25, r25
    1104:	88 27       	eor	r24, r24
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	84 2b       	or	r24, r20
    110c:	95 2b       	or	r25, r21
    110e:	a6 2b       	or	r26, r22
    1110:	b7 2b       	or	r27, r23
    1112:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1116:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    111a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    111e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1122:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <mtable+0xe>
    1126:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <mtable+0xf>
    112a:	30 97       	sbiw	r30, 0x00	; 0
    112c:	39 f0       	breq	.+14     	; 0x113c <__vector_12+0xb2>
    112e:	67 e0       	ldi	r22, 0x07	; 7
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <otable+0xe>
    1136:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <otable+0xf>
    113a:	09 95       	icall
    113c:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1140:	ff 91       	pop	r31
    1142:	ef 91       	pop	r30
    1144:	bf 91       	pop	r27
    1146:	af 91       	pop	r26
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	7f 91       	pop	r23
    114e:	6f 91       	pop	r22
    1150:	5f 91       	pop	r21
    1152:	4f 91       	pop	r20
    1154:	3f 91       	pop	r19
    1156:	2f 91       	pop	r18
    1158:	0f 90       	pop	r0
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	0f 90       	pop	r0
    115e:	1f 90       	pop	r1
    1160:	18 95       	reti

00001162 <__vector_13>:
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	4f 93       	push	r20
    1172:	5f 93       	push	r21
    1174:	6f 93       	push	r22
    1176:	7f 93       	push	r23
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    117c:	af 93       	push	r26
    117e:	bf 93       	push	r27
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31
    1184:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1188:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    118c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1190:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1194:	c9 01       	movw	r24, r18
    1196:	03 2e       	mov	r0, r19
    1198:	00 0c       	add	r0, r0
    119a:	aa 0b       	sbc	r26, r26
    119c:	bb 0b       	sbc	r27, r27
    119e:	dc 01       	movw	r26, r24
    11a0:	99 27       	eor	r25, r25
    11a2:	88 27       	eor	r24, r24
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	84 2b       	or	r24, r20
    11aa:	95 2b       	or	r25, r21
    11ac:	a6 2b       	or	r26, r22
    11ae:	b7 2b       	or	r27, r23
    11b0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    11b4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    11b8:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    11bc:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    11c0:	b0 9b       	sbis	0x16, 0	; 22
    11c2:	1b c0       	rjmp	.+54     	; 0x11fa <__vector_13+0x98>
    11c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11cc:	c9 01       	movw	r24, r18
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	09 2e       	mov	r0, r25
    11d2:	00 0c       	add	r0, r0
    11d4:	aa 0b       	sbc	r26, r26
    11d6:	bb 0b       	sbc	r27, r27
    11d8:	dc 01       	movw	r26, r24
    11da:	99 27       	eor	r25, r25
    11dc:	88 27       	eor	r24, r24
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	84 2b       	or	r24, r20
    11e4:	95 2b       	or	r25, r21
    11e6:	a6 2b       	or	r26, r22
    11e8:	b7 2b       	or	r27, r23
    11ea:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    11ee:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    11f2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    11f6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    11fa:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <mtable+0x10>
    11fe:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <mtable+0x11>
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	39 f0       	breq	.+14     	; 0x1214 <__vector_13+0xb2>
    1206:	68 e0       	ldi	r22, 0x08	; 8
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <otable+0x10>
    120e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <otable+0x11>
    1212:	09 95       	icall
    1214:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_14>:
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	ef 93       	push	r30
    125a:	ff 93       	push	r31
    125c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1260:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1264:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1268:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    126c:	c9 01       	movw	r24, r18
    126e:	03 2e       	mov	r0, r19
    1270:	00 0c       	add	r0, r0
    1272:	aa 0b       	sbc	r26, r26
    1274:	bb 0b       	sbc	r27, r27
    1276:	dc 01       	movw	r26, r24
    1278:	99 27       	eor	r25, r25
    127a:	88 27       	eor	r24, r24
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	84 2b       	or	r24, r20
    1282:	95 2b       	or	r25, r21
    1284:	a6 2b       	or	r26, r22
    1286:	b7 2b       	or	r27, r23
    1288:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    128c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1290:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1294:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1298:	b0 9b       	sbis	0x16, 0	; 22
    129a:	1b c0       	rjmp	.+54     	; 0x12d2 <__vector_14+0x98>
    129c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a4:	c9 01       	movw	r24, r18
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	09 2e       	mov	r0, r25
    12aa:	00 0c       	add	r0, r0
    12ac:	aa 0b       	sbc	r26, r26
    12ae:	bb 0b       	sbc	r27, r27
    12b0:	dc 01       	movw	r26, r24
    12b2:	99 27       	eor	r25, r25
    12b4:	88 27       	eor	r24, r24
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	84 2b       	or	r24, r20
    12bc:	95 2b       	or	r25, r21
    12be:	a6 2b       	or	r26, r22
    12c0:	b7 2b       	or	r27, r23
    12c2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    12c6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    12ca:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    12ce:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    12d2:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <mtable+0x12>
    12d6:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <mtable+0x13>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	39 f0       	breq	.+14     	; 0x12ec <__vector_14+0xb2>
    12de:	69 e0       	ldi	r22, 0x09	; 9
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <otable+0x12>
    12e6:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <otable+0x13>
    12ea:	09 95       	icall
    12ec:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__vector_15>:
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
    1334:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1338:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    133c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1340:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1344:	c9 01       	movw	r24, r18
    1346:	03 2e       	mov	r0, r19
    1348:	00 0c       	add	r0, r0
    134a:	aa 0b       	sbc	r26, r26
    134c:	bb 0b       	sbc	r27, r27
    134e:	dc 01       	movw	r26, r24
    1350:	99 27       	eor	r25, r25
    1352:	88 27       	eor	r24, r24
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	84 2b       	or	r24, r20
    135a:	95 2b       	or	r25, r21
    135c:	a6 2b       	or	r26, r22
    135e:	b7 2b       	or	r27, r23
    1360:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1364:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1368:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    136c:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1370:	b0 9b       	sbis	0x16, 0	; 22
    1372:	1b c0       	rjmp	.+54     	; 0x13aa <__vector_15+0x98>
    1374:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1378:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    137c:	c9 01       	movw	r24, r18
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	09 2e       	mov	r0, r25
    1382:	00 0c       	add	r0, r0
    1384:	aa 0b       	sbc	r26, r26
    1386:	bb 0b       	sbc	r27, r27
    1388:	dc 01       	movw	r26, r24
    138a:	99 27       	eor	r25, r25
    138c:	88 27       	eor	r24, r24
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	84 2b       	or	r24, r20
    1394:	95 2b       	or	r25, r21
    1396:	a6 2b       	or	r26, r22
    1398:	b7 2b       	or	r27, r23
    139a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    139e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    13a2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    13a6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    13aa:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <mtable+0x14>
    13ae:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <mtable+0x15>
    13b2:	30 97       	sbiw	r30, 0x00	; 0
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <__vector_15+0xb2>
    13b6:	6a e0       	ldi	r22, 0x0A	; 10
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <otable+0x14>
    13be:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <otable+0x15>
    13c2:	09 95       	icall
    13c4:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_16>:
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
    140c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1410:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1414:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1418:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    141c:	c9 01       	movw	r24, r18
    141e:	03 2e       	mov	r0, r19
    1420:	00 0c       	add	r0, r0
    1422:	aa 0b       	sbc	r26, r26
    1424:	bb 0b       	sbc	r27, r27
    1426:	dc 01       	movw	r26, r24
    1428:	99 27       	eor	r25, r25
    142a:	88 27       	eor	r24, r24
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	84 2b       	or	r24, r20
    1432:	95 2b       	or	r25, r21
    1434:	a6 2b       	or	r26, r22
    1436:	b7 2b       	or	r27, r23
    1438:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    143c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1440:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1444:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1448:	b0 9b       	sbis	0x16, 0	; 22
    144a:	1b c0       	rjmp	.+54     	; 0x1482 <__vector_16+0x98>
    144c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1450:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1454:	c9 01       	movw	r24, r18
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	09 2e       	mov	r0, r25
    145a:	00 0c       	add	r0, r0
    145c:	aa 0b       	sbc	r26, r26
    145e:	bb 0b       	sbc	r27, r27
    1460:	dc 01       	movw	r26, r24
    1462:	99 27       	eor	r25, r25
    1464:	88 27       	eor	r24, r24
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	84 2b       	or	r24, r20
    146c:	95 2b       	or	r25, r21
    146e:	a6 2b       	or	r26, r22
    1470:	b7 2b       	or	r27, r23
    1472:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1476:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    147a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    147e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1482:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <mtable+0x16>
    1486:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <mtable+0x17>
    148a:	30 97       	sbiw	r30, 0x00	; 0
    148c:	39 f0       	breq	.+14     	; 0x149c <__vector_16+0xb2>
    148e:	6b e0       	ldi	r22, 0x0B	; 11
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <otable+0x16>
    1496:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <otable+0x17>
    149a:	09 95       	icall
    149c:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_17>:
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	2f 93       	push	r18
    14ce:	3f 93       	push	r19
    14d0:	4f 93       	push	r20
    14d2:	5f 93       	push	r21
    14d4:	6f 93       	push	r22
    14d6:	7f 93       	push	r23
    14d8:	8f 93       	push	r24
    14da:	9f 93       	push	r25
    14dc:	af 93       	push	r26
    14de:	bf 93       	push	r27
    14e0:	ef 93       	push	r30
    14e2:	ff 93       	push	r31
    14e4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    14e8:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    14ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14f4:	c9 01       	movw	r24, r18
    14f6:	03 2e       	mov	r0, r19
    14f8:	00 0c       	add	r0, r0
    14fa:	aa 0b       	sbc	r26, r26
    14fc:	bb 0b       	sbc	r27, r27
    14fe:	dc 01       	movw	r26, r24
    1500:	99 27       	eor	r25, r25
    1502:	88 27       	eor	r24, r24
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	84 2b       	or	r24, r20
    150a:	95 2b       	or	r25, r21
    150c:	a6 2b       	or	r26, r22
    150e:	b7 2b       	or	r27, r23
    1510:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1514:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1518:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    151c:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1520:	b0 9b       	sbis	0x16, 0	; 22
    1522:	1b c0       	rjmp	.+54     	; 0x155a <__vector_17+0x98>
    1524:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1528:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    152c:	c9 01       	movw	r24, r18
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	09 2e       	mov	r0, r25
    1532:	00 0c       	add	r0, r0
    1534:	aa 0b       	sbc	r26, r26
    1536:	bb 0b       	sbc	r27, r27
    1538:	dc 01       	movw	r26, r24
    153a:	99 27       	eor	r25, r25
    153c:	88 27       	eor	r24, r24
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	84 2b       	or	r24, r20
    1544:	95 2b       	or	r25, r21
    1546:	a6 2b       	or	r26, r22
    1548:	b7 2b       	or	r27, r23
    154a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    154e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1552:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1556:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    155a:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <mtable+0x18>
    155e:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <mtable+0x19>
    1562:	30 97       	sbiw	r30, 0x00	; 0
    1564:	39 f0       	breq	.+14     	; 0x1574 <__vector_17+0xb2>
    1566:	6c e0       	ldi	r22, 0x0C	; 12
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <otable+0x18>
    156e:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <otable+0x19>
    1572:	09 95       	icall
    1574:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <__vector_18>:
    159a:	1f 92       	push	r1
    159c:	0f 92       	push	r0
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    15c0:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    15c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15cc:	c9 01       	movw	r24, r18
    15ce:	03 2e       	mov	r0, r19
    15d0:	00 0c       	add	r0, r0
    15d2:	aa 0b       	sbc	r26, r26
    15d4:	bb 0b       	sbc	r27, r27
    15d6:	dc 01       	movw	r26, r24
    15d8:	99 27       	eor	r25, r25
    15da:	88 27       	eor	r24, r24
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	84 2b       	or	r24, r20
    15e2:	95 2b       	or	r25, r21
    15e4:	a6 2b       	or	r26, r22
    15e6:	b7 2b       	or	r27, r23
    15e8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    15ec:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    15f0:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    15f4:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    15f8:	b0 9b       	sbis	0x16, 0	; 22
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <__vector_18+0x98>
    15fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1600:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1604:	c9 01       	movw	r24, r18
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	09 2e       	mov	r0, r25
    160a:	00 0c       	add	r0, r0
    160c:	aa 0b       	sbc	r26, r26
    160e:	bb 0b       	sbc	r27, r27
    1610:	dc 01       	movw	r26, r24
    1612:	99 27       	eor	r25, r25
    1614:	88 27       	eor	r24, r24
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	84 2b       	or	r24, r20
    161c:	95 2b       	or	r25, r21
    161e:	a6 2b       	or	r26, r22
    1620:	b7 2b       	or	r27, r23
    1622:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1626:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    162a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    162e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1632:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <mtable+0x1a>
    1636:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <mtable+0x1b>
    163a:	30 97       	sbiw	r30, 0x00	; 0
    163c:	39 f0       	breq	.+14     	; 0x164c <__vector_18+0xb2>
    163e:	6d e0       	ldi	r22, 0x0D	; 13
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <otable+0x1a>
    1646:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <otable+0x1b>
    164a:	09 95       	icall
    164c:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1650:	ff 91       	pop	r31
    1652:	ef 91       	pop	r30
    1654:	bf 91       	pop	r27
    1656:	af 91       	pop	r26
    1658:	9f 91       	pop	r25
    165a:	8f 91       	pop	r24
    165c:	7f 91       	pop	r23
    165e:	6f 91       	pop	r22
    1660:	5f 91       	pop	r21
    1662:	4f 91       	pop	r20
    1664:	3f 91       	pop	r19
    1666:	2f 91       	pop	r18
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <__vector_19>:
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	2f 93       	push	r18
    167e:	3f 93       	push	r19
    1680:	4f 93       	push	r20
    1682:	5f 93       	push	r21
    1684:	6f 93       	push	r22
    1686:	7f 93       	push	r23
    1688:	8f 93       	push	r24
    168a:	9f 93       	push	r25
    168c:	af 93       	push	r26
    168e:	bf 93       	push	r27
    1690:	ef 93       	push	r30
    1692:	ff 93       	push	r31
    1694:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1698:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    169c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16a4:	c9 01       	movw	r24, r18
    16a6:	03 2e       	mov	r0, r19
    16a8:	00 0c       	add	r0, r0
    16aa:	aa 0b       	sbc	r26, r26
    16ac:	bb 0b       	sbc	r27, r27
    16ae:	dc 01       	movw	r26, r24
    16b0:	99 27       	eor	r25, r25
    16b2:	88 27       	eor	r24, r24
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	84 2b       	or	r24, r20
    16ba:	95 2b       	or	r25, r21
    16bc:	a6 2b       	or	r26, r22
    16be:	b7 2b       	or	r27, r23
    16c0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    16c4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    16c8:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    16cc:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    16d0:	b0 9b       	sbis	0x16, 0	; 22
    16d2:	1b c0       	rjmp	.+54     	; 0x170a <__vector_19+0x98>
    16d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16dc:	c9 01       	movw	r24, r18
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	09 2e       	mov	r0, r25
    16e2:	00 0c       	add	r0, r0
    16e4:	aa 0b       	sbc	r26, r26
    16e6:	bb 0b       	sbc	r27, r27
    16e8:	dc 01       	movw	r26, r24
    16ea:	99 27       	eor	r25, r25
    16ec:	88 27       	eor	r24, r24
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	84 2b       	or	r24, r20
    16f4:	95 2b       	or	r25, r21
    16f6:	a6 2b       	or	r26, r22
    16f8:	b7 2b       	or	r27, r23
    16fa:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    16fe:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1702:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1706:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    170a:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <mtable+0x1c>
    170e:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <mtable+0x1d>
    1712:	30 97       	sbiw	r30, 0x00	; 0
    1714:	39 f0       	breq	.+14     	; 0x1724 <__vector_19+0xb2>
    1716:	6e e0       	ldi	r22, 0x0E	; 14
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <otable+0x1c>
    171e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <otable+0x1d>
    1722:	09 95       	icall
    1724:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	bf 91       	pop	r27
    172e:	af 91       	pop	r26
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	7f 91       	pop	r23
    1736:	6f 91       	pop	r22
    1738:	5f 91       	pop	r21
    173a:	4f 91       	pop	r20
    173c:	3f 91       	pop	r19
    173e:	2f 91       	pop	r18
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__vector_20>:
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	11 24       	eor	r1, r1
    1754:	2f 93       	push	r18
    1756:	3f 93       	push	r19
    1758:	4f 93       	push	r20
    175a:	5f 93       	push	r21
    175c:	6f 93       	push	r22
    175e:	7f 93       	push	r23
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
    1764:	af 93       	push	r26
    1766:	bf 93       	push	r27
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
    176c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1770:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1774:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1778:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    177c:	c9 01       	movw	r24, r18
    177e:	03 2e       	mov	r0, r19
    1780:	00 0c       	add	r0, r0
    1782:	aa 0b       	sbc	r26, r26
    1784:	bb 0b       	sbc	r27, r27
    1786:	dc 01       	movw	r26, r24
    1788:	99 27       	eor	r25, r25
    178a:	88 27       	eor	r24, r24
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	84 2b       	or	r24, r20
    1792:	95 2b       	or	r25, r21
    1794:	a6 2b       	or	r26, r22
    1796:	b7 2b       	or	r27, r23
    1798:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    179c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    17a0:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    17a4:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    17a8:	b0 9b       	sbis	0x16, 0	; 22
    17aa:	1b c0       	rjmp	.+54     	; 0x17e2 <__vector_20+0x98>
    17ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17b4:	c9 01       	movw	r24, r18
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	09 2e       	mov	r0, r25
    17ba:	00 0c       	add	r0, r0
    17bc:	aa 0b       	sbc	r26, r26
    17be:	bb 0b       	sbc	r27, r27
    17c0:	dc 01       	movw	r26, r24
    17c2:	99 27       	eor	r25, r25
    17c4:	88 27       	eor	r24, r24
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	84 2b       	or	r24, r20
    17cc:	95 2b       	or	r25, r21
    17ce:	a6 2b       	or	r26, r22
    17d0:	b7 2b       	or	r27, r23
    17d2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    17d6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    17da:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    17de:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    17e2:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <mtable+0x1e>
    17e6:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <mtable+0x1f>
    17ea:	30 97       	sbiw	r30, 0x00	; 0
    17ec:	39 f0       	breq	.+14     	; 0x17fc <__vector_20+0xb2>
    17ee:	6f e0       	ldi	r22, 0x0F	; 15
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <otable+0x1e>
    17f6:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <otable+0x1f>
    17fa:	09 95       	icall
    17fc:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1800:	ff 91       	pop	r31
    1802:	ef 91       	pop	r30
    1804:	bf 91       	pop	r27
    1806:	af 91       	pop	r26
    1808:	9f 91       	pop	r25
    180a:	8f 91       	pop	r24
    180c:	7f 91       	pop	r23
    180e:	6f 91       	pop	r22
    1810:	5f 91       	pop	r21
    1812:	4f 91       	pop	r20
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <__vector_21>:
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
    1844:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1848:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    184c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1850:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1854:	c9 01       	movw	r24, r18
    1856:	03 2e       	mov	r0, r19
    1858:	00 0c       	add	r0, r0
    185a:	aa 0b       	sbc	r26, r26
    185c:	bb 0b       	sbc	r27, r27
    185e:	dc 01       	movw	r26, r24
    1860:	99 27       	eor	r25, r25
    1862:	88 27       	eor	r24, r24
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	84 2b       	or	r24, r20
    186a:	95 2b       	or	r25, r21
    186c:	a6 2b       	or	r26, r22
    186e:	b7 2b       	or	r27, r23
    1870:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1874:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1878:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    187c:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1880:	b0 9b       	sbis	0x16, 0	; 22
    1882:	1b c0       	rjmp	.+54     	; 0x18ba <__vector_21+0x98>
    1884:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1888:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    188c:	c9 01       	movw	r24, r18
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	09 2e       	mov	r0, r25
    1892:	00 0c       	add	r0, r0
    1894:	aa 0b       	sbc	r26, r26
    1896:	bb 0b       	sbc	r27, r27
    1898:	dc 01       	movw	r26, r24
    189a:	99 27       	eor	r25, r25
    189c:	88 27       	eor	r24, r24
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	84 2b       	or	r24, r20
    18a4:	95 2b       	or	r25, r21
    18a6:	a6 2b       	or	r26, r22
    18a8:	b7 2b       	or	r27, r23
    18aa:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    18ae:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    18b2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    18b6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    18ba:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <mtable+0x20>
    18be:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <mtable+0x21>
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <__vector_21+0xb2>
    18c6:	60 e1       	ldi	r22, 0x10	; 16
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <otable+0x20>
    18ce:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <otable+0x21>
    18d2:	09 95       	icall
    18d4:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    18d8:	ff 91       	pop	r31
    18da:	ef 91       	pop	r30
    18dc:	bf 91       	pop	r27
    18de:	af 91       	pop	r26
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti

000018fa <__vector_22>:
    18fa:	1f 92       	push	r1
    18fc:	0f 92       	push	r0
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	0f 92       	push	r0
    1902:	11 24       	eor	r1, r1
    1904:	2f 93       	push	r18
    1906:	3f 93       	push	r19
    1908:	4f 93       	push	r20
    190a:	5f 93       	push	r21
    190c:	6f 93       	push	r22
    190e:	7f 93       	push	r23
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1920:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1924:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1928:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    192c:	c9 01       	movw	r24, r18
    192e:	03 2e       	mov	r0, r19
    1930:	00 0c       	add	r0, r0
    1932:	aa 0b       	sbc	r26, r26
    1934:	bb 0b       	sbc	r27, r27
    1936:	dc 01       	movw	r26, r24
    1938:	99 27       	eor	r25, r25
    193a:	88 27       	eor	r24, r24
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	84 2b       	or	r24, r20
    1942:	95 2b       	or	r25, r21
    1944:	a6 2b       	or	r26, r22
    1946:	b7 2b       	or	r27, r23
    1948:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    194c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1950:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1954:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1958:	b0 9b       	sbis	0x16, 0	; 22
    195a:	1b c0       	rjmp	.+54     	; 0x1992 <__vector_22+0x98>
    195c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1960:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1964:	c9 01       	movw	r24, r18
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	09 2e       	mov	r0, r25
    196a:	00 0c       	add	r0, r0
    196c:	aa 0b       	sbc	r26, r26
    196e:	bb 0b       	sbc	r27, r27
    1970:	dc 01       	movw	r26, r24
    1972:	99 27       	eor	r25, r25
    1974:	88 27       	eor	r24, r24
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	84 2b       	or	r24, r20
    197c:	95 2b       	or	r25, r21
    197e:	a6 2b       	or	r26, r22
    1980:	b7 2b       	or	r27, r23
    1982:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1986:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    198a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    198e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1992:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <mtable+0x22>
    1996:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <mtable+0x23>
    199a:	30 97       	sbiw	r30, 0x00	; 0
    199c:	39 f0       	breq	.+14     	; 0x19ac <__vector_22+0xb2>
    199e:	61 e1       	ldi	r22, 0x11	; 17
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <otable+0x22>
    19a6:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <otable+0x23>
    19aa:	09 95       	icall
    19ac:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    19b0:	ff 91       	pop	r31
    19b2:	ef 91       	pop	r30
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	9f 91       	pop	r25
    19ba:	8f 91       	pop	r24
    19bc:	7f 91       	pop	r23
    19be:	6f 91       	pop	r22
    19c0:	5f 91       	pop	r21
    19c2:	4f 91       	pop	r20
    19c4:	3f 91       	pop	r19
    19c6:	2f 91       	pop	r18
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <enqueueByDeadline>:
    19d2:	ef 92       	push	r14
    19d4:	ff 92       	push	r15
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	7b 01       	movw	r14, r22
    19e0:	eb 01       	movw	r28, r22
    19e2:	a8 81       	ld	r26, Y
    19e4:	b9 81       	ldd	r27, Y+1	; 0x01
    19e6:	10 97       	sbiw	r26, 0x00	; 0
    19e8:	61 f1       	breq	.+88     	; 0x1a42 <enqueueByDeadline+0x70>
    19ea:	fc 01       	movw	r30, r24
    19ec:	06 81       	ldd	r16, Z+6	; 0x06
    19ee:	17 81       	ldd	r17, Z+7	; 0x07
    19f0:	20 85       	ldd	r18, Z+8	; 0x08
    19f2:	31 85       	ldd	r19, Z+9	; 0x09
    19f4:	16 96       	adiw	r26, 0x06	; 6
    19f6:	4d 91       	ld	r20, X+
    19f8:	5d 91       	ld	r21, X+
    19fa:	6d 91       	ld	r22, X+
    19fc:	7c 91       	ld	r23, X
    19fe:	19 97       	sbiw	r26, 0x09	; 9
    1a00:	04 17       	cp	r16, r20
    1a02:	15 07       	cpc	r17, r21
    1a04:	26 07       	cpc	r18, r22
    1a06:	37 07       	cpc	r19, r23
    1a08:	14 f4       	brge	.+4      	; 0x1a0e <enqueueByDeadline+0x3c>
    1a0a:	1b c0       	rjmp	.+54     	; 0x1a42 <enqueueByDeadline+0x70>
    1a0c:	df 01       	movw	r26, r30
    1a0e:	ed 91       	ld	r30, X+
    1a10:	fc 91       	ld	r31, X
    1a12:	11 97       	sbiw	r26, 0x01	; 1
    1a14:	30 97       	sbiw	r30, 0x00	; 0
    1a16:	49 f0       	breq	.+18     	; 0x1a2a <enqueueByDeadline+0x58>
    1a18:	46 81       	ldd	r20, Z+6	; 0x06
    1a1a:	57 81       	ldd	r21, Z+7	; 0x07
    1a1c:	60 85       	ldd	r22, Z+8	; 0x08
    1a1e:	71 85       	ldd	r23, Z+9	; 0x09
    1a20:	04 17       	cp	r16, r20
    1a22:	15 07       	cpc	r17, r21
    1a24:	26 07       	cpc	r18, r22
    1a26:	37 07       	cpc	r19, r23
    1a28:	8c f7       	brge	.-30     	; 0x1a0c <enqueueByDeadline+0x3a>
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	f9 83       	std	Y+1, r31	; 0x01
    1a2e:	e8 83       	st	Y, r30
    1a30:	10 97       	sbiw	r26, 0x00	; 0
    1a32:	21 f4       	brne	.+8      	; 0x1a3c <enqueueByDeadline+0x6a>
    1a34:	f7 01       	movw	r30, r14
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <enqueueByDeadline+0x78>
    1a3c:	8d 93       	st	X+, r24
    1a3e:	9c 93       	st	X, r25
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <enqueueByDeadline+0x78>
    1a42:	ec 01       	movw	r28, r24
    1a44:	b9 83       	std	Y+1, r27	; 0x01
    1a46:	a8 83       	st	Y, r26
    1a48:	f5 cf       	rjmp	.-22     	; 0x1a34 <enqueueByDeadline+0x62>
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	08 95       	ret

00001a58 <enqueueByBaseline>:
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	7b 01       	movw	r14, r22
    1a66:	eb 01       	movw	r28, r22
    1a68:	a8 81       	ld	r26, Y
    1a6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a6c:	10 97       	sbiw	r26, 0x00	; 0
    1a6e:	61 f1       	breq	.+88     	; 0x1ac8 <enqueueByBaseline+0x70>
    1a70:	fc 01       	movw	r30, r24
    1a72:	02 81       	ldd	r16, Z+2	; 0x02
    1a74:	13 81       	ldd	r17, Z+3	; 0x03
    1a76:	24 81       	ldd	r18, Z+4	; 0x04
    1a78:	35 81       	ldd	r19, Z+5	; 0x05
    1a7a:	12 96       	adiw	r26, 0x02	; 2
    1a7c:	4d 91       	ld	r20, X+
    1a7e:	5d 91       	ld	r21, X+
    1a80:	6d 91       	ld	r22, X+
    1a82:	7c 91       	ld	r23, X
    1a84:	15 97       	sbiw	r26, 0x05	; 5
    1a86:	04 17       	cp	r16, r20
    1a88:	15 07       	cpc	r17, r21
    1a8a:	26 07       	cpc	r18, r22
    1a8c:	37 07       	cpc	r19, r23
    1a8e:	14 f4       	brge	.+4      	; 0x1a94 <enqueueByBaseline+0x3c>
    1a90:	1b c0       	rjmp	.+54     	; 0x1ac8 <enqueueByBaseline+0x70>
    1a92:	df 01       	movw	r26, r30
    1a94:	ed 91       	ld	r30, X+
    1a96:	fc 91       	ld	r31, X
    1a98:	11 97       	sbiw	r26, 0x01	; 1
    1a9a:	30 97       	sbiw	r30, 0x00	; 0
    1a9c:	49 f0       	breq	.+18     	; 0x1ab0 <enqueueByBaseline+0x58>
    1a9e:	42 81       	ldd	r20, Z+2	; 0x02
    1aa0:	53 81       	ldd	r21, Z+3	; 0x03
    1aa2:	64 81       	ldd	r22, Z+4	; 0x04
    1aa4:	75 81       	ldd	r23, Z+5	; 0x05
    1aa6:	04 17       	cp	r16, r20
    1aa8:	15 07       	cpc	r17, r21
    1aaa:	26 07       	cpc	r18, r22
    1aac:	37 07       	cpc	r19, r23
    1aae:	8c f7       	brge	.-30     	; 0x1a92 <enqueueByBaseline+0x3a>
    1ab0:	ec 01       	movw	r28, r24
    1ab2:	f9 83       	std	Y+1, r31	; 0x01
    1ab4:	e8 83       	st	Y, r30
    1ab6:	10 97       	sbiw	r26, 0x00	; 0
    1ab8:	21 f4       	brne	.+8      	; 0x1ac2 <enqueueByBaseline+0x6a>
    1aba:	f7 01       	movw	r30, r14
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <enqueueByBaseline+0x78>
    1ac2:	8d 93       	st	X+, r24
    1ac4:	9c 93       	st	X, r25
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <enqueueByBaseline+0x78>
    1ac8:	ec 01       	movw	r28, r24
    1aca:	b9 83       	std	Y+1, r27	; 0x01
    1acc:	a8 83       	st	Y, r26
    1ace:	f5 cf       	rjmp	.-22     	; 0x1aba <enqueueByBaseline+0x62>
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	08 95       	ret

00001ade <dequeue>:
    1ade:	dc 01       	movw	r26, r24
    1ae0:	ed 91       	ld	r30, X+
    1ae2:	fc 91       	ld	r31, X
    1ae4:	11 97       	sbiw	r26, 0x01	; 1
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	59 f4       	brne	.+22     	; 0x1b00 <dequeue+0x22>
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1af0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1af4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	83 bf       	out	0x33, r24	; 51
    1afc:	88 95       	sleep
    1afe:	fd cf       	rjmp	.-6      	; 0x1afa <dequeue+0x1c>
    1b00:	20 81       	ld	r18, Z
    1b02:	31 81       	ldd	r19, Z+1	; 0x01
    1b04:	2d 93       	st	X+, r18
    1b06:	3c 93       	st	X, r19
    1b08:	cf 01       	movw	r24, r30
    1b0a:	08 95       	ret

00001b0c <__vector_9>:
    1b0c:	1f 92       	push	r1
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	ef 93       	push	r30
    1b28:	ff 93       	push	r31
    1b2a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <overflows>
    1b2e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <overflows+0x1>
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <overflows+0x1>
    1b38:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <overflows>
    1b3c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1b40:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1b44:	30 97       	sbiw	r30, 0x00	; 0
    1b46:	01 f1       	breq	.+64     	; 0x1b88 <__vector_9+0x7c>
    1b48:	42 81       	ldd	r20, Z+2	; 0x02
    1b4a:	53 81       	ldd	r21, Z+3	; 0x03
    1b4c:	64 81       	ldd	r22, Z+4	; 0x04
    1b4e:	75 81       	ldd	r23, Z+5	; 0x05
    1b50:	86 17       	cp	r24, r22
    1b52:	97 07       	cpc	r25, r23
    1b54:	c9 f4       	brne	.+50     	; 0x1b88 <__vector_9+0x7c>
    1b56:	ca 01       	movw	r24, r20
    1b58:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b5c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b60:	42 1b       	sub	r20, r18
    1b62:	53 0b       	sbc	r21, r19
    1b64:	41 30       	cpi	r20, 0x01	; 1
    1b66:	51 05       	cpc	r21, r1
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <__vector_9+0x68>
    1b6a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b6e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b78:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b7c:	ef e6       	ldi	r30, 0x6F	; 111
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	82 60       	ori	r24, 0x02	; 2
    1b84:	80 83       	st	Z, r24
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <__vector_9+0x86>
    1b88:	ef e6       	ldi	r30, 0x6F	; 111
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8d 7f       	andi	r24, 0xFD	; 253
    1b90:	80 83       	st	Z, r24
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	7f 91       	pop	r23
    1b9c:	6f 91       	pop	r22
    1b9e:	5f 91       	pop	r21
    1ba0:	4f 91       	pop	r20
    1ba2:	3f 91       	pop	r19
    1ba4:	2f 91       	pop	r18
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <__vector_7>:
    1bb0:	1f 92       	push	r1
    1bb2:	0f 92       	push	r0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	2f 93       	push	r18
    1bc4:	3f 93       	push	r19
    1bc6:	4f 93       	push	r20
    1bc8:	5f 93       	push	r21
    1bca:	6f 93       	push	r22
    1bcc:	7f 93       	push	r23
    1bce:	8f 93       	push	r24
    1bd0:	9f 93       	push	r25
    1bd2:	af 93       	push	r26
    1bd4:	bf 93       	push	r27
    1bd6:	ef 93       	push	r30
    1bd8:	ff 93       	push	r31
    1bda:	c0 90 49 01 	lds	r12, 0x0149	; 0x800149 <overflows>
    1bde:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <overflows+0x1>
    1be2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1be6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bea:	b0 99       	sbic	0x16, 0	; 22
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <__vector_7+0x5c>
    1bee:	0d 2c       	mov	r0, r13
    1bf0:	00 0c       	add	r0, r0
    1bf2:	ee 08       	sbc	r14, r14
    1bf4:	ff 08       	sbc	r15, r15
    1bf6:	d6 01       	movw	r26, r12
    1bf8:	99 27       	eor	r25, r25
    1bfa:	88 27       	eor	r24, r24
    1bfc:	69 01       	movw	r12, r18
    1bfe:	e1 2c       	mov	r14, r1
    1c00:	f1 2c       	mov	r15, r1
    1c02:	c8 2a       	or	r12, r24
    1c04:	d9 2a       	or	r13, r25
    1c06:	ea 2a       	or	r14, r26
    1c08:	fb 2a       	or	r15, r27
    1c0a:	15 c0       	rjmp	.+42     	; 0x1c36 <__vector_7+0x86>
    1c0c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c10:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	c8 1a       	sub	r12, r24
    1c18:	d8 0a       	sbc	r13, r24
    1c1a:	0d 2c       	mov	r0, r13
    1c1c:	00 0c       	add	r0, r0
    1c1e:	ee 08       	sbc	r14, r14
    1c20:	ff 08       	sbc	r15, r15
    1c22:	d6 01       	movw	r26, r12
    1c24:	99 27       	eor	r25, r25
    1c26:	88 27       	eor	r24, r24
    1c28:	69 01       	movw	r12, r18
    1c2a:	e1 2c       	mov	r14, r1
    1c2c:	f1 2c       	mov	r15, r1
    1c2e:	c8 2a       	or	r12, r24
    1c30:	d9 2a       	or	r13, r25
    1c32:	ea 2a       	or	r14, r26
    1c34:	fb 2a       	or	r15, r27
    1c36:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1c3a:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1c3e:	30 97       	sbiw	r30, 0x00	; 0
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <__vector_7+0x94>
    1c42:	42 c0       	rjmp	.+132    	; 0x1cc8 <__vector_7+0x118>
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	a4 81       	ldd	r26, Z+4	; 0x04
    1c4a:	b5 81       	ldd	r27, Z+5	; 0x05
    1c4c:	8c 19       	sub	r24, r12
    1c4e:	9d 09       	sbc	r25, r13
    1c50:	ae 09       	sbc	r26, r14
    1c52:	bf 09       	sbc	r27, r15
    1c54:	18 16       	cp	r1, r24
    1c56:	19 06       	cpc	r1, r25
    1c58:	1a 06       	cpc	r1, r26
    1c5a:	1b 06       	cpc	r1, r27
    1c5c:	ec f1       	brlt	.+122    	; 0x1cd8 <__vector_7+0x128>
    1c5e:	8f e4       	ldi	r24, 0x4F	; 79
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dequeue>
    1c66:	61 e5       	ldi	r22, 0x51	; 81
    1c68:	71 e0       	ldi	r23, 0x01	; 1
    1c6a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <enqueueByDeadline>
    1c6e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1c72:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1c76:	30 97       	sbiw	r30, 0x00	; 0
    1c78:	39 f1       	breq	.+78     	; 0x1cc8 <__vector_7+0x118>
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c80:	b5 81       	ldd	r27, Z+5	; 0x05
    1c82:	8c 19       	sub	r24, r12
    1c84:	9d 09       	sbc	r25, r13
    1c86:	ae 09       	sbc	r26, r14
    1c88:	bf 09       	sbc	r27, r15
    1c8a:	18 16       	cp	r1, r24
    1c8c:	19 06       	cpc	r1, r25
    1c8e:	1a 06       	cpc	r1, r26
    1c90:	1b 06       	cpc	r1, r27
    1c92:	2c f7       	brge	.-54     	; 0x1c5e <__vector_7+0xae>
    1c94:	21 c0       	rjmp	.+66     	; 0x1cd8 <__vector_7+0x128>
    1c96:	9c 01       	movw	r18, r24
    1c98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ca0:	84 1b       	sub	r24, r20
    1ca2:	95 0b       	sbc	r25, r21
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	31 f4       	brne	.+12     	; 0x1cb4 <__vector_7+0x104>
    1ca8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cac:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cb0:	2f 5f       	subi	r18, 0xFF	; 255
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cb8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cbc:	ef e6       	ldi	r30, 0x6F	; 111
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	82 60       	ori	r24, 0x02	; 2
    1cc4:	80 83       	st	Z, r24
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <__vector_7+0x122>
    1cc8:	ef e6       	ldi	r30, 0x6F	; 111
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8d 7f       	andi	r24, 0xFD	; 253
    1cd0:	80 83       	st	Z, r24
    1cd2:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    1cd6:	0c c0       	rjmp	.+24     	; 0x1cf0 <__vector_7+0x140>
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	a4 81       	ldd	r26, Z+4	; 0x04
    1cde:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce0:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1ce4:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1ce8:	2a 17       	cp	r18, r26
    1cea:	3b 07       	cpc	r19, r27
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <__vector_7+0x118>
    1cee:	d3 cf       	rjmp	.-90     	; 0x1c96 <__vector_7+0xe6>
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	bf 91       	pop	r27
    1cf6:	af 91       	pop	r26
    1cf8:	9f 91       	pop	r25
    1cfa:	8f 91       	pop	r24
    1cfc:	7f 91       	pop	r23
    1cfe:	6f 91       	pop	r22
    1d00:	5f 91       	pop	r21
    1d02:	4f 91       	pop	r20
    1d04:	3f 91       	pop	r19
    1d06:	2f 91       	pop	r18
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <async>:
    1d1a:	3f 92       	push	r3
    1d1c:	4f 92       	push	r4
    1d1e:	5f 92       	push	r5
    1d20:	6f 92       	push	r6
    1d22:	7f 92       	push	r7
    1d24:	8f 92       	push	r8
    1d26:	9f 92       	push	r9
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	2b 01       	movw	r4, r22
    1d3e:	3c 01       	movw	r6, r24
    1d40:	49 01       	movw	r8, r18
    1d42:	5a 01       	movw	r10, r20
    1d44:	8f b7       	in	r24, 0x3f	; 63
    1d46:	80 78       	andi	r24, 0x80	; 128
    1d48:	38 2e       	mov	r3, r24
    1d4a:	f8 94       	cli
    1d4c:	8d e2       	ldi	r24, 0x2D	; 45
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dequeue>
    1d54:	ec 01       	movw	r28, r24
    1d56:	1b 87       	std	Y+11, r17	; 0x0b
    1d58:	0a 87       	std	Y+10, r16	; 0x0a
    1d5a:	fd 86       	std	Y+13, r15	; 0x0d
    1d5c:	ec 86       	std	Y+12, r14	; 0x0c
    1d5e:	df 86       	std	Y+15, r13	; 0x0f
    1d60:	ce 86       	std	Y+14, r12	; 0x0e
    1d62:	33 20       	and	r3, r3
    1d64:	61 f0       	breq	.+24     	; 0x1d7e <async+0x64>
    1d66:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <current>
    1d6a:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <current+0x1>
    1d6e:	02 80       	ldd	r0, Z+2	; 0x02
    1d70:	f3 81       	ldd	r31, Z+3	; 0x03
    1d72:	e0 2d       	mov	r30, r0
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	a4 81       	ldd	r26, Z+4	; 0x04
    1d7a:	b5 81       	ldd	r27, Z+5	; 0x05
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <async+0x74>
    1d7e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <timestamp>
    1d82:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <timestamp+0x1>
    1d86:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <timestamp+0x2>
    1d8a:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <timestamp+0x3>
    1d8e:	48 0e       	add	r4, r24
    1d90:	59 1e       	adc	r5, r25
    1d92:	6a 1e       	adc	r6, r26
    1d94:	7b 1e       	adc	r7, r27
    1d96:	4a 82       	std	Y+2, r4	; 0x02
    1d98:	5b 82       	std	Y+3, r5	; 0x03
    1d9a:	6c 82       	std	Y+4, r6	; 0x04
    1d9c:	7d 82       	std	Y+5, r7	; 0x05
    1d9e:	18 14       	cp	r1, r8
    1da0:	19 04       	cpc	r1, r9
    1da2:	1a 04       	cpc	r1, r10
    1da4:	1b 04       	cpc	r1, r11
    1da6:	44 f0       	brlt	.+16     	; 0x1db8 <async+0x9e>
    1da8:	0f 2e       	mov	r0, r31
    1daa:	88 24       	eor	r8, r8
    1dac:	8a 94       	dec	r8
    1dae:	98 2c       	mov	r9, r8
    1db0:	a8 2c       	mov	r10, r8
    1db2:	ff e7       	ldi	r31, 0x7F	; 127
    1db4:	bf 2e       	mov	r11, r31
    1db6:	f0 2d       	mov	r31, r0
    1db8:	84 0c       	add	r8, r4
    1dba:	95 1c       	adc	r9, r5
    1dbc:	a6 1c       	adc	r10, r6
    1dbe:	b7 1c       	adc	r11, r7
    1dc0:	8e 82       	std	Y+6, r8	; 0x06
    1dc2:	9f 82       	std	Y+7, r9	; 0x07
    1dc4:	a8 86       	std	Y+8, r10	; 0x08
    1dc6:	b9 86       	std	Y+9, r11	; 0x09
    1dc8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <overflows>
    1dcc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <overflows+0x1>
    1dd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dd8:	b0 99       	sbic	0x16, 0	; 22
    1dda:	0e c0       	rjmp	.+28     	; 0x1df8 <async+0xde>
    1ddc:	09 2e       	mov	r0, r25
    1dde:	00 0c       	add	r0, r0
    1de0:	aa 0b       	sbc	r26, r26
    1de2:	bb 0b       	sbc	r27, r27
    1de4:	dc 01       	movw	r26, r24
    1de6:	99 27       	eor	r25, r25
    1de8:	88 27       	eor	r24, r24
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	84 2b       	or	r24, r20
    1df0:	95 2b       	or	r25, r21
    1df2:	a6 2b       	or	r26, r22
    1df4:	b7 2b       	or	r27, r23
    1df6:	13 c0       	rjmp	.+38     	; 0x1e1e <async+0x104>
    1df8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dfc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	09 2e       	mov	r0, r25
    1e04:	00 0c       	add	r0, r0
    1e06:	aa 0b       	sbc	r26, r26
    1e08:	bb 0b       	sbc	r27, r27
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	99 27       	eor	r25, r25
    1e0e:	88 27       	eor	r24, r24
    1e10:	a9 01       	movw	r20, r18
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	84 2b       	or	r24, r20
    1e18:	95 2b       	or	r25, r21
    1e1a:	a6 2b       	or	r26, r22
    1e1c:	b7 2b       	or	r27, r23
    1e1e:	48 1a       	sub	r4, r24
    1e20:	59 0a       	sbc	r5, r25
    1e22:	6a 0a       	sbc	r6, r26
    1e24:	7b 0a       	sbc	r7, r27
    1e26:	14 14       	cp	r1, r4
    1e28:	15 04       	cpc	r1, r5
    1e2a:	16 04       	cpc	r1, r6
    1e2c:	17 04       	cpc	r1, r7
    1e2e:	ac f5       	brge	.+106    	; 0x1e9a <async+0x180>
    1e30:	6f e4       	ldi	r22, 0x4F	; 79
    1e32:	71 e0       	ldi	r23, 0x01	; 1
    1e34:	ce 01       	movw	r24, r28
    1e36:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <enqueueByBaseline>
    1e3a:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1e3e:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1e42:	30 97       	sbiw	r30, 0x00	; 0
    1e44:	21 f1       	breq	.+72     	; 0x1e8e <async+0x174>
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e4c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e4e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1e52:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1e56:	2a 17       	cp	r18, r26
    1e58:	3b 07       	cpc	r19, r27
    1e5a:	c9 f4       	brne	.+50     	; 0x1e8e <async+0x174>
    1e5c:	9c 01       	movw	r18, r24
    1e5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e66:	84 1b       	sub	r24, r20
    1e68:	95 0b       	sbc	r25, r21
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	31 f4       	brne	.+12     	; 0x1e7a <async+0x160>
    1e6e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e72:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e76:	2f 5f       	subi	r18, 0xFF	; 255
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e7e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e82:	ef e6       	ldi	r30, 0x6F	; 111
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	82 60       	ori	r24, 0x02	; 2
    1e8a:	80 83       	st	Z, r24
    1e8c:	41 c0       	rjmp	.+130    	; 0x1f10 <async+0x1f6>
    1e8e:	ef e6       	ldi	r30, 0x6F	; 111
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8d 7f       	andi	r24, 0xFD	; 253
    1e96:	80 83       	st	Z, r24
    1e98:	3b c0       	rjmp	.+118    	; 0x1f10 <async+0x1f6>
    1e9a:	61 e5       	ldi	r22, 0x51	; 81
    1e9c:	71 e0       	ldi	r23, 0x01	; 1
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <enqueueByDeadline>
    1ea4:	33 20       	and	r3, r3
    1ea6:	b9 f1       	breq	.+110    	; 0x1f16 <async+0x1fc>
    1ea8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
    1eac:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	81 f1       	breq	.+96     	; 0x1f14 <async+0x1fa>
    1eb4:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <activeStack>
    1eb8:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <activeStack+0x1>
    1ebc:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <msgQ>
    1ec0:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <msgQ+0x1>
    1ec4:	02 81       	ldd	r16, Z+2	; 0x02
    1ec6:	13 81       	ldd	r17, Z+3	; 0x03
    1ec8:	d9 01       	movw	r26, r18
    1eca:	16 96       	adiw	r26, 0x06	; 6
    1ecc:	4d 91       	ld	r20, X+
    1ece:	5d 91       	ld	r21, X+
    1ed0:	6d 91       	ld	r22, X+
    1ed2:	7c 91       	ld	r23, X
    1ed4:	19 97       	sbiw	r26, 0x09	; 9
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	16 96       	adiw	r26, 0x06	; 6
    1eda:	0d 91       	ld	r16, X+
    1edc:	1d 91       	ld	r17, X+
    1ede:	2d 91       	ld	r18, X+
    1ee0:	3c 91       	ld	r19, X
    1ee2:	19 97       	sbiw	r26, 0x09	; 9
    1ee4:	40 1b       	sub	r20, r16
    1ee6:	51 0b       	sbc	r21, r17
    1ee8:	62 0b       	sbc	r22, r18
    1eea:	73 0b       	sbc	r23, r19
    1eec:	9a f4       	brpl	.+38     	; 0x1f14 <async+0x1fa>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	2d 91       	ld	r18, X+
    1ef2:	3c 91       	ld	r19, X
    1ef4:	11 97       	sbiw	r26, 0x01	; 1
    1ef6:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <threadPool+0x1>
    1efa:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <threadPool>
    1efe:	ed 93       	st	X+, r30
    1f00:	fc 93       	st	X, r31
    1f02:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <activeStack+0x1>
    1f06:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <activeStack>
    1f0a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <dispatch>
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <async+0x1fa>
    1f10:	33 20       	and	r3, r3
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <async+0x1fc>
    1f14:	78 94       	sei
    1f16:	ce 01       	movw	r24, r28
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	bf 90       	pop	r11
    1f2a:	af 90       	pop	r10
    1f2c:	9f 90       	pop	r9
    1f2e:	8f 90       	pop	r8
    1f30:	7f 90       	pop	r7
    1f32:	6f 90       	pop	r6
    1f34:	5f 90       	pop	r5
    1f36:	4f 90       	pop	r4
    1f38:	3f 90       	pop	r3
    1f3a:	08 95       	ret

00001f3c <sync>:
    1f3c:	cf 92       	push	r12
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
    1f4e:	7b 01       	movw	r14, r22
    1f50:	6a 01       	movw	r12, r20
    1f52:	1f b7       	in	r17, 0x3f	; 63
    1f54:	10 78       	andi	r17, 0x80	; 128
    1f56:	f8 94       	cli
    1f58:	a8 81       	ld	r26, Y
    1f5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f5c:	10 97       	sbiw	r26, 0x00	; 0
    1f5e:	61 f1       	breq	.+88     	; 0x1fb8 <sync+0x7c>
    1f60:	14 96       	adiw	r26, 0x04	; 4
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	15 97       	sbiw	r26, 0x05	; 5
    1f68:	30 97       	sbiw	r30, 0x00	; 0
    1f6a:	41 f0       	breq	.+16     	; 0x1f7c <sync+0x40>
    1f6c:	a0 81       	ld	r26, Z
    1f6e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f70:	14 96       	adiw	r26, 0x04	; 4
    1f72:	ed 91       	ld	r30, X+
    1f74:	fc 91       	ld	r31, X
    1f76:	15 97       	sbiw	r26, 0x05	; 5
    1f78:	30 97       	sbiw	r30, 0x00	; 0
    1f7a:	c1 f7       	brne	.-16     	; 0x1f6c <sync+0x30>
    1f7c:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <current>
    1f80:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <current+0x1>
    1f84:	2a 17       	cp	r18, r26
    1f86:	3b 07       	cpc	r19, r27
    1f88:	21 f0       	breq	.+8      	; 0x1f92 <sync+0x56>
    1f8a:	11 23       	and	r17, r17
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <sync+0x54>
    1f8e:	3d c0       	rjmp	.+122    	; 0x200a <sync+0xce>
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <sync+0x64>
    1f92:	11 23       	and	r17, r17
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <sync+0x5c>
    1f96:	3c c0       	rjmp	.+120    	; 0x2010 <sync+0xd4>
    1f98:	78 94       	sei
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	9f ef       	ldi	r25, 0xFF	; 255
    1f9e:	52 c0       	rjmp	.+164    	; 0x2044 <sync+0x108>
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	d1 f1       	breq	.+116    	; 0x201c <sync+0xe0>
    1fa8:	fc 01       	movw	r30, r24
    1faa:	15 82       	std	Z+5, r1	; 0x05
    1fac:	14 82       	std	Z+4, r1	; 0x04
    1fae:	36 c0       	rjmp	.+108    	; 0x201c <sync+0xe0>
    1fb0:	78 94       	sei
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	46 c0       	rjmp	.+140    	; 0x2044 <sync+0x108>
    1fb8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <current>
    1fbc:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <current+0x1>
    1fc0:	99 83       	std	Y+1, r25	; 0x01
    1fc2:	88 83       	st	Y, r24
    1fc4:	11 23       	and	r17, r17
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <sync+0x96>
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <sync+0x96>
    1fd0:	78 94       	sei
    1fd2:	b6 01       	movw	r22, r12
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	f7 01       	movw	r30, r14
    1fd8:	09 95       	icall
    1fda:	f8 2e       	mov	r15, r24
    1fdc:	09 2f       	mov	r16, r25
    1fde:	8f b7       	in	r24, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	19 82       	std	Y+1, r1	; 0x01
    1fe4:	18 82       	st	Y, r1
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	91 05       	cpc	r25, r1
    1fee:	38 f0       	brcs	.+14     	; 0x1ffe <sync+0xc2>
    1ff0:	1b 82       	std	Y+3, r1	; 0x03
    1ff2:	1a 82       	std	Y+2, r1	; 0x02
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	15 82       	std	Z+5, r1	; 0x05
    1ff8:	14 82       	std	Z+4, r1	; 0x04
    1ffa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <dispatch>
    1ffe:	11 23       	and	r17, r17
    2000:	51 f0       	breq	.+20     	; 0x2016 <sync+0xda>
    2002:	78 94       	sei
    2004:	8f 2d       	mov	r24, r15
    2006:	90 2f       	mov	r25, r16
    2008:	1d c0       	rjmp	.+58     	; 0x2044 <sync+0x108>
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	9f ef       	ldi	r25, 0xFF	; 255
    200e:	1a c0       	rjmp	.+52     	; 0x2044 <sync+0x108>
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	9f ef       	ldi	r25, 0xFF	; 255
    2014:	17 c0       	rjmp	.+46     	; 0x2044 <sync+0x108>
    2016:	8f 2d       	mov	r24, r15
    2018:	90 2f       	mov	r25, r16
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <sync+0x108>
    201c:	3b 83       	std	Y+3, r19	; 0x03
    201e:	2a 83       	std	Y+2, r18	; 0x02
    2020:	f9 01       	movw	r30, r18
    2022:	d5 83       	std	Z+5, r29	; 0x05
    2024:	c4 83       	std	Z+4, r28	; 0x04
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 f6 04 	call	0x9ec	; 0x9ec <dispatch>
    202c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <current>
    2030:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <current+0x1>
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	89 2b       	or	r24, r25
    203a:	09 f4       	brne	.+2      	; 0x203e <sync+0x102>
    203c:	b9 cf       	rjmp	.-142    	; 0x1fb0 <sync+0x74>
    203e:	f9 83       	std	Y+1, r31	; 0x01
    2040:	e8 83       	st	Y, r30
    2042:	c2 cf       	rjmp	.-124    	; 0x1fc8 <sync+0x8c>
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	08 95       	ret

00002056 <run>:
    2056:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <current>
    205a:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <current+0x1>
    205e:	81 e5       	ldi	r24, 0x51	; 81
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <dequeue>
    2066:	ec 01       	movw	r28, r24
    2068:	d8 01       	movw	r26, r16
    206a:	13 96       	adiw	r26, 0x03	; 3
    206c:	9c 93       	st	X, r25
    206e:	8e 93       	st	-X, r24
    2070:	12 97       	sbiw	r26, 0x02	; 2
    2072:	78 94       	sei
    2074:	4e 85       	ldd	r20, Y+14	; 0x0e
    2076:	5f 85       	ldd	r21, Y+15	; 0x0f
    2078:	6c 85       	ldd	r22, Y+12	; 0x0c
    207a:	7d 85       	ldd	r23, Y+13	; 0x0d
    207c:	8a 85       	ldd	r24, Y+10	; 0x0a
    207e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2080:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <sync>
    2084:	8f b7       	in	r24, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <msgPool>
    208c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <msgPool+0x1>
    2090:	99 83       	std	Y+1, r25	; 0x01
    2092:	88 83       	st	Y, r24
    2094:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <msgPool+0x1>
    2098:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <msgPool>
    209c:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <activeStack>
    20a0:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <activeStack+0x1>
    20a4:	00 81       	ld	r16, Z
    20a6:	11 81       	ldd	r17, Z+1	; 0x01
    20a8:	e8 01       	movw	r28, r16
    20aa:	2a 81       	ldd	r18, Y+2	; 0x02
    20ac:	3b 81       	ldd	r19, Y+3	; 0x03
    20ae:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <msgQ>
    20b2:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <msgQ+0x1>
    20b6:	10 97       	sbiw	r26, 0x00	; 0
    20b8:	c1 f0       	breq	.+48     	; 0x20ea <run+0x94>
    20ba:	21 15       	cp	r18, r1
    20bc:	31 05       	cpc	r19, r1
    20be:	59 f2       	breq	.-106    	; 0x2056 <run>
    20c0:	16 96       	adiw	r26, 0x06	; 6
    20c2:	8d 91       	ld	r24, X+
    20c4:	9d 91       	ld	r25, X+
    20c6:	0d 90       	ld	r0, X+
    20c8:	bc 91       	ld	r27, X
    20ca:	a0 2d       	mov	r26, r0
    20cc:	e9 01       	movw	r28, r18
    20ce:	4e 81       	ldd	r20, Y+6	; 0x06
    20d0:	5f 81       	ldd	r21, Y+7	; 0x07
    20d2:	68 85       	ldd	r22, Y+8	; 0x08
    20d4:	79 85       	ldd	r23, Y+9	; 0x09
    20d6:	84 1b       	sub	r24, r20
    20d8:	95 0b       	sbc	r25, r21
    20da:	a6 0b       	sbc	r26, r22
    20dc:	b7 0b       	sbc	r27, r23
    20de:	18 16       	cp	r1, r24
    20e0:	19 06       	cpc	r1, r25
    20e2:	1a 06       	cpc	r1, r26
    20e4:	1b 06       	cpc	r1, r27
    20e6:	0c f0       	brlt	.+2      	; 0x20ea <run+0x94>
    20e8:	b6 cf       	rjmp	.-148    	; 0x2056 <run>
    20ea:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <activeStack+0x1>
    20ee:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <activeStack>
    20f2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
    20f6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    20fe:	f0 93 2c 01 	sts	0x012C, r31	; 0x80012c <threadPool+0x1>
    2102:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <threadPool>
    2106:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <activeStack>
    210a:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <activeStack+0x1>
    210e:	14 96       	adiw	r26, 0x04	; 4
    2110:	ed 91       	ld	r30, X+
    2112:	fc 91       	ld	r31, X
    2114:	15 97       	sbiw	r26, 0x05	; 5
    2116:	30 97       	sbiw	r30, 0x00	; 0
    2118:	41 f0       	breq	.+16     	; 0x212a <run+0xd4>
    211a:	a0 81       	ld	r26, Z
    211c:	b1 81       	ldd	r27, Z+1	; 0x01
    211e:	14 96       	adiw	r26, 0x04	; 4
    2120:	ed 91       	ld	r30, X+
    2122:	fc 91       	ld	r31, X
    2124:	15 97       	sbiw	r26, 0x05	; 5
    2126:	30 97       	sbiw	r30, 0x00	; 0
    2128:	c1 f7       	brne	.-16     	; 0x211a <run+0xc4>
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <dispatch>
    2130:	92 cf       	rjmp	.-220    	; 0x2056 <run>

00002132 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2132:	42 31       	cpi	r20, 0x12	; 18
    2134:	b8 f4       	brcc	.+46     	; 0x2164 <install+0x32>
        char status;
        DISABLE(status);
    2136:	2f b7       	in	r18, 0x3f	; 63
    2138:	f8 94       	cli
        otable[i] = obj;
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	44 0f       	add	r20, r20
    213e:	55 1f       	adc	r21, r21
    2140:	fa 01       	movw	r30, r20
    2142:	ed 5a       	subi	r30, 0xAD	; 173
    2144:	fe 4f       	sbci	r31, 0xFE	; 254
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
        mtable[i] = m;
    214a:	fa 01       	movw	r30, r20
    214c:	e5 51       	subi	r30, 0x15	; 21
    214e:	fe 4f       	sbci	r31, 0xFE	; 254
    2150:	71 83       	std	Z+1, r23	; 0x01
    2152:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	fc 01       	movw	r30, r24
    215a:	53 83       	std	Z+3, r21	; 0x03
    215c:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    215e:	22 23       	and	r18, r18
    2160:	0c f4       	brge	.+2      	; 0x2164 <install+0x32>
    2162:	78 94       	sei
    2164:	08 95       	ret

00002166 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2166:	8c 01       	movw	r16, r24
    2168:	7b 01       	movw	r14, r22
    216a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    216c:	8f b7       	in	r24, 0x3f	; 63
    216e:	f8 94       	cli
    initialize();
    2170:	0e 94 8b 04 	call	0x916	; 0x916 <initialize>
    ENABLE(1);
    2174:	78 94       	sei
    if (m != NULL)
    2176:	e1 14       	cp	r14, r1
    2178:	f1 04       	cpc	r15, r1
    217a:	41 f0       	breq	.+16     	; 0x218c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	a9 01       	movw	r20, r18
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	cb 01       	movw	r24, r22
    2188:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <async>
    DISABLE(status);
    218c:	8f b7       	in	r24, 0x3f	; 63
    218e:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2190:	0e 94 16 05 	call	0xa2c	; 0xa2c <schedule>
    ENABLE(1);
    2194:	78 94       	sei
    while (1) {
        SLEEP();
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	83 bf       	out	0x33, r24	; 51
    219a:	88 95       	sleep
    219c:	fd cf       	rjmp	.-6      	; 0x2198 <tinytimber+0x32>

0000219e <writeBit>:
// writeBit() sätter eller rensar angiven bit i PORTE.
// 'arg' är ett packat heltal, där högbyte=bitnummer, lågbyte=0/1.
int writeBit(Writebit *self, int arg) {
	uint8_t bit = (arg >> 8) & 0xFF;
	uint8_t value = arg & 0xFF;
	if (value)
    219e:	66 23       	and	r22, r22
    21a0:	59 f0       	breq	.+22     	; 0x21b8 <writeBit+0x1a>
	PORTE |= (1 << bit);
    21a2:	2e b1       	in	r18, 0x0e	; 14
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <writeBit+0x10>
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	7a 95       	dec	r23
    21b0:	e2 f7       	brpl	.-8      	; 0x21aa <writeBit+0xc>
    21b2:	82 2b       	or	r24, r18
    21b4:	8e b9       	out	0x0e, r24	; 14
    21b6:	0b c0       	rjmp	.+22     	; 0x21ce <writeBit+0x30>
	else
	PORTE &= ~(1 << bit);
    21b8:	2e b1       	in	r18, 0x0e	; 14
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <writeBit+0x26>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	7a 95       	dec	r23
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <writeBit+0x22>
    21c8:	80 95       	com	r24
    21ca:	82 23       	and	r24, r18
    21cc:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	08 95       	ret

000021d4 <__udivmodhi4>:
    21d4:	aa 1b       	sub	r26, r26
    21d6:	bb 1b       	sub	r27, r27
    21d8:	51 e1       	ldi	r21, 0x11	; 17
    21da:	07 c0       	rjmp	.+14     	; 0x21ea <__udivmodhi4_ep>

000021dc <__udivmodhi4_loop>:
    21dc:	aa 1f       	adc	r26, r26
    21de:	bb 1f       	adc	r27, r27
    21e0:	a6 17       	cp	r26, r22
    21e2:	b7 07       	cpc	r27, r23
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <__udivmodhi4_ep>
    21e6:	a6 1b       	sub	r26, r22
    21e8:	b7 0b       	sbc	r27, r23

000021ea <__udivmodhi4_ep>:
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	5a 95       	dec	r21
    21f0:	a9 f7       	brne	.-22     	; 0x21dc <__udivmodhi4_loop>
    21f2:	80 95       	com	r24
    21f4:	90 95       	com	r25
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	08 95       	ret

000021fc <__divmodsi4>:
    21fc:	05 2e       	mov	r0, r21
    21fe:	97 fb       	bst	r25, 7
    2200:	1e f4       	brtc	.+6      	; 0x2208 <__divmodsi4+0xc>
    2202:	00 94       	com	r0
    2204:	0e 94 15 11 	call	0x222a	; 0x222a <__negsi2>
    2208:	57 fd       	sbrc	r21, 7
    220a:	07 d0       	rcall	.+14     	; 0x221a <__divmodsi4_neg2>
    220c:	0e 94 24 11 	call	0x2248	; 0x2248 <__udivmodsi4>
    2210:	07 fc       	sbrc	r0, 7
    2212:	03 d0       	rcall	.+6      	; 0x221a <__divmodsi4_neg2>
    2214:	4e f4       	brtc	.+18     	; 0x2228 <__divmodsi4_exit>
    2216:	0c 94 15 11 	jmp	0x222a	; 0x222a <__negsi2>

0000221a <__divmodsi4_neg2>:
    221a:	50 95       	com	r21
    221c:	40 95       	com	r20
    221e:	30 95       	com	r19
    2220:	21 95       	neg	r18
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	4f 4f       	sbci	r20, 0xFF	; 255
    2226:	5f 4f       	sbci	r21, 0xFF	; 255

00002228 <__divmodsi4_exit>:
    2228:	08 95       	ret

0000222a <__negsi2>:
    222a:	90 95       	com	r25
    222c:	80 95       	com	r24
    222e:	70 95       	com	r23
    2230:	61 95       	neg	r22
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	8f 4f       	sbci	r24, 0xFF	; 255
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	08 95       	ret

0000223a <__usmulhisi3>:
    223a:	0e 94 46 11 	call	0x228c	; 0x228c <__umulhisi3>

0000223e <__usmulhisi3_tail>:
    223e:	b7 ff       	sbrs	r27, 7
    2240:	08 95       	ret
    2242:	82 1b       	sub	r24, r18
    2244:	93 0b       	sbc	r25, r19
    2246:	08 95       	ret

00002248 <__udivmodsi4>:
    2248:	a1 e2       	ldi	r26, 0x21	; 33
    224a:	1a 2e       	mov	r1, r26
    224c:	aa 1b       	sub	r26, r26
    224e:	bb 1b       	sub	r27, r27
    2250:	fd 01       	movw	r30, r26
    2252:	0d c0       	rjmp	.+26     	; 0x226e <__udivmodsi4_ep>

00002254 <__udivmodsi4_loop>:
    2254:	aa 1f       	adc	r26, r26
    2256:	bb 1f       	adc	r27, r27
    2258:	ee 1f       	adc	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	a2 17       	cp	r26, r18
    225e:	b3 07       	cpc	r27, r19
    2260:	e4 07       	cpc	r30, r20
    2262:	f5 07       	cpc	r31, r21
    2264:	20 f0       	brcs	.+8      	; 0x226e <__udivmodsi4_ep>
    2266:	a2 1b       	sub	r26, r18
    2268:	b3 0b       	sbc	r27, r19
    226a:	e4 0b       	sbc	r30, r20
    226c:	f5 0b       	sbc	r31, r21

0000226e <__udivmodsi4_ep>:
    226e:	66 1f       	adc	r22, r22
    2270:	77 1f       	adc	r23, r23
    2272:	88 1f       	adc	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	1a 94       	dec	r1
    2278:	69 f7       	brne	.-38     	; 0x2254 <__udivmodsi4_loop>
    227a:	60 95       	com	r22
    227c:	70 95       	com	r23
    227e:	80 95       	com	r24
    2280:	90 95       	com	r25
    2282:	9b 01       	movw	r18, r22
    2284:	ac 01       	movw	r20, r24
    2286:	bd 01       	movw	r22, r26
    2288:	cf 01       	movw	r24, r30
    228a:	08 95       	ret

0000228c <__umulhisi3>:
    228c:	a2 9f       	mul	r26, r18
    228e:	b0 01       	movw	r22, r0
    2290:	b3 9f       	mul	r27, r19
    2292:	c0 01       	movw	r24, r0
    2294:	a3 9f       	mul	r26, r19
    2296:	70 0d       	add	r23, r0
    2298:	81 1d       	adc	r24, r1
    229a:	11 24       	eor	r1, r1
    229c:	91 1d       	adc	r25, r1
    229e:	b2 9f       	mul	r27, r18
    22a0:	70 0d       	add	r23, r0
    22a2:	81 1d       	adc	r24, r1
    22a4:	11 24       	eor	r1, r1
    22a6:	91 1d       	adc	r25, r1
    22a8:	08 95       	ret

000022aa <setjmp>:
    22aa:	dc 01       	movw	r26, r24
    22ac:	2d 92       	st	X+, r2
    22ae:	3d 92       	st	X+, r3
    22b0:	4d 92       	st	X+, r4
    22b2:	5d 92       	st	X+, r5
    22b4:	6d 92       	st	X+, r6
    22b6:	7d 92       	st	X+, r7
    22b8:	8d 92       	st	X+, r8
    22ba:	9d 92       	st	X+, r9
    22bc:	ad 92       	st	X+, r10
    22be:	bd 92       	st	X+, r11
    22c0:	cd 92       	st	X+, r12
    22c2:	dd 92       	st	X+, r13
    22c4:	ed 92       	st	X+, r14
    22c6:	fd 92       	st	X+, r15
    22c8:	0d 93       	st	X+, r16
    22ca:	1d 93       	st	X+, r17
    22cc:	cd 93       	st	X+, r28
    22ce:	dd 93       	st	X+, r29
    22d0:	ff 91       	pop	r31
    22d2:	ef 91       	pop	r30
    22d4:	8d b7       	in	r24, 0x3d	; 61
    22d6:	8d 93       	st	X+, r24
    22d8:	8e b7       	in	r24, 0x3e	; 62
    22da:	8d 93       	st	X+, r24
    22dc:	8f b7       	in	r24, 0x3f	; 63
    22de:	8d 93       	st	X+, r24
    22e0:	ed 93       	st	X+, r30
    22e2:	fd 93       	st	X+, r31
    22e4:	88 27       	eor	r24, r24
    22e6:	99 27       	eor	r25, r25
    22e8:	09 94       	ijmp

000022ea <longjmp>:
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	81 1d       	adc	r24, r1
    22f4:	2d 90       	ld	r2, X+
    22f6:	3d 90       	ld	r3, X+
    22f8:	4d 90       	ld	r4, X+
    22fa:	5d 90       	ld	r5, X+
    22fc:	6d 90       	ld	r6, X+
    22fe:	7d 90       	ld	r7, X+
    2300:	8d 90       	ld	r8, X+
    2302:	9d 90       	ld	r9, X+
    2304:	ad 90       	ld	r10, X+
    2306:	bd 90       	ld	r11, X+
    2308:	cd 90       	ld	r12, X+
    230a:	dd 90       	ld	r13, X+
    230c:	ed 90       	ld	r14, X+
    230e:	fd 90       	ld	r15, X+
    2310:	0d 91       	ld	r16, X+
    2312:	1d 91       	ld	r17, X+
    2314:	cd 91       	ld	r28, X+
    2316:	dd 91       	ld	r29, X+
    2318:	ed 91       	ld	r30, X+
    231a:	fd 91       	ld	r31, X+
    231c:	0d 90       	ld	r0, X+
    231e:	f8 94       	cli
    2320:	fe bf       	out	0x3e, r31	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	ed bf       	out	0x3d, r30	; 61
    2326:	ed 91       	ld	r30, X+
    2328:	fd 91       	ld	r31, X+
    232a:	09 94       	ijmp

0000232c <_exit>:
    232c:	f8 94       	cli

0000232e <__stop_program>:
    232e:	ff cf       	rjmp	.-2      	; 0x232e <__stop_program>
