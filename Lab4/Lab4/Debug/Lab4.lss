
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00002344  000023d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080014c  0080014c  00002424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003282  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011cf  00000000  00000000  000059be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001783  00000000  00000000  00006b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d6c  00000000  00000000  00008310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a3  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ef9  00000000  00000000  00009a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000c918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_1>
       8:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_2>
       c:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__vector_3>
      10:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_4>
      14:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_9>
      28:	0c 94 6f 07 	jmp	0xede	; 0xede <__vector_10>
      2c:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_11>
      30:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_12>
      34:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_13>
      38:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_14>
      3c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_15>
      40:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_16>
      44:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__vector_17>
      48:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_18>
      4c:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__vector_19>
      50:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_20>
      54:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_21>
      58:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e4       	ldi	r30, 0x44	; 68
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 34       	cpi	r26, 0x4C	; 76
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e4       	ldi	r26, 0x4C	; 76
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 39       	cpi	r26, 0x9F	; 159
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
      92:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
      9a:	85 b1       	in	r24, 0x05	; 5
      9c:	80 6d       	ori	r24, 0xD0	; 208
      9e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
      a0:	8e b1       	in	r24, 0x0e	; 14
      a2:	8c 60       	ori	r24, 0x0C	; 12
      a4:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
      a6:	8d b3       	in	r24, 0x1d	; 29
      a8:	80 6c       	ori	r24, 0xC0	; 192
      aa:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
      ac:	eb e6       	ldi	r30, 0x6B	; 107
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	8c 60       	ori	r24, 0x0C	; 12
      b4:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
      b6:	ec e6       	ldi	r30, 0x6C	; 108
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	80 6d       	ori	r24, 0xD0	; 208
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <leftdir>:
}



// leftdir() => anropar switchGen(0) för att välja "vänster" generator, om PRESSEDLT är sant.
int leftdir(Button *self, int arg) {
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
	if (PRESSEDLT) {
      ce:	62 99       	sbic	0x0c, 2	; 12
      d0:	13 c0       	rjmp	.+38     	; 0xf8 <leftdir+0x36>
      d2:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
      d4:	04 81       	ldd	r16, Z+4	; 0x04
      d6:	15 81       	ldd	r17, Z+5	; 0x05
      d8:	c1 2c       	mov	r12, r1
      da:	d1 2c       	mov	r13, r1
      dc:	0f 2e       	mov	r0, r31
      de:	f0 e3       	ldi	r31, 0x30	; 48
      e0:	ef 2e       	mov	r14, r31
      e2:	f2 e0       	ldi	r31, 0x02	; 2
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	a9 01       	movw	r20, r18
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	cb 01       	movw	r24, r22
      f4:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	return 0;
}
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	ff 90       	pop	r15
     102:	ef 90       	pop	r14
     104:	df 90       	pop	r13
     106:	cf 90       	pop	r12
     108:	08 95       	ret

0000010a <rightdir>:

// rightdir() => anropar switchGen(1) för "höger" generator.
int rightdir(Button *self, int arg) {
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
	if (PRESSEDRT) {
     116:	63 99       	sbic	0x0c, 3	; 12
     118:	14 c0       	rjmp	.+40     	; 0x142 <rightdir+0x38>
     11a:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     11c:	04 81       	ldd	r16, Z+4	; 0x04
     11e:	15 81       	ldd	r17, Z+5	; 0x05
     120:	cc 24       	eor	r12, r12
     122:	c3 94       	inc	r12
     124:	d1 2c       	mov	r13, r1
     126:	0f 2e       	mov	r0, r31
     128:	f0 e3       	ldi	r31, 0x30	; 48
     12a:	ef 2e       	mov	r14, r31
     12c:	f2 e0       	ldi	r31, 0x02	; 2
     12e:	ff 2e       	mov	r15, r31
     130:	f0 2d       	mov	r31, r0
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	a9 01       	movw	r20, r18
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	cb 01       	movw	r24, r22
     13e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	return 0;
}
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	ff 90       	pop	r15
     14c:	ef 90       	pop	r14
     14e:	df 90       	pop	r13
     150:	cf 90       	pop	r12
     152:	08 95       	ret

00000154 <updir>:

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
	if (PRESSEDUP) {
     160:	1e 99       	sbic	0x03, 6	; 3
     162:	13 c0       	rjmp	.+38     	; 0x18a <updir+0x36>
     164:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecInc, 0);
     166:	04 81       	ldd	r16, Z+4	; 0x04
     168:	15 81       	ldd	r17, Z+5	; 0x05
     16a:	c1 2c       	mov	r12, r1
     16c:	d1 2c       	mov	r13, r1
     16e:	0f 2e       	mov	r0, r31
     170:	f7 e5       	ldi	r31, 0x57	; 87
     172:	ef 2e       	mov	r14, r31
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	ff 2e       	mov	r15, r31
     178:	f0 2d       	mov	r31, r0
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a9 01       	movw	r20, r18
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	cb 01       	movw	r24, r22
     186:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	return 0;
}
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	df 90       	pop	r13
     198:	cf 90       	pop	r12
     19a:	08 95       	ret

0000019c <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
	if (PRESSEDDN) {
     1a8:	1f 99       	sbic	0x03, 7	; 3
     1aa:	13 c0       	rjmp	.+38     	; 0x1d2 <downdir+0x36>
     1ac:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecDec, 0);
     1ae:	04 81       	ldd	r16, Z+4	; 0x04
     1b0:	15 81       	ldd	r17, Z+5	; 0x05
     1b2:	c1 2c       	mov	r12, r1
     1b4:	d1 2c       	mov	r13, r1
     1b6:	0f 2e       	mov	r0, r31
     1b8:	f4 ea       	ldi	r31, 0xA4	; 164
     1ba:	ef 2e       	mov	r14, r31
     1bc:	f2 e0       	ldi	r31, 0x02	; 2
     1be:	ff 2e       	mov	r15, r31
     1c0:	f0 2d       	mov	r31, r0
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	a9 01       	movw	r20, r18
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	cb 01       	movw	r24, r22
     1ce:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	return 0;
}
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	df 90       	pop	r13
     1e0:	cf 90       	pop	r12
     1e2:	08 95       	ret

000001e4 <centerdir>:

// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
	if (PRESSEDCN) {
     1f0:	1c 99       	sbic	0x03, 4	; 3
     1f2:	13 c0       	rjmp	.+38     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
     1f4:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecReset, 0);
     1f6:	04 81       	ldd	r16, Z+4	; 0x04
     1f8:	15 81       	ldd	r17, Z+5	; 0x05
     1fa:	c1 2c       	mov	r12, r1
     1fc:	d1 2c       	mov	r13, r1
     1fe:	0f 2e       	mov	r0, r31
     200:	f1 ef       	ldi	r31, 0xF1	; 241
     202:	ef 2e       	mov	r14, r31
     204:	f2 e0       	ldi	r31, 0x02	; 2
     206:	ff 2e       	mov	r15, r31
     208:	f0 2d       	mov	r31, r0
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	a9 01       	movw	r20, r18
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	cb 01       	movw	r24, r22
     216:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	return 0;
}
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	ff 90       	pop	r15
     224:	ef 90       	pop	r14
     226:	df 90       	pop	r13
     228:	cf 90       	pop	r12
     22a:	08 95       	ret

0000022c <buttonChecker>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// buttonChecker() checkar vilken knapp som blivit tryckt.
int buttonChecker(Button *self, int arg) {
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     232:	62 99       	sbic	0x0c, 2	; 12
     234:	04 c0       	rjmp	.+8      	; 0x23e <buttonChecker+0x12>
		leftdir(self, 0);
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	0e 94 61 00 	call	0xc2	; 0xc2 <leftdir>
	}
	if (PRESSEDRT) {
     23e:	63 99       	sbic	0x0c, 3	; 12
     240:	05 c0       	rjmp	.+10     	; 0x24c <buttonChecker+0x20>
		rightdir(self, 0);
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	ce 01       	movw	r24, r28
     248:	0e 94 85 00 	call	0x10a	; 0x10a <rightdir>
	}
	if (PRESSEDUP) {
     24c:	1e 99       	sbic	0x03, 6	; 3
     24e:	05 c0       	rjmp	.+10     	; 0x25a <buttonChecker+0x2e>
		updir(self, 0);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	ce 01       	movw	r24, r28
     256:	0e 94 aa 00 	call	0x154	; 0x154 <updir>
	}
	if (PRESSEDDN) {
     25a:	1f 99       	sbic	0x03, 7	; 3
     25c:	05 c0       	rjmp	.+10     	; 0x268 <buttonChecker+0x3c>
		downdir(self, 0);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	ce 01       	movw	r24, r28
     264:	0e 94 ce 00 	call	0x19c	; 0x19c <downdir>
	}
	if (PRESSEDCN) {
     268:	1c 99       	sbic	0x03, 4	; 3
     26a:	05 c0       	rjmp	.+10     	; 0x276 <buttonChecker+0x4a>
		centerdir(self, 0);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	ce 01       	movw	r24, r28
     272:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <centerdir>
	}
	return 0;
}
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     280:	80 ec       	ldi	r24, 0xC0	; 192
     282:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     286:	87 eb       	ldi	r24, 0xB7	; 183
     288:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     28c:	8f e0       	ldi	r24, 0x0F	; 15
     28e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     292:	08 95       	ret

00000294 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     294:	66 30       	cpi	r22, 0x06	; 6
     296:	71 05       	cpc	r23, r1
     298:	08 f0       	brcs	.+2      	; 0x29c <writeChar+0x8>
     29a:	6b c0       	rjmp	.+214    	; 0x372 <writeChar+0xde>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     29c:	90 ed       	ldi	r25, 0xD0	; 208
     29e:	98 0f       	add	r25, r24
     2a0:	9a 30       	cpi	r25, 0x0A	; 10
     2a2:	48 f4       	brcc	.+18     	; 0x2b6 <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     2a4:	e8 2f       	mov	r30, r24
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	e9 52       	subi	r30, 0x29	; 41
     2ae:	ff 4f       	sbci	r31, 0xFF	; 255
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     2ba:	fb 01       	movw	r30, r22
     2bc:	77 23       	and	r23, r23
     2be:	0c f4       	brge	.+2      	; 0x2c2 <writeChar+0x2e>
     2c0:	31 96       	adiw	r30, 0x01	; 1
     2c2:	f5 95       	asr	r31
     2c4:	e7 95       	ror	r30
     2c6:	e4 51       	subi	r30, 0x14	; 20
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     2ca:	61 70       	andi	r22, 0x01	; 1
     2cc:	70 78       	andi	r23, 0x80	; 128
     2ce:	77 23       	and	r23, r23
     2d0:	34 f4       	brge	.+12     	; 0x2de <writeChar+0x4a>
     2d2:	61 50       	subi	r22, 0x01	; 1
     2d4:	71 09       	sbc	r23, r1
     2d6:	6e 6f       	ori	r22, 0xFE	; 254
     2d8:	7f 6f       	ori	r23, 0xFF	; 255
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	66 0f       	add	r22, r22
     2e0:	77 1f       	adc	r23, r23
     2e2:	66 0f       	add	r22, r22
     2e4:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     2e6:	8f e0       	ldi	r24, 0x0F	; 15
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	06 2e       	mov	r0, r22
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <writeChar+0x5e>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <writeChar+0x5a>
     2f6:	80 95       	com	r24
     2f8:	40 81       	ld	r20, Z
     2fa:	98 2f       	mov	r25, r24
     2fc:	94 23       	and	r25, r20
     2fe:	a9 01       	movw	r20, r18
     300:	4f 70       	andi	r20, 0x0F	; 15
     302:	55 27       	eor	r21, r21
     304:	06 2e       	mov	r0, r22
     306:	02 c0       	rjmp	.+4      	; 0x30c <writeChar+0x78>
     308:	44 0f       	add	r20, r20
     30a:	55 1f       	adc	r21, r21
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <writeChar+0x74>
     310:	49 2b       	or	r20, r25
     312:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     314:	a9 01       	movw	r20, r18
     316:	52 95       	swap	r21
     318:	42 95       	swap	r20
     31a:	4f 70       	andi	r20, 0x0F	; 15
     31c:	45 27       	eor	r20, r21
     31e:	5f 70       	andi	r21, 0x0F	; 15
     320:	45 27       	eor	r20, r21
     322:	4f 70       	andi	r20, 0x0F	; 15
     324:	55 27       	eor	r21, r21
     326:	06 2e       	mov	r0, r22
     328:	02 c0       	rjmp	.+4      	; 0x32e <writeChar+0x9a>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <writeChar+0x96>
     332:	95 81       	ldd	r25, Z+5	; 0x05
     334:	98 23       	and	r25, r24
     336:	49 2b       	or	r20, r25
     338:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     33a:	43 2f       	mov	r20, r19
     33c:	55 27       	eor	r21, r21
     33e:	4f 70       	andi	r20, 0x0F	; 15
     340:	55 27       	eor	r21, r21
     342:	06 2e       	mov	r0, r22
     344:	02 c0       	rjmp	.+4      	; 0x34a <writeChar+0xb6>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <writeChar+0xb2>
     34e:	92 85       	ldd	r25, Z+10	; 0x0a
     350:	98 23       	and	r25, r24
     352:	49 2b       	or	r20, r25
     354:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     356:	47 85       	ldd	r20, Z+15	; 0x0f
     358:	48 23       	and	r20, r24
     35a:	c9 01       	movw	r24, r18
     35c:	89 2f       	mov	r24, r25
     35e:	99 27       	eor	r25, r25
     360:	82 95       	swap	r24
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	02 c0       	rjmp	.+4      	; 0x36a <writeChar+0xd6>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	6a 95       	dec	r22
     36c:	e2 f7       	brpl	.-8      	; 0x366 <writeChar+0xd2>
     36e:	84 2b       	or	r24, r20
     370:	87 87       	std	Z+15, r24	; 0x0f
     372:	08 95       	ret

00000374 <printAt>:
}

void printAt(long num, int pos) {
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	4b 01       	movw	r8, r22
     38a:	5c 01       	movw	r10, r24
     38c:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     38e:	24 e6       	ldi	r18, 0x64	; 100
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	0e 94 08 11 	call	0x2210	; 0x2210 <__divmodsi4>
     39a:	0f 2e       	mov	r0, r31
     39c:	fa e0       	ldi	r31, 0x0A	; 10
     39e:	cf 2e       	mov	r12, r31
     3a0:	d1 2c       	mov	r13, r1
     3a2:	e1 2c       	mov	r14, r1
     3a4:	f1 2c       	mov	r15, r1
     3a6:	f0 2d       	mov	r31, r0
     3a8:	a7 01       	movw	r20, r14
     3aa:	96 01       	movw	r18, r12
     3ac:	0e 94 08 11 	call	0x2210	; 0x2210 <__divmodsi4>
     3b0:	be 01       	movw	r22, r28
     3b2:	80 e3       	ldi	r24, 0x30	; 48
     3b4:	82 0f       	add	r24, r18
     3b6:	0e 94 4a 01 	call	0x294	; 0x294 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     3ba:	21 96       	adiw	r28, 0x01	; 1
     3bc:	c5 01       	movw	r24, r10
     3be:	b4 01       	movw	r22, r8
     3c0:	a7 01       	movw	r20, r14
     3c2:	96 01       	movw	r18, r12
     3c4:	0e 94 08 11 	call	0x2210	; 0x2210 <__divmodsi4>
     3c8:	86 2f       	mov	r24, r22
     3ca:	be 01       	movw	r22, r28
     3cc:	80 5d       	subi	r24, 0xD0	; 208
     3ce:	0e 94 4a 01 	call	0x294	; 0x294 <writeChar>
	
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	8f 90       	pop	r8
     3e6:	08 95       	ret

000003e8 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser synkront (SYNC)
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24

	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	62 ef       	ldi	r22, 0xF2	; 242
     3f4:	73 e0       	ldi	r23, 0x03	; 3
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	9d 81       	ldd	r25, Y+5	; 0x05
     3fa:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sync>
     3fe:	bc 01       	movw	r22, r24
     400:	99 0f       	add	r25, r25
     402:	88 0b       	sbc	r24, r24
     404:	99 0b       	sbc	r25, r25
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	62 ef       	ldi	r22, 0xF2	; 242
     414:	73 e0       	ldi	r23, 0x03	; 3
     416:	8e 81       	ldd	r24, Y+6	; 0x06
     418:	9f 81       	ldd	r25, Y+7	; 0x07
     41a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sync>
     41e:	bc 01       	movw	r22, r24
     420:	99 0f       	add	r25, r25
     422:	88 0b       	sbc	r24, r24
     424:	99 0b       	sbc	r25, r25
     426:	44 e0       	ldi	r20, 0x04	; 4
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>

	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     42e:	88 85       	ldd	r24, Y+8	; 0x08
     430:	81 11       	cpse	r24, r1
     432:	09 c0       	rjmp	.+18     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
		printAt(10, 2);
     434:	42 e0       	ldi	r20, 0x02	; 2
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	6a e0       	ldi	r22, 0x0A	; 10
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>
     444:	08 c0       	rjmp	.+16     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
		} else {
		printAt(1, 2);
     446:	42 e0       	ldi	r20, 0x02	; 2
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 ba 01 	call	0x374	; 0x374 <printAt>
	}

	return 0;
}
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
	if (self->midPos == arg) {
     46c:	fc 01       	movw	r30, r24
     46e:	20 85       	ldd	r18, Z+8	; 0x08
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	26 17       	cp	r18, r22
     474:	37 07       	cpc	r19, r23
     476:	91 f0       	breq	.+36     	; 0x49c <switchGen+0x3c>
     478:	8c 01       	movw	r16, r24
		// Om samma generator redan är aktiv, gör inget.
		return 0;
	}
	self->midPos = arg;
     47a:	60 87       	std	Z+8, r22	; 0x08
	// Använder ASYNC för att anropa updateDisplay,
	// så att vi inte blockeras, men ändå uppdaterar displayen direkt.
	ASYNC(self, updateDisplay, 0);
     47c:	c1 2c       	mov	r12, r1
     47e:	d1 2c       	mov	r13, r1
     480:	0f 2e       	mov	r0, r31
     482:	f4 ef       	ldi	r31, 0xF4	; 244
     484:	ef 2e       	mov	r14, r31
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	a9 01       	movw	r20, r18
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	cb 01       	movw	r24, r22
     498:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	return 0;
}
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	08 95       	ret

000004ae <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     4c0:	88 85       	ldd	r24, Y+8	; 0x08
     4c2:	81 11       	cpse	r24, r1
     4c4:	13 c0       	rjmp	.+38     	; 0x4ec <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     4c6:	0c 81       	ldd	r16, Y+4	; 0x04
     4c8:	1d 81       	ldd	r17, Y+5	; 0x05
     4ca:	c1 2c       	mov	r12, r1
     4cc:	d1 2c       	mov	r13, r1
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f6 ef       	ldi	r31, 0xF6	; 246
     4d2:	ef 2e       	mov	r14, r31
     4d4:	f3 e0       	ldi	r31, 0x03	; 3
     4d6:	ff 2e       	mov	r15, r31
     4d8:	f0 2d       	mov	r31, r0
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	a9 01       	movw	r20, r18
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	cb 01       	movw	r24, r22
     4e6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
     4ea:	12 c0       	rjmp	.+36     	; 0x510 <__stack+0x11>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     4ec:	0e 81       	ldd	r16, Y+6	; 0x06
     4ee:	1f 81       	ldd	r17, Y+7	; 0x07
     4f0:	c1 2c       	mov	r12, r1
     4f2:	d1 2c       	mov	r13, r1
     4f4:	0f 2e       	mov	r0, r31
     4f6:	f6 ef       	ldi	r31, 0xF6	; 246
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f3 e0       	ldi	r31, 0x03	; 3
     4fc:	ff 2e       	mov	r15, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	cb 01       	movw	r24, r22
     50c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	ASYNC(self, updateDisplay, 0);
     510:	c1 2c       	mov	r12, r1
     512:	d1 2c       	mov	r13, r1
     514:	0f 2e       	mov	r0, r31
     516:	f4 ef       	ldi	r31, 0xF4	; 244
     518:	ef 2e       	mov	r14, r31
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	ff 2e       	mov	r15, r31
     51e:	f0 2d       	mov	r31, r0
     520:	8e 01       	movw	r16, r28
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	cb 01       	movw	r24, r22
     52e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	return 0;
}
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	08 95       	ret

00000548 <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     55a:	88 85       	ldd	r24, Y+8	; 0x08
     55c:	81 11       	cpse	r24, r1
     55e:	13 c0       	rjmp	.+38     	; 0x586 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     560:	0c 81       	ldd	r16, Y+4	; 0x04
     562:	1d 81       	ldd	r17, Y+5	; 0x05
     564:	c1 2c       	mov	r12, r1
     566:	d1 2c       	mov	r13, r1
     568:	0f 2e       	mov	r0, r31
     56a:	fb e2       	ldi	r31, 0x2B	; 43
     56c:	ef 2e       	mov	r14, r31
     56e:	f4 e0       	ldi	r31, 0x04	; 4
     570:	ff 2e       	mov	r15, r31
     572:	f0 2d       	mov	r31, r0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	a9 01       	movw	r20, r18
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	cb 01       	movw	r24, r22
     580:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
     584:	12 c0       	rjmp	.+36     	; 0x5aa <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     586:	0e 81       	ldd	r16, Y+6	; 0x06
     588:	1f 81       	ldd	r17, Y+7	; 0x07
     58a:	c1 2c       	mov	r12, r1
     58c:	d1 2c       	mov	r13, r1
     58e:	0f 2e       	mov	r0, r31
     590:	fb e2       	ldi	r31, 0x2B	; 43
     592:	ef 2e       	mov	r14, r31
     594:	f4 e0       	ldi	r31, 0x04	; 4
     596:	ff 2e       	mov	r15, r31
     598:	f0 2d       	mov	r31, r0
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	a9 01       	movw	r20, r18
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	cb 01       	movw	r24, r22
     5a6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	ASYNC(self, updateDisplay, 0);
     5aa:	c1 2c       	mov	r12, r1
     5ac:	d1 2c       	mov	r13, r1
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f4 ef       	ldi	r31, 0xF4	; 244
     5b2:	ef 2e       	mov	r14, r31
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	ff 2e       	mov	r15, r31
     5b8:	f0 2d       	mov	r31, r0
     5ba:	8e 01       	movw	r16, r28
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	a9 01       	movw	r20, r18
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	cb 01       	movw	r24, r22
     5c8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	return 0;
}
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	08 95       	ret

000005e2 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     5f4:	88 85       	ldd	r24, Y+8	; 0x08
     5f6:	81 11       	cpse	r24, r1
     5f8:	13 c0       	rjmp	.+38     	; 0x620 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     5fa:	0c 81       	ldd	r16, Y+4	; 0x04
     5fc:	1d 81       	ldd	r17, Y+5	; 0x05
     5fe:	c1 2c       	mov	r12, r1
     600:	d1 2c       	mov	r13, r1
     602:	0f 2e       	mov	r0, r31
     604:	f8 e3       	ldi	r31, 0x38	; 56
     606:	ef 2e       	mov	r14, r31
     608:	f4 e0       	ldi	r31, 0x04	; 4
     60a:	ff 2e       	mov	r15, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	a9 01       	movw	r20, r18
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	cb 01       	movw	r24, r22
     61a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
     61e:	12 c0       	rjmp	.+36     	; 0x644 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     620:	0e 81       	ldd	r16, Y+6	; 0x06
     622:	1f 81       	ldd	r17, Y+7	; 0x07
     624:	c1 2c       	mov	r12, r1
     626:	d1 2c       	mov	r13, r1
     628:	0f 2e       	mov	r0, r31
     62a:	f8 e3       	ldi	r31, 0x38	; 56
     62c:	ef 2e       	mov	r14, r31
     62e:	f4 e0       	ldi	r31, 0x04	; 4
     630:	ff 2e       	mov	r15, r31
     632:	f0 2d       	mov	r31, r0
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	a9 01       	movw	r20, r18
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	cb 01       	movw	r24, r22
     640:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	}
	ASYNC(self, updateDisplay, 0);
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1
     648:	0f 2e       	mov	r0, r31
     64a:	f4 ef       	ldi	r31, 0xF4	; 244
     64c:	ef 2e       	mov	r14, r31
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	ff 2e       	mov	r15, r31
     652:	f0 2d       	mov	r31, r0
     654:	8e 01       	movw	r16, r28
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	cb 01       	movw	r24, r22
     662:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	return 0;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret

0000067c <startProgram>:
// Skapar ett Button-objekt som kopplas till GUI för att byta generator/frekvens.
Button button = initButton(&gui);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self, int arg) {
     67c:	cf 92       	push	r12
     67e:	df 92       	push	r13
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     68e:	c1 2c       	mov	r12, r1
     690:	d1 2c       	mov	r13, r1
     692:	0f 2e       	mov	r0, r31
     694:	fa e9       	ldi	r31, 0x9A	; 154
     696:	ef 2e       	mov	r14, r31
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	ff 2e       	mov	r15, r31
     69c:	f0 2d       	mov	r31, r0
     69e:	0a e1       	ldi	r16, 0x1A	; 26
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
	ASYNC(&pulseGen2, setPulse, 0);
     6b2:	0f e0       	ldi	r16, 0x0F	; 15
     6b4:	11 e0       	ldi	r17, 0x01	; 1
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	a9 01       	movw	r20, r18
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	cb 01       	movw	r24, r22
     6c2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     6c6:	0f 2e       	mov	r0, r31
     6c8:	f4 ef       	ldi	r31, 0xF4	; 244
     6ca:	ef 2e       	mov	r14, r31
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0
     6d2:	8e 01       	movw	r16, r28
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	a9 01       	movw	r20, r18
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	cb 01       	movw	r24, r22
     6e0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>

	return 0;
}
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	08 95       	ret

000006fa <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     6fa:	0e 94 71 04 	call	0x8e2	; 0x8e2 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     6fe:	0e 94 40 01 	call	0x280	; 0x280 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     702:	0e 94 4d 00 	call	0x9a	; 0x9a <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.
	INSTALL(&button, buttonChecker, IRQ_PCINT0);
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	66 e1       	ldi	r22, 0x16	; 22
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 9b 10 	call	0x2136	; 0x2136 <install>
	INSTALL(&button, buttonChecker, IRQ_PCINT1);
     714:	42 e0       	ldi	r20, 0x02	; 2
     716:	66 e1       	ldi	r22, 0x16	; 22
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 9b 10 	call	0x2136	; 0x2136 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	6e e3       	ldi	r22, 0x3E	; 62
     728:	73 e0       	ldi	r23, 0x03	; 3
     72a:	86 e0       	ldi	r24, 0x06	; 6
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 b5 10 	call	0x216a	; 0x216a <tinytimber>
}
     732:	08 95       	ret

00000734 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	9d 81       	ldd	r25, Y+5	; 0x05
     74a:	89 2b       	or	r24, r25
     74c:	51 f4       	brne	.+20     	; 0x762 <setPulse+0x2e>
	    self->outputHigh = false;
     74e:	18 86       	std	Y+8, r1	; 0x08
	    SYNC(self->wbitPtr, writeBit, 0);
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	61 ed       	ldi	r22, 0xD1	; 209
     756:	70 e1       	ldi	r23, 0x10	; 16
     758:	89 85       	ldd	r24, Y+9	; 0x09
     75a:	9a 85       	ldd	r25, Y+10	; 0x0a
     75c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sync>
	    return 0;
     760:	36 c0       	rjmp	.+108    	; 0x7ce <setPulse+0x9a>
    }
	// Annars toggla outputHigh (true/false => bit=1/0).
    self->outputHigh = !(self->outputHigh);
     762:	48 85       	ldd	r20, Y+8	; 0x08
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	48 27       	eor	r20, r24
     768:	48 87       	std	Y+8, r20	; 0x08
    int value = self->outputHigh ? 1 : 0;
    SYNC(self->wbitPtr, writeBit, value);
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	61 ed       	ldi	r22, 0xD1	; 209
     76e:	70 e1       	ldi	r23, 0x10	; 16
     770:	89 85       	ldd	r24, Y+9	; 0x09
     772:	9a 85       	ldd	r25, Y+10	; 0x0a
     774:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sync>
	
	// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
    int delay = 1000 / self->frec;
    AFTER(MSEC(delay), self, setPulse, 0);
     778:	6c 81       	ldd	r22, Y+4	; 0x04
     77a:	7d 81       	ldd	r23, Y+5	; 0x05
     77c:	88 ee       	ldi	r24, 0xE8	; 232
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
     784:	2d e7       	ldi	r18, 0x7D	; 125
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	db 01       	movw	r26, r22
     78a:	0e 94 27 11 	call	0x224e	; 0x224e <__usmulhisi3>
     78e:	8b 01       	movw	r16, r22
     790:	9c 01       	movw	r18, r24
     792:	99 23       	and	r25, r25
     794:	24 f4       	brge	.+8      	; 0x79e <setPulse+0x6a>
     796:	0d 5f       	subi	r16, 0xFD	; 253
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	2f 4f       	sbci	r18, 0xFF	; 255
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	c9 01       	movw	r24, r18
     7a0:	b8 01       	movw	r22, r16
     7a2:	95 95       	asr	r25
     7a4:	87 95       	ror	r24
     7a6:	77 95       	ror	r23
     7a8:	67 95       	ror	r22
     7aa:	95 95       	asr	r25
     7ac:	87 95       	ror	r24
     7ae:	77 95       	ror	r23
     7b0:	67 95       	ror	r22
     7b2:	c1 2c       	mov	r12, r1
     7b4:	d1 2c       	mov	r13, r1
     7b6:	0f 2e       	mov	r0, r31
     7b8:	fa e9       	ldi	r31, 0x9A	; 154
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f3 e0       	ldi	r31, 0x03	; 3
     7be:	ff 2e       	mov	r15, r31
     7c0:	f0 2d       	mov	r31, r0
     7c2:	8e 01       	movw	r16, r28
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	a9 01       	movw	r20, r18
     7ca:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
    return 0;
}
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
}
     7e4:	fc 01       	movw	r30, r24
     7e6:	84 81       	ldd	r24, Z+4	; 0x04
     7e8:	95 81       	ldd	r25, Z+5	; 0x05
     7ea:	08 95       	ret

000007ec <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
    int old = self->frec;
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
     800:	9d 81       	ldd	r25, Y+5	; 0x05
    if (self->frec < 99) {
     802:	83 36       	cpi	r24, 0x63	; 99
     804:	91 05       	cpc	r25, r1
     806:	28 f4       	brcc	.+10     	; 0x812 <FrecInc+0x26>
	    self->frec++;
     808:	9c 01       	movw	r18, r24
     80a:	2f 5f       	subi	r18, 0xFF	; 255
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	3d 83       	std	Y+5, r19	; 0x05
     810:	2c 83       	std	Y+4, r18	; 0x04
    }
    // Om går från 0 till mer än 0 starta.
    if (old == 0 && self->frec > 0) {
     812:	89 2b       	or	r24, r25
     814:	a9 f4       	brne	.+42     	; 0x840 <FrecInc+0x54>
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	9d 81       	ldd	r25, Y+5	; 0x05
     81a:	89 2b       	or	r24, r25
     81c:	89 f0       	breq	.+34     	; 0x840 <FrecInc+0x54>
	    ASYNC(self, setPulse, 0);
     81e:	c1 2c       	mov	r12, r1
     820:	d1 2c       	mov	r13, r1
     822:	0f 2e       	mov	r0, r31
     824:	fa e9       	ldi	r31, 0x9A	; 154
     826:	ef 2e       	mov	r14, r31
     828:	f3 e0       	ldi	r31, 0x03	; 3
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
     82e:	8e 01       	movw	r16, r28
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	a9 01       	movw	r20, r18
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	cb 01       	movw	r24, r22
     83c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
    }
    return self->frec;
    }
     840:	8c 81       	ldd	r24, Y+4	; 0x04
     842:	9d 81       	ldd	r25, Y+5	; 0x05
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	1f 91       	pop	r17
     84a:	0f 91       	pop	r16
     84c:	ff 90       	pop	r15
     84e:	ef 90       	pop	r14
     850:	df 90       	pop	r13
     852:	cf 90       	pop	r12
     854:	08 95       	ret

00000856 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     856:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     858:	24 81       	ldd	r18, Z+4	; 0x04
     85a:	35 81       	ldd	r19, Z+5	; 0x05
     85c:	21 15       	cp	r18, r1
     85e:	31 05       	cpc	r19, r1
     860:	21 f0       	breq	.+8      	; 0x86a <FrecDec+0x14>
		self->frec--;
     862:	21 50       	subi	r18, 0x01	; 1
     864:	31 09       	sbc	r19, r1
     866:	35 83       	std	Z+5, r19	; 0x05
     868:	24 83       	std	Z+4, r18	; 0x04
	}
	return self->frec;
}
     86a:	84 81       	ldd	r24, Z+4	; 0x04
     86c:	95 81       	ldd	r25, Z+5	; 0x05
     86e:	08 95       	ret

00000870 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     87e:	84 81       	ldd	r24, Z+4	; 0x04
     880:	95 81       	ldd	r25, Z+5	; 0x05
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	c1 f4       	brne	.+48     	; 0x8b6 <FrecReset+0x46>
	    self->frec = self->frec_old;
     886:	86 81       	ldd	r24, Z+6	; 0x06
     888:	97 81       	ldd	r25, Z+7	; 0x07
     88a:	95 83       	std	Z+5, r25	; 0x05
     88c:	84 83       	std	Z+4, r24	; 0x04
	    if (self->frec > 0) {
     88e:	89 2b       	or	r24, r25
     890:	f9 f0       	breq	.+62     	; 0x8d0 <FrecReset+0x60>
		    ASYNC(self, setPulse, 0);
     892:	c1 2c       	mov	r12, r1
     894:	d1 2c       	mov	r13, r1
     896:	0f 2e       	mov	r0, r31
     898:	fa e9       	ldi	r31, 0x9A	; 154
     89a:	ef 2e       	mov	r14, r31
     89c:	f3 e0       	ldi	r31, 0x03	; 3
     89e:	ff 2e       	mov	r15, r31
     8a0:	f0 2d       	mov	r31, r0
     8a2:	8f 01       	movw	r16, r30
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a9 01       	movw	r20, r18
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	cb 01       	movw	r24, r22
     8b0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
     8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <FrecReset+0x60>
	    }
	    } else {
	    self->frec_old = self->frec;
     8b6:	97 83       	std	Z+7, r25	; 0x07
     8b8:	86 83       	std	Z+6, r24	; 0x06
	    self->frec = 0;
     8ba:	15 82       	std	Z+5, r1	; 0x05
     8bc:	14 82       	std	Z+4, r1	; 0x04
	    self->outputHigh = false;
     8be:	10 86       	std	Z+8, r1	; 0x08
	    SYNC(self->wbitPtr, writeBit, 0);
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	61 ed       	ldi	r22, 0xD1	; 209
     8c6:	70 e1       	ldi	r23, 0x10	; 16
     8c8:	81 85       	ldd	r24, Z+9	; 0x09
     8ca:	92 85       	ldd	r25, Z+10	; 0x0a
     8cc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sync>
    }
    return 0;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	08 95       	ret

000008e2 <avr_init>:
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	
	CLKPR = 0x80;
     8e2:	e1 e6       	ldi	r30, 0x61	; 97
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 e8       	ldi	r24, 0x80	; 128
     8e8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     8ea:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     8ec:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     8ee:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     8f0:	e1 e8       	ldi	r30, 0x81	; 129
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	8d 60       	ori	r24, 0x0D	; 13
     8f8:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     8fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     902:	ef e6       	ldi	r30, 0x6F	; 111
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	82 60       	ori	r24, 0x02	; 2
     90a:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     90c:	82 ec       	ldi	r24, 0xC2	; 194
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     914:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     918:	08 95       	ret

0000091a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	00 d0       	rcall	.+0      	; 0x920 <initialize+0x6>
     920:	00 d0       	rcall	.+0      	; 0x922 <initialize+0x8>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	8f e3       	ldi	r24, 0x3F	; 63
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	2f e1       	ldi	r18, 0x1F	; 31
     92c:	33 e0       	ldi	r19, 0x03	; 3
     92e:	fc 01       	movw	r30, r24
     930:	70 97       	sbiw	r30, 0x10	; 16
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	40 96       	adiw	r24, 0x10	; 16
     938:	82 17       	cp	r24, r18
     93a:	93 07       	cpc	r25, r19
     93c:	c1 f7       	brne	.-16     	; 0x92e <initialize+0x14>
     93e:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <messages+0xe1>
     942:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <messages+0xe0>
     946:	ea e7       	ldi	r30, 0x7A	; 122
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	87 e9       	ldi	r24, 0x97	; 151
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	80 83       	st	Z, r24
     952:	84 eb       	ldi	r24, 0xB4	; 180
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	96 8f       	std	Z+30, r25	; 0x1e
     958:	85 8f       	std	Z+29, r24	; 0x1d
     95a:	a1 ed       	ldi	r26, 0xD1	; 209
     95c:	b1 e0       	ldi	r27, 0x01	; 1
     95e:	b3 af       	std	Z+59, r27	; 0x3b
     960:	a2 af       	std	Z+58, r26	; 0x3a
     962:	1d 92       	st	X+, r1
     964:	1c 92       	st	X, r1
     966:	fa 83       	std	Y+2, r31	; 0x02
     968:	e9 83       	std	Y+1, r30	; 0x01
     96a:	eb e7       	ldi	r30, 0x7B	; 123
     96c:	f3 e0       	ldi	r31, 0x03	; 3
     96e:	fc 83       	std	Y+4, r31	; 0x04
     970:	eb 83       	std	Y+3, r30	; 0x03
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	9a 81       	ldd	r25, Y+2	; 0x02
     976:	06 96       	adiw	r24, 0x06	; 6
     978:	0e 94 5f 11 	call	0x22be	; 0x22be <setjmp>
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	e9 81       	ldd	r30, Y+1	; 0x01
     982:	fa 81       	ldd	r31, Y+2	; 0x02
     984:	97 8b       	std	Z+23, r25	; 0x17
     986:	86 8b       	std	Z+22, r24	; 0x16
     988:	91 8f       	std	Z+25, r25	; 0x19
     98a:	80 8f       	std	Z+24, r24	; 0x18
     98c:	8d e2       	ldi	r24, 0x2D	; 45
     98e:	90 e1       	ldi	r25, 0x10	; 16
     990:	94 8f       	std	Z+28, r25	; 0x1c
     992:	83 8f       	std	Z+27, r24	; 0x1b
     994:	15 82       	std	Z+5, r1	; 0x05
     996:	14 82       	std	Z+4, r1	; 0x04
     998:	7d 96       	adiw	r30, 0x1d	; 29
     99a:	fa 83       	std	Y+2, r31	; 0x02
     99c:	e9 83       	std	Y+1, r30	; 0x01
     99e:	eb 81       	ldd	r30, Y+3	; 0x03
     9a0:	fc 81       	ldd	r31, Y+4	; 0x04
     9a2:	e0 5a       	subi	r30, 0xA0	; 160
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	fc 83       	std	Y+4, r31	; 0x04
     9a8:	eb 83       	std	Y+3, r30	; 0x03
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	8e 5e       	subi	r24, 0xEE	; 238
     9b0:	91 40       	sbci	r25, 0x01	; 1
     9b2:	f9 f6       	brne	.-66     	; 0x972 <initialize+0x58>
     9b4:	e2 e1       	ldi	r30, 0x12	; 18
     9b6:	f2 e0       	ldi	r31, 0x02	; 2
     9b8:	11 82       	std	Z+1, r1	; 0x01
     9ba:	10 82       	st	Z, r1
     9bc:	15 82       	std	Z+5, r1	; 0x05
     9be:	14 82       	std	Z+4, r1	; 0x04
     9c0:	13 82       	std	Z+3, r1	; 0x03
     9c2:	12 82       	std	Z+2, r1	; 0x02
     9c4:	e1 e6       	ldi	r30, 0x61	; 97
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	80 83       	st	Z, r24
     9cc:	10 82       	st	Z, r1
     9ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <dispatch>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <dispatch+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <current>
     a02:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <current+0x1>
     a06:	06 96       	adiw	r24, 0x06	; 6
     a08:	0e 94 5f 11 	call	0x22be	; 0x22be <setjmp>
     a0c:	89 2b       	or	r24, r25
     a0e:	59 f4       	brne	.+22     	; 0xa26 <dispatch+0x36>
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <current+0x1>
     a18:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <current>
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	06 96       	adiw	r24, 0x06	; 6
     a22:	0e 94 7f 11 	call	0x22fe	; 0x22fe <longjmp>
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <schedule>:
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <msgQ>
     a3c:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <msgQ+0x1>
     a40:	30 97       	sbiw	r30, 0x00	; 0
     a42:	61 f1       	breq	.+88     	; 0xa9c <schedule+0x6c>
     a44:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <threadPool>
     a48:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <threadPool+0x1>
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	31 f1       	breq	.+76     	; 0xa9c <schedule+0x6c>
     a50:	c0 91 31 01 	lds	r28, 0x0131	; 0x800131 <activeStack>
     a54:	d0 91 32 01 	lds	r29, 0x0132	; 0x800132 <activeStack+0x1>
     a58:	aa 81       	ldd	r26, Y+2	; 0x02
     a5a:	bb 81       	ldd	r27, Y+3	; 0x03
     a5c:	10 97       	sbiw	r26, 0x00	; 0
     a5e:	79 f0       	breq	.+30     	; 0xa7e <schedule+0x4e>
     a60:	46 81       	ldd	r20, Z+6	; 0x06
     a62:	57 81       	ldd	r21, Z+7	; 0x07
     a64:	60 85       	ldd	r22, Z+8	; 0x08
     a66:	71 85       	ldd	r23, Z+9	; 0x09
     a68:	16 96       	adiw	r26, 0x06	; 6
     a6a:	0d 91       	ld	r16, X+
     a6c:	1d 91       	ld	r17, X+
     a6e:	2d 91       	ld	r18, X+
     a70:	3c 91       	ld	r19, X
     a72:	19 97       	sbiw	r26, 0x09	; 9
     a74:	40 1b       	sub	r20, r16
     a76:	51 0b       	sbc	r21, r17
     a78:	62 0b       	sbc	r22, r18
     a7a:	73 0b       	sbc	r23, r19
     a7c:	7a f4       	brpl	.+30     	; 0xa9c <schedule+0x6c>
     a7e:	fc 01       	movw	r30, r24
     a80:	20 81       	ld	r18, Z
     a82:	31 81       	ldd	r19, Z+1	; 0x01
     a84:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <threadPool+0x1>
     a88:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <threadPool>
     a8c:	d1 83       	std	Z+1, r29	; 0x01
     a8e:	c0 83       	st	Z, r28
     a90:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <activeStack+0x1>
     a94:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <activeStack>
     a98:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <__vector_1>:
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
     ac8:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     acc:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     ad0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ad4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ad8:	c9 01       	movw	r24, r18
     ada:	03 2e       	mov	r0, r19
     adc:	00 0c       	add	r0, r0
     ade:	aa 0b       	sbc	r26, r26
     ae0:	bb 0b       	sbc	r27, r27
     ae2:	dc 01       	movw	r26, r24
     ae4:	99 27       	eor	r25, r25
     ae6:	88 27       	eor	r24, r24
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	84 2b       	or	r24, r20
     aee:	95 2b       	or	r25, r21
     af0:	a6 2b       	or	r26, r22
     af2:	b7 2b       	or	r27, r23
     af4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     af8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     afc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     b00:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     b04:	b0 9b       	sbis	0x16, 0	; 22
     b06:	1b c0       	rjmp	.+54     	; 0xb3e <__vector_1+0x98>
     b08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b10:	c9 01       	movw	r24, r18
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	09 2e       	mov	r0, r25
     b16:	00 0c       	add	r0, r0
     b18:	aa 0b       	sbc	r26, r26
     b1a:	bb 0b       	sbc	r27, r27
     b1c:	dc 01       	movw	r26, r24
     b1e:	99 27       	eor	r25, r25
     b20:	88 27       	eor	r24, r24
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	84 2b       	or	r24, r20
     b28:	95 2b       	or	r25, r21
     b2a:	a6 2b       	or	r26, r22
     b2c:	b7 2b       	or	r27, r23
     b2e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     b32:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     b36:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     b3a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     b3e:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable>
     b42:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1>
     b46:	30 97       	sbiw	r30, 0x00	; 0
     b48:	39 f0       	breq	.+14     	; 0xb58 <__vector_1+0xb2>
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable>
     b52:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1>
     b56:	09 95       	icall
     b58:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_2>:
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
     ba0:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     ba4:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     ba8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bb0:	c9 01       	movw	r24, r18
     bb2:	03 2e       	mov	r0, r19
     bb4:	00 0c       	add	r0, r0
     bb6:	aa 0b       	sbc	r26, r26
     bb8:	bb 0b       	sbc	r27, r27
     bba:	dc 01       	movw	r26, r24
     bbc:	99 27       	eor	r25, r25
     bbe:	88 27       	eor	r24, r24
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	84 2b       	or	r24, r20
     bc6:	95 2b       	or	r25, r21
     bc8:	a6 2b       	or	r26, r22
     bca:	b7 2b       	or	r27, r23
     bcc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     bd0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     bd4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     bd8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     bdc:	b0 9b       	sbis	0x16, 0	; 22
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <__vector_2+0x98>
     be0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     be4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be8:	c9 01       	movw	r24, r18
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	09 2e       	mov	r0, r25
     bee:	00 0c       	add	r0, r0
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	dc 01       	movw	r26, r24
     bf6:	99 27       	eor	r25, r25
     bf8:	88 27       	eor	r24, r24
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	84 2b       	or	r24, r20
     c00:	95 2b       	or	r25, r21
     c02:	a6 2b       	or	r26, r22
     c04:	b7 2b       	or	r27, r23
     c06:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     c0a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     c0e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     c12:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     c16:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x2>
     c1a:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x3>
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	39 f0       	breq	.+14     	; 0xc30 <__vector_2+0xb2>
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x2>
     c2a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x3>
     c2e:	09 95       	icall
     c30:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	0f 90       	pop	r0
     c52:	1f 90       	pop	r1
     c54:	18 95       	reti

00000c56 <__vector_3>:
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
     c78:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     c7c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     c80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c88:	c9 01       	movw	r24, r18
     c8a:	03 2e       	mov	r0, r19
     c8c:	00 0c       	add	r0, r0
     c8e:	aa 0b       	sbc	r26, r26
     c90:	bb 0b       	sbc	r27, r27
     c92:	dc 01       	movw	r26, r24
     c94:	99 27       	eor	r25, r25
     c96:	88 27       	eor	r24, r24
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	84 2b       	or	r24, r20
     c9e:	95 2b       	or	r25, r21
     ca0:	a6 2b       	or	r26, r22
     ca2:	b7 2b       	or	r27, r23
     ca4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     ca8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     cac:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     cb0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     cb4:	b0 9b       	sbis	0x16, 0	; 22
     cb6:	1b c0       	rjmp	.+54     	; 0xcee <__vector_3+0x98>
     cb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cc0:	c9 01       	movw	r24, r18
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	09 2e       	mov	r0, r25
     cc6:	00 0c       	add	r0, r0
     cc8:	aa 0b       	sbc	r26, r26
     cca:	bb 0b       	sbc	r27, r27
     ccc:	dc 01       	movw	r26, r24
     cce:	99 27       	eor	r25, r25
     cd0:	88 27       	eor	r24, r24
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	84 2b       	or	r24, r20
     cd8:	95 2b       	or	r25, r21
     cda:	a6 2b       	or	r26, r22
     cdc:	b7 2b       	or	r27, r23
     cde:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     ce2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     ce6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     cea:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     cee:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x4>
     cf2:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x5>
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	39 f0       	breq	.+14     	; 0xd08 <__vector_3+0xb2>
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x4>
     d02:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x5>
     d06:	09 95       	icall
     d08:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <__vector_4>:
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     d54:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     d58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d60:	c9 01       	movw	r24, r18
     d62:	03 2e       	mov	r0, r19
     d64:	00 0c       	add	r0, r0
     d66:	aa 0b       	sbc	r26, r26
     d68:	bb 0b       	sbc	r27, r27
     d6a:	dc 01       	movw	r26, r24
     d6c:	99 27       	eor	r25, r25
     d6e:	88 27       	eor	r24, r24
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	84 2b       	or	r24, r20
     d76:	95 2b       	or	r25, r21
     d78:	a6 2b       	or	r26, r22
     d7a:	b7 2b       	or	r27, r23
     d7c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     d80:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     d84:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     d88:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     d8c:	b0 9b       	sbis	0x16, 0	; 22
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__vector_4+0x98>
     d90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d98:	c9 01       	movw	r24, r18
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	09 2e       	mov	r0, r25
     d9e:	00 0c       	add	r0, r0
     da0:	aa 0b       	sbc	r26, r26
     da2:	bb 0b       	sbc	r27, r27
     da4:	dc 01       	movw	r26, r24
     da6:	99 27       	eor	r25, r25
     da8:	88 27       	eor	r24, r24
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	84 2b       	or	r24, r20
     db0:	95 2b       	or	r25, r21
     db2:	a6 2b       	or	r26, r22
     db4:	b7 2b       	or	r27, r23
     db6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     dba:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     dbe:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     dc2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     dc6:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x6>
     dca:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x7>
     dce:	30 97       	sbiw	r30, 0x00	; 0
     dd0:	39 f0       	breq	.+14     	; 0xde0 <__vector_4+0xb2>
     dd2:	63 e0       	ldi	r22, 0x03	; 3
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x6>
     dda:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x7>
     dde:	09 95       	icall
     de0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_5>:
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
     e28:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     e2c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     e30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e38:	c9 01       	movw	r24, r18
     e3a:	03 2e       	mov	r0, r19
     e3c:	00 0c       	add	r0, r0
     e3e:	aa 0b       	sbc	r26, r26
     e40:	bb 0b       	sbc	r27, r27
     e42:	dc 01       	movw	r26, r24
     e44:	99 27       	eor	r25, r25
     e46:	88 27       	eor	r24, r24
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	84 2b       	or	r24, r20
     e4e:	95 2b       	or	r25, r21
     e50:	a6 2b       	or	r26, r22
     e52:	b7 2b       	or	r27, r23
     e54:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     e58:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     e5c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     e60:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     e64:	b0 9b       	sbis	0x16, 0	; 22
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <__vector_5+0x98>
     e68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e70:	c9 01       	movw	r24, r18
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	09 2e       	mov	r0, r25
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	dc 01       	movw	r26, r24
     e7e:	99 27       	eor	r25, r25
     e80:	88 27       	eor	r24, r24
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	84 2b       	or	r24, r20
     e88:	95 2b       	or	r25, r21
     e8a:	a6 2b       	or	r26, r22
     e8c:	b7 2b       	or	r27, r23
     e8e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     e92:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     e96:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     e9a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     e9e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x8>
     ea2:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x9>
     ea6:	30 97       	sbiw	r30, 0x00	; 0
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <__vector_5+0xb2>
     eaa:	64 e0       	ldi	r22, 0x04	; 4
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x8>
     eb2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x9>
     eb6:	09 95       	icall
     eb8:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <__vector_10>:
     ede:	1f 92       	push	r1
     ee0:	0f 92       	push	r0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	0f 92       	push	r0
     ee6:	11 24       	eor	r1, r1
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31
     f00:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     f04:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     f08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f10:	c9 01       	movw	r24, r18
     f12:	03 2e       	mov	r0, r19
     f14:	00 0c       	add	r0, r0
     f16:	aa 0b       	sbc	r26, r26
     f18:	bb 0b       	sbc	r27, r27
     f1a:	dc 01       	movw	r26, r24
     f1c:	99 27       	eor	r25, r25
     f1e:	88 27       	eor	r24, r24
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	84 2b       	or	r24, r20
     f26:	95 2b       	or	r25, r21
     f28:	a6 2b       	or	r26, r22
     f2a:	b7 2b       	or	r27, r23
     f2c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     f30:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     f34:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     f38:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     f3c:	b0 9b       	sbis	0x16, 0	; 22
     f3e:	1b c0       	rjmp	.+54     	; 0xf76 <__vector_10+0x98>
     f40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f48:	c9 01       	movw	r24, r18
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	09 2e       	mov	r0, r25
     f4e:	00 0c       	add	r0, r0
     f50:	aa 0b       	sbc	r26, r26
     f52:	bb 0b       	sbc	r27, r27
     f54:	dc 01       	movw	r26, r24
     f56:	99 27       	eor	r25, r25
     f58:	88 27       	eor	r24, r24
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	84 2b       	or	r24, r20
     f60:	95 2b       	or	r25, r21
     f62:	a6 2b       	or	r26, r22
     f64:	b7 2b       	or	r27, r23
     f66:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     f6a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     f6e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     f72:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     f76:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0xa>
     f7a:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0xb>
     f7e:	30 97       	sbiw	r30, 0x00	; 0
     f80:	39 f0       	breq	.+14     	; 0xf90 <__vector_10+0xb2>
     f82:	65 e0       	ldi	r22, 0x05	; 5
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0xa>
     f8a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0xb>
     f8e:	09 95       	icall
     f90:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_11>:
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
     fd8:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     fdc:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     fe0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fe4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fe8:	c9 01       	movw	r24, r18
     fea:	03 2e       	mov	r0, r19
     fec:	00 0c       	add	r0, r0
     fee:	aa 0b       	sbc	r26, r26
     ff0:	bb 0b       	sbc	r27, r27
     ff2:	dc 01       	movw	r26, r24
     ff4:	99 27       	eor	r25, r25
     ff6:	88 27       	eor	r24, r24
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	84 2b       	or	r24, r20
     ffe:	95 2b       	or	r25, r21
    1000:	a6 2b       	or	r26, r22
    1002:	b7 2b       	or	r27, r23
    1004:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1008:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    100c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1010:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1014:	b0 9b       	sbis	0x16, 0	; 22
    1016:	1b c0       	rjmp	.+54     	; 0x104e <__vector_11+0x98>
    1018:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    101c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1020:	c9 01       	movw	r24, r18
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	09 2e       	mov	r0, r25
    1026:	00 0c       	add	r0, r0
    1028:	aa 0b       	sbc	r26, r26
    102a:	bb 0b       	sbc	r27, r27
    102c:	dc 01       	movw	r26, r24
    102e:	99 27       	eor	r25, r25
    1030:	88 27       	eor	r24, r24
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	84 2b       	or	r24, r20
    1038:	95 2b       	or	r25, r21
    103a:	a6 2b       	or	r26, r22
    103c:	b7 2b       	or	r27, r23
    103e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1042:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1046:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    104a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    104e:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0xc>
    1052:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0xd>
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	39 f0       	breq	.+14     	; 0x1068 <__vector_11+0xb2>
    105a:	66 e0       	ldi	r22, 0x06	; 6
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0xc>
    1062:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0xd>
    1066:	09 95       	icall
    1068:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_12>:
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    10b4:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    10b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10c0:	c9 01       	movw	r24, r18
    10c2:	03 2e       	mov	r0, r19
    10c4:	00 0c       	add	r0, r0
    10c6:	aa 0b       	sbc	r26, r26
    10c8:	bb 0b       	sbc	r27, r27
    10ca:	dc 01       	movw	r26, r24
    10cc:	99 27       	eor	r25, r25
    10ce:	88 27       	eor	r24, r24
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	84 2b       	or	r24, r20
    10d6:	95 2b       	or	r25, r21
    10d8:	a6 2b       	or	r26, r22
    10da:	b7 2b       	or	r27, r23
    10dc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    10e0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    10e4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    10e8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    10ec:	b0 9b       	sbis	0x16, 0	; 22
    10ee:	1b c0       	rjmp	.+54     	; 0x1126 <__vector_12+0x98>
    10f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10f8:	c9 01       	movw	r24, r18
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	09 2e       	mov	r0, r25
    10fe:	00 0c       	add	r0, r0
    1100:	aa 0b       	sbc	r26, r26
    1102:	bb 0b       	sbc	r27, r27
    1104:	dc 01       	movw	r26, r24
    1106:	99 27       	eor	r25, r25
    1108:	88 27       	eor	r24, r24
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	84 2b       	or	r24, r20
    1110:	95 2b       	or	r25, r21
    1112:	a6 2b       	or	r26, r22
    1114:	b7 2b       	or	r27, r23
    1116:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    111a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    111e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1122:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1126:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xe>
    112a:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xf>
    112e:	30 97       	sbiw	r30, 0x00	; 0
    1130:	39 f0       	breq	.+14     	; 0x1140 <__vector_12+0xb2>
    1132:	67 e0       	ldi	r22, 0x07	; 7
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xe>
    113a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xf>
    113e:	09 95       	icall
    1140:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_13>:
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    118c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1190:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1194:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1198:	c9 01       	movw	r24, r18
    119a:	03 2e       	mov	r0, r19
    119c:	00 0c       	add	r0, r0
    119e:	aa 0b       	sbc	r26, r26
    11a0:	bb 0b       	sbc	r27, r27
    11a2:	dc 01       	movw	r26, r24
    11a4:	99 27       	eor	r25, r25
    11a6:	88 27       	eor	r24, r24
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	84 2b       	or	r24, r20
    11ae:	95 2b       	or	r25, r21
    11b0:	a6 2b       	or	r26, r22
    11b2:	b7 2b       	or	r27, r23
    11b4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    11b8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    11bc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    11c0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    11c4:	b0 9b       	sbis	0x16, 0	; 22
    11c6:	1b c0       	rjmp	.+54     	; 0x11fe <__vector_13+0x98>
    11c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d0:	c9 01       	movw	r24, r18
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	09 2e       	mov	r0, r25
    11d6:	00 0c       	add	r0, r0
    11d8:	aa 0b       	sbc	r26, r26
    11da:	bb 0b       	sbc	r27, r27
    11dc:	dc 01       	movw	r26, r24
    11de:	99 27       	eor	r25, r25
    11e0:	88 27       	eor	r24, r24
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	84 2b       	or	r24, r20
    11e8:	95 2b       	or	r25, r21
    11ea:	a6 2b       	or	r26, r22
    11ec:	b7 2b       	or	r27, r23
    11ee:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    11f2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    11f6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    11fa:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    11fe:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x10>
    1202:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x11>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	39 f0       	breq	.+14     	; 0x1218 <__vector_13+0xb2>
    120a:	68 e0       	ldi	r22, 0x08	; 8
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x10>
    1212:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x11>
    1216:	09 95       	icall
    1218:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__vector_14>:
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
    1260:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1264:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1268:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    126c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1270:	c9 01       	movw	r24, r18
    1272:	03 2e       	mov	r0, r19
    1274:	00 0c       	add	r0, r0
    1276:	aa 0b       	sbc	r26, r26
    1278:	bb 0b       	sbc	r27, r27
    127a:	dc 01       	movw	r26, r24
    127c:	99 27       	eor	r25, r25
    127e:	88 27       	eor	r24, r24
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	84 2b       	or	r24, r20
    1286:	95 2b       	or	r25, r21
    1288:	a6 2b       	or	r26, r22
    128a:	b7 2b       	or	r27, r23
    128c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1290:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1294:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1298:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    129c:	b0 9b       	sbis	0x16, 0	; 22
    129e:	1b c0       	rjmp	.+54     	; 0x12d6 <__vector_14+0x98>
    12a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a8:	c9 01       	movw	r24, r18
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	09 2e       	mov	r0, r25
    12ae:	00 0c       	add	r0, r0
    12b0:	aa 0b       	sbc	r26, r26
    12b2:	bb 0b       	sbc	r27, r27
    12b4:	dc 01       	movw	r26, r24
    12b6:	99 27       	eor	r25, r25
    12b8:	88 27       	eor	r24, r24
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	84 2b       	or	r24, r20
    12c0:	95 2b       	or	r25, r21
    12c2:	a6 2b       	or	r26, r22
    12c4:	b7 2b       	or	r27, r23
    12c6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    12ca:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    12ce:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    12d2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    12d6:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x12>
    12da:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x13>
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	39 f0       	breq	.+14     	; 0x12f0 <__vector_14+0xb2>
    12e2:	69 e0       	ldi	r22, 0x09	; 9
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x12>
    12ea:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x13>
    12ee:	09 95       	icall
    12f0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_15>:
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    133c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1340:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1344:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1348:	c9 01       	movw	r24, r18
    134a:	03 2e       	mov	r0, r19
    134c:	00 0c       	add	r0, r0
    134e:	aa 0b       	sbc	r26, r26
    1350:	bb 0b       	sbc	r27, r27
    1352:	dc 01       	movw	r26, r24
    1354:	99 27       	eor	r25, r25
    1356:	88 27       	eor	r24, r24
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	84 2b       	or	r24, r20
    135e:	95 2b       	or	r25, r21
    1360:	a6 2b       	or	r26, r22
    1362:	b7 2b       	or	r27, r23
    1364:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1368:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    136c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1370:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1374:	b0 9b       	sbis	0x16, 0	; 22
    1376:	1b c0       	rjmp	.+54     	; 0x13ae <__vector_15+0x98>
    1378:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    137c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1380:	c9 01       	movw	r24, r18
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	09 2e       	mov	r0, r25
    1386:	00 0c       	add	r0, r0
    1388:	aa 0b       	sbc	r26, r26
    138a:	bb 0b       	sbc	r27, r27
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	84 2b       	or	r24, r20
    1398:	95 2b       	or	r25, r21
    139a:	a6 2b       	or	r26, r22
    139c:	b7 2b       	or	r27, r23
    139e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    13a2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    13a6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    13aa:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    13ae:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x14>
    13b2:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x15>
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <__vector_15+0xb2>
    13ba:	6a e0       	ldi	r22, 0x0A	; 10
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x14>
    13c2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x15>
    13c6:	09 95       	icall
    13c8:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_16>:
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1414:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1418:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    141c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1420:	c9 01       	movw	r24, r18
    1422:	03 2e       	mov	r0, r19
    1424:	00 0c       	add	r0, r0
    1426:	aa 0b       	sbc	r26, r26
    1428:	bb 0b       	sbc	r27, r27
    142a:	dc 01       	movw	r26, r24
    142c:	99 27       	eor	r25, r25
    142e:	88 27       	eor	r24, r24
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	84 2b       	or	r24, r20
    1436:	95 2b       	or	r25, r21
    1438:	a6 2b       	or	r26, r22
    143a:	b7 2b       	or	r27, r23
    143c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1440:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1444:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1448:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    144c:	b0 9b       	sbis	0x16, 0	; 22
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <__vector_16+0x98>
    1450:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1454:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1458:	c9 01       	movw	r24, r18
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	09 2e       	mov	r0, r25
    145e:	00 0c       	add	r0, r0
    1460:	aa 0b       	sbc	r26, r26
    1462:	bb 0b       	sbc	r27, r27
    1464:	dc 01       	movw	r26, r24
    1466:	99 27       	eor	r25, r25
    1468:	88 27       	eor	r24, r24
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	84 2b       	or	r24, r20
    1470:	95 2b       	or	r25, r21
    1472:	a6 2b       	or	r26, r22
    1474:	b7 2b       	or	r27, r23
    1476:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    147a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    147e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1482:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1486:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x16>
    148a:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x17>
    148e:	30 97       	sbiw	r30, 0x00	; 0
    1490:	39 f0       	breq	.+14     	; 0x14a0 <__vector_16+0xb2>
    1492:	6b e0       	ldi	r22, 0x0B	; 11
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x16>
    149a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x17>
    149e:	09 95       	icall
    14a0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    14a4:	ff 91       	pop	r31
    14a6:	ef 91       	pop	r30
    14a8:	bf 91       	pop	r27
    14aa:	af 91       	pop	r26
    14ac:	9f 91       	pop	r25
    14ae:	8f 91       	pop	r24
    14b0:	7f 91       	pop	r23
    14b2:	6f 91       	pop	r22
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	0f 90       	pop	r0
    14c2:	1f 90       	pop	r1
    14c4:	18 95       	reti

000014c6 <__vector_17>:
    14c6:	1f 92       	push	r1
    14c8:	0f 92       	push	r0
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	0f 92       	push	r0
    14ce:	11 24       	eor	r1, r1
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    14ec:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    14f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14f8:	c9 01       	movw	r24, r18
    14fa:	03 2e       	mov	r0, r19
    14fc:	00 0c       	add	r0, r0
    14fe:	aa 0b       	sbc	r26, r26
    1500:	bb 0b       	sbc	r27, r27
    1502:	dc 01       	movw	r26, r24
    1504:	99 27       	eor	r25, r25
    1506:	88 27       	eor	r24, r24
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	84 2b       	or	r24, r20
    150e:	95 2b       	or	r25, r21
    1510:	a6 2b       	or	r26, r22
    1512:	b7 2b       	or	r27, r23
    1514:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1518:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    151c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1520:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1524:	b0 9b       	sbis	0x16, 0	; 22
    1526:	1b c0       	rjmp	.+54     	; 0x155e <__vector_17+0x98>
    1528:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    152c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1530:	c9 01       	movw	r24, r18
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	09 2e       	mov	r0, r25
    1536:	00 0c       	add	r0, r0
    1538:	aa 0b       	sbc	r26, r26
    153a:	bb 0b       	sbc	r27, r27
    153c:	dc 01       	movw	r26, r24
    153e:	99 27       	eor	r25, r25
    1540:	88 27       	eor	r24, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	84 2b       	or	r24, r20
    1548:	95 2b       	or	r25, r21
    154a:	a6 2b       	or	r26, r22
    154c:	b7 2b       	or	r27, r23
    154e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1552:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1556:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    155a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    155e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x18>
    1562:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x19>
    1566:	30 97       	sbiw	r30, 0x00	; 0
    1568:	39 f0       	breq	.+14     	; 0x1578 <__vector_17+0xb2>
    156a:	6c e0       	ldi	r22, 0x0C	; 12
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x18>
    1572:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x19>
    1576:	09 95       	icall
    1578:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <__vector_18>:
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	2f 93       	push	r18
    15aa:	3f 93       	push	r19
    15ac:	4f 93       	push	r20
    15ae:	5f 93       	push	r21
    15b0:	6f 93       	push	r22
    15b2:	7f 93       	push	r23
    15b4:	8f 93       	push	r24
    15b6:	9f 93       	push	r25
    15b8:	af 93       	push	r26
    15ba:	bf 93       	push	r27
    15bc:	ef 93       	push	r30
    15be:	ff 93       	push	r31
    15c0:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    15c4:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    15c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15d0:	c9 01       	movw	r24, r18
    15d2:	03 2e       	mov	r0, r19
    15d4:	00 0c       	add	r0, r0
    15d6:	aa 0b       	sbc	r26, r26
    15d8:	bb 0b       	sbc	r27, r27
    15da:	dc 01       	movw	r26, r24
    15dc:	99 27       	eor	r25, r25
    15de:	88 27       	eor	r24, r24
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	84 2b       	or	r24, r20
    15e6:	95 2b       	or	r25, r21
    15e8:	a6 2b       	or	r26, r22
    15ea:	b7 2b       	or	r27, r23
    15ec:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    15f0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    15f4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    15f8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    15fc:	b0 9b       	sbis	0x16, 0	; 22
    15fe:	1b c0       	rjmp	.+54     	; 0x1636 <__vector_18+0x98>
    1600:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1604:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1608:	c9 01       	movw	r24, r18
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	09 2e       	mov	r0, r25
    160e:	00 0c       	add	r0, r0
    1610:	aa 0b       	sbc	r26, r26
    1612:	bb 0b       	sbc	r27, r27
    1614:	dc 01       	movw	r26, r24
    1616:	99 27       	eor	r25, r25
    1618:	88 27       	eor	r24, r24
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	84 2b       	or	r24, r20
    1620:	95 2b       	or	r25, r21
    1622:	a6 2b       	or	r26, r22
    1624:	b7 2b       	or	r27, r23
    1626:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    162a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    162e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1632:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1636:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x1a>
    163a:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x1b>
    163e:	30 97       	sbiw	r30, 0x00	; 0
    1640:	39 f0       	breq	.+14     	; 0x1650 <__vector_18+0xb2>
    1642:	6d e0       	ldi	r22, 0x0D	; 13
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x1a>
    164a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x1b>
    164e:	09 95       	icall
    1650:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	0f 90       	pop	r0
    1672:	1f 90       	pop	r1
    1674:	18 95       	reti

00001676 <__vector_19>:
    1676:	1f 92       	push	r1
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	0f 92       	push	r0
    167e:	11 24       	eor	r1, r1
    1680:	2f 93       	push	r18
    1682:	3f 93       	push	r19
    1684:	4f 93       	push	r20
    1686:	5f 93       	push	r21
    1688:	6f 93       	push	r22
    168a:	7f 93       	push	r23
    168c:	8f 93       	push	r24
    168e:	9f 93       	push	r25
    1690:	af 93       	push	r26
    1692:	bf 93       	push	r27
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
    1698:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    169c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    16a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16a8:	c9 01       	movw	r24, r18
    16aa:	03 2e       	mov	r0, r19
    16ac:	00 0c       	add	r0, r0
    16ae:	aa 0b       	sbc	r26, r26
    16b0:	bb 0b       	sbc	r27, r27
    16b2:	dc 01       	movw	r26, r24
    16b4:	99 27       	eor	r25, r25
    16b6:	88 27       	eor	r24, r24
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	84 2b       	or	r24, r20
    16be:	95 2b       	or	r25, r21
    16c0:	a6 2b       	or	r26, r22
    16c2:	b7 2b       	or	r27, r23
    16c4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    16c8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    16cc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    16d0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    16d4:	b0 9b       	sbis	0x16, 0	; 22
    16d6:	1b c0       	rjmp	.+54     	; 0x170e <__vector_19+0x98>
    16d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e0:	c9 01       	movw	r24, r18
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	09 2e       	mov	r0, r25
    16e6:	00 0c       	add	r0, r0
    16e8:	aa 0b       	sbc	r26, r26
    16ea:	bb 0b       	sbc	r27, r27
    16ec:	dc 01       	movw	r26, r24
    16ee:	99 27       	eor	r25, r25
    16f0:	88 27       	eor	r24, r24
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	84 2b       	or	r24, r20
    16f8:	95 2b       	or	r25, r21
    16fa:	a6 2b       	or	r26, r22
    16fc:	b7 2b       	or	r27, r23
    16fe:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1702:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1706:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    170a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    170e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x1c>
    1712:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x1d>
    1716:	30 97       	sbiw	r30, 0x00	; 0
    1718:	39 f0       	breq	.+14     	; 0x1728 <__vector_19+0xb2>
    171a:	6e e0       	ldi	r22, 0x0E	; 14
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x1c>
    1722:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x1d>
    1726:	09 95       	icall
    1728:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <__vector_20>:
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1774:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1778:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    177c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1780:	c9 01       	movw	r24, r18
    1782:	03 2e       	mov	r0, r19
    1784:	00 0c       	add	r0, r0
    1786:	aa 0b       	sbc	r26, r26
    1788:	bb 0b       	sbc	r27, r27
    178a:	dc 01       	movw	r26, r24
    178c:	99 27       	eor	r25, r25
    178e:	88 27       	eor	r24, r24
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	84 2b       	or	r24, r20
    1796:	95 2b       	or	r25, r21
    1798:	a6 2b       	or	r26, r22
    179a:	b7 2b       	or	r27, r23
    179c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    17a0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    17a4:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    17a8:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    17ac:	b0 9b       	sbis	0x16, 0	; 22
    17ae:	1b c0       	rjmp	.+54     	; 0x17e6 <__vector_20+0x98>
    17b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17b8:	c9 01       	movw	r24, r18
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	09 2e       	mov	r0, r25
    17be:	00 0c       	add	r0, r0
    17c0:	aa 0b       	sbc	r26, r26
    17c2:	bb 0b       	sbc	r27, r27
    17c4:	dc 01       	movw	r26, r24
    17c6:	99 27       	eor	r25, r25
    17c8:	88 27       	eor	r24, r24
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	84 2b       	or	r24, r20
    17d0:	95 2b       	or	r25, r21
    17d2:	a6 2b       	or	r26, r22
    17d4:	b7 2b       	or	r27, r23
    17d6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    17da:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    17de:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    17e2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    17e6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1e>
    17ea:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1f>
    17ee:	30 97       	sbiw	r30, 0x00	; 0
    17f0:	39 f0       	breq	.+14     	; 0x1800 <__vector_20+0xb2>
    17f2:	6f e0       	ldi	r22, 0x0F	; 15
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1e>
    17fa:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1f>
    17fe:	09 95       	icall
    1800:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <__vector_21>:
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    184c:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1850:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1854:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1858:	c9 01       	movw	r24, r18
    185a:	03 2e       	mov	r0, r19
    185c:	00 0c       	add	r0, r0
    185e:	aa 0b       	sbc	r26, r26
    1860:	bb 0b       	sbc	r27, r27
    1862:	dc 01       	movw	r26, r24
    1864:	99 27       	eor	r25, r25
    1866:	88 27       	eor	r24, r24
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	84 2b       	or	r24, r20
    186e:	95 2b       	or	r25, r21
    1870:	a6 2b       	or	r26, r22
    1872:	b7 2b       	or	r27, r23
    1874:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1878:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    187c:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1880:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1884:	b0 9b       	sbis	0x16, 0	; 22
    1886:	1b c0       	rjmp	.+54     	; 0x18be <__vector_21+0x98>
    1888:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    188c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1890:	c9 01       	movw	r24, r18
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	09 2e       	mov	r0, r25
    1896:	00 0c       	add	r0, r0
    1898:	aa 0b       	sbc	r26, r26
    189a:	bb 0b       	sbc	r27, r27
    189c:	dc 01       	movw	r26, r24
    189e:	99 27       	eor	r25, r25
    18a0:	88 27       	eor	r24, r24
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	84 2b       	or	r24, r20
    18a8:	95 2b       	or	r25, r21
    18aa:	a6 2b       	or	r26, r22
    18ac:	b7 2b       	or	r27, r23
    18ae:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    18b2:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    18b6:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    18ba:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    18be:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x20>
    18c2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x21>
    18c6:	30 97       	sbiw	r30, 0x00	; 0
    18c8:	39 f0       	breq	.+14     	; 0x18d8 <__vector_21+0xb2>
    18ca:	60 e1       	ldi	r22, 0x10	; 16
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x20>
    18d2:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x21>
    18d6:	09 95       	icall
    18d8:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	bf 91       	pop	r27
    18e2:	af 91       	pop	r26
    18e4:	9f 91       	pop	r25
    18e6:	8f 91       	pop	r24
    18e8:	7f 91       	pop	r23
    18ea:	6f 91       	pop	r22
    18ec:	5f 91       	pop	r21
    18ee:	4f 91       	pop	r20
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_22>:
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	4f 93       	push	r20
    190e:	5f 93       	push	r21
    1910:	6f 93       	push	r22
    1912:	7f 93       	push	r23
    1914:	8f 93       	push	r24
    1916:	9f 93       	push	r25
    1918:	af 93       	push	r26
    191a:	bf 93       	push	r27
    191c:	ef 93       	push	r30
    191e:	ff 93       	push	r31
    1920:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1924:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1928:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    192c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1930:	c9 01       	movw	r24, r18
    1932:	03 2e       	mov	r0, r19
    1934:	00 0c       	add	r0, r0
    1936:	aa 0b       	sbc	r26, r26
    1938:	bb 0b       	sbc	r27, r27
    193a:	dc 01       	movw	r26, r24
    193c:	99 27       	eor	r25, r25
    193e:	88 27       	eor	r24, r24
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	84 2b       	or	r24, r20
    1946:	95 2b       	or	r25, r21
    1948:	a6 2b       	or	r26, r22
    194a:	b7 2b       	or	r27, r23
    194c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1950:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1954:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1958:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    195c:	b0 9b       	sbis	0x16, 0	; 22
    195e:	1b c0       	rjmp	.+54     	; 0x1996 <__vector_22+0x98>
    1960:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1964:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1968:	c9 01       	movw	r24, r18
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	09 2e       	mov	r0, r25
    196e:	00 0c       	add	r0, r0
    1970:	aa 0b       	sbc	r26, r26
    1972:	bb 0b       	sbc	r27, r27
    1974:	dc 01       	movw	r26, r24
    1976:	99 27       	eor	r25, r25
    1978:	88 27       	eor	r24, r24
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	84 2b       	or	r24, r20
    1980:	95 2b       	or	r25, r21
    1982:	a6 2b       	or	r26, r22
    1984:	b7 2b       	or	r27, r23
    1986:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    198a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    198e:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1992:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1996:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x22>
    199a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x23>
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	39 f0       	breq	.+14     	; 0x19b0 <__vector_22+0xb2>
    19a2:	61 e1       	ldi	r22, 0x11	; 17
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x22>
    19aa:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x23>
    19ae:	09 95       	icall
    19b0:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    19b4:	ff 91       	pop	r31
    19b6:	ef 91       	pop	r30
    19b8:	bf 91       	pop	r27
    19ba:	af 91       	pop	r26
    19bc:	9f 91       	pop	r25
    19be:	8f 91       	pop	r24
    19c0:	7f 91       	pop	r23
    19c2:	6f 91       	pop	r22
    19c4:	5f 91       	pop	r21
    19c6:	4f 91       	pop	r20
    19c8:	3f 91       	pop	r19
    19ca:	2f 91       	pop	r18
    19cc:	0f 90       	pop	r0
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	0f 90       	pop	r0
    19d2:	1f 90       	pop	r1
    19d4:	18 95       	reti

000019d6 <enqueueByDeadline>:
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	7b 01       	movw	r14, r22
    19e4:	eb 01       	movw	r28, r22
    19e6:	a8 81       	ld	r26, Y
    19e8:	b9 81       	ldd	r27, Y+1	; 0x01
    19ea:	10 97       	sbiw	r26, 0x00	; 0
    19ec:	61 f1       	breq	.+88     	; 0x1a46 <enqueueByDeadline+0x70>
    19ee:	fc 01       	movw	r30, r24
    19f0:	06 81       	ldd	r16, Z+6	; 0x06
    19f2:	17 81       	ldd	r17, Z+7	; 0x07
    19f4:	20 85       	ldd	r18, Z+8	; 0x08
    19f6:	31 85       	ldd	r19, Z+9	; 0x09
    19f8:	16 96       	adiw	r26, 0x06	; 6
    19fa:	4d 91       	ld	r20, X+
    19fc:	5d 91       	ld	r21, X+
    19fe:	6d 91       	ld	r22, X+
    1a00:	7c 91       	ld	r23, X
    1a02:	19 97       	sbiw	r26, 0x09	; 9
    1a04:	04 17       	cp	r16, r20
    1a06:	15 07       	cpc	r17, r21
    1a08:	26 07       	cpc	r18, r22
    1a0a:	37 07       	cpc	r19, r23
    1a0c:	14 f4       	brge	.+4      	; 0x1a12 <enqueueByDeadline+0x3c>
    1a0e:	1b c0       	rjmp	.+54     	; 0x1a46 <enqueueByDeadline+0x70>
    1a10:	df 01       	movw	r26, r30
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	49 f0       	breq	.+18     	; 0x1a2e <enqueueByDeadline+0x58>
    1a1c:	46 81       	ldd	r20, Z+6	; 0x06
    1a1e:	57 81       	ldd	r21, Z+7	; 0x07
    1a20:	60 85       	ldd	r22, Z+8	; 0x08
    1a22:	71 85       	ldd	r23, Z+9	; 0x09
    1a24:	04 17       	cp	r16, r20
    1a26:	15 07       	cpc	r17, r21
    1a28:	26 07       	cpc	r18, r22
    1a2a:	37 07       	cpc	r19, r23
    1a2c:	8c f7       	brge	.-30     	; 0x1a10 <enqueueByDeadline+0x3a>
    1a2e:	ec 01       	movw	r28, r24
    1a30:	f9 83       	std	Y+1, r31	; 0x01
    1a32:	e8 83       	st	Y, r30
    1a34:	10 97       	sbiw	r26, 0x00	; 0
    1a36:	21 f4       	brne	.+8      	; 0x1a40 <enqueueByDeadline+0x6a>
    1a38:	f7 01       	movw	r30, r14
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <enqueueByDeadline+0x78>
    1a40:	8d 93       	st	X+, r24
    1a42:	9c 93       	st	X, r25
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <enqueueByDeadline+0x78>
    1a46:	ec 01       	movw	r28, r24
    1a48:	b9 83       	std	Y+1, r27	; 0x01
    1a4a:	a8 83       	st	Y, r26
    1a4c:	f5 cf       	rjmp	.-22     	; 0x1a38 <enqueueByDeadline+0x62>
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	08 95       	ret

00001a5c <enqueueByBaseline>:
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	7b 01       	movw	r14, r22
    1a6a:	eb 01       	movw	r28, r22
    1a6c:	a8 81       	ld	r26, Y
    1a6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a70:	10 97       	sbiw	r26, 0x00	; 0
    1a72:	61 f1       	breq	.+88     	; 0x1acc <enqueueByBaseline+0x70>
    1a74:	fc 01       	movw	r30, r24
    1a76:	02 81       	ldd	r16, Z+2	; 0x02
    1a78:	13 81       	ldd	r17, Z+3	; 0x03
    1a7a:	24 81       	ldd	r18, Z+4	; 0x04
    1a7c:	35 81       	ldd	r19, Z+5	; 0x05
    1a7e:	12 96       	adiw	r26, 0x02	; 2
    1a80:	4d 91       	ld	r20, X+
    1a82:	5d 91       	ld	r21, X+
    1a84:	6d 91       	ld	r22, X+
    1a86:	7c 91       	ld	r23, X
    1a88:	15 97       	sbiw	r26, 0x05	; 5
    1a8a:	04 17       	cp	r16, r20
    1a8c:	15 07       	cpc	r17, r21
    1a8e:	26 07       	cpc	r18, r22
    1a90:	37 07       	cpc	r19, r23
    1a92:	14 f4       	brge	.+4      	; 0x1a98 <enqueueByBaseline+0x3c>
    1a94:	1b c0       	rjmp	.+54     	; 0x1acc <enqueueByBaseline+0x70>
    1a96:	df 01       	movw	r26, r30
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	11 97       	sbiw	r26, 0x01	; 1
    1a9e:	30 97       	sbiw	r30, 0x00	; 0
    1aa0:	49 f0       	breq	.+18     	; 0x1ab4 <enqueueByBaseline+0x58>
    1aa2:	42 81       	ldd	r20, Z+2	; 0x02
    1aa4:	53 81       	ldd	r21, Z+3	; 0x03
    1aa6:	64 81       	ldd	r22, Z+4	; 0x04
    1aa8:	75 81       	ldd	r23, Z+5	; 0x05
    1aaa:	04 17       	cp	r16, r20
    1aac:	15 07       	cpc	r17, r21
    1aae:	26 07       	cpc	r18, r22
    1ab0:	37 07       	cpc	r19, r23
    1ab2:	8c f7       	brge	.-30     	; 0x1a96 <enqueueByBaseline+0x3a>
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	f9 83       	std	Y+1, r31	; 0x01
    1ab8:	e8 83       	st	Y, r30
    1aba:	10 97       	sbiw	r26, 0x00	; 0
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <enqueueByBaseline+0x6a>
    1abe:	f7 01       	movw	r30, r14
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <enqueueByBaseline+0x78>
    1ac6:	8d 93       	st	X+, r24
    1ac8:	9c 93       	st	X, r25
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <enqueueByBaseline+0x78>
    1acc:	ec 01       	movw	r28, r24
    1ace:	b9 83       	std	Y+1, r27	; 0x01
    1ad0:	a8 83       	st	Y, r26
    1ad2:	f5 cf       	rjmp	.-22     	; 0x1abe <enqueueByBaseline+0x62>
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	08 95       	ret

00001ae2 <dequeue>:
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	11 97       	sbiw	r26, 0x01	; 1
    1aea:	30 97       	sbiw	r30, 0x00	; 0
    1aec:	59 f4       	brne	.+22     	; 0x1b04 <dequeue+0x22>
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1af4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1af8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	83 bf       	out	0x33, r24	; 51
    1b00:	88 95       	sleep
    1b02:	fd cf       	rjmp	.-6      	; 0x1afe <dequeue+0x1c>
    1b04:	20 81       	ld	r18, Z
    1b06:	31 81       	ldd	r19, Z+1	; 0x01
    1b08:	2d 93       	st	X+, r18
    1b0a:	3c 93       	st	X, r19
    1b0c:	cf 01       	movw	r24, r30
    1b0e:	08 95       	ret

00001b10 <__vector_9>:
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
    1b2e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    1b32:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
    1b3c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
    1b40:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1b44:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1b48:	30 97       	sbiw	r30, 0x00	; 0
    1b4a:	01 f1       	breq	.+64     	; 0x1b8c <__vector_9+0x7c>
    1b4c:	42 81       	ldd	r20, Z+2	; 0x02
    1b4e:	53 81       	ldd	r21, Z+3	; 0x03
    1b50:	64 81       	ldd	r22, Z+4	; 0x04
    1b52:	75 81       	ldd	r23, Z+5	; 0x05
    1b54:	86 17       	cp	r24, r22
    1b56:	97 07       	cpc	r25, r23
    1b58:	c9 f4       	brne	.+50     	; 0x1b8c <__vector_9+0x7c>
    1b5a:	ca 01       	movw	r24, r20
    1b5c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b60:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b64:	42 1b       	sub	r20, r18
    1b66:	53 0b       	sbc	r21, r19
    1b68:	41 30       	cpi	r20, 0x01	; 1
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	29 f4       	brne	.+10     	; 0x1b78 <__vector_9+0x68>
    1b6e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b72:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b7c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b80:	ef e6       	ldi	r30, 0x6F	; 111
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	80 83       	st	Z, r24
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <__vector_9+0x86>
    1b8c:	ef e6       	ldi	r30, 0x6F	; 111
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8d 7f       	andi	r24, 0xFD	; 253
    1b94:	80 83       	st	Z, r24
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__vector_7>:
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	2f 93       	push	r18
    1bc8:	3f 93       	push	r19
    1bca:	4f 93       	push	r20
    1bcc:	5f 93       	push	r21
    1bce:	6f 93       	push	r22
    1bd0:	7f 93       	push	r23
    1bd2:	8f 93       	push	r24
    1bd4:	9f 93       	push	r25
    1bd6:	af 93       	push	r26
    1bd8:	bf 93       	push	r27
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
    1bde:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <__data_end>
    1be2:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <__data_end+0x1>
    1be6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bea:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bee:	b0 99       	sbic	0x16, 0	; 22
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <__vector_7+0x5c>
    1bf2:	0d 2c       	mov	r0, r13
    1bf4:	00 0c       	add	r0, r0
    1bf6:	ee 08       	sbc	r14, r14
    1bf8:	ff 08       	sbc	r15, r15
    1bfa:	d6 01       	movw	r26, r12
    1bfc:	99 27       	eor	r25, r25
    1bfe:	88 27       	eor	r24, r24
    1c00:	69 01       	movw	r12, r18
    1c02:	e1 2c       	mov	r14, r1
    1c04:	f1 2c       	mov	r15, r1
    1c06:	c8 2a       	or	r12, r24
    1c08:	d9 2a       	or	r13, r25
    1c0a:	ea 2a       	or	r14, r26
    1c0c:	fb 2a       	or	r15, r27
    1c0e:	15 c0       	rjmp	.+42     	; 0x1c3a <__vector_7+0x86>
    1c10:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c14:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	c8 1a       	sub	r12, r24
    1c1c:	d8 0a       	sbc	r13, r24
    1c1e:	0d 2c       	mov	r0, r13
    1c20:	00 0c       	add	r0, r0
    1c22:	ee 08       	sbc	r14, r14
    1c24:	ff 08       	sbc	r15, r15
    1c26:	d6 01       	movw	r26, r12
    1c28:	99 27       	eor	r25, r25
    1c2a:	88 27       	eor	r24, r24
    1c2c:	69 01       	movw	r12, r18
    1c2e:	e1 2c       	mov	r14, r1
    1c30:	f1 2c       	mov	r15, r1
    1c32:	c8 2a       	or	r12, r24
    1c34:	d9 2a       	or	r13, r25
    1c36:	ea 2a       	or	r14, r26
    1c38:	fb 2a       	or	r15, r27
    1c3a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1c3e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1c42:	30 97       	sbiw	r30, 0x00	; 0
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <__vector_7+0x94>
    1c46:	42 c0       	rjmp	.+132    	; 0x1ccc <__vector_7+0x118>
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c4e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c50:	8c 19       	sub	r24, r12
    1c52:	9d 09       	sbc	r25, r13
    1c54:	ae 09       	sbc	r26, r14
    1c56:	bf 09       	sbc	r27, r15
    1c58:	18 16       	cp	r1, r24
    1c5a:	19 06       	cpc	r1, r25
    1c5c:	1a 06       	cpc	r1, r26
    1c5e:	1b 06       	cpc	r1, r27
    1c60:	ec f1       	brlt	.+122    	; 0x1cdc <__vector_7+0x128>
    1c62:	82 e5       	ldi	r24, 0x52	; 82
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dequeue>
    1c6a:	64 e5       	ldi	r22, 0x54	; 84
    1c6c:	71 e0       	ldi	r23, 0x01	; 1
    1c6e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <enqueueByDeadline>
    1c72:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1c76:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1c7a:	30 97       	sbiw	r30, 0x00	; 0
    1c7c:	39 f1       	breq	.+78     	; 0x1ccc <__vector_7+0x118>
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	a4 81       	ldd	r26, Z+4	; 0x04
    1c84:	b5 81       	ldd	r27, Z+5	; 0x05
    1c86:	8c 19       	sub	r24, r12
    1c88:	9d 09       	sbc	r25, r13
    1c8a:	ae 09       	sbc	r26, r14
    1c8c:	bf 09       	sbc	r27, r15
    1c8e:	18 16       	cp	r1, r24
    1c90:	19 06       	cpc	r1, r25
    1c92:	1a 06       	cpc	r1, r26
    1c94:	1b 06       	cpc	r1, r27
    1c96:	2c f7       	brge	.-54     	; 0x1c62 <__vector_7+0xae>
    1c98:	21 c0       	rjmp	.+66     	; 0x1cdc <__vector_7+0x128>
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ca0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ca4:	84 1b       	sub	r24, r20
    1ca6:	95 0b       	sbc	r25, r21
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	31 f4       	brne	.+12     	; 0x1cb8 <__vector_7+0x104>
    1cac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cb0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cb4:	2f 5f       	subi	r18, 0xFF	; 255
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cbc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cc0:	ef e6       	ldi	r30, 0x6F	; 111
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	82 60       	ori	r24, 0x02	; 2
    1cc8:	80 83       	st	Z, r24
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <__vector_7+0x122>
    1ccc:	ef e6       	ldi	r30, 0x6F	; 111
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8d 7f       	andi	r24, 0xFD	; 253
    1cd4:	80 83       	st	Z, r24
    1cd6:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    1cda:	0c c0       	rjmp	.+24     	; 0x1cf4 <__vector_7+0x140>
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ce2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1ce8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1cec:	2a 17       	cp	r18, r26
    1cee:	3b 07       	cpc	r19, r27
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <__vector_7+0x118>
    1cf2:	d3 cf       	rjmp	.-90     	; 0x1c9a <__vector_7+0xe6>
    1cf4:	ff 91       	pop	r31
    1cf6:	ef 91       	pop	r30
    1cf8:	bf 91       	pop	r27
    1cfa:	af 91       	pop	r26
    1cfc:	9f 91       	pop	r25
    1cfe:	8f 91       	pop	r24
    1d00:	7f 91       	pop	r23
    1d02:	6f 91       	pop	r22
    1d04:	5f 91       	pop	r21
    1d06:	4f 91       	pop	r20
    1d08:	3f 91       	pop	r19
    1d0a:	2f 91       	pop	r18
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	df 90       	pop	r13
    1d12:	cf 90       	pop	r12
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <async>:
    1d1e:	3f 92       	push	r3
    1d20:	4f 92       	push	r4
    1d22:	5f 92       	push	r5
    1d24:	6f 92       	push	r6
    1d26:	7f 92       	push	r7
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	2b 01       	movw	r4, r22
    1d42:	3c 01       	movw	r6, r24
    1d44:	49 01       	movw	r8, r18
    1d46:	5a 01       	movw	r10, r20
    1d48:	8f b7       	in	r24, 0x3f	; 63
    1d4a:	80 78       	andi	r24, 0x80	; 128
    1d4c:	38 2e       	mov	r3, r24
    1d4e:	f8 94       	cli
    1d50:	85 e3       	ldi	r24, 0x35	; 53
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dequeue>
    1d58:	ec 01       	movw	r28, r24
    1d5a:	1b 87       	std	Y+11, r17	; 0x0b
    1d5c:	0a 87       	std	Y+10, r16	; 0x0a
    1d5e:	fd 86       	std	Y+13, r15	; 0x0d
    1d60:	ec 86       	std	Y+12, r14	; 0x0c
    1d62:	df 86       	std	Y+15, r13	; 0x0f
    1d64:	ce 86       	std	Y+14, r12	; 0x0e
    1d66:	33 20       	and	r3, r3
    1d68:	61 f0       	breq	.+24     	; 0x1d82 <async+0x64>
    1d6a:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <current>
    1d6e:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <current+0x1>
    1d72:	02 80       	ldd	r0, Z+2	; 0x02
    1d74:	f3 81       	ldd	r31, Z+3	; 0x03
    1d76:	e0 2d       	mov	r30, r0
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d7e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d80:	08 c0       	rjmp	.+16     	; 0x1d92 <async+0x74>
    1d82:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <timestamp>
    1d86:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <timestamp+0x1>
    1d8a:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <timestamp+0x2>
    1d8e:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <timestamp+0x3>
    1d92:	48 0e       	add	r4, r24
    1d94:	59 1e       	adc	r5, r25
    1d96:	6a 1e       	adc	r6, r26
    1d98:	7b 1e       	adc	r7, r27
    1d9a:	4a 82       	std	Y+2, r4	; 0x02
    1d9c:	5b 82       	std	Y+3, r5	; 0x03
    1d9e:	6c 82       	std	Y+4, r6	; 0x04
    1da0:	7d 82       	std	Y+5, r7	; 0x05
    1da2:	18 14       	cp	r1, r8
    1da4:	19 04       	cpc	r1, r9
    1da6:	1a 04       	cpc	r1, r10
    1da8:	1b 04       	cpc	r1, r11
    1daa:	44 f0       	brlt	.+16     	; 0x1dbc <async+0x9e>
    1dac:	0f 2e       	mov	r0, r31
    1dae:	88 24       	eor	r8, r8
    1db0:	8a 94       	dec	r8
    1db2:	98 2c       	mov	r9, r8
    1db4:	a8 2c       	mov	r10, r8
    1db6:	ff e7       	ldi	r31, 0x7F	; 127
    1db8:	bf 2e       	mov	r11, r31
    1dba:	f0 2d       	mov	r31, r0
    1dbc:	84 0c       	add	r8, r4
    1dbe:	95 1c       	adc	r9, r5
    1dc0:	a6 1c       	adc	r10, r6
    1dc2:	b7 1c       	adc	r11, r7
    1dc4:	8e 82       	std	Y+6, r8	; 0x06
    1dc6:	9f 82       	std	Y+7, r9	; 0x07
    1dc8:	a8 86       	std	Y+8, r10	; 0x08
    1dca:	b9 86       	std	Y+9, r11	; 0x09
    1dcc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    1dd0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
    1dd4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dd8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ddc:	b0 99       	sbic	0x16, 0	; 22
    1dde:	0e c0       	rjmp	.+28     	; 0x1dfc <async+0xde>
    1de0:	09 2e       	mov	r0, r25
    1de2:	00 0c       	add	r0, r0
    1de4:	aa 0b       	sbc	r26, r26
    1de6:	bb 0b       	sbc	r27, r27
    1de8:	dc 01       	movw	r26, r24
    1dea:	99 27       	eor	r25, r25
    1dec:	88 27       	eor	r24, r24
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	70 e0       	ldi	r23, 0x00	; 0
    1df2:	84 2b       	or	r24, r20
    1df4:	95 2b       	or	r25, r21
    1df6:	a6 2b       	or	r26, r22
    1df8:	b7 2b       	or	r27, r23
    1dfa:	13 c0       	rjmp	.+38     	; 0x1e22 <async+0x104>
    1dfc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e00:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	09 2e       	mov	r0, r25
    1e08:	00 0c       	add	r0, r0
    1e0a:	aa 0b       	sbc	r26, r26
    1e0c:	bb 0b       	sbc	r27, r27
    1e0e:	dc 01       	movw	r26, r24
    1e10:	99 27       	eor	r25, r25
    1e12:	88 27       	eor	r24, r24
    1e14:	a9 01       	movw	r20, r18
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	84 2b       	or	r24, r20
    1e1c:	95 2b       	or	r25, r21
    1e1e:	a6 2b       	or	r26, r22
    1e20:	b7 2b       	or	r27, r23
    1e22:	48 1a       	sub	r4, r24
    1e24:	59 0a       	sbc	r5, r25
    1e26:	6a 0a       	sbc	r6, r26
    1e28:	7b 0a       	sbc	r7, r27
    1e2a:	14 14       	cp	r1, r4
    1e2c:	15 04       	cpc	r1, r5
    1e2e:	16 04       	cpc	r1, r6
    1e30:	17 04       	cpc	r1, r7
    1e32:	ac f5       	brge	.+106    	; 0x1e9e <async+0x180>
    1e34:	62 e5       	ldi	r22, 0x52	; 82
    1e36:	71 e0       	ldi	r23, 0x01	; 1
    1e38:	ce 01       	movw	r24, r28
    1e3a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <enqueueByBaseline>
    1e3e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1e42:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1e46:	30 97       	sbiw	r30, 0x00	; 0
    1e48:	21 f1       	breq	.+72     	; 0x1e92 <async+0x174>
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e50:	b5 81       	ldd	r27, Z+5	; 0x05
    1e52:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1e56:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1e5a:	2a 17       	cp	r18, r26
    1e5c:	3b 07       	cpc	r19, r27
    1e5e:	c9 f4       	brne	.+50     	; 0x1e92 <async+0x174>
    1e60:	9c 01       	movw	r18, r24
    1e62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e6a:	84 1b       	sub	r24, r20
    1e6c:	95 0b       	sbc	r25, r21
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	31 f4       	brne	.+12     	; 0x1e7e <async+0x160>
    1e72:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e76:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e7a:	2f 5f       	subi	r18, 0xFF	; 255
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e82:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e86:	ef e6       	ldi	r30, 0x6F	; 111
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	82 60       	ori	r24, 0x02	; 2
    1e8e:	80 83       	st	Z, r24
    1e90:	41 c0       	rjmp	.+130    	; 0x1f14 <async+0x1f6>
    1e92:	ef e6       	ldi	r30, 0x6F	; 111
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8d 7f       	andi	r24, 0xFD	; 253
    1e9a:	80 83       	st	Z, r24
    1e9c:	3b c0       	rjmp	.+118    	; 0x1f14 <async+0x1f6>
    1e9e:	64 e5       	ldi	r22, 0x54	; 84
    1ea0:	71 e0       	ldi	r23, 0x01	; 1
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <enqueueByDeadline>
    1ea8:	33 20       	and	r3, r3
    1eaa:	b9 f1       	breq	.+110    	; 0x1f1a <async+0x1fc>
    1eac:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <threadPool>
    1eb0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <threadPool+0x1>
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	81 f1       	breq	.+96     	; 0x1f18 <async+0x1fa>
    1eb8:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <activeStack>
    1ebc:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <activeStack+0x1>
    1ec0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <msgQ>
    1ec4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <msgQ+0x1>
    1ec8:	02 81       	ldd	r16, Z+2	; 0x02
    1eca:	13 81       	ldd	r17, Z+3	; 0x03
    1ecc:	d9 01       	movw	r26, r18
    1ece:	16 96       	adiw	r26, 0x06	; 6
    1ed0:	4d 91       	ld	r20, X+
    1ed2:	5d 91       	ld	r21, X+
    1ed4:	6d 91       	ld	r22, X+
    1ed6:	7c 91       	ld	r23, X
    1ed8:	19 97       	sbiw	r26, 0x09	; 9
    1eda:	d8 01       	movw	r26, r16
    1edc:	16 96       	adiw	r26, 0x06	; 6
    1ede:	0d 91       	ld	r16, X+
    1ee0:	1d 91       	ld	r17, X+
    1ee2:	2d 91       	ld	r18, X+
    1ee4:	3c 91       	ld	r19, X
    1ee6:	19 97       	sbiw	r26, 0x09	; 9
    1ee8:	40 1b       	sub	r20, r16
    1eea:	51 0b       	sbc	r21, r17
    1eec:	62 0b       	sbc	r22, r18
    1eee:	73 0b       	sbc	r23, r19
    1ef0:	9a f4       	brpl	.+38     	; 0x1f18 <async+0x1fa>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	2d 91       	ld	r18, X+
    1ef6:	3c 91       	ld	r19, X
    1ef8:	11 97       	sbiw	r26, 0x01	; 1
    1efa:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <threadPool+0x1>
    1efe:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <threadPool>
    1f02:	ed 93       	st	X+, r30
    1f04:	fc 93       	st	X, r31
    1f06:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <activeStack+0x1>
    1f0a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <activeStack>
    1f0e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <async+0x1fa>
    1f14:	33 20       	and	r3, r3
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <async+0x1fc>
    1f18:	78 94       	sei
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	ef 90       	pop	r14
    1f28:	df 90       	pop	r13
    1f2a:	cf 90       	pop	r12
    1f2c:	bf 90       	pop	r11
    1f2e:	af 90       	pop	r10
    1f30:	9f 90       	pop	r9
    1f32:	8f 90       	pop	r8
    1f34:	7f 90       	pop	r7
    1f36:	6f 90       	pop	r6
    1f38:	5f 90       	pop	r5
    1f3a:	4f 90       	pop	r4
    1f3c:	3f 90       	pop	r3
    1f3e:	08 95       	ret

00001f40 <sync>:
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	ec 01       	movw	r28, r24
    1f52:	7b 01       	movw	r14, r22
    1f54:	6a 01       	movw	r12, r20
    1f56:	1f b7       	in	r17, 0x3f	; 63
    1f58:	10 78       	andi	r17, 0x80	; 128
    1f5a:	f8 94       	cli
    1f5c:	a8 81       	ld	r26, Y
    1f5e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f60:	10 97       	sbiw	r26, 0x00	; 0
    1f62:	61 f1       	breq	.+88     	; 0x1fbc <sync+0x7c>
    1f64:	14 96       	adiw	r26, 0x04	; 4
    1f66:	ed 91       	ld	r30, X+
    1f68:	fc 91       	ld	r31, X
    1f6a:	15 97       	sbiw	r26, 0x05	; 5
    1f6c:	30 97       	sbiw	r30, 0x00	; 0
    1f6e:	41 f0       	breq	.+16     	; 0x1f80 <sync+0x40>
    1f70:	a0 81       	ld	r26, Z
    1f72:	b1 81       	ldd	r27, Z+1	; 0x01
    1f74:	14 96       	adiw	r26, 0x04	; 4
    1f76:	ed 91       	ld	r30, X+
    1f78:	fc 91       	ld	r31, X
    1f7a:	15 97       	sbiw	r26, 0x05	; 5
    1f7c:	30 97       	sbiw	r30, 0x00	; 0
    1f7e:	c1 f7       	brne	.-16     	; 0x1f70 <sync+0x30>
    1f80:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <current>
    1f84:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <current+0x1>
    1f88:	2a 17       	cp	r18, r26
    1f8a:	3b 07       	cpc	r19, r27
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <sync+0x56>
    1f8e:	11 23       	and	r17, r17
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <sync+0x54>
    1f92:	3d c0       	rjmp	.+122    	; 0x200e <sync+0xce>
    1f94:	07 c0       	rjmp	.+14     	; 0x1fa4 <sync+0x64>
    1f96:	11 23       	and	r17, r17
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <sync+0x5c>
    1f9a:	3c c0       	rjmp	.+120    	; 0x2014 <sync+0xd4>
    1f9c:	78 94       	sei
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	9f ef       	ldi	r25, 0xFF	; 255
    1fa2:	52 c0       	rjmp	.+164    	; 0x2048 <sync+0x108>
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	d1 f1       	breq	.+116    	; 0x2020 <sync+0xe0>
    1fac:	fc 01       	movw	r30, r24
    1fae:	15 82       	std	Z+5, r1	; 0x05
    1fb0:	14 82       	std	Z+4, r1	; 0x04
    1fb2:	36 c0       	rjmp	.+108    	; 0x2020 <sync+0xe0>
    1fb4:	78 94       	sei
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	46 c0       	rjmp	.+140    	; 0x2048 <sync+0x108>
    1fbc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <current>
    1fc0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <current+0x1>
    1fc4:	99 83       	std	Y+1, r25	; 0x01
    1fc6:	88 83       	st	Y, r24
    1fc8:	11 23       	and	r17, r17
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <sync+0x96>
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <sync+0x96>
    1fd4:	78 94       	sei
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	ce 01       	movw	r24, r28
    1fda:	f7 01       	movw	r30, r14
    1fdc:	09 95       	icall
    1fde:	f8 2e       	mov	r15, r24
    1fe0:	09 2f       	mov	r16, r25
    1fe2:	8f b7       	in	r24, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	19 82       	std	Y+1, r1	; 0x01
    1fe8:	18 82       	st	Y, r1
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	82 30       	cpi	r24, 0x02	; 2
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	38 f0       	brcs	.+14     	; 0x2002 <sync+0xc2>
    1ff4:	1b 82       	std	Y+3, r1	; 0x03
    1ff6:	1a 82       	std	Y+2, r1	; 0x02
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	15 82       	std	Z+5, r1	; 0x05
    1ffc:	14 82       	std	Z+4, r1	; 0x04
    1ffe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    2002:	11 23       	and	r17, r17
    2004:	51 f0       	breq	.+20     	; 0x201a <sync+0xda>
    2006:	78 94       	sei
    2008:	8f 2d       	mov	r24, r15
    200a:	90 2f       	mov	r25, r16
    200c:	1d c0       	rjmp	.+58     	; 0x2048 <sync+0x108>
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	9f ef       	ldi	r25, 0xFF	; 255
    2012:	1a c0       	rjmp	.+52     	; 0x2048 <sync+0x108>
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	9f ef       	ldi	r25, 0xFF	; 255
    2018:	17 c0       	rjmp	.+46     	; 0x2048 <sync+0x108>
    201a:	8f 2d       	mov	r24, r15
    201c:	90 2f       	mov	r25, r16
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <sync+0x108>
    2020:	3b 83       	std	Y+3, r19	; 0x03
    2022:	2a 83       	std	Y+2, r18	; 0x02
    2024:	f9 01       	movw	r30, r18
    2026:	d5 83       	std	Z+5, r29	; 0x05
    2028:	c4 83       	std	Z+4, r28	; 0x04
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    2030:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <current>
    2034:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <current+0x1>
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	89 2b       	or	r24, r25
    203e:	09 f4       	brne	.+2      	; 0x2042 <sync+0x102>
    2040:	b9 cf       	rjmp	.-142    	; 0x1fb4 <sync+0x74>
    2042:	f9 83       	std	Y+1, r31	; 0x01
    2044:	e8 83       	st	Y, r30
    2046:	c2 cf       	rjmp	.-124    	; 0x1fcc <sync+0x8c>
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	08 95       	ret

0000205a <run>:
    205a:	00 91 2f 01 	lds	r16, 0x012F	; 0x80012f <current>
    205e:	10 91 30 01 	lds	r17, 0x0130	; 0x800130 <current+0x1>
    2062:	84 e5       	ldi	r24, 0x54	; 84
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dequeue>
    206a:	ec 01       	movw	r28, r24
    206c:	d8 01       	movw	r26, r16
    206e:	13 96       	adiw	r26, 0x03	; 3
    2070:	9c 93       	st	X, r25
    2072:	8e 93       	st	-X, r24
    2074:	12 97       	sbiw	r26, 0x02	; 2
    2076:	78 94       	sei
    2078:	4e 85       	ldd	r20, Y+14	; 0x0e
    207a:	5f 85       	ldd	r21, Y+15	; 0x0f
    207c:	6c 85       	ldd	r22, Y+12	; 0x0c
    207e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2080:	8a 85       	ldd	r24, Y+10	; 0x0a
    2082:	9b 85       	ldd	r25, Y+11	; 0x0b
    2084:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sync>
    2088:	8f b7       	in	r24, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <msgPool>
    2090:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <msgPool+0x1>
    2094:	99 83       	std	Y+1, r25	; 0x01
    2096:	88 83       	st	Y, r24
    2098:	d0 93 36 01 	sts	0x0136, r29	; 0x800136 <msgPool+0x1>
    209c:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <msgPool>
    20a0:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <activeStack>
    20a4:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <activeStack+0x1>
    20a8:	00 81       	ld	r16, Z
    20aa:	11 81       	ldd	r17, Z+1	; 0x01
    20ac:	e8 01       	movw	r28, r16
    20ae:	2a 81       	ldd	r18, Y+2	; 0x02
    20b0:	3b 81       	ldd	r19, Y+3	; 0x03
    20b2:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <msgQ>
    20b6:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <msgQ+0x1>
    20ba:	10 97       	sbiw	r26, 0x00	; 0
    20bc:	c1 f0       	breq	.+48     	; 0x20ee <run+0x94>
    20be:	21 15       	cp	r18, r1
    20c0:	31 05       	cpc	r19, r1
    20c2:	59 f2       	breq	.-106    	; 0x205a <run>
    20c4:	16 96       	adiw	r26, 0x06	; 6
    20c6:	8d 91       	ld	r24, X+
    20c8:	9d 91       	ld	r25, X+
    20ca:	0d 90       	ld	r0, X+
    20cc:	bc 91       	ld	r27, X
    20ce:	a0 2d       	mov	r26, r0
    20d0:	e9 01       	movw	r28, r18
    20d2:	4e 81       	ldd	r20, Y+6	; 0x06
    20d4:	5f 81       	ldd	r21, Y+7	; 0x07
    20d6:	68 85       	ldd	r22, Y+8	; 0x08
    20d8:	79 85       	ldd	r23, Y+9	; 0x09
    20da:	84 1b       	sub	r24, r20
    20dc:	95 0b       	sbc	r25, r21
    20de:	a6 0b       	sbc	r26, r22
    20e0:	b7 0b       	sbc	r27, r23
    20e2:	18 16       	cp	r1, r24
    20e4:	19 06       	cpc	r1, r25
    20e6:	1a 06       	cpc	r1, r26
    20e8:	1b 06       	cpc	r1, r27
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <run+0x94>
    20ec:	b6 cf       	rjmp	.-148    	; 0x205a <run>
    20ee:	10 93 32 01 	sts	0x0132, r17	; 0x800132 <activeStack+0x1>
    20f2:	00 93 31 01 	sts	0x0131, r16	; 0x800131 <activeStack>
    20f6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <threadPool>
    20fa:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <threadPool+0x1>
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	f0 93 34 01 	sts	0x0134, r31	; 0x800134 <threadPool+0x1>
    2106:	e0 93 33 01 	sts	0x0133, r30	; 0x800133 <threadPool>
    210a:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <activeStack>
    210e:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <activeStack+0x1>
    2112:	14 96       	adiw	r26, 0x04	; 4
    2114:	ed 91       	ld	r30, X+
    2116:	fc 91       	ld	r31, X
    2118:	15 97       	sbiw	r26, 0x05	; 5
    211a:	30 97       	sbiw	r30, 0x00	; 0
    211c:	41 f0       	breq	.+16     	; 0x212e <run+0xd4>
    211e:	a0 81       	ld	r26, Z
    2120:	b1 81       	ldd	r27, Z+1	; 0x01
    2122:	14 96       	adiw	r26, 0x04	; 4
    2124:	ed 91       	ld	r30, X+
    2126:	fc 91       	ld	r31, X
    2128:	15 97       	sbiw	r26, 0x05	; 5
    212a:	30 97       	sbiw	r30, 0x00	; 0
    212c:	c1 f7       	brne	.-16     	; 0x211e <run+0xc4>
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <dispatch>
    2134:	92 cf       	rjmp	.-220    	; 0x205a <run>

00002136 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2136:	42 31       	cpi	r20, 0x12	; 18
    2138:	b8 f4       	brcc	.+46     	; 0x2168 <install+0x32>
        char status;
        DISABLE(status);
    213a:	2f b7       	in	r18, 0x3f	; 63
    213c:	f8 94       	cli
        otable[i] = obj;
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	44 0f       	add	r20, r20
    2142:	55 1f       	adc	r21, r21
    2144:	fa 01       	movw	r30, r20
    2146:	ea 5a       	subi	r30, 0xAA	; 170
    2148:	fe 4f       	sbci	r31, 0xFE	; 254
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
        mtable[i] = m;
    214e:	fa 01       	movw	r30, r20
    2150:	e2 51       	subi	r30, 0x12	; 18
    2152:	fe 4f       	sbci	r31, 0xFE	; 254
    2154:	71 83       	std	Z+1, r23	; 0x01
    2156:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	fc 01       	movw	r30, r24
    215e:	53 83       	std	Z+3, r21	; 0x03
    2160:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2162:	22 23       	and	r18, r18
    2164:	0c f4       	brge	.+2      	; 0x2168 <install+0x32>
    2166:	78 94       	sei
    2168:	08 95       	ret

0000216a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    216a:	8c 01       	movw	r16, r24
    216c:	7b 01       	movw	r14, r22
    216e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2170:	8f b7       	in	r24, 0x3f	; 63
    2172:	f8 94       	cli
    initialize();
    2174:	0e 94 8d 04 	call	0x91a	; 0x91a <initialize>
    ENABLE(1);
    2178:	78 94       	sei
    if (m != NULL)
    217a:	e1 14       	cp	r14, r1
    217c:	f1 04       	cpc	r15, r1
    217e:	41 f0       	breq	.+16     	; 0x2190 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	a9 01       	movw	r20, r18
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	cb 01       	movw	r24, r22
    218c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <async>
    DISABLE(status);
    2190:	8f b7       	in	r24, 0x3f	; 63
    2192:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2194:	0e 94 18 05 	call	0xa30	; 0xa30 <schedule>
    ENABLE(1);
    2198:	78 94       	sei
    while (1) {
        SLEEP();
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	83 bf       	out	0x33, r24	; 51
    219e:	88 95       	sleep
    21a0:	fd cf       	rjmp	.-6      	; 0x219c <tinytimber+0x32>

000021a2 <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int value) {
	if (value)
    21a2:	67 2b       	or	r22, r23
    21a4:	79 f0       	breq	.+30     	; 0x21c4 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    21a6:	4e b1       	in	r20, 0x0e	; 14
    21a8:	21 e0       	ldi	r18, 0x01	; 1
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	b9 01       	movw	r22, r18
    21ae:	fc 01       	movw	r30, r24
    21b0:	04 80       	ldd	r0, Z+4	; 0x04
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <writeBit+0x16>
    21b4:	66 0f       	add	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	0a 94       	dec	r0
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <writeBit+0x12>
    21bc:	cb 01       	movw	r24, r22
    21be:	84 2b       	or	r24, r20
    21c0:	8e b9       	out	0x0e, r24	; 14
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    21c4:	4e b1       	in	r20, 0x0e	; 14
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	b9 01       	movw	r22, r18
    21cc:	fc 01       	movw	r30, r24
    21ce:	04 80       	ldd	r0, Z+4	; 0x04
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <writeBit+0x34>
    21d2:	66 0f       	add	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	0a 94       	dec	r0
    21d8:	e2 f7       	brpl	.-8      	; 0x21d2 <writeBit+0x30>
    21da:	cb 01       	movw	r24, r22
    21dc:	80 95       	com	r24
    21de:	84 23       	and	r24, r20
    21e0:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	08 95       	ret

000021e8 <__udivmodhi4>:
    21e8:	aa 1b       	sub	r26, r26
    21ea:	bb 1b       	sub	r27, r27
    21ec:	51 e1       	ldi	r21, 0x11	; 17
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <__udivmodhi4_ep>

000021f0 <__udivmodhi4_loop>:
    21f0:	aa 1f       	adc	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	a6 17       	cp	r26, r22
    21f6:	b7 07       	cpc	r27, r23
    21f8:	10 f0       	brcs	.+4      	; 0x21fe <__udivmodhi4_ep>
    21fa:	a6 1b       	sub	r26, r22
    21fc:	b7 0b       	sbc	r27, r23

000021fe <__udivmodhi4_ep>:
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	5a 95       	dec	r21
    2204:	a9 f7       	brne	.-22     	; 0x21f0 <__udivmodhi4_loop>
    2206:	80 95       	com	r24
    2208:	90 95       	com	r25
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	08 95       	ret

00002210 <__divmodsi4>:
    2210:	05 2e       	mov	r0, r21
    2212:	97 fb       	bst	r25, 7
    2214:	1e f4       	brtc	.+6      	; 0x221c <__divmodsi4+0xc>
    2216:	00 94       	com	r0
    2218:	0e 94 1f 11 	call	0x223e	; 0x223e <__negsi2>
    221c:	57 fd       	sbrc	r21, 7
    221e:	07 d0       	rcall	.+14     	; 0x222e <__divmodsi4_neg2>
    2220:	0e 94 2e 11 	call	0x225c	; 0x225c <__udivmodsi4>
    2224:	07 fc       	sbrc	r0, 7
    2226:	03 d0       	rcall	.+6      	; 0x222e <__divmodsi4_neg2>
    2228:	4e f4       	brtc	.+18     	; 0x223c <__divmodsi4_exit>
    222a:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__negsi2>

0000222e <__divmodsi4_neg2>:
    222e:	50 95       	com	r21
    2230:	40 95       	com	r20
    2232:	30 95       	com	r19
    2234:	21 95       	neg	r18
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	4f 4f       	sbci	r20, 0xFF	; 255
    223a:	5f 4f       	sbci	r21, 0xFF	; 255

0000223c <__divmodsi4_exit>:
    223c:	08 95       	ret

0000223e <__negsi2>:
    223e:	90 95       	com	r25
    2240:	80 95       	com	r24
    2242:	70 95       	com	r23
    2244:	61 95       	neg	r22
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8f 4f       	sbci	r24, 0xFF	; 255
    224a:	9f 4f       	sbci	r25, 0xFF	; 255
    224c:	08 95       	ret

0000224e <__usmulhisi3>:
    224e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__umulhisi3>

00002252 <__usmulhisi3_tail>:
    2252:	b7 ff       	sbrs	r27, 7
    2254:	08 95       	ret
    2256:	82 1b       	sub	r24, r18
    2258:	93 0b       	sbc	r25, r19
    225a:	08 95       	ret

0000225c <__udivmodsi4>:
    225c:	a1 e2       	ldi	r26, 0x21	; 33
    225e:	1a 2e       	mov	r1, r26
    2260:	aa 1b       	sub	r26, r26
    2262:	bb 1b       	sub	r27, r27
    2264:	fd 01       	movw	r30, r26
    2266:	0d c0       	rjmp	.+26     	; 0x2282 <__udivmodsi4_ep>

00002268 <__udivmodsi4_loop>:
    2268:	aa 1f       	adc	r26, r26
    226a:	bb 1f       	adc	r27, r27
    226c:	ee 1f       	adc	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	a2 17       	cp	r26, r18
    2272:	b3 07       	cpc	r27, r19
    2274:	e4 07       	cpc	r30, r20
    2276:	f5 07       	cpc	r31, r21
    2278:	20 f0       	brcs	.+8      	; 0x2282 <__udivmodsi4_ep>
    227a:	a2 1b       	sub	r26, r18
    227c:	b3 0b       	sbc	r27, r19
    227e:	e4 0b       	sbc	r30, r20
    2280:	f5 0b       	sbc	r31, r21

00002282 <__udivmodsi4_ep>:
    2282:	66 1f       	adc	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	1a 94       	dec	r1
    228c:	69 f7       	brne	.-38     	; 0x2268 <__udivmodsi4_loop>
    228e:	60 95       	com	r22
    2290:	70 95       	com	r23
    2292:	80 95       	com	r24
    2294:	90 95       	com	r25
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	bd 01       	movw	r22, r26
    229c:	cf 01       	movw	r24, r30
    229e:	08 95       	ret

000022a0 <__umulhisi3>:
    22a0:	a2 9f       	mul	r26, r18
    22a2:	b0 01       	movw	r22, r0
    22a4:	b3 9f       	mul	r27, r19
    22a6:	c0 01       	movw	r24, r0
    22a8:	a3 9f       	mul	r26, r19
    22aa:	70 0d       	add	r23, r0
    22ac:	81 1d       	adc	r24, r1
    22ae:	11 24       	eor	r1, r1
    22b0:	91 1d       	adc	r25, r1
    22b2:	b2 9f       	mul	r27, r18
    22b4:	70 0d       	add	r23, r0
    22b6:	81 1d       	adc	r24, r1
    22b8:	11 24       	eor	r1, r1
    22ba:	91 1d       	adc	r25, r1
    22bc:	08 95       	ret

000022be <setjmp>:
    22be:	dc 01       	movw	r26, r24
    22c0:	2d 92       	st	X+, r2
    22c2:	3d 92       	st	X+, r3
    22c4:	4d 92       	st	X+, r4
    22c6:	5d 92       	st	X+, r5
    22c8:	6d 92       	st	X+, r6
    22ca:	7d 92       	st	X+, r7
    22cc:	8d 92       	st	X+, r8
    22ce:	9d 92       	st	X+, r9
    22d0:	ad 92       	st	X+, r10
    22d2:	bd 92       	st	X+, r11
    22d4:	cd 92       	st	X+, r12
    22d6:	dd 92       	st	X+, r13
    22d8:	ed 92       	st	X+, r14
    22da:	fd 92       	st	X+, r15
    22dc:	0d 93       	st	X+, r16
    22de:	1d 93       	st	X+, r17
    22e0:	cd 93       	st	X+, r28
    22e2:	dd 93       	st	X+, r29
    22e4:	ff 91       	pop	r31
    22e6:	ef 91       	pop	r30
    22e8:	8d b7       	in	r24, 0x3d	; 61
    22ea:	8d 93       	st	X+, r24
    22ec:	8e b7       	in	r24, 0x3e	; 62
    22ee:	8d 93       	st	X+, r24
    22f0:	8f b7       	in	r24, 0x3f	; 63
    22f2:	8d 93       	st	X+, r24
    22f4:	ed 93       	st	X+, r30
    22f6:	fd 93       	st	X+, r31
    22f8:	88 27       	eor	r24, r24
    22fa:	99 27       	eor	r25, r25
    22fc:	09 94       	ijmp

000022fe <longjmp>:
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	81 1d       	adc	r24, r1
    2308:	2d 90       	ld	r2, X+
    230a:	3d 90       	ld	r3, X+
    230c:	4d 90       	ld	r4, X+
    230e:	5d 90       	ld	r5, X+
    2310:	6d 90       	ld	r6, X+
    2312:	7d 90       	ld	r7, X+
    2314:	8d 90       	ld	r8, X+
    2316:	9d 90       	ld	r9, X+
    2318:	ad 90       	ld	r10, X+
    231a:	bd 90       	ld	r11, X+
    231c:	cd 90       	ld	r12, X+
    231e:	dd 90       	ld	r13, X+
    2320:	ed 90       	ld	r14, X+
    2322:	fd 90       	ld	r15, X+
    2324:	0d 91       	ld	r16, X+
    2326:	1d 91       	ld	r17, X+
    2328:	cd 91       	ld	r28, X+
    232a:	dd 91       	ld	r29, X+
    232c:	ed 91       	ld	r30, X+
    232e:	fd 91       	ld	r31, X+
    2330:	0d 90       	ld	r0, X+
    2332:	f8 94       	cli
    2334:	fe bf       	out	0x3e, r31	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	ed bf       	out	0x3d, r30	; 61
    233a:	ed 91       	ld	r30, X+
    233c:	fd 91       	ld	r31, X+
    233e:	09 94       	ijmp

00002340 <_exit>:
    2340:	f8 94       	cli

00002342 <__stop_program>:
    2342:	ff cf       	rjmp	.-2      	; 0x2342 <__stop_program>
