
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00002448  000024dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a3  00800156  00800156  00002532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c73  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146e  00000000  00000000  00006507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ab6  00000000  00000000  00007975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd4  00000000  00000000  0000942c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6d  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c16  00000000  00000000  0000ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000e883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_1>
       8:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_2>
       c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_3>
      10:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_4>
      14:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_9>
      28:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__vector_10>
      2c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_11>
      30:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_12>
      34:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_13>
      38:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_14>
      3c:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_15>
      40:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_16>
      44:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_17>
      48:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_18>
      4c:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__vector_19>
      50:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_20>
      54:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_21>
      58:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e4       	ldi	r30, 0x48	; 72
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 35       	cpi	r26, 0x56	; 86
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e5       	ldi	r26, 0x56	; 86
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3f       	cpi	r26, 0xF9	; 249
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 08 04 	call	0x810	; 0x810 <main>
      92:	0c 94 22 12 	jmp	0x2444	; 0x2444 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      a6:	fc 01       	movw	r30, r24
      a8:	22 85       	ldd	r18, Z+10	; 0x0a
      aa:	22 23       	and	r18, r18
      ac:	21 f0       	breq	.+8      	; 0xb6 <holdCheckerUp+0x1c>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      ae:	1e 9b       	sbis	0x03, 6	; 3
      b0:	0b c0       	rjmp	.+22     	; 0xc8 <holdCheckerUp+0x2e>
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      b2:	fc 01       	movw	r30, r24
      b4:	12 86       	std	Z+10, r1	; 0x0a
	}
	return 0;
}
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	1f 91       	pop	r17
      bc:	0f 91       	pop	r16
      be:	ff 90       	pop	r15
      c0:	ef 90       	pop	r14
      c2:	df 90       	pop	r13
      c4:	cf 90       	pop	r12
      c6:	08 95       	ret
      c8:	8c 01       	movw	r16, r24
int holdCheckerUp(Button *self, int arg) {
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	6a e0       	ldi	r22, 0x0A	; 10
      d0:	73 e0       	ldi	r23, 0x03	; 3
      d2:	84 81       	ldd	r24, Z+4	; 0x04
      d4:	95 81       	ldd	r25, Z+5	; 0x05
      d6:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      da:	c1 2c       	mov	r12, r1
      dc:	d1 2c       	mov	r13, r1
      de:	8d e4       	ldi	r24, 0x4D	; 77
      e0:	e8 2e       	mov	r14, r24
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	f8 2e       	mov	r15, r24
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	a9 01       	movw	r20, r18
      ec:	65 e3       	ldi	r22, 0x35	; 53
      ee:	7c e0       	ldi	r23, 0x0C	; 12
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
      f8:	de cf       	rjmp	.-68     	; 0xb6 <holdCheckerUp+0x1c>

000000fa <holdCheckerDown>:
	}
	return 0;
}

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     106:	fc 01       	movw	r30, r24
     108:	23 85       	ldd	r18, Z+11	; 0x0b
     10a:	22 23       	and	r18, r18
     10c:	21 f0       	breq	.+8      	; 0x116 <holdCheckerDown+0x1c>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     10e:	1f 9b       	sbis	0x03, 7	; 3
     110:	0b c0       	rjmp	.+22     	; 0x128 <holdCheckerDown+0x2e>
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     112:	fc 01       	movw	r30, r24
     114:	13 86       	std	Z+11, r1	; 0x0b
	}
	return 0;
}
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret
     128:	8c 01       	movw	r16, r24
int holdCheckerDown(Button *self, int arg) {
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	63 e4       	ldi	r22, 0x43	; 67
     130:	73 e0       	ldi	r23, 0x03	; 3
     132:	84 81       	ldd	r24, Z+4	; 0x04
     134:	95 81       	ldd	r25, Z+5	; 0x05
     136:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	8d e7       	ldi	r24, 0x7D	; 125
     140:	e8 2e       	mov	r14, r24
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	f8 2e       	mov	r15, r24
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	65 e3       	ldi	r22, 0x35	; 53
     14e:	7c e0       	ldi	r23, 0x0C	; 12
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
     158:	de cf       	rjmp	.-68     	; 0x116 <holdCheckerDown+0x1c>

0000015a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     15a:	85 b1       	in	r24, 0x05	; 5
     15c:	80 6d       	ori	r24, 0xD0	; 208
     15e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     160:	8e b1       	in	r24, 0x0e	; 14
     162:	8c 60       	ori	r24, 0x0C	; 12
     164:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     166:	8d b3       	in	r24, 0x1d	; 29
     168:	80 6c       	ori	r24, 0xC0	; 192
     16a:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     16c:	eb e6       	ldi	r30, 0x6B	; 107
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8c 60       	ori	r24, 0x0C	; 12
     174:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     176:	ec e6       	ldi	r30, 0x6C	; 108
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	80 6d       	ori	r24, 0xD0	; 208
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <leftdir>:
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
     182:	62 99       	sbic	0x0c, 2	; 12
     184:	04 c0       	rjmp	.+8      	; 0x18e <leftdir+0xc>
     186:	fc 01       	movw	r30, r24
     188:	20 85       	ldd	r18, Z+8	; 0x08
     18a:	22 23       	and	r18, r18
     18c:	39 f0       	breq	.+14     	; 0x19c <leftdir+0x1a>
		self->heldLeft = true;
		SYNC(self->gui, switchGen, 0);
	}
	
	else if (!PRESSEDLT) {
     18e:	62 9b       	sbis	0x0c, 2	; 12
     190:	02 c0       	rjmp	.+4      	; 0x196 <leftdir+0x14>
		self->heldLeft = false;
     192:	fc 01       	movw	r30, r24
     194:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	08 95       	ret
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		self->heldLeft = true;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 87       	std	Z+8, r24	; 0x08
		SYNC(self->gui, switchGen, 0);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	66 ee       	ldi	r22, 0xE6	; 230
     1a6:	72 e0       	ldi	r23, 0x02	; 2
     1a8:	84 81       	ldd	r24, Z+4	; 0x04
     1aa:	95 81       	ldd	r25, Z+5	; 0x05
     1ac:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
	
	else if (!PRESSEDLT) {
		self->heldLeft = false;
	}
	return 0;
}
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
     1b6:	63 99       	sbic	0x0c, 3	; 12
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <rightdir+0xc>
     1ba:	fc 01       	movw	r30, r24
     1bc:	21 85       	ldd	r18, Z+9	; 0x09
     1be:	22 23       	and	r18, r18
     1c0:	39 f0       	breq	.+14     	; 0x1d0 <rightdir+0x1a>
		self->heldRight = true;
		SYNC(self->gui, switchGen, 1);
	}
	else if (!PRESSEDRT) {
     1c2:	63 9b       	sbis	0x0c, 3	; 12
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <rightdir+0x14>
		self->heldRight = false;
     1c6:	fc 01       	movw	r30, r24
     1c8:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret
}

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
		self->heldRight = true;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	81 87       	std	Z+9, r24	; 0x09
		SYNC(self->gui, switchGen, 1);
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	66 ee       	ldi	r22, 0xE6	; 230
     1da:	72 e0       	ldi	r23, 0x02	; 2
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
	}
	else if (!PRESSEDRT) {
		self->heldRight = false;
	}
	return 0;
}
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	08 95       	ret

000001ea <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	ec 01       	movw	r28, r24
	if (PRESSEDLT && !self->heldLeft) {
     1f0:	62 99       	sbic	0x0c, 2	; 12
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <buttonCheckerLR+0x10>
     1f4:	88 85       	ldd	r24, Y+8	; 0x08
     1f6:	88 23       	and	r24, r24
     1f8:	61 f0       	breq	.+24     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		leftdir(self, 0);
	}
	else {
		self->heldLeft = false;
     1fa:	18 86       	std	Y+8, r1	; 0x08
	}
	if (PRESSEDRT && !self->heldRight) {
     1fc:	63 99       	sbic	0x0c, 3	; 12
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     200:	89 85       	ldd	r24, Y+9	; 0x09
     202:	88 23       	and	r24, r24
     204:	61 f0       	breq	.+24     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		rightdir(self, 0);
	}
	else {
		self->heldRight = false;
     206:	19 86       	std	Y+9, r1	; 0x09
	}
	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		leftdir(self, 0);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	ce 01       	movw	r24, r28
     218:	0e 94 c1 00 	call	0x182	; 0x182 <leftdir>
     21c:	ef cf       	rjmp	.-34     	; 0x1fc <buttonCheckerLR+0x12>
	}
	else {
		self->heldLeft = false;
	}
	if (PRESSEDRT && !self->heldRight) {
		rightdir(self, 0);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	ce 01       	movw	r24, r28
     224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <rightdir>
	}
	else {
		self->heldRight = false;
	}
	return 0;
}
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     242:	1e 99       	sbic	0x03, 6	; 3
     244:	04 c0       	rjmp	.+8      	; 0x24e <updir+0x1c>
     246:	fc 01       	movw	r30, r24
     248:	26 81       	ldd	r18, Z+6	; 0x06
     24a:	22 23       	and	r18, r18
     24c:	79 f0       	breq	.+30     	; 0x26c <updir+0x3a>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
			self->holdUpRunning = true;
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     24e:	1e 9b       	sbis	0x03, 6	; 3
     250:	02 c0       	rjmp	.+4      	; 0x256 <updir+0x24>
		self->heldUp = false;
     252:	fc 01       	movw	r30, r24
     254:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	df 90       	pop	r13
     268:	cf 90       	pop	r12
     26a:	08 95       	ret
     26c:	ec 01       	movw	r28, r24

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
		self->heldUp = true; // Markera att knappen hålls nere
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	16 83       	std	Z+6, r17	; 0x06
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	73 e0       	ldi	r23, 0x03	; 3
     27a:	84 81       	ldd	r24, Z+4	; 0x04
     27c:	95 81       	ldd	r25, Z+5	; 0x05
     27e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     282:	8a 85       	ldd	r24, Y+10	; 0x0a
     284:	81 11       	cpse	r24, r1
     286:	e7 cf       	rjmp	.-50     	; 0x256 <updir+0x24>
			self->holdUpRunning = true;
     288:	1a 87       	std	Y+10, r17	; 0x0a
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	8d e4       	ldi	r24, 0x4D	; 77
     290:	e8 2e       	mov	r14, r24
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	f8 2e       	mov	r15, r24
     296:	8e 01       	movw	r16, r28
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	a9 01       	movw	r20, r18
     29e:	69 e0       	ldi	r22, 0x09	; 9
     2a0:	7d e3       	ldi	r23, 0x3D	; 61
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
     2aa:	d5 cf       	rjmp	.-86     	; 0x256 <updir+0x24>

000002ac <downdir>:
	}
	return 0;
}

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     2bc:	1f 99       	sbic	0x03, 7	; 3
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <downdir+0x1c>
     2c0:	fc 01       	movw	r30, r24
     2c2:	27 81       	ldd	r18, Z+7	; 0x07
     2c4:	22 23       	and	r18, r18
     2c6:	79 f0       	breq	.+30     	; 0x2e6 <downdir+0x3a>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
			self->holdDownRunning = true;
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     2c8:	1f 9b       	sbis	0x03, 7	; 3
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <downdir+0x24>
		self->heldDown = false;
     2cc:	fc 01       	movw	r30, r24
     2ce:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	08 95       	ret
     2e6:	ec 01       	movw	r28, r24

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
		self->heldDown = true; // Markera att knappen hålls nere
     2e8:	11 e0       	ldi	r17, 0x01	; 1
     2ea:	17 83       	std	Z+7, r17	; 0x07
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	63 e4       	ldi	r22, 0x43	; 67
     2f2:	73 e0       	ldi	r23, 0x03	; 3
     2f4:	84 81       	ldd	r24, Z+4	; 0x04
     2f6:	95 81       	ldd	r25, Z+5	; 0x05
     2f8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     2fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2fe:	81 11       	cpse	r24, r1
     300:	e7 cf       	rjmp	.-50     	; 0x2d0 <downdir+0x24>
			self->holdDownRunning = true;
     302:	1b 87       	std	Y+11, r17	; 0x0b
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     304:	c1 2c       	mov	r12, r1
     306:	d1 2c       	mov	r13, r1
     308:	8d e7       	ldi	r24, 0x7D	; 125
     30a:	e8 2e       	mov	r14, r24
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	f8 2e       	mov	r15, r24
     310:	8e 01       	movw	r16, r28
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	69 e0       	ldi	r22, 0x09	; 9
     31a:	7d e3       	ldi	r23, 0x3D	; 61
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
     324:	d5 cf       	rjmp	.-86     	; 0x2d0 <downdir+0x24>

00000326 <centerdir>:
	}
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
     326:	1c 99       	sbic	0x03, 4	; 3
     328:	04 c0       	rjmp	.+8      	; 0x332 <centerdir+0xc>
     32a:	fc 01       	movw	r30, r24
     32c:	24 85       	ldd	r18, Z+12	; 0x0c
     32e:	22 23       	and	r18, r18
     330:	39 f0       	breq	.+14     	; 0x340 <centerdir+0x1a>
		self->heldCenter = true;
		SYNC(self->gui, guiFrecReset, 0);
	}
	else if (!PRESSEDCN) {
     332:	1c 9b       	sbis	0x03, 4	; 3
     334:	02 c0       	rjmp	.+4      	; 0x33a <centerdir+0x14>
		self->heldCenter = false;
     336:	fc 01       	movw	r30, r24
     338:	14 86       	std	Z+12, r1	; 0x0c
	}
	return 0;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	08 95       	ret
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
		self->heldCenter = true;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	84 87       	std	Z+12, r24	; 0x0c
		SYNC(self->gui, guiFrecReset, 0);
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	6c e7       	ldi	r22, 0x7C	; 124
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	95 81       	ldd	r25, Z+5	; 0x05
     350:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
	}
	else if (!PRESSEDCN) {
		self->heldCenter = false;
	}
	return 0;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret

0000035a <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
	if (PRESSEDUP && !self->heldUp) {
     360:	1e 99       	sbic	0x03, 6	; 3
     362:	03 c0       	rjmp	.+6      	; 0x36a <buttonCheckerUDC+0x10>
     364:	8e 81       	ldd	r24, Y+6	; 0x06
     366:	88 23       	and	r24, r24
     368:	c1 f0       	breq	.+48     	; 0x39a <buttonCheckerUDC+0x40>
		updir(self, 0);
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     36a:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN && !self->heldDown) {
     36c:	1f 99       	sbic	0x03, 7	; 3
     36e:	03 c0       	rjmp	.+6      	; 0x376 <buttonCheckerUDC+0x1c>
     370:	8f 81       	ldd	r24, Y+7	; 0x07
     372:	88 23       	and	r24, r24
     374:	61 f0       	breq	.+24     	; 0x38e <buttonCheckerUDC+0x34>
		downdir(self, 0); // Hantera ner-knappen
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     376:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN && !self->heldCenter) {
     378:	1c 99       	sbic	0x03, 4	; 3
     37a:	03 c0       	rjmp	.+6      	; 0x382 <buttonCheckerUDC+0x28>
     37c:	8c 85       	ldd	r24, Y+12	; 0x0c
     37e:	88 23       	and	r24, r24
     380:	91 f0       	breq	.+36     	; 0x3a6 <buttonCheckerUDC+0x4c>
		centerdir(self, 0);
	}
	else {
		self->heldCenter = false;
     382:	1c 86       	std	Y+12, r1	; 0x0c
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
	}
	if (PRESSEDDN && !self->heldDown) {
		downdir(self, 0); // Hantera ner-knappen
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 56 01 	call	0x2ac	; 0x2ac <downdir>
     398:	ef cf       	rjmp	.-34     	; 0x378 <buttonCheckerUDC+0x1e>


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
	if (PRESSEDUP && !self->heldUp) {
		updir(self, 0);
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 19 01 	call	0x232	; 0x232 <updir>
     3a4:	e3 cf       	rjmp	.-58     	; 0x36c <buttonCheckerUDC+0x12>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
	}
	if (PRESSEDCN && !self->heldCenter) {
		centerdir(self, 0);
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	ce 01       	movw	r24, r28
     3ac:	0e 94 93 01 	call	0x326	; 0x326 <centerdir>
	}
	else {
		self->heldCenter = false;
	}
	return 0;
}
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <writeChar.part.0>:
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     3ba:	90 ed       	ldi	r25, 0xD0	; 208
     3bc:	98 0f       	add	r25, r24
     3be:	9a 30       	cpi	r25, 0x0A	; 10
     3c0:	60 f1       	brcs	.+88     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     3c2:	9b 01       	movw	r18, r22
     3c4:	21 70       	andi	r18, 0x01	; 1
     3c6:	30 78       	andi	r19, 0x80	; 128
     3c8:	37 fd       	sbrc	r19, 7
     3ca:	71 c0       	rjmp	.+226    	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	77 fd       	sbrc	r23, 7
     3de:	5d c0       	rjmp	.+186    	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
     3e0:	75 95       	asr	r23
     3e2:	67 95       	ror	r22
     3e4:	fb 01       	movw	r30, r22
     3e6:	e4 51       	subi	r30, 0x14	; 20
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	8f e0       	ldi	r24, 0x0F	; 15
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <writeChar.part.0+0x38>
     3f0:	88 0f       	add	r24, r24
     3f2:	2a 95       	dec	r18
     3f4:	ea f7       	brpl	.-6      	; 0x3f0 <writeChar.part.0+0x36>
     3f6:	80 95       	com	r24
     3f8:	90 81       	ld	r25, Z
     3fa:	98 23       	and	r25, r24
     3fc:	9b 2b       	or	r25, r27
     3fe:	90 83       	st	Z, r25
     400:	95 81       	ldd	r25, Z+5	; 0x05
     402:	98 23       	and	r25, r24
     404:	9a 2b       	or	r25, r26
     406:	95 83       	std	Z+5, r25	; 0x05
     408:	92 85       	ldd	r25, Z+10	; 0x0a
     40a:	98 23       	and	r25, r24
     40c:	94 2b       	or	r25, r20
     40e:	92 87       	std	Z+10, r25	; 0x0a
     410:	97 85       	ldd	r25, Z+15	; 0x0f
     412:	89 23       	and	r24, r25
     414:	85 2b       	or	r24, r21
     416:	87 87       	std	Z+15, r24	; 0x0f
     418:	08 95       	ret
     41a:	e8 2f       	mov	r30, r24
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 51       	subi	r30, 0x1E	; 30
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	40 81       	ld	r20, Z
     428:	51 81       	ldd	r21, Z+1	; 0x01
     42a:	9b 01       	movw	r18, r22
     42c:	21 70       	andi	r18, 0x01	; 1
     42e:	30 78       	andi	r19, 0x80	; 128
     430:	37 fd       	sbrc	r19, 7
     432:	36 c0       	rjmp	.+108    	; 0x4a0 <__DATA_REGION_LENGTH__+0xa0>
     434:	22 0f       	add	r18, r18
     436:	33 1f       	adc	r19, r19
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	ca 01       	movw	r24, r20
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	99 27       	eor	r25, r25
     442:	98 2f       	mov	r25, r24
     444:	02 2e       	mov	r0, r18
     446:	01 c0       	rjmp	.+2      	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
     448:	99 0f       	add	r25, r25
     44a:	0a 94       	dec	r0
     44c:	ea f7       	brpl	.-6      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
     44e:	b9 2f       	mov	r27, r25
     450:	ca 01       	movw	r24, r20
     452:	92 95       	swap	r25
     454:	82 95       	swap	r24
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	89 27       	eor	r24, r25
     45a:	9f 70       	andi	r25, 0x0F	; 15
     45c:	89 27       	eor	r24, r25
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	99 27       	eor	r25, r25
     462:	98 2f       	mov	r25, r24
     464:	02 2e       	mov	r0, r18
     466:	01 c0       	rjmp	.+2      	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
     468:	99 0f       	add	r25, r25
     46a:	0a 94       	dec	r0
     46c:	ea f7       	brpl	.-6      	; 0x468 <__DATA_REGION_LENGTH__+0x68>
     46e:	a9 2f       	mov	r26, r25
     470:	85 2f       	mov	r24, r21
     472:	99 27       	eor	r25, r25
     474:	8f 70       	andi	r24, 0x0F	; 15
     476:	99 27       	eor	r25, r25
     478:	02 2e       	mov	r0, r18
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
     47c:	88 0f       	add	r24, r24
     47e:	0a 94       	dec	r0
     480:	ea f7       	brpl	.-6      	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
     482:	48 2f       	mov	r20, r24
     484:	85 2f       	mov	r24, r21
     486:	82 95       	swap	r24
     488:	8f 70       	andi	r24, 0x0F	; 15
     48a:	02 2e       	mov	r0, r18
     48c:	01 c0       	rjmp	.+2      	; 0x490 <__DATA_REGION_LENGTH__+0x90>
     48e:	88 0f       	add	r24, r24
     490:	0a 94       	dec	r0
     492:	ea f7       	brpl	.-6      	; 0x48e <__DATA_REGION_LENGTH__+0x8e>
     494:	58 2f       	mov	r21, r24
     496:	77 ff       	sbrs	r23, 7
     498:	a3 cf       	rjmp	.-186    	; 0x3e0 <writeChar.part.0+0x26>
     49a:	6f 5f       	subi	r22, 0xFF	; 255
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	a0 cf       	rjmp	.-192    	; 0x3e0 <writeChar.part.0+0x26>
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	31 09       	sbc	r19, r1
     4a4:	2e 6f       	ori	r18, 0xFE	; 254
     4a6:	3f 6f       	ori	r19, 0xFF	; 255
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	c3 cf       	rjmp	.-122    	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     4ae:	21 50       	subi	r18, 0x01	; 1
     4b0:	31 09       	sbc	r19, r1
     4b2:	2e 6f       	ori	r18, 0xFE	; 254
     4b4:	3f 6f       	ori	r19, 0xFF	; 255
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	88 cf       	rjmp	.-240    	; 0x3cc <writeChar.part.0+0x12>

000004bc <lcd_init>:
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     4c2:	87 eb       	ldi	r24, 0xB7	; 183
     4c4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     4c8:	8f e0       	ldi	r24, 0x0F	; 15
     4ca:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     4ce:	08 95       	ret

000004d0 <printAt>:
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
}

void printAt(long num, int pos) {
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	6b 01       	movw	r12, r22
     4de:	7c 01       	movw	r14, r24
     4e0:	ea 01       	movw	r28, r20
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4e2:	46 30       	cpi	r20, 0x06	; 6
     4e4:	51 05       	cpc	r21, r1
     4e6:	f0 f0       	brcs	.+60     	; 0x524 <__stack+0x25>
}

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
     4e8:	21 96       	adiw	r28, 0x01	; 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4ea:	c6 30       	cpi	r28, 0x06	; 6
     4ec:	d1 05       	cpc	r29, r1
     4ee:	38 f0       	brcs	.+14     	; 0x4fe <printAt+0x2e>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
	
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret
     4fe:	c7 01       	movw	r24, r14
     500:	b6 01       	movw	r22, r12
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 76 11 	call	0x22ec	; 0x22ec <__divmodsi4>
     50e:	86 2f       	mov	r24, r22
     510:	be 01       	movw	r22, r28
     512:	80 5d       	subi	r24, 0xD0	; 208
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <writeChar.part.0>
     524:	24 e6       	ldi	r18, 0x64	; 100
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 76 11 	call	0x22ec	; 0x22ec <__divmodsi4>
     530:	2a e0       	ldi	r18, 0x0A	; 10
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	0e 94 76 11 	call	0x22ec	; 0x22ec <__divmodsi4>
     53c:	be 01       	movw	r22, r28
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	82 0f       	add	r24, r18
     542:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     546:	d0 cf       	rjmp	.-96     	; 0x4e8 <printAt+0x18>

00000548 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	63 e8       	ldi	r22, 0x83	; 131
     554:	74 e0       	ldi	r23, 0x04	; 4
     556:	8c 81       	ldd	r24, Y+4	; 0x04
     558:	9d 81       	ldd	r25, Y+5	; 0x05
     55a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
     55e:	bc 01       	movw	r22, r24
     560:	99 0f       	add	r25, r25
     562:	88 0b       	sbc	r24, r24
     564:	99 0b       	sbc	r25, r25
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	63 e8       	ldi	r22, 0x83	; 131
     574:	74 e0       	ldi	r23, 0x04	; 4
     576:	8e 81       	ldd	r24, Y+6	; 0x06
     578:	9f 81       	ldd	r25, Y+7	; 0x07
     57a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
     57e:	bc 01       	movw	r22, r24
     580:	99 0f       	add	r25, r25
     582:	88 0b       	sbc	r24, r24
     584:	99 0b       	sbc	r25, r25
     586:	44 e0       	ldi	r20, 0x04	; 4
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     58e:	88 85       	ldd	r24, Y+8	; 0x08
     590:	62 e0       	ldi	r22, 0x02	; 2
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	88 23       	and	r24, r24
     596:	69 f0       	breq	.+26     	; 0x5b2 <updateDisplay+0x6a>
     598:	80 e3       	ldi	r24, 0x30	; 48
     59a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     59e:	63 e0       	ldi	r22, 0x03	; 3
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	81 e3       	ldi	r24, 0x31	; 49
     5a4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
		printAt(10, 2);
		} else {
		printAt(1, 2);
	}
	return 0;
}
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret
     5b2:	81 e3       	ldi	r24, 0x31	; 49
     5b4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     5b8:	63 e0       	ldi	r22, 0x03	; 3
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 e3       	ldi	r24, 0x30	; 48
     5be:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	67 2b       	or	r22, r23
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <switchGen+0x14>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     5e4:	c1 2c       	mov	r12, r1
     5e6:	d1 2c       	mov	r13, r1
     5e8:	24 ea       	ldi	r18, 0xA4	; 164
     5ea:	e2 2e       	mov	r14, r18
     5ec:	22 e0       	ldi	r18, 0x02	; 2
     5ee:	f2 2e       	mov	r15, r18
     5f0:	8c 01       	movw	r16, r24
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	a9 01       	movw	r20, r18
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	cb 01       	movw	r24, r22
     5fe:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	return 0;
}
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	08 95       	ret

00000614 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     626:	88 85       	ldd	r24, Y+8	; 0x08
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <guiFrecInc+0x6c>
		ASYNC(self->gen1, FrecInc, 0);
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     62c:	0e 81       	ldd	r16, Y+6	; 0x06
     62e:	1f 81       	ldd	r17, Y+7	; 0x07
     630:	c1 2c       	mov	r12, r1
     632:	d1 2c       	mov	r13, r1
     634:	87 e8       	ldi	r24, 0x87	; 135
     636:	e8 2e       	mov	r14, r24
     638:	84 e0       	ldi	r24, 0x04	; 4
     63a:	f8 2e       	mov	r15, r24
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	a9 01       	movw	r20, r18
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	cb 01       	movw	r24, r22
     648:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	}
	ASYNC(self, updateDisplay, 0);
     64c:	c1 2c       	mov	r12, r1
     64e:	d1 2c       	mov	r13, r1
     650:	94 ea       	ldi	r25, 0xA4	; 164
     652:	e9 2e       	mov	r14, r25
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	f9 2e       	mov	r15, r25
     658:	8e 01       	movw	r16, r28
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	a9 01       	movw	r20, r18
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	cb 01       	movw	r24, r22
     666:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	return 0;

}
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	08 95       	ret

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecInc, 0);
     680:	0c 81       	ldd	r16, Y+4	; 0x04
     682:	1d 81       	ldd	r17, Y+5	; 0x05
     684:	d5 cf       	rjmp	.-86     	; 0x630 <guiFrecInc+0x1c>

00000686 <guiFrecDec>:

}

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     698:	88 85       	ldd	r24, Y+8	; 0x08
     69a:	88 23       	and	r24, r24
     69c:	51 f1       	breq	.+84     	; 0x6f2 <guiFrecDec+0x6c>
		ASYNC(self->gen1, FrecDec, 0);
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     69e:	0e 81       	ldd	r16, Y+6	; 0x06
     6a0:	1f 81       	ldd	r17, Y+7	; 0x07
     6a2:	c1 2c       	mov	r12, r1
     6a4:	d1 2c       	mov	r13, r1
     6a6:	80 e9       	ldi	r24, 0x90	; 144
     6a8:	e8 2e       	mov	r14, r24
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	f8 2e       	mov	r15, r24
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	cb 01       	movw	r24, r22
     6ba:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	}
	ASYNC(self, updateDisplay, 0);
     6be:	c1 2c       	mov	r12, r1
     6c0:	d1 2c       	mov	r13, r1
     6c2:	94 ea       	ldi	r25, 0xA4	; 164
     6c4:	e9 2e       	mov	r14, r25
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	f9 2e       	mov	r15, r25
     6ca:	8e 01       	movw	r16, r28
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	cb 01       	movw	r24, r22
     6d8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	return 0;
}
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	08 95       	ret

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecDec, 0);
     6f2:	0c 81       	ldd	r16, Y+4	; 0x04
     6f4:	1d 81       	ldd	r17, Y+5	; 0x05
     6f6:	d5 cf       	rjmp	.-86     	; 0x6a2 <guiFrecDec+0x1c>

000006f8 <guiFrecReset>:
	return 0;
}

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     70a:	88 85       	ldd	r24, Y+8	; 0x08
     70c:	88 23       	and	r24, r24
     70e:	51 f1       	breq	.+84     	; 0x764 <guiFrecReset+0x6c>
		ASYNC(self->gen1, FrecReset, 0);
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     710:	0e 81       	ldd	r16, Y+6	; 0x06
     712:	1f 81       	ldd	r17, Y+7	; 0x07
     714:	c1 2c       	mov	r12, r1
     716:	d1 2c       	mov	r13, r1
     718:	89 e9       	ldi	r24, 0x99	; 153
     71a:	e8 2e       	mov	r14, r24
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	f8 2e       	mov	r15, r24
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	a9 01       	movw	r20, r18
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	cb 01       	movw	r24, r22
     72c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	}
	ASYNC(self, updateDisplay, 0);
     730:	c1 2c       	mov	r12, r1
     732:	d1 2c       	mov	r13, r1
     734:	94 ea       	ldi	r25, 0xA4	; 164
     736:	e9 2e       	mov	r14, r25
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	f9 2e       	mov	r15, r25
     73c:	8e 01       	movw	r16, r28
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	cb 01       	movw	r24, r22
     74a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	return 0;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecReset, 0);
     764:	0c 81       	ldd	r16, Y+4	; 0x04
     766:	1d 81       	ldd	r17, Y+5	; 0x05
     768:	d5 cf       	rjmp	.-86     	; 0x714 <guiFrecReset+0x1c>

0000076a <horizontal>:
#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
	SYNC(self->button, buttonCheckerLR, 0);
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	65 ef       	ldi	r22, 0xF5	; 245
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	84 81       	ldd	r24, Z+4	; 0x04
     776:	95 81       	ldd	r25, Z+5	; 0x05
     778:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
	return 0;
}
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	08 95       	ret

00000782 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
	SYNC(self->button, buttonCheckerUDC, 0);
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	6d ea       	ldi	r22, 0xAD	; 173
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	fc 01       	movw	r30, r24
     78c:	84 81       	ldd	r24, Z+4	; 0x04
     78e:	95 81       	ldd	r25, Z+5	; 0x05
     790:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
	return 0;
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret

0000079a <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     7ac:	c1 2c       	mov	r12, r1
     7ae:	d1 2c       	mov	r13, r1
     7b0:	84 e2       	ldi	r24, 0x24	; 36
     7b2:	e8 2e       	mov	r14, r24
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	f8 2e       	mov	r15, r24
     7b8:	06 e2       	ldi	r16, 0x26	; 38
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	a9 01       	movw	r20, r18
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	cb 01       	movw	r24, r22
     7c8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	ASYNC(&pulseGen2, setPulse, 0);
     7cc:	0c e1       	ldi	r16, 0x1C	; 28
     7ce:	11 e0       	ldi	r17, 0x01	; 1
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	a9 01       	movw	r20, r18
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	cb 01       	movw	r24, r22
     7dc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     7e0:	94 ea       	ldi	r25, 0xA4	; 164
     7e2:	e9 2e       	mov	r14, r25
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	f9 2e       	mov	r15, r25
     7e8:	8e 01       	movw	r16, r28
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	a9 01       	movw	r20, r18
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	cb 01       	movw	r24, r22
     7f6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	
	return 0;
}
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	08 95       	ret

00000810 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     810:	0e 94 c1 04 	call	0x982	; 0x982 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     814:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     818:	0e 94 ad 00 	call	0x15a	; 0x15a <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	65 eb       	ldi	r22, 0xB5	; 181
     820:	73 e0       	ldi	r23, 0x03	; 3
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     82a:	42 e0       	ldi	r20, 0x02	; 2
     82c:	61 ec       	ldi	r22, 0xC1	; 193
     82e:	73 e0       	ldi	r23, 0x03	; 3
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	6d ec       	ldi	r22, 0xCD	; 205
     83e:	73 e0       	ldi	r23, 0x03	; 3
     840:	83 e1       	ldi	r24, 0x13	; 19
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0c 94 15 11 	jmp	0x222a	; 0x222a <tinytimber>

00000848 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     85a:	8c 81       	ldd	r24, Y+4	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     85c:	0f 81       	ldd	r16, Y+7	; 0x07
     85e:	18 85       	ldd	r17, Y+8	; 0x08
     860:	c1 2c       	mov	r12, r1
     862:	d1 2c       	mov	r13, r1
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     864:	88 23       	and	r24, r24
     866:	a1 f1       	breq	.+104    	; 0x8d0 <setPulse+0x88>
	    ASYNC(self->wbit, writeBit, 0);
		AFTER(MSEC(1000), self, setPulse, 0);
    }
	else {
		// Annars toggla outputHigh.
		ASYNC(self->wbit, toggleBit, 0);
     868:	83 e5       	ldi	r24, 0x53	; 83
     86a:	e8 2e       	mov	r14, r24
     86c:	81 e1       	ldi	r24, 0x11	; 17
     86e:	f8 2e       	mov	r15, r24
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	cb 01       	movw	r24, r22
     87c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
		
		// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
		int delay = 1000 / self->frec;
     880:	6c 81       	ldd	r22, Y+4	; 0x04
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	88 ee       	ldi	r24, 0xE8	; 232
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__divmodhi4>
		AFTER(MSEC(delay), self, setPulse, 0);
     88c:	2d e7       	ldi	r18, 0x7D	; 125
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	db 01       	movw	r26, r22
     892:	0e 94 95 11 	call	0x232a	; 0x232a <__usmulhisi3>
     896:	95 95       	asr	r25
     898:	87 95       	ror	r24
     89a:	77 95       	ror	r23
     89c:	67 95       	ror	r22
     89e:	95 95       	asr	r25
     8a0:	87 95       	ror	r24
     8a2:	77 95       	ror	r23
     8a4:	67 95       	ror	r22
     8a6:	34 e2       	ldi	r19, 0x24	; 36
     8a8:	e3 2e       	mov	r14, r19
     8aa:	34 e0       	ldi	r19, 0x04	; 4
     8ac:	f3 2e       	mov	r15, r19
     8ae:	8e 01       	movw	r16, r28
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	a9 01       	movw	r20, r18
     8b6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
	}
	return 0;
}
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	08 95       	ret

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
	    ASYNC(self->wbit, writeBit, 0);
     8d0:	41 e3       	ldi	r20, 0x31	; 49
     8d2:	e4 2e       	mov	r14, r20
     8d4:	41 e1       	ldi	r20, 0x11	; 17
     8d6:	f4 2e       	mov	r15, r20
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	cb 01       	movw	r24, r22
     8e4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
		AFTER(MSEC(1000), self, setPulse, 0);
     8e8:	54 e2       	ldi	r21, 0x24	; 36
     8ea:	e5 2e       	mov	r14, r21
     8ec:	54 e0       	ldi	r21, 0x04	; 4
     8ee:	f5 2e       	mov	r15, r21
     8f0:	8e 01       	movw	r16, r28
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	a9 01       	movw	r20, r18
     8f8:	62 e1       	ldi	r22, 0x12	; 18
     8fa:	7a e7       	ldi	r23, 0x7A	; 122
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
     904:	da cf       	rjmp	.-76     	; 0x8ba <setPulse+0x72>

00000906 <getFrec>:
	return 0;
}

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     906:	fc 01       	movw	r30, r24
     908:	84 81       	ldd	r24, Z+4	; 0x04
}
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	08 95       	ret

0000090e <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     90e:	fc 01       	movw	r30, r24
    unsigned char old = self->frec;
    if (self->frec < 99) {
     910:	94 81       	ldd	r25, Z+4	; 0x04
     912:	93 36       	cpi	r25, 0x63	; 99
     914:	10 f4       	brcc	.+4      	; 0x91a <FrecInc+0xc>
	    self->frec++;
     916:	9f 5f       	subi	r25, 0xFF	; 255
     918:	94 83       	std	Z+4, r25	; 0x04
    }
    return 0;
}
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	08 95       	ret

00000920 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     920:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     922:	94 81       	ldd	r25, Z+4	; 0x04
     924:	99 23       	and	r25, r25
     926:	11 f0       	breq	.+4      	; 0x92c <FrecDec+0xc>
		self->frec--;
     928:	91 50       	subi	r25, 0x01	; 1
     92a:	94 83       	std	Z+4, r25	; 0x04
	}
	return 0;
}
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	08 95       	ret

00000932 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	81 11       	cpse	r24, r1
     944:	0b c0       	rjmp	.+22     	; 0x95c <FrecReset+0x2a>
	    self->frec = self->frec_old;
     946:	85 81       	ldd	r24, Z+5	; 0x05
     948:	84 83       	std	Z+4, r24	; 0x04
	    self->frec_old = self->frec;
	    self->frec = 0;
	    ASYNC(self->wbit, writeBit, 0);
    }
    return 0;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret
int FrecReset(Pulsegenerator *self, int arg) {
    if (self->frec == 0) {
	    self->frec = self->frec_old;
	    } 
	else {
	    self->frec_old = self->frec;
     95c:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     95e:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     960:	07 81       	ldd	r16, Z+7	; 0x07
     962:	10 85       	ldd	r17, Z+8	; 0x08
     964:	c1 2c       	mov	r12, r1
     966:	d1 2c       	mov	r13, r1
     968:	81 e3       	ldi	r24, 0x31	; 49
     96a:	e8 2e       	mov	r14, r24
     96c:	81 e1       	ldi	r24, 0x11	; 17
     96e:	f8 2e       	mov	r15, r24
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	a9 01       	movw	r20, r18
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	cb 01       	movw	r24, r22
     97c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
     980:	e4 cf       	rjmp	.-56     	; 0x94a <FrecReset+0x18>

00000982 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     982:	e1 e6       	ldi	r30, 0x61	; 97
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 e8       	ldi	r24, 0x80	; 128
     988:	80 83       	st	Z, r24
	CLKPR = 0x00;
     98a:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     98c:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     98e:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     990:	e1 e8       	ldi	r30, 0x81	; 129
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8d 60       	ori	r24, 0x0D	; 13
     998:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     99a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     99e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     9a2:	ef e6       	ldi	r30, 0x6F	; 111
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	82 60       	ori	r24, 0x02	; 2
     9aa:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     9ac:	82 ec       	ldi	r24, 0xC2	; 194
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     9b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     9b8:	08 95       	ret

000009ba <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <initialize+0x6>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <initialize+0x8>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	89 e4       	ldi	r24, 0x49	; 73
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	29 e7       	ldi	r18, 0x79	; 121
     9cc:	33 e0       	ldi	r19, 0x03	; 3
     9ce:	fc 01       	movw	r30, r24
     9d0:	70 97       	sbiw	r30, 0x10	; 16
     9d2:	91 83       	std	Z+1, r25	; 0x01
     9d4:	80 83       	st	Z, r24
     9d6:	40 96       	adiw	r24, 0x10	; 16
     9d8:	82 17       	cp	r24, r18
     9da:	93 07       	cpc	r25, r19
     9dc:	c1 f7       	brne	.-16     	; 0x9ce <initialize+0x14>
     9de:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <messages+0x131>
     9e2:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <messages+0x130>
     9e6:	e4 e8       	ldi	r30, 0x84	; 132
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	81 ea       	ldi	r24, 0xA1	; 161
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
     9f2:	8e eb       	ldi	r24, 0xBE	; 190
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	96 8f       	std	Z+30, r25	; 0x1e
     9f8:	85 8f       	std	Z+29, r24	; 0x1d
     9fa:	ab ed       	ldi	r26, 0xDB	; 219
     9fc:	b1 e0       	ldi	r27, 0x01	; 1
     9fe:	b3 af       	std	Z+59, r27	; 0x3b
     a00:	a2 af       	std	Z+58, r26	; 0x3a
     a02:	1d 92       	st	X+, r1
     a04:	1c 92       	st	X, r1
     a06:	fa 83       	std	Y+2, r31	; 0x02
     a08:	e9 83       	std	Y+1, r30	; 0x01
     a0a:	e5 ed       	ldi	r30, 0xD5	; 213
     a0c:	f3 e0       	ldi	r31, 0x03	; 3
     a0e:	fc 83       	std	Y+4, r31	; 0x04
     a10:	eb 83       	std	Y+3, r30	; 0x03
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	06 96       	adiw	r24, 0x06	; 6
     a18:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <setjmp>
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	e9 81       	ldd	r30, Y+1	; 0x01
     a22:	fa 81       	ldd	r31, Y+2	; 0x02
     a24:	97 8b       	std	Z+23, r25	; 0x17
     a26:	86 8b       	std	Z+22, r24	; 0x16
     a28:	91 8f       	std	Z+25, r25	; 0x19
     a2a:	80 8f       	std	Z+24, r24	; 0x18
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	90 e1       	ldi	r25, 0x10	; 16
     a30:	94 8f       	std	Z+28, r25	; 0x1c
     a32:	83 8f       	std	Z+27, r24	; 0x1b
     a34:	15 82       	std	Z+5, r1	; 0x05
     a36:	14 82       	std	Z+4, r1	; 0x04
     a38:	7d 96       	adiw	r30, 0x1d	; 29
     a3a:	fa 83       	std	Y+2, r31	; 0x02
     a3c:	e9 83       	std	Y+1, r30	; 0x01
     a3e:	eb 81       	ldd	r30, Y+3	; 0x03
     a40:	fc 81       	ldd	r31, Y+4	; 0x04
     a42:	e0 5a       	subi	r30, 0xA0	; 160
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	fc 83       	std	Y+4, r31	; 0x04
     a48:	eb 83       	std	Y+3, r30	; 0x03
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	88 5f       	subi	r24, 0xF8	; 248
     a50:	91 40       	sbci	r25, 0x01	; 1
     a52:	f9 f6       	brne	.-66     	; 0xa12 <initialize+0x58>
     a54:	ec e1       	ldi	r30, 0x1C	; 28
     a56:	f2 e0       	ldi	r31, 0x02	; 2
     a58:	11 82       	std	Z+1, r1	; 0x01
     a5a:	10 82       	st	Z, r1
     a5c:	15 82       	std	Z+5, r1	; 0x05
     a5e:	14 82       	std	Z+4, r1	; 0x04
     a60:	13 82       	std	Z+3, r1	; 0x03
     a62:	12 82       	std	Z+2, r1	; 0x02
     a64:	e1 e6       	ldi	r30, 0x61	; 97
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 e8       	ldi	r24, 0x80	; 128
     a6a:	80 83       	st	Z, r24
     a6c:	10 82       	st	Z, r1
     a6e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a72:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <dispatch>:
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	00 d0       	rcall	.+0      	; 0xa96 <dispatch+0x6>
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
     aa2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
     aa6:	06 96       	adiw	r24, 0x06	; 6
     aa8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <setjmp>
     aac:	89 2b       	or	r24, r25
     aae:	29 f0       	breq	.+10     	; 0xaba <dispatch+0x2a>
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <current+0x1>
     ac2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current>
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	06 96       	adiw	r24, 0x06	; 6
     acc:	0e 94 01 12 	call	0x2402	; 0x2402 <longjmp>

00000ad0 <schedule>:
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
     adc:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
     ae0:	30 97       	sbiw	r30, 0x00	; 0
     ae2:	f1 f0       	breq	.+60     	; 0xb20 <schedule+0x50>
     ae4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
     ae8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	c1 f0       	breq	.+48     	; 0xb20 <schedule+0x50>
     af0:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <activeStack>
     af4:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <activeStack+0x1>
     af8:	aa 81       	ldd	r26, Y+2	; 0x02
     afa:	bb 81       	ldd	r27, Y+3	; 0x03
     afc:	10 97       	sbiw	r26, 0x00	; 0
     afe:	a9 f0       	breq	.+42     	; 0xb2a <schedule+0x5a>
     b00:	46 81       	ldd	r20, Z+6	; 0x06
     b02:	57 81       	ldd	r21, Z+7	; 0x07
     b04:	60 85       	ldd	r22, Z+8	; 0x08
     b06:	71 85       	ldd	r23, Z+9	; 0x09
     b08:	16 96       	adiw	r26, 0x06	; 6
     b0a:	0d 91       	ld	r16, X+
     b0c:	1d 91       	ld	r17, X+
     b0e:	2d 91       	ld	r18, X+
     b10:	3c 91       	ld	r19, X
     b12:	19 97       	sbiw	r26, 0x09	; 9
     b14:	40 1b       	sub	r20, r16
     b16:	51 0b       	sbc	r21, r17
     b18:	62 0b       	sbc	r22, r18
     b1a:	73 0b       	sbc	r23, r19
     b1c:	77 fd       	sbrc	r23, 7
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <schedule+0x5a>
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 81       	ld	r18, Z
     b2e:	31 81       	ldd	r19, Z+1	; 0x01
     b30:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
     b34:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
     b38:	d1 83       	std	Z+1, r29	; 0x01
     b3a:	c0 83       	st	Z, r28
     b3c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
     b40:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	0c 94 48 05 	jmp	0xa90	; 0xa90 <dispatch>

00000b50 <dequeue.part.0>:
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b56:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b5a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	83 bf       	out	0x33, r24	; 51
     b62:	88 95       	sleep
     b64:	fd cf       	rjmp	.-6      	; 0xb60 <dequeue.part.0+0x10>

00000b66 <__vector_1>:
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     b8c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     b90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b98:	c9 01       	movw	r24, r18
     b9a:	03 2e       	mov	r0, r19
     b9c:	00 0c       	add	r0, r0
     b9e:	aa 0b       	sbc	r26, r26
     ba0:	bb 0b       	sbc	r27, r27
     ba2:	dc 01       	movw	r26, r24
     ba4:	99 27       	eor	r25, r25
     ba6:	88 27       	eor	r24, r24
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	84 2b       	or	r24, r20
     bae:	95 2b       	or	r25, r21
     bb0:	a6 2b       	or	r26, r22
     bb2:	b7 2b       	or	r27, r23
     bb4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     bb8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     bbc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     bc0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     bc4:	b0 9b       	sbis	0x16, 0	; 22
     bc6:	1b c0       	rjmp	.+54     	; 0xbfe <__vector_1+0x98>
     bc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bd0:	c9 01       	movw	r24, r18
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	09 2e       	mov	r0, r25
     bd6:	00 0c       	add	r0, r0
     bd8:	aa 0b       	sbc	r26, r26
     bda:	bb 0b       	sbc	r27, r27
     bdc:	dc 01       	movw	r26, r24
     bde:	99 27       	eor	r25, r25
     be0:	88 27       	eor	r24, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	84 2b       	or	r24, r20
     be8:	95 2b       	or	r25, r21
     bea:	a6 2b       	or	r26, r22
     bec:	b7 2b       	or	r27, r23
     bee:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     bf2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     bf6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     bfa:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     bfe:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable>
     c02:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1>
     c06:	30 97       	sbiw	r30, 0x00	; 0
     c08:	39 f0       	breq	.+14     	; 0xc18 <__vector_1+0xb2>
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable>
     c12:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1>
     c16:	09 95       	icall
     c18:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
     c1c:	ff 91       	pop	r31
     c1e:	ef 91       	pop	r30
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	7f 91       	pop	r23
     c2a:	6f 91       	pop	r22
     c2c:	5f 91       	pop	r21
     c2e:	4f 91       	pop	r20
     c30:	3f 91       	pop	r19
     c32:	2f 91       	pop	r18
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_2>:
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
     c60:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     c64:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     c68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c70:	c9 01       	movw	r24, r18
     c72:	03 2e       	mov	r0, r19
     c74:	00 0c       	add	r0, r0
     c76:	aa 0b       	sbc	r26, r26
     c78:	bb 0b       	sbc	r27, r27
     c7a:	dc 01       	movw	r26, r24
     c7c:	99 27       	eor	r25, r25
     c7e:	88 27       	eor	r24, r24
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	84 2b       	or	r24, r20
     c86:	95 2b       	or	r25, r21
     c88:	a6 2b       	or	r26, r22
     c8a:	b7 2b       	or	r27, r23
     c8c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     c90:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     c94:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     c98:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     c9c:	b0 9b       	sbis	0x16, 0	; 22
     c9e:	1b c0       	rjmp	.+54     	; 0xcd6 <__vector_2+0x98>
     ca0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ca4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca8:	c9 01       	movw	r24, r18
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	09 2e       	mov	r0, r25
     cae:	00 0c       	add	r0, r0
     cb0:	aa 0b       	sbc	r26, r26
     cb2:	bb 0b       	sbc	r27, r27
     cb4:	dc 01       	movw	r26, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	88 27       	eor	r24, r24
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	84 2b       	or	r24, r20
     cc0:	95 2b       	or	r25, r21
     cc2:	a6 2b       	or	r26, r22
     cc4:	b7 2b       	or	r27, r23
     cc6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     cca:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     cce:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     cd2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     cd6:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x2>
     cda:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x3>
     cde:	30 97       	sbiw	r30, 0x00	; 0
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <__vector_2+0xb2>
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x2>
     cea:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x3>
     cee:	09 95       	icall
     cf0:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__vector_3>:
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	ef 93       	push	r30
     d36:	ff 93       	push	r31
     d38:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     d3c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     d40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d48:	c9 01       	movw	r24, r18
     d4a:	03 2e       	mov	r0, r19
     d4c:	00 0c       	add	r0, r0
     d4e:	aa 0b       	sbc	r26, r26
     d50:	bb 0b       	sbc	r27, r27
     d52:	dc 01       	movw	r26, r24
     d54:	99 27       	eor	r25, r25
     d56:	88 27       	eor	r24, r24
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	84 2b       	or	r24, r20
     d5e:	95 2b       	or	r25, r21
     d60:	a6 2b       	or	r26, r22
     d62:	b7 2b       	or	r27, r23
     d64:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     d68:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     d6c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     d70:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     d74:	b0 9b       	sbis	0x16, 0	; 22
     d76:	1b c0       	rjmp	.+54     	; 0xdae <__vector_3+0x98>
     d78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d80:	c9 01       	movw	r24, r18
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	09 2e       	mov	r0, r25
     d86:	00 0c       	add	r0, r0
     d88:	aa 0b       	sbc	r26, r26
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	dc 01       	movw	r26, r24
     d8e:	99 27       	eor	r25, r25
     d90:	88 27       	eor	r24, r24
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	84 2b       	or	r24, r20
     d98:	95 2b       	or	r25, r21
     d9a:	a6 2b       	or	r26, r22
     d9c:	b7 2b       	or	r27, r23
     d9e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     da2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     da6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     daa:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     dae:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x4>
     db2:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x5>
     db6:	30 97       	sbiw	r30, 0x00	; 0
     db8:	39 f0       	breq	.+14     	; 0xdc8 <__vector_3+0xb2>
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x4>
     dc2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x5>
     dc6:	09 95       	icall
     dc8:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	4f 91       	pop	r20
     de0:	3f 91       	pop	r19
     de2:	2f 91       	pop	r18
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_4>:
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
     e10:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     e14:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     e18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e20:	c9 01       	movw	r24, r18
     e22:	03 2e       	mov	r0, r19
     e24:	00 0c       	add	r0, r0
     e26:	aa 0b       	sbc	r26, r26
     e28:	bb 0b       	sbc	r27, r27
     e2a:	dc 01       	movw	r26, r24
     e2c:	99 27       	eor	r25, r25
     e2e:	88 27       	eor	r24, r24
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	84 2b       	or	r24, r20
     e36:	95 2b       	or	r25, r21
     e38:	a6 2b       	or	r26, r22
     e3a:	b7 2b       	or	r27, r23
     e3c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e40:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e44:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e48:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e4c:	b0 9b       	sbis	0x16, 0	; 22
     e4e:	1b c0       	rjmp	.+54     	; 0xe86 <__vector_4+0x98>
     e50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e58:	c9 01       	movw	r24, r18
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	09 2e       	mov	r0, r25
     e5e:	00 0c       	add	r0, r0
     e60:	aa 0b       	sbc	r26, r26
     e62:	bb 0b       	sbc	r27, r27
     e64:	dc 01       	movw	r26, r24
     e66:	99 27       	eor	r25, r25
     e68:	88 27       	eor	r24, r24
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	84 2b       	or	r24, r20
     e70:	95 2b       	or	r25, r21
     e72:	a6 2b       	or	r26, r22
     e74:	b7 2b       	or	r27, r23
     e76:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e7a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e7e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e82:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e86:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x6>
     e8a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x7>
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	39 f0       	breq	.+14     	; 0xea0 <__vector_4+0xb2>
     e92:	63 e0       	ldi	r22, 0x03	; 3
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x6>
     e9a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x7>
     e9e:	09 95       	icall
     ea0:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_5>:
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
     ee8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     eec:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     ef0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ef4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ef8:	c9 01       	movw	r24, r18
     efa:	03 2e       	mov	r0, r19
     efc:	00 0c       	add	r0, r0
     efe:	aa 0b       	sbc	r26, r26
     f00:	bb 0b       	sbc	r27, r27
     f02:	dc 01       	movw	r26, r24
     f04:	99 27       	eor	r25, r25
     f06:	88 27       	eor	r24, r24
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	84 2b       	or	r24, r20
     f0e:	95 2b       	or	r25, r21
     f10:	a6 2b       	or	r26, r22
     f12:	b7 2b       	or	r27, r23
     f14:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f18:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f1c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f20:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f24:	b0 9b       	sbis	0x16, 0	; 22
     f26:	1b c0       	rjmp	.+54     	; 0xf5e <__vector_5+0x98>
     f28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f30:	c9 01       	movw	r24, r18
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	09 2e       	mov	r0, r25
     f36:	00 0c       	add	r0, r0
     f38:	aa 0b       	sbc	r26, r26
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	dc 01       	movw	r26, r24
     f3e:	99 27       	eor	r25, r25
     f40:	88 27       	eor	r24, r24
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	84 2b       	or	r24, r20
     f48:	95 2b       	or	r25, r21
     f4a:	a6 2b       	or	r26, r22
     f4c:	b7 2b       	or	r27, r23
     f4e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f52:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f56:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f5a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f5e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x8>
     f62:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x9>
     f66:	30 97       	sbiw	r30, 0x00	; 0
     f68:	39 f0       	breq	.+14     	; 0xf78 <__vector_5+0xb2>
     f6a:	64 e0       	ldi	r22, 0x04	; 4
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x8>
     f72:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x9>
     f76:	09 95       	icall
     f78:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_10>:
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
     fc0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     fc4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     fc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fd0:	c9 01       	movw	r24, r18
     fd2:	03 2e       	mov	r0, r19
     fd4:	00 0c       	add	r0, r0
     fd6:	aa 0b       	sbc	r26, r26
     fd8:	bb 0b       	sbc	r27, r27
     fda:	dc 01       	movw	r26, r24
     fdc:	99 27       	eor	r25, r25
     fde:	88 27       	eor	r24, r24
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	84 2b       	or	r24, r20
     fe6:	95 2b       	or	r25, r21
     fe8:	a6 2b       	or	r26, r22
     fea:	b7 2b       	or	r27, r23
     fec:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     ff0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     ff4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     ff8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     ffc:	b0 9b       	sbis	0x16, 0	; 22
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <__vector_10+0x98>
    1000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1008:	c9 01       	movw	r24, r18
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	09 2e       	mov	r0, r25
    100e:	00 0c       	add	r0, r0
    1010:	aa 0b       	sbc	r26, r26
    1012:	bb 0b       	sbc	r27, r27
    1014:	dc 01       	movw	r26, r24
    1016:	99 27       	eor	r25, r25
    1018:	88 27       	eor	r24, r24
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	84 2b       	or	r24, r20
    1020:	95 2b       	or	r25, r21
    1022:	a6 2b       	or	r26, r22
    1024:	b7 2b       	or	r27, r23
    1026:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    102a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    102e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1032:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1036:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xa>
    103a:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xb>
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	39 f0       	breq	.+14     	; 0x1050 <__vector_10+0xb2>
    1042:	65 e0       	ldi	r22, 0x05	; 5
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xa>
    104a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xb>
    104e:	09 95       	icall
    1050:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    1054:	ff 91       	pop	r31
    1056:	ef 91       	pop	r30
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__vector_11>:
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
    1098:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    109c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    10a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a8:	c9 01       	movw	r24, r18
    10aa:	03 2e       	mov	r0, r19
    10ac:	00 0c       	add	r0, r0
    10ae:	aa 0b       	sbc	r26, r26
    10b0:	bb 0b       	sbc	r27, r27
    10b2:	dc 01       	movw	r26, r24
    10b4:	99 27       	eor	r25, r25
    10b6:	88 27       	eor	r24, r24
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	84 2b       	or	r24, r20
    10be:	95 2b       	or	r25, r21
    10c0:	a6 2b       	or	r26, r22
    10c2:	b7 2b       	or	r27, r23
    10c4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    10c8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    10cc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    10d0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    10d4:	b0 9b       	sbis	0x16, 0	; 22
    10d6:	1b c0       	rjmp	.+54     	; 0x110e <__vector_11+0x98>
    10d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10e0:	c9 01       	movw	r24, r18
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	09 2e       	mov	r0, r25
    10e6:	00 0c       	add	r0, r0
    10e8:	aa 0b       	sbc	r26, r26
    10ea:	bb 0b       	sbc	r27, r27
    10ec:	dc 01       	movw	r26, r24
    10ee:	99 27       	eor	r25, r25
    10f0:	88 27       	eor	r24, r24
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	84 2b       	or	r24, r20
    10f8:	95 2b       	or	r25, r21
    10fa:	a6 2b       	or	r26, r22
    10fc:	b7 2b       	or	r27, r23
    10fe:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1102:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1106:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    110a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    110e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xc>
    1112:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xd>
    1116:	30 97       	sbiw	r30, 0x00	; 0
    1118:	39 f0       	breq	.+14     	; 0x1128 <__vector_11+0xb2>
    111a:	66 e0       	ldi	r22, 0x06	; 6
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xc>
    1122:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xd>
    1126:	09 95       	icall
    1128:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_12>:
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	2f 93       	push	r18
    115a:	3f 93       	push	r19
    115c:	4f 93       	push	r20
    115e:	5f 93       	push	r21
    1160:	6f 93       	push	r22
    1162:	7f 93       	push	r23
    1164:	8f 93       	push	r24
    1166:	9f 93       	push	r25
    1168:	af 93       	push	r26
    116a:	bf 93       	push	r27
    116c:	ef 93       	push	r30
    116e:	ff 93       	push	r31
    1170:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1174:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1178:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    117c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1180:	c9 01       	movw	r24, r18
    1182:	03 2e       	mov	r0, r19
    1184:	00 0c       	add	r0, r0
    1186:	aa 0b       	sbc	r26, r26
    1188:	bb 0b       	sbc	r27, r27
    118a:	dc 01       	movw	r26, r24
    118c:	99 27       	eor	r25, r25
    118e:	88 27       	eor	r24, r24
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	84 2b       	or	r24, r20
    1196:	95 2b       	or	r25, r21
    1198:	a6 2b       	or	r26, r22
    119a:	b7 2b       	or	r27, r23
    119c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    11a0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    11a4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    11a8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    11ac:	b0 9b       	sbis	0x16, 0	; 22
    11ae:	1b c0       	rjmp	.+54     	; 0x11e6 <__vector_12+0x98>
    11b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b8:	c9 01       	movw	r24, r18
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	09 2e       	mov	r0, r25
    11be:	00 0c       	add	r0, r0
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	bb 0b       	sbc	r27, r27
    11c4:	dc 01       	movw	r26, r24
    11c6:	99 27       	eor	r25, r25
    11c8:	88 27       	eor	r24, r24
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	84 2b       	or	r24, r20
    11d0:	95 2b       	or	r25, r21
    11d2:	a6 2b       	or	r26, r22
    11d4:	b7 2b       	or	r27, r23
    11d6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    11da:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    11de:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    11e2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    11e6:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0xe>
    11ea:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0xf>
    11ee:	30 97       	sbiw	r30, 0x00	; 0
    11f0:	39 f0       	breq	.+14     	; 0x1200 <__vector_12+0xb2>
    11f2:	67 e0       	ldi	r22, 0x07	; 7
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0xe>
    11fa:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0xf>
    11fe:	09 95       	icall
    1200:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    1204:	ff 91       	pop	r31
    1206:	ef 91       	pop	r30
    1208:	bf 91       	pop	r27
    120a:	af 91       	pop	r26
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	7f 91       	pop	r23
    1212:	6f 91       	pop	r22
    1214:	5f 91       	pop	r21
    1216:	4f 91       	pop	r20
    1218:	3f 91       	pop	r19
    121a:	2f 91       	pop	r18
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	0f 90       	pop	r0
    1222:	1f 90       	pop	r1
    1224:	18 95       	reti

00001226 <__vector_13>:
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	0f 92       	push	r0
    122e:	11 24       	eor	r1, r1
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
    1248:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    124c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1250:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1254:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1258:	c9 01       	movw	r24, r18
    125a:	03 2e       	mov	r0, r19
    125c:	00 0c       	add	r0, r0
    125e:	aa 0b       	sbc	r26, r26
    1260:	bb 0b       	sbc	r27, r27
    1262:	dc 01       	movw	r26, r24
    1264:	99 27       	eor	r25, r25
    1266:	88 27       	eor	r24, r24
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	84 2b       	or	r24, r20
    126e:	95 2b       	or	r25, r21
    1270:	a6 2b       	or	r26, r22
    1272:	b7 2b       	or	r27, r23
    1274:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1278:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    127c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1280:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1284:	b0 9b       	sbis	0x16, 0	; 22
    1286:	1b c0       	rjmp	.+54     	; 0x12be <__vector_13+0x98>
    1288:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    128c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1290:	c9 01       	movw	r24, r18
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	09 2e       	mov	r0, r25
    1296:	00 0c       	add	r0, r0
    1298:	aa 0b       	sbc	r26, r26
    129a:	bb 0b       	sbc	r27, r27
    129c:	dc 01       	movw	r26, r24
    129e:	99 27       	eor	r25, r25
    12a0:	88 27       	eor	r24, r24
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	84 2b       	or	r24, r20
    12a8:	95 2b       	or	r25, r21
    12aa:	a6 2b       	or	r26, r22
    12ac:	b7 2b       	or	r27, r23
    12ae:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    12b2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    12b6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    12ba:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    12be:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x10>
    12c2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x11>
    12c6:	30 97       	sbiw	r30, 0x00	; 0
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <__vector_13+0xb2>
    12ca:	68 e0       	ldi	r22, 0x08	; 8
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x10>
    12d2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x11>
    12d6:	09 95       	icall
    12d8:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    12dc:	ff 91       	pop	r31
    12de:	ef 91       	pop	r30
    12e0:	bf 91       	pop	r27
    12e2:	af 91       	pop	r26
    12e4:	9f 91       	pop	r25
    12e6:	8f 91       	pop	r24
    12e8:	7f 91       	pop	r23
    12ea:	6f 91       	pop	r22
    12ec:	5f 91       	pop	r21
    12ee:	4f 91       	pop	r20
    12f0:	3f 91       	pop	r19
    12f2:	2f 91       	pop	r18
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0f 90       	pop	r0
    12fa:	1f 90       	pop	r1
    12fc:	18 95       	reti

000012fe <__vector_14>:
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
    1320:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1324:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1328:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    132c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1330:	c9 01       	movw	r24, r18
    1332:	03 2e       	mov	r0, r19
    1334:	00 0c       	add	r0, r0
    1336:	aa 0b       	sbc	r26, r26
    1338:	bb 0b       	sbc	r27, r27
    133a:	dc 01       	movw	r26, r24
    133c:	99 27       	eor	r25, r25
    133e:	88 27       	eor	r24, r24
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	84 2b       	or	r24, r20
    1346:	95 2b       	or	r25, r21
    1348:	a6 2b       	or	r26, r22
    134a:	b7 2b       	or	r27, r23
    134c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1350:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1354:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1358:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    135c:	b0 9b       	sbis	0x16, 0	; 22
    135e:	1b c0       	rjmp	.+54     	; 0x1396 <__vector_14+0x98>
    1360:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1364:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1368:	c9 01       	movw	r24, r18
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	09 2e       	mov	r0, r25
    136e:	00 0c       	add	r0, r0
    1370:	aa 0b       	sbc	r26, r26
    1372:	bb 0b       	sbc	r27, r27
    1374:	dc 01       	movw	r26, r24
    1376:	99 27       	eor	r25, r25
    1378:	88 27       	eor	r24, r24
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	84 2b       	or	r24, r20
    1380:	95 2b       	or	r25, r21
    1382:	a6 2b       	or	r26, r22
    1384:	b7 2b       	or	r27, r23
    1386:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    138a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    138e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1392:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1396:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x12>
    139a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x13>
    139e:	30 97       	sbiw	r30, 0x00	; 0
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <__vector_14+0xb2>
    13a2:	69 e0       	ldi	r22, 0x09	; 9
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x12>
    13aa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x13>
    13ae:	09 95       	icall
    13b0:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <__vector_15>:
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
    13f8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    13fc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1400:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1404:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1408:	c9 01       	movw	r24, r18
    140a:	03 2e       	mov	r0, r19
    140c:	00 0c       	add	r0, r0
    140e:	aa 0b       	sbc	r26, r26
    1410:	bb 0b       	sbc	r27, r27
    1412:	dc 01       	movw	r26, r24
    1414:	99 27       	eor	r25, r25
    1416:	88 27       	eor	r24, r24
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	84 2b       	or	r24, r20
    141e:	95 2b       	or	r25, r21
    1420:	a6 2b       	or	r26, r22
    1422:	b7 2b       	or	r27, r23
    1424:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1428:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    142c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1430:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1434:	b0 9b       	sbis	0x16, 0	; 22
    1436:	1b c0       	rjmp	.+54     	; 0x146e <__vector_15+0x98>
    1438:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    143c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1440:	c9 01       	movw	r24, r18
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	09 2e       	mov	r0, r25
    1446:	00 0c       	add	r0, r0
    1448:	aa 0b       	sbc	r26, r26
    144a:	bb 0b       	sbc	r27, r27
    144c:	dc 01       	movw	r26, r24
    144e:	99 27       	eor	r25, r25
    1450:	88 27       	eor	r24, r24
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	84 2b       	or	r24, r20
    1458:	95 2b       	or	r25, r21
    145a:	a6 2b       	or	r26, r22
    145c:	b7 2b       	or	r27, r23
    145e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1462:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1466:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    146a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    146e:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x14>
    1472:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x15>
    1476:	30 97       	sbiw	r30, 0x00	; 0
    1478:	39 f0       	breq	.+14     	; 0x1488 <__vector_15+0xb2>
    147a:	6a e0       	ldi	r22, 0x0A	; 10
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x14>
    1482:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x15>
    1486:	09 95       	icall
    1488:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_16>:
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    14d4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    14d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14e0:	c9 01       	movw	r24, r18
    14e2:	03 2e       	mov	r0, r19
    14e4:	00 0c       	add	r0, r0
    14e6:	aa 0b       	sbc	r26, r26
    14e8:	bb 0b       	sbc	r27, r27
    14ea:	dc 01       	movw	r26, r24
    14ec:	99 27       	eor	r25, r25
    14ee:	88 27       	eor	r24, r24
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	84 2b       	or	r24, r20
    14f6:	95 2b       	or	r25, r21
    14f8:	a6 2b       	or	r26, r22
    14fa:	b7 2b       	or	r27, r23
    14fc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1500:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1504:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1508:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    150c:	b0 9b       	sbis	0x16, 0	; 22
    150e:	1b c0       	rjmp	.+54     	; 0x1546 <__vector_16+0x98>
    1510:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1514:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1518:	c9 01       	movw	r24, r18
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	09 2e       	mov	r0, r25
    151e:	00 0c       	add	r0, r0
    1520:	aa 0b       	sbc	r26, r26
    1522:	bb 0b       	sbc	r27, r27
    1524:	dc 01       	movw	r26, r24
    1526:	99 27       	eor	r25, r25
    1528:	88 27       	eor	r24, r24
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	84 2b       	or	r24, r20
    1530:	95 2b       	or	r25, r21
    1532:	a6 2b       	or	r26, r22
    1534:	b7 2b       	or	r27, r23
    1536:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    153a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    153e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1542:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1546:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x16>
    154a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x17>
    154e:	30 97       	sbiw	r30, 0x00	; 0
    1550:	39 f0       	breq	.+14     	; 0x1560 <__vector_16+0xb2>
    1552:	6b e0       	ldi	r22, 0x0B	; 11
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x16>
    155a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x17>
    155e:	09 95       	icall
    1560:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_17>:
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	2f 93       	push	r18
    1592:	3f 93       	push	r19
    1594:	4f 93       	push	r20
    1596:	5f 93       	push	r21
    1598:	6f 93       	push	r22
    159a:	7f 93       	push	r23
    159c:	8f 93       	push	r24
    159e:	9f 93       	push	r25
    15a0:	af 93       	push	r26
    15a2:	bf 93       	push	r27
    15a4:	ef 93       	push	r30
    15a6:	ff 93       	push	r31
    15a8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    15ac:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    15b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15b8:	c9 01       	movw	r24, r18
    15ba:	03 2e       	mov	r0, r19
    15bc:	00 0c       	add	r0, r0
    15be:	aa 0b       	sbc	r26, r26
    15c0:	bb 0b       	sbc	r27, r27
    15c2:	dc 01       	movw	r26, r24
    15c4:	99 27       	eor	r25, r25
    15c6:	88 27       	eor	r24, r24
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	84 2b       	or	r24, r20
    15ce:	95 2b       	or	r25, r21
    15d0:	a6 2b       	or	r26, r22
    15d2:	b7 2b       	or	r27, r23
    15d4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    15d8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    15dc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    15e0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    15e4:	b0 9b       	sbis	0x16, 0	; 22
    15e6:	1b c0       	rjmp	.+54     	; 0x161e <__vector_17+0x98>
    15e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15f0:	c9 01       	movw	r24, r18
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	09 2e       	mov	r0, r25
    15f6:	00 0c       	add	r0, r0
    15f8:	aa 0b       	sbc	r26, r26
    15fa:	bb 0b       	sbc	r27, r27
    15fc:	dc 01       	movw	r26, r24
    15fe:	99 27       	eor	r25, r25
    1600:	88 27       	eor	r24, r24
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	84 2b       	or	r24, r20
    1608:	95 2b       	or	r25, r21
    160a:	a6 2b       	or	r26, r22
    160c:	b7 2b       	or	r27, r23
    160e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1612:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1616:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    161a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    161e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x18>
    1622:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x19>
    1626:	30 97       	sbiw	r30, 0x00	; 0
    1628:	39 f0       	breq	.+14     	; 0x1638 <__vector_17+0xb2>
    162a:	6c e0       	ldi	r22, 0x0C	; 12
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x18>
    1632:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x19>
    1636:	09 95       	icall
    1638:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__vector_18>:
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
    1680:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1684:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1688:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    168c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1690:	c9 01       	movw	r24, r18
    1692:	03 2e       	mov	r0, r19
    1694:	00 0c       	add	r0, r0
    1696:	aa 0b       	sbc	r26, r26
    1698:	bb 0b       	sbc	r27, r27
    169a:	dc 01       	movw	r26, r24
    169c:	99 27       	eor	r25, r25
    169e:	88 27       	eor	r24, r24
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	84 2b       	or	r24, r20
    16a6:	95 2b       	or	r25, r21
    16a8:	a6 2b       	or	r26, r22
    16aa:	b7 2b       	or	r27, r23
    16ac:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    16b0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    16b4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    16b8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    16bc:	b0 9b       	sbis	0x16, 0	; 22
    16be:	1b c0       	rjmp	.+54     	; 0x16f6 <__vector_18+0x98>
    16c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16c8:	c9 01       	movw	r24, r18
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	09 2e       	mov	r0, r25
    16ce:	00 0c       	add	r0, r0
    16d0:	aa 0b       	sbc	r26, r26
    16d2:	bb 0b       	sbc	r27, r27
    16d4:	dc 01       	movw	r26, r24
    16d6:	99 27       	eor	r25, r25
    16d8:	88 27       	eor	r24, r24
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	84 2b       	or	r24, r20
    16e0:	95 2b       	or	r25, r21
    16e2:	a6 2b       	or	r26, r22
    16e4:	b7 2b       	or	r27, r23
    16e6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    16ea:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    16ee:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    16f2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    16f6:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1a>
    16fa:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1b>
    16fe:	30 97       	sbiw	r30, 0x00	; 0
    1700:	39 f0       	breq	.+14     	; 0x1710 <__vector_18+0xb2>
    1702:	6d e0       	ldi	r22, 0x0D	; 13
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1a>
    170a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1b>
    170e:	09 95       	icall
    1710:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <__vector_19>:
    1736:	1f 92       	push	r1
    1738:	0f 92       	push	r0
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	0f 92       	push	r0
    173e:	11 24       	eor	r1, r1
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
    1758:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    175c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1760:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1764:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1768:	c9 01       	movw	r24, r18
    176a:	03 2e       	mov	r0, r19
    176c:	00 0c       	add	r0, r0
    176e:	aa 0b       	sbc	r26, r26
    1770:	bb 0b       	sbc	r27, r27
    1772:	dc 01       	movw	r26, r24
    1774:	99 27       	eor	r25, r25
    1776:	88 27       	eor	r24, r24
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	84 2b       	or	r24, r20
    177e:	95 2b       	or	r25, r21
    1780:	a6 2b       	or	r26, r22
    1782:	b7 2b       	or	r27, r23
    1784:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1788:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    178c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1790:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1794:	b0 9b       	sbis	0x16, 0	; 22
    1796:	1b c0       	rjmp	.+54     	; 0x17ce <__vector_19+0x98>
    1798:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    179c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17a0:	c9 01       	movw	r24, r18
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	09 2e       	mov	r0, r25
    17a6:	00 0c       	add	r0, r0
    17a8:	aa 0b       	sbc	r26, r26
    17aa:	bb 0b       	sbc	r27, r27
    17ac:	dc 01       	movw	r26, r24
    17ae:	99 27       	eor	r25, r25
    17b0:	88 27       	eor	r24, r24
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	84 2b       	or	r24, r20
    17b8:	95 2b       	or	r25, r21
    17ba:	a6 2b       	or	r26, r22
    17bc:	b7 2b       	or	r27, r23
    17be:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    17c2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    17c6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    17ca:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    17ce:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1c>
    17d2:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1d>
    17d6:	30 97       	sbiw	r30, 0x00	; 0
    17d8:	39 f0       	breq	.+14     	; 0x17e8 <__vector_19+0xb2>
    17da:	6e e0       	ldi	r22, 0x0E	; 14
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1c>
    17e2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1d>
    17e6:	09 95       	icall
    17e8:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_20>:
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
    1830:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1834:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1838:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    183c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1840:	c9 01       	movw	r24, r18
    1842:	03 2e       	mov	r0, r19
    1844:	00 0c       	add	r0, r0
    1846:	aa 0b       	sbc	r26, r26
    1848:	bb 0b       	sbc	r27, r27
    184a:	dc 01       	movw	r26, r24
    184c:	99 27       	eor	r25, r25
    184e:	88 27       	eor	r24, r24
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	84 2b       	or	r24, r20
    1856:	95 2b       	or	r25, r21
    1858:	a6 2b       	or	r26, r22
    185a:	b7 2b       	or	r27, r23
    185c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1860:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1864:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1868:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    186c:	b0 9b       	sbis	0x16, 0	; 22
    186e:	1b c0       	rjmp	.+54     	; 0x18a6 <__vector_20+0x98>
    1870:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1874:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1878:	c9 01       	movw	r24, r18
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	09 2e       	mov	r0, r25
    187e:	00 0c       	add	r0, r0
    1880:	aa 0b       	sbc	r26, r26
    1882:	bb 0b       	sbc	r27, r27
    1884:	dc 01       	movw	r26, r24
    1886:	99 27       	eor	r25, r25
    1888:	88 27       	eor	r24, r24
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	84 2b       	or	r24, r20
    1890:	95 2b       	or	r25, r21
    1892:	a6 2b       	or	r26, r22
    1894:	b7 2b       	or	r27, r23
    1896:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    189a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    189e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    18a2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    18a6:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x1e>
    18aa:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x1f>
    18ae:	30 97       	sbiw	r30, 0x00	; 0
    18b0:	39 f0       	breq	.+14     	; 0x18c0 <__vector_20+0xb2>
    18b2:	6f e0       	ldi	r22, 0x0F	; 15
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x1e>
    18ba:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x1f>
    18be:	09 95       	icall
    18c0:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <__vector_21>:
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	11 24       	eor	r1, r1
    18f0:	2f 93       	push	r18
    18f2:	3f 93       	push	r19
    18f4:	4f 93       	push	r20
    18f6:	5f 93       	push	r21
    18f8:	6f 93       	push	r22
    18fa:	7f 93       	push	r23
    18fc:	8f 93       	push	r24
    18fe:	9f 93       	push	r25
    1900:	af 93       	push	r26
    1902:	bf 93       	push	r27
    1904:	ef 93       	push	r30
    1906:	ff 93       	push	r31
    1908:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    190c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1910:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1914:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1918:	c9 01       	movw	r24, r18
    191a:	03 2e       	mov	r0, r19
    191c:	00 0c       	add	r0, r0
    191e:	aa 0b       	sbc	r26, r26
    1920:	bb 0b       	sbc	r27, r27
    1922:	dc 01       	movw	r26, r24
    1924:	99 27       	eor	r25, r25
    1926:	88 27       	eor	r24, r24
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	84 2b       	or	r24, r20
    192e:	95 2b       	or	r25, r21
    1930:	a6 2b       	or	r26, r22
    1932:	b7 2b       	or	r27, r23
    1934:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1938:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    193c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1940:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1944:	b0 9b       	sbis	0x16, 0	; 22
    1946:	1b c0       	rjmp	.+54     	; 0x197e <__vector_21+0x98>
    1948:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    194c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1950:	c9 01       	movw	r24, r18
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	09 2e       	mov	r0, r25
    1956:	00 0c       	add	r0, r0
    1958:	aa 0b       	sbc	r26, r26
    195a:	bb 0b       	sbc	r27, r27
    195c:	dc 01       	movw	r26, r24
    195e:	99 27       	eor	r25, r25
    1960:	88 27       	eor	r24, r24
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	84 2b       	or	r24, r20
    1968:	95 2b       	or	r25, r21
    196a:	a6 2b       	or	r26, r22
    196c:	b7 2b       	or	r27, r23
    196e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1972:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1976:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    197a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    197e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x20>
    1982:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x21>
    1986:	30 97       	sbiw	r30, 0x00	; 0
    1988:	39 f0       	breq	.+14     	; 0x1998 <__vector_21+0xb2>
    198a:	60 e1       	ldi	r22, 0x10	; 16
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x20>
    1992:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x21>
    1996:	09 95       	icall
    1998:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	bf 91       	pop	r27
    19a2:	af 91       	pop	r26
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	7f 91       	pop	r23
    19aa:	6f 91       	pop	r22
    19ac:	5f 91       	pop	r21
    19ae:	4f 91       	pop	r20
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_22>:
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	af 93       	push	r26
    19da:	bf 93       	push	r27
    19dc:	ef 93       	push	r30
    19de:	ff 93       	push	r31
    19e0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    19e4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    19e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f0:	c9 01       	movw	r24, r18
    19f2:	03 2e       	mov	r0, r19
    19f4:	00 0c       	add	r0, r0
    19f6:	aa 0b       	sbc	r26, r26
    19f8:	bb 0b       	sbc	r27, r27
    19fa:	dc 01       	movw	r26, r24
    19fc:	99 27       	eor	r25, r25
    19fe:	88 27       	eor	r24, r24
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	84 2b       	or	r24, r20
    1a06:	95 2b       	or	r25, r21
    1a08:	a6 2b       	or	r26, r22
    1a0a:	b7 2b       	or	r27, r23
    1a0c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a10:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a14:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a18:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a1c:	b0 9b       	sbis	0x16, 0	; 22
    1a1e:	1b c0       	rjmp	.+54     	; 0x1a56 <__vector_22+0x98>
    1a20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a28:	c9 01       	movw	r24, r18
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	09 2e       	mov	r0, r25
    1a2e:	00 0c       	add	r0, r0
    1a30:	aa 0b       	sbc	r26, r26
    1a32:	bb 0b       	sbc	r27, r27
    1a34:	dc 01       	movw	r26, r24
    1a36:	99 27       	eor	r25, r25
    1a38:	88 27       	eor	r24, r24
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	84 2b       	or	r24, r20
    1a40:	95 2b       	or	r25, r21
    1a42:	a6 2b       	or	r26, r22
    1a44:	b7 2b       	or	r27, r23
    1a46:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a4a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a4e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a52:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a56:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x22>
    1a5a:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x23>
    1a5e:	30 97       	sbiw	r30, 0x00	; 0
    1a60:	39 f0       	breq	.+14     	; 0x1a70 <__vector_22+0xb2>
    1a62:	61 e1       	ldi	r22, 0x11	; 17
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x22>
    1a6a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x23>
    1a6e:	09 95       	icall
    1a70:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_9>:
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	ef 93       	push	r30
    1ab2:	ff 93       	push	r31
    1ab4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1ab8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
    1ac2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
    1ac6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1aca:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1ace:	30 97       	sbiw	r30, 0x00	; 0
    1ad0:	39 f0       	breq	.+14     	; 0x1ae0 <__vector_9+0x4a>
    1ad2:	42 81       	ldd	r20, Z+2	; 0x02
    1ad4:	53 81       	ldd	r21, Z+3	; 0x03
    1ad6:	64 81       	ldd	r22, Z+4	; 0x04
    1ad8:	75 81       	ldd	r23, Z+5	; 0x05
    1ada:	86 17       	cp	r24, r22
    1adc:	97 07       	cpc	r25, r23
    1ade:	a1 f0       	breq	.+40     	; 0x1b08 <__vector_9+0x72>
    1ae0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ae4:	8d 7f       	andi	r24, 0xFD	; 253
    1ae6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	9f 91       	pop	r25
    1af0:	8f 91       	pop	r24
    1af2:	7f 91       	pop	r23
    1af4:	6f 91       	pop	r22
    1af6:	5f 91       	pop	r21
    1af8:	4f 91       	pop	r20
    1afa:	3f 91       	pop	r19
    1afc:	2f 91       	pop	r18
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	0f 90       	pop	r0
    1b04:	1f 90       	pop	r1
    1b06:	18 95       	reti
    1b08:	ca 01       	movw	r24, r20
    1b0a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b0e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b12:	42 1b       	sub	r20, r18
    1b14:	53 0b       	sbc	r21, r19
    1b16:	41 30       	cpi	r20, 0x01	; 1
    1b18:	51 05       	cpc	r21, r1
    1b1a:	51 f0       	breq	.+20     	; 0x1b30 <__vector_9+0x9a>
    1b1c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b20:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b24:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b28:	82 60       	ori	r24, 0x02	; 2
    1b2a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b2e:	dd cf       	rjmp	.-70     	; 0x1aea <__vector_9+0x54>
    1b30:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b34:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	f0 cf       	rjmp	.-32     	; 0x1b1c <__vector_9+0x86>

00001b3c <__vector_7>:
    1b3c:	1f 92       	push	r1
    1b3e:	0f 92       	push	r0
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	0f 92       	push	r0
    1b44:	11 24       	eor	r1, r1
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	4f 93       	push	r20
    1b60:	5f 93       	push	r21
    1b62:	6f 93       	push	r22
    1b64:	7f 93       	push	r23
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <__data_end>
    1b7a:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <__data_end+0x1>
    1b7e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b82:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b86:	b0 99       	sbic	0x16, 0	; 22
    1b88:	98 c0       	rjmp	.+304    	; 0x1cba <__vector_7+0x17e>
    1b8a:	47 01       	movw	r8, r14
    1b8c:	0f 2c       	mov	r0, r15
    1b8e:	00 0c       	add	r0, r0
    1b90:	aa 08       	sbc	r10, r10
    1b92:	bb 08       	sbc	r11, r11
    1b94:	54 01       	movw	r10, r8
    1b96:	99 24       	eor	r9, r9
    1b98:	88 24       	eor	r8, r8
    1b9a:	a0 e0       	ldi	r26, 0x00	; 0
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	88 2a       	or	r8, r24
    1ba0:	99 2a       	or	r9, r25
    1ba2:	aa 2a       	or	r10, r26
    1ba4:	bb 2a       	or	r11, r27
    1ba6:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <timerQ>
    1baa:	d0 91 5d 01 	lds	r29, 0x015D	; 0x80015d <timerQ+0x1>
    1bae:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgQ>
    1bb2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <msgQ+0x1>
    1bb6:	20 97       	sbiw	r28, 0x00	; 0
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <__vector_7+0x80>
    1bba:	3f c0       	rjmp	.+126    	; 0x1c3a <__vector_7+0xfe>
    1bbc:	4a 81       	ldd	r20, Y+2	; 0x02
    1bbe:	5b 81       	ldd	r21, Y+3	; 0x03
    1bc0:	6c 81       	ldd	r22, Y+4	; 0x04
    1bc2:	7d 81       	ldd	r23, Y+5	; 0x05
    1bc4:	8a 01       	movw	r16, r20
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	08 19       	sub	r16, r8
    1bca:	19 09       	sbc	r17, r9
    1bcc:	2a 09       	sbc	r18, r10
    1bce:	3b 09       	sbc	r19, r11
    1bd0:	10 16       	cp	r1, r16
    1bd2:	11 06       	cpc	r1, r17
    1bd4:	12 06       	cpc	r1, r18
    1bd6:	13 06       	cpc	r1, r19
    1bd8:	0c f4       	brge	.+2      	; 0x1bdc <__vector_7+0xa0>
    1bda:	40 c0       	rjmp	.+128    	; 0x1c5c <__vector_7+0x120>
    1bdc:	d8 80       	ld	r13, Y
    1bde:	c9 80       	ldd	r12, Y+1	; 0x01
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	b9 f1       	breq	.+110    	; 0x1c52 <__vector_7+0x116>
    1be4:	0e 81       	ldd	r16, Y+6	; 0x06
    1be6:	1f 81       	ldd	r17, Y+7	; 0x07
    1be8:	28 85       	ldd	r18, Y+8	; 0x08
    1bea:	39 85       	ldd	r19, Y+9	; 0x09
    1bec:	fc 01       	movw	r30, r24
    1bee:	46 81       	ldd	r20, Z+6	; 0x06
    1bf0:	57 81       	ldd	r21, Z+7	; 0x07
    1bf2:	60 85       	ldd	r22, Z+8	; 0x08
    1bf4:	71 85       	ldd	r23, Z+9	; 0x09
    1bf6:	04 17       	cp	r16, r20
    1bf8:	15 07       	cpc	r17, r21
    1bfa:	26 07       	cpc	r18, r22
    1bfc:	37 07       	cpc	r19, r23
    1bfe:	4c f1       	brlt	.+82     	; 0x1c52 <__vector_7+0x116>
    1c00:	dc 01       	movw	r26, r24
    1c02:	0a c0       	rjmp	.+20     	; 0x1c18 <__vector_7+0xdc>
    1c04:	46 81       	ldd	r20, Z+6	; 0x06
    1c06:	57 81       	ldd	r21, Z+7	; 0x07
    1c08:	60 85       	ldd	r22, Z+8	; 0x08
    1c0a:	71 85       	ldd	r23, Z+9	; 0x09
    1c0c:	04 17       	cp	r16, r20
    1c0e:	15 07       	cpc	r17, r21
    1c10:	26 07       	cpc	r18, r22
    1c12:	37 07       	cpc	r19, r23
    1c14:	dc f0       	brlt	.+54     	; 0x1c4c <__vector_7+0x110>
    1c16:	df 01       	movw	r26, r30
    1c18:	ed 91       	ld	r30, X+
    1c1a:	fc 91       	ld	r31, X
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	30 97       	sbiw	r30, 0x00	; 0
    1c20:	89 f7       	brne	.-30     	; 0x1c04 <__vector_7+0xc8>
    1c22:	19 82       	std	Y+1, r1	; 0x01
    1c24:	18 82       	st	Y, r1
    1c26:	cd 93       	st	X+, r28
    1c28:	dc 93       	st	X, r29
    1c2a:	38 2f       	mov	r19, r24
    1c2c:	29 2f       	mov	r18, r25
    1c2e:	cd 2d       	mov	r28, r13
    1c30:	dc 2d       	mov	r29, r12
    1c32:	83 2f       	mov	r24, r19
    1c34:	92 2f       	mov	r25, r18
    1c36:	20 97       	sbiw	r28, 0x00	; 0
    1c38:	09 f6       	brne	.-126    	; 0x1bbc <__vector_7+0x80>
    1c3a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <timerQ+0x1>
    1c3e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <timerQ>
    1c42:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    1c46:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    1c4a:	13 c0       	rjmp	.+38     	; 0x1c72 <__vector_7+0x136>
    1c4c:	f9 83       	std	Y+1, r31	; 0x01
    1c4e:	e8 83       	st	Y, r30
    1c50:	ea cf       	rjmp	.-44     	; 0x1c26 <__vector_7+0xea>
    1c52:	99 83       	std	Y+1, r25	; 0x01
    1c54:	88 83       	st	Y, r24
    1c56:	3c 2f       	mov	r19, r28
    1c58:	2d 2f       	mov	r18, r29
    1c5a:	e9 cf       	rjmp	.-46     	; 0x1c2e <__vector_7+0xf2>
    1c5c:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <timerQ+0x1>
    1c60:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <timerQ>
    1c64:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    1c68:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    1c6c:	e6 16       	cp	r14, r22
    1c6e:	f7 06       	cpc	r15, r23
    1c70:	d9 f1       	breq	.+118    	; 0x1ce8 <__vector_7+0x1ac>
    1c72:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c76:	8d 7f       	andi	r24, 0xFD	; 253
    1c78:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c7c:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	af 90       	pop	r10
    1cac:	9f 90       	pop	r9
    1cae:	8f 90       	pop	r8
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti
    1cba:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cbe:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cc2:	47 01       	movw	r8, r14
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	88 1a       	sub	r8, r24
    1cc8:	98 0a       	sbc	r9, r24
    1cca:	09 2c       	mov	r0, r9
    1ccc:	00 0c       	add	r0, r0
    1cce:	aa 08       	sbc	r10, r10
    1cd0:	bb 08       	sbc	r11, r11
    1cd2:	d4 01       	movw	r26, r8
    1cd4:	99 27       	eor	r25, r25
    1cd6:	88 27       	eor	r24, r24
    1cd8:	49 01       	movw	r8, r18
    1cda:	a1 2c       	mov	r10, r1
    1cdc:	b1 2c       	mov	r11, r1
    1cde:	88 2a       	or	r8, r24
    1ce0:	99 2a       	or	r9, r25
    1ce2:	aa 2a       	or	r10, r26
    1ce4:	bb 2a       	or	r11, r27
    1ce6:	5f cf       	rjmp	.-322    	; 0x1ba6 <__vector_7+0x6a>
    1ce8:	ca 01       	movw	r24, r20
    1cea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cf2:	42 1b       	sub	r20, r18
    1cf4:	53 0b       	sbc	r21, r19
    1cf6:	41 30       	cpi	r20, 0x01	; 1
    1cf8:	51 05       	cpc	r21, r1
    1cfa:	51 f0       	breq	.+20     	; 0x1d10 <__vector_7+0x1d4>
    1cfc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d00:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d04:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d08:	82 60       	ori	r24, 0x02	; 2
    1d0a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d0e:	b6 cf       	rjmp	.-148    	; 0x1c7c <__vector_7+0x140>
    1d10:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d14:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	f0 cf       	rjmp	.-32     	; 0x1cfc <__vector_7+0x1c0>

00001d1c <async>:
    1d1c:	3f 92       	push	r3
    1d1e:	4f 92       	push	r4
    1d20:	5f 92       	push	r5
    1d22:	6f 92       	push	r6
    1d24:	7f 92       	push	r7
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	ef b7       	in	r30, 0x3f	; 63
    1d40:	e0 78       	andi	r30, 0x80	; 128
    1d42:	3e 2e       	mov	r3, r30
    1d44:	f8 94       	cli
    1d46:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <msgPool>
    1d4a:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <msgPool+0x1>
    1d4e:	20 97       	sbiw	r28, 0x00	; 0
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <async+0x38>
    1d52:	52 c1       	rjmp	.+676    	; 0x1ff8 <async+0x2dc>
    1d54:	e8 81       	ld	r30, Y
    1d56:	f9 81       	ldd	r31, Y+1	; 0x01
    1d58:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <msgPool+0x1>
    1d5c:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <msgPool>
    1d60:	1b 87       	std	Y+11, r17	; 0x0b
    1d62:	0a 87       	std	Y+10, r16	; 0x0a
    1d64:	fd 86       	std	Y+13, r15	; 0x0d
    1d66:	ec 86       	std	Y+12, r14	; 0x0c
    1d68:	df 86       	std	Y+15, r13	; 0x0f
    1d6a:	ce 86       	std	Y+14, r12	; 0x0e
    1d6c:	33 20       	and	r3, r3
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <async+0x56>
    1d70:	6f c0       	rjmp	.+222    	; 0x1e50 <async+0x134>
    1d72:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    1d76:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    1d7a:	02 80       	ldd	r0, Z+2	; 0x02
    1d7c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d7e:	e0 2d       	mov	r30, r0
    1d80:	c2 80       	ldd	r12, Z+2	; 0x02
    1d82:	d3 80       	ldd	r13, Z+3	; 0x03
    1d84:	e4 80       	ldd	r14, Z+4	; 0x04
    1d86:	f5 80       	ldd	r15, Z+5	; 0x05
    1d88:	c6 0e       	add	r12, r22
    1d8a:	d7 1e       	adc	r13, r23
    1d8c:	e8 1e       	adc	r14, r24
    1d8e:	f9 1e       	adc	r15, r25
    1d90:	ca 82       	std	Y+2, r12	; 0x02
    1d92:	db 82       	std	Y+3, r13	; 0x03
    1d94:	ec 82       	std	Y+4, r14	; 0x04
    1d96:	fd 82       	std	Y+5, r15	; 0x05
    1d98:	12 16       	cp	r1, r18
    1d9a:	13 06       	cpc	r1, r19
    1d9c:	14 06       	cpc	r1, r20
    1d9e:	15 06       	cpc	r1, r21
    1da0:	0c f0       	brlt	.+2      	; 0x1da4 <async+0x88>
    1da2:	f8 c0       	rjmp	.+496    	; 0x1f94 <async+0x278>
    1da4:	da 01       	movw	r26, r20
    1da6:	c9 01       	movw	r24, r18
    1da8:	8c 01       	movw	r16, r24
    1daa:	9d 01       	movw	r18, r26
    1dac:	0c 0d       	add	r16, r12
    1dae:	1d 1d       	adc	r17, r13
    1db0:	2e 1d       	adc	r18, r14
    1db2:	3f 1d       	adc	r19, r15
    1db4:	0e 83       	std	Y+6, r16	; 0x06
    1db6:	1f 83       	std	Y+7, r17	; 0x07
    1db8:	28 87       	std	Y+8, r18	; 0x08
    1dba:	39 87       	std	Y+9, r19	; 0x09
    1dbc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1dc0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1dc4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dc8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dcc:	b0 99       	sbic	0x16, 0	; 22
    1dce:	49 c0       	rjmp	.+146    	; 0x1e62 <async+0x146>
    1dd0:	2c 01       	movw	r4, r24
    1dd2:	09 2e       	mov	r0, r25
    1dd4:	00 0c       	add	r0, r0
    1dd6:	66 08       	sbc	r6, r6
    1dd8:	77 08       	sbc	r7, r7
    1dda:	52 01       	movw	r10, r4
    1ddc:	99 24       	eor	r9, r9
    1dde:	88 24       	eor	r8, r8
    1de0:	2b 01       	movw	r4, r22
    1de2:	61 2c       	mov	r6, r1
    1de4:	71 2c       	mov	r7, r1
    1de6:	48 28       	or	r4, r8
    1de8:	59 28       	or	r5, r9
    1dea:	6a 28       	or	r6, r10
    1dec:	7b 28       	or	r7, r11
    1dee:	b7 01       	movw	r22, r14
    1df0:	a6 01       	movw	r20, r12
    1df2:	44 19       	sub	r20, r4
    1df4:	55 09       	sbc	r21, r5
    1df6:	66 09       	sbc	r22, r6
    1df8:	77 09       	sbc	r23, r7
    1dfa:	14 16       	cp	r1, r20
    1dfc:	15 06       	cpc	r1, r21
    1dfe:	16 06       	cpc	r1, r22
    1e00:	17 06       	cpc	r1, r23
    1e02:	0c f0       	brlt	.+2      	; 0x1e06 <async+0xea>
    1e04:	68 c0       	rjmp	.+208    	; 0x1ed6 <async+0x1ba>
    1e06:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <timerQ>
    1e0a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <timerQ+0x1>
    1e0e:	10 97       	sbiw	r26, 0x00	; 0
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <async+0xf8>
    1e12:	dc c0       	rjmp	.+440    	; 0x1fcc <async+0x2b0>
    1e14:	12 96       	adiw	r26, 0x02	; 2
    1e16:	0d 91       	ld	r16, X+
    1e18:	1d 91       	ld	r17, X+
    1e1a:	2d 91       	ld	r18, X+
    1e1c:	3c 91       	ld	r19, X
    1e1e:	15 97       	sbiw	r26, 0x05	; 5
    1e20:	c0 16       	cp	r12, r16
    1e22:	d1 06       	cpc	r13, r17
    1e24:	e2 06       	cpc	r14, r18
    1e26:	f3 06       	cpc	r15, r19
    1e28:	5c f4       	brge	.+22     	; 0x1e40 <async+0x124>
    1e2a:	d0 c0       	rjmp	.+416    	; 0x1fcc <async+0x2b0>
    1e2c:	42 81       	ldd	r20, Z+2	; 0x02
    1e2e:	53 81       	ldd	r21, Z+3	; 0x03
    1e30:	64 81       	ldd	r22, Z+4	; 0x04
    1e32:	75 81       	ldd	r23, Z+5	; 0x05
    1e34:	c4 16       	cp	r12, r20
    1e36:	d5 06       	cpc	r13, r21
    1e38:	e6 06       	cpc	r14, r22
    1e3a:	f7 06       	cpc	r15, r23
    1e3c:	4c f1       	brlt	.+82     	; 0x1e90 <async+0x174>
    1e3e:	df 01       	movw	r26, r30
    1e40:	ed 91       	ld	r30, X+
    1e42:	fc 91       	ld	r31, X
    1e44:	11 97       	sbiw	r26, 0x01	; 1
    1e46:	30 97       	sbiw	r30, 0x00	; 0
    1e48:	89 f7       	brne	.-30     	; 0x1e2c <async+0x110>
    1e4a:	19 82       	std	Y+1, r1	; 0x01
    1e4c:	18 82       	st	Y, r1
    1e4e:	22 c0       	rjmp	.+68     	; 0x1e94 <async+0x178>
    1e50:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <timestamp>
    1e54:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <timestamp+0x1>
    1e58:	e0 90 5a 01 	lds	r14, 0x015A	; 0x80015a <timestamp+0x2>
    1e5c:	f0 90 5b 01 	lds	r15, 0x015B	; 0x80015b <timestamp+0x3>
    1e60:	93 cf       	rjmp	.-218    	; 0x1d88 <async+0x6c>
    1e62:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e66:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e6a:	2c 01       	movw	r4, r24
    1e6c:	4f ef       	ldi	r20, 0xFF	; 255
    1e6e:	44 1a       	sub	r4, r20
    1e70:	54 0a       	sbc	r5, r20
    1e72:	05 2c       	mov	r0, r5
    1e74:	00 0c       	add	r0, r0
    1e76:	66 08       	sbc	r6, r6
    1e78:	77 08       	sbc	r7, r7
    1e7a:	b2 01       	movw	r22, r4
    1e7c:	55 27       	eor	r21, r21
    1e7e:	44 27       	eor	r20, r20
    1e80:	2f 01       	movw	r4, r30
    1e82:	61 2c       	mov	r6, r1
    1e84:	71 2c       	mov	r7, r1
    1e86:	44 2a       	or	r4, r20
    1e88:	55 2a       	or	r5, r21
    1e8a:	66 2a       	or	r6, r22
    1e8c:	77 2a       	or	r7, r23
    1e8e:	af cf       	rjmp	.-162    	; 0x1dee <async+0xd2>
    1e90:	f9 83       	std	Y+1, r31	; 0x01
    1e92:	e8 83       	st	Y, r30
    1e94:	cd 93       	st	X+, r28
    1e96:	dc 93       	st	X, r29
    1e98:	82 17       	cp	r24, r18
    1e9a:	93 07       	cpc	r25, r19
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <async+0x184>
    1e9e:	7f c0       	rjmp	.+254    	; 0x1f9e <async+0x282>
    1ea0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ea4:	8d 7f       	andi	r24, 0xFD	; 253
    1ea6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1eaa:	33 20       	and	r3, r3
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <async+0x194>
    1eae:	78 94       	sei
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	bf 90       	pop	r11
    1ec4:	af 90       	pop	r10
    1ec6:	9f 90       	pop	r9
    1ec8:	8f 90       	pop	r8
    1eca:	7f 90       	pop	r7
    1ecc:	6f 90       	pop	r6
    1ece:	5f 90       	pop	r5
    1ed0:	4f 90       	pop	r4
    1ed2:	3f 90       	pop	r3
    1ed4:	08 95       	ret
    1ed6:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <msgQ>
    1eda:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <msgQ+0x1>
    1ede:	10 97       	sbiw	r26, 0x00	; 0
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <async+0x1c8>
    1ee2:	83 c0       	rjmp	.+262    	; 0x1fea <async+0x2ce>
    1ee4:	16 96       	adiw	r26, 0x06	; 6
    1ee6:	cd 90       	ld	r12, X+
    1ee8:	dd 90       	ld	r13, X+
    1eea:	ed 90       	ld	r14, X+
    1eec:	fc 90       	ld	r15, X
    1eee:	19 97       	sbiw	r26, 0x09	; 9
    1ef0:	0c 15       	cp	r16, r12
    1ef2:	1d 05       	cpc	r17, r13
    1ef4:	2e 05       	cpc	r18, r14
    1ef6:	3f 05       	cpc	r19, r15
    1ef8:	64 f4       	brge	.+24     	; 0x1f12 <async+0x1f6>
    1efa:	77 c0       	rjmp	.+238    	; 0x1fea <async+0x2ce>
    1efc:	c6 80       	ldd	r12, Z+6	; 0x06
    1efe:	d7 80       	ldd	r13, Z+7	; 0x07
    1f00:	e0 84       	ldd	r14, Z+8	; 0x08
    1f02:	f1 84       	ldd	r15, Z+9	; 0x09
    1f04:	0c 15       	cp	r16, r12
    1f06:	1d 05       	cpc	r17, r13
    1f08:	2e 05       	cpc	r18, r14
    1f0a:	3f 05       	cpc	r19, r15
    1f0c:	0c f4       	brge	.+2      	; 0x1f10 <async+0x1f4>
    1f0e:	5b c0       	rjmp	.+182    	; 0x1fc6 <async+0x2aa>
    1f10:	df 01       	movw	r26, r30
    1f12:	ed 91       	ld	r30, X+
    1f14:	fc 91       	ld	r31, X
    1f16:	11 97       	sbiw	r26, 0x01	; 1
    1f18:	30 97       	sbiw	r30, 0x00	; 0
    1f1a:	81 f7       	brne	.-32     	; 0x1efc <async+0x1e0>
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	18 82       	st	Y, r1
    1f20:	cd 93       	st	X+, r28
    1f22:	dc 93       	st	X, r29
    1f24:	33 20       	and	r3, r3
    1f26:	21 f2       	breq	.-120    	; 0x1eb0 <async+0x194>
    1f28:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    1f2c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <async+0x21a>
    1f34:	bc cf       	rjmp	.-136    	; 0x1eae <async+0x192>
    1f36:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <activeStack>
    1f3a:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <activeStack+0x1>
    1f3e:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <msgQ>
    1f42:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <msgQ+0x1>
    1f46:	02 81       	ldd	r16, Z+2	; 0x02
    1f48:	13 81       	ldd	r17, Z+3	; 0x03
    1f4a:	d9 01       	movw	r26, r18
    1f4c:	16 96       	adiw	r26, 0x06	; 6
    1f4e:	4d 91       	ld	r20, X+
    1f50:	5d 91       	ld	r21, X+
    1f52:	6d 91       	ld	r22, X+
    1f54:	7c 91       	ld	r23, X
    1f56:	19 97       	sbiw	r26, 0x09	; 9
    1f58:	d8 01       	movw	r26, r16
    1f5a:	16 96       	adiw	r26, 0x06	; 6
    1f5c:	0d 91       	ld	r16, X+
    1f5e:	1d 91       	ld	r17, X+
    1f60:	2d 91       	ld	r18, X+
    1f62:	3c 91       	ld	r19, X
    1f64:	19 97       	sbiw	r26, 0x09	; 9
    1f66:	40 1b       	sub	r20, r16
    1f68:	51 0b       	sbc	r21, r17
    1f6a:	62 0b       	sbc	r22, r18
    1f6c:	73 0b       	sbc	r23, r19
    1f6e:	77 ff       	sbrs	r23, 7
    1f70:	9e cf       	rjmp	.-196    	; 0x1eae <async+0x192>
    1f72:	dc 01       	movw	r26, r24
    1f74:	2d 91       	ld	r18, X+
    1f76:	3c 91       	ld	r19, X
    1f78:	11 97       	sbiw	r26, 0x01	; 1
    1f7a:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
    1f7e:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
    1f82:	ed 93       	st	X+, r30
    1f84:	fc 93       	st	X, r31
    1f86:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
    1f8a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
    1f8e:	0e 94 48 05 	call	0xa90	; 0xa90 <dispatch>
    1f92:	8d cf       	rjmp	.-230    	; 0x1eae <async+0x192>
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f ef       	ldi	r25, 0xFF	; 255
    1f98:	af ef       	ldi	r26, 0xFF	; 255
    1f9a:	bf e7       	ldi	r27, 0x7F	; 127
    1f9c:	05 cf       	rjmp	.-502    	; 0x1da8 <async+0x8c>
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fa4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fa8:	04 1b       	sub	r16, r20
    1faa:	15 0b       	sbc	r17, r21
    1fac:	01 30       	cpi	r16, 0x01	; 1
    1fae:	11 05       	cpc	r17, r1
    1fb0:	b1 f0       	breq	.+44     	; 0x1fde <async+0x2c2>
    1fb2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1fb6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1fba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1fbe:	82 60       	ori	r24, 0x02	; 2
    1fc0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1fc4:	72 cf       	rjmp	.-284    	; 0x1eaa <async+0x18e>
    1fc6:	f9 83       	std	Y+1, r31	; 0x01
    1fc8:	e8 83       	st	Y, r30
    1fca:	aa cf       	rjmp	.-172    	; 0x1f20 <async+0x204>
    1fcc:	b9 83       	std	Y+1, r27	; 0x01
    1fce:	a8 83       	st	Y, r26
    1fd0:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <timerQ+0x1>
    1fd4:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <timerQ>
    1fd8:	97 01       	movw	r18, r14
    1fda:	86 01       	movw	r16, r12
    1fdc:	5d cf       	rjmp	.-326    	; 0x1e98 <async+0x17c>
    1fde:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fe2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	e4 cf       	rjmp	.-56     	; 0x1fb2 <async+0x296>
    1fea:	b9 83       	std	Y+1, r27	; 0x01
    1fec:	a8 83       	st	Y, r26
    1fee:	d0 93 5f 01 	sts	0x015F, r29	; 0x80015f <msgQ+0x1>
    1ff2:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <msgQ>
    1ff6:	96 cf       	rjmp	.-212    	; 0x1f24 <async+0x208>
    1ff8:	0e 94 a8 05 	call	0xb50	; 0xb50 <dequeue.part.0>

00001ffc <sync>:
    1ffc:	cf 92       	push	r12
    1ffe:	df 92       	push	r13
    2000:	ef 92       	push	r14
    2002:	ff 92       	push	r15
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	ec 01       	movw	r28, r24
    200e:	7b 01       	movw	r14, r22
    2010:	6a 01       	movw	r12, r20
    2012:	1f b7       	in	r17, 0x3f	; 63
    2014:	10 78       	andi	r17, 0x80	; 128
    2016:	f8 94       	cli
    2018:	a8 81       	ld	r26, Y
    201a:	b9 81       	ldd	r27, Y+1	; 0x01
    201c:	10 97       	sbiw	r26, 0x00	; 0
    201e:	19 f4       	brne	.+6      	; 0x2026 <sync+0x2a>
    2020:	62 c0       	rjmp	.+196    	; 0x20e6 <sync+0xea>
    2022:	a0 81       	ld	r26, Z
    2024:	b1 81       	ldd	r27, Z+1	; 0x01
    2026:	14 96       	adiw	r26, 0x04	; 4
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	15 97       	sbiw	r26, 0x05	; 5
    202e:	30 97       	sbiw	r30, 0x00	; 0
    2030:	c1 f7       	brne	.-16     	; 0x2022 <sync+0x26>
    2032:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <current>
    2036:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <current+0x1>
    203a:	2a 17       	cp	r18, r26
    203c:	3b 07       	cpc	r19, r27
    203e:	09 f4       	brne	.+2      	; 0x2042 <sync+0x46>
    2040:	4c c0       	rjmp	.+152    	; 0x20da <sync+0xde>
    2042:	11 23       	and	r17, r17
    2044:	a1 f1       	breq	.+104    	; 0x20ae <sync+0xb2>
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	19 f0       	breq	.+6      	; 0x2054 <sync+0x58>
    204e:	fc 01       	movw	r30, r24
    2050:	15 82       	std	Z+5, r1	; 0x05
    2052:	14 82       	std	Z+4, r1	; 0x04
    2054:	3b 83       	std	Y+3, r19	; 0x03
    2056:	2a 83       	std	Y+2, r18	; 0x02
    2058:	f9 01       	movw	r30, r18
    205a:	d5 83       	std	Z+5, r29	; 0x05
    205c:	c4 83       	std	Z+4, r28	; 0x04
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 48 05 	call	0xa90	; 0xa90 <dispatch>
    2064:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    2068:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	89 2b       	or	r24, r25
    2072:	09 f4       	brne	.+2      	; 0x2076 <sync+0x7a>
    2074:	41 c0       	rjmp	.+130    	; 0x20f8 <sync+0xfc>
    2076:	f9 83       	std	Y+1, r31	; 0x01
    2078:	e8 83       	st	Y, r30
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	9b 81       	ldd	r25, Y+3	; 0x03
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	09 f0       	breq	.+2      	; 0x2084 <sync+0x88>
    2082:	78 94       	sei
    2084:	b6 01       	movw	r22, r12
    2086:	ce 01       	movw	r24, r28
    2088:	f7 01       	movw	r30, r14
    208a:	09 95       	icall
    208c:	f8 2e       	mov	r15, r24
    208e:	09 2f       	mov	r16, r25
    2090:	8f b7       	in	r24, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	18 82       	st	Y, r1
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	9b 81       	ldd	r25, Y+3	; 0x03
    209c:	82 30       	cpi	r24, 0x02	; 2
    209e:	91 05       	cpc	r25, r1
    20a0:	a0 f4       	brcc	.+40     	; 0x20ca <sync+0xce>
    20a2:	11 23       	and	r17, r17
    20a4:	79 f0       	breq	.+30     	; 0x20c4 <sync+0xc8>
    20a6:	78 94       	sei
    20a8:	8f 2d       	mov	r24, r15
    20aa:	90 2f       	mov	r25, r16
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <sync+0xb6>
    20ae:	8f ef       	ldi	r24, 0xFF	; 255
    20b0:	9f ef       	ldi	r25, 0xFF	; 255
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	08 95       	ret
    20c4:	8f 2d       	mov	r24, r15
    20c6:	90 2f       	mov	r25, r16
    20c8:	f4 cf       	rjmp	.-24     	; 0x20b2 <sync+0xb6>
    20ca:	1b 82       	std	Y+3, r1	; 0x03
    20cc:	1a 82       	std	Y+2, r1	; 0x02
    20ce:	fc 01       	movw	r30, r24
    20d0:	15 82       	std	Z+5, r1	; 0x05
    20d2:	14 82       	std	Z+4, r1	; 0x04
    20d4:	0e 94 48 05 	call	0xa90	; 0xa90 <dispatch>
    20d8:	e4 cf       	rjmp	.-56     	; 0x20a2 <sync+0xa6>
    20da:	11 23       	and	r17, r17
    20dc:	41 f3       	breq	.-48     	; 0x20ae <sync+0xb2>
    20de:	78 94       	sei
    20e0:	8f ef       	ldi	r24, 0xFF	; 255
    20e2:	9f ef       	ldi	r25, 0xFF	; 255
    20e4:	e6 cf       	rjmp	.-52     	; 0x20b2 <sync+0xb6>
    20e6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
    20ea:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
    20ee:	99 83       	std	Y+1, r25	; 0x01
    20f0:	88 83       	st	Y, r24
    20f2:	11 23       	and	r17, r17
    20f4:	39 f2       	breq	.-114    	; 0x2084 <sync+0x88>
    20f6:	c1 cf       	rjmp	.-126    	; 0x207a <sync+0x7e>
    20f8:	78 94       	sei
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	d9 cf       	rjmp	.-78     	; 0x20b2 <sync+0xb6>

00002100 <run>:
    2100:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    2104:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    2108:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    210c:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    2110:	20 97       	sbiw	r28, 0x00	; 0
    2112:	09 f4       	brne	.+2      	; 0x2116 <run+0x16>
    2114:	6e c0       	rjmp	.+220    	; 0x21f2 <run+0xf2>
    2116:	88 81       	ld	r24, Y
    2118:	99 81       	ldd	r25, Y+1	; 0x01
    211a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    211e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    2122:	d3 83       	std	Z+3, r29	; 0x03
    2124:	c2 83       	std	Z+2, r28	; 0x02
    2126:	78 94       	sei
    2128:	4e 85       	ldd	r20, Y+14	; 0x0e
    212a:	5f 85       	ldd	r21, Y+15	; 0x0f
    212c:	6c 85       	ldd	r22, Y+12	; 0x0c
    212e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2130:	8a 85       	ldd	r24, Y+10	; 0x0a
    2132:	9b 85       	ldd	r25, Y+11	; 0x0b
    2134:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <sync>
    2138:	8f b7       	in	r24, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <msgPool>
    2140:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <msgPool+0x1>
    2144:	99 83       	std	Y+1, r25	; 0x01
    2146:	88 83       	st	Y, r24
    2148:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <msgPool+0x1>
    214c:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <msgPool>
    2150:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <activeStack>
    2154:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <activeStack+0x1>
    2158:	f7 01       	movw	r30, r14
    215a:	a0 81       	ld	r26, Z
    215c:	b1 81       	ldd	r27, Z+1	; 0x01
    215e:	12 96       	adiw	r26, 0x02	; 2
    2160:	8d 91       	ld	r24, X+
    2162:	9c 91       	ld	r25, X
    2164:	13 97       	sbiw	r26, 0x03	; 3
    2166:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    216a:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    216e:	20 97       	sbiw	r28, 0x00	; 0
    2170:	a9 f0       	breq	.+42     	; 0x219c <run+0x9c>
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	49 f2       	breq	.-110    	; 0x2108 <run+0x8>
    2176:	4e 81       	ldd	r20, Y+6	; 0x06
    2178:	5f 81       	ldd	r21, Y+7	; 0x07
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	fc 01       	movw	r30, r24
    2180:	06 81       	ldd	r16, Z+6	; 0x06
    2182:	17 81       	ldd	r17, Z+7	; 0x07
    2184:	20 85       	ldd	r18, Z+8	; 0x08
    2186:	31 85       	ldd	r19, Z+9	; 0x09
    2188:	40 1b       	sub	r20, r16
    218a:	51 0b       	sbc	r21, r17
    218c:	62 0b       	sbc	r22, r18
    218e:	73 0b       	sbc	r23, r19
    2190:	14 16       	cp	r1, r20
    2192:	15 06       	cpc	r1, r21
    2194:	16 06       	cpc	r1, r22
    2196:	17 06       	cpc	r1, r23
    2198:	0c f0       	brlt	.+2      	; 0x219c <run+0x9c>
    219a:	b6 cf       	rjmp	.-148    	; 0x2108 <run+0x8>
    219c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <activeStack+0x1>
    21a0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <activeStack>
    21a4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    21a8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    21ac:	f7 01       	movw	r30, r14
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <threadPool+0x1>
    21b6:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <threadPool>
    21ba:	14 96       	adiw	r26, 0x04	; 4
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	15 97       	sbiw	r26, 0x05	; 5
    21c2:	30 97       	sbiw	r30, 0x00	; 0
    21c4:	41 f0       	breq	.+16     	; 0x21d6 <run+0xd6>
    21c6:	a0 81       	ld	r26, Z
    21c8:	b1 81       	ldd	r27, Z+1	; 0x01
    21ca:	14 96       	adiw	r26, 0x04	; 4
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	15 97       	sbiw	r26, 0x05	; 5
    21d2:	30 97       	sbiw	r30, 0x00	; 0
    21d4:	c1 f7       	brne	.-16     	; 0x21c6 <run+0xc6>
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 48 05 	call	0xa90	; 0xa90 <dispatch>
    21dc:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    21e0:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    21e4:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    21e8:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    21ec:	20 97       	sbiw	r28, 0x00	; 0
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <run+0xf2>
    21f0:	92 cf       	rjmp	.-220    	; 0x2116 <run+0x16>
    21f2:	0e 94 a8 05 	call	0xb50	; 0xb50 <dequeue.part.0>

000021f6 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    21f6:	42 31       	cpi	r20, 0x12	; 18
    21f8:	b8 f4       	brcc	.+46     	; 0x2228 <install+0x32>
        char status;
        DISABLE(status);
    21fa:	2f b7       	in	r18, 0x3f	; 63
    21fc:	f8 94       	cli
        otable[i] = obj;
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	44 0f       	add	r20, r20
    2202:	55 1f       	adc	r21, r21
    2204:	fa 01       	movw	r30, r20
    2206:	e0 5a       	subi	r30, 0xA0	; 160
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
        mtable[i] = m;
    220e:	fa 01       	movw	r30, r20
    2210:	e8 50       	subi	r30, 0x08	; 8
    2212:	fe 4f       	sbci	r31, 0xFE	; 254
    2214:	71 83       	std	Z+1, r23	; 0x01
    2216:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	fc 01       	movw	r30, r24
    221e:	53 83       	std	Z+3, r21	; 0x03
    2220:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2222:	27 ff       	sbrs	r18, 7
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <install+0x32>
    2226:	78 94       	sei
    2228:	08 95       	ret

0000222a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    222a:	8c 01       	movw	r16, r24
    222c:	7b 01       	movw	r14, r22
    222e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2230:	8f b7       	in	r24, 0x3f	; 63
    2232:	f8 94       	cli
    initialize();
    2234:	0e 94 dd 04 	call	0x9ba	; 0x9ba <initialize>
    ENABLE(1);
    2238:	78 94       	sei
    if (m != NULL)
    223a:	e1 14       	cp	r14, r1
    223c:	f1 04       	cpc	r15, r1
    223e:	41 f0       	breq	.+16     	; 0x2250 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	cb 01       	movw	r24, r22
    224c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <async>
    DISABLE(status);
    2250:	8f b7       	in	r24, 0x3f	; 63
    2252:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2254:	0e 94 68 05 	call	0xad0	; 0xad0 <schedule>
    ENABLE(1);
    2258:	78 94       	sei
    while (1) {
        SLEEP();
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	83 bf       	out	0x33, r24	; 51
    225e:	88 95       	sleep
    2260:	fd cf       	rjmp	.-6      	; 0x225c <tinytimber+0x32>

00002262 <writeBit>:
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
	PORTE |= (1 << self->portBit);
    2262:	4e b1       	in	r20, 0x0e	; 14
    2264:	21 e0       	ldi	r18, 0x01	; 1
    2266:	30 e0       	ldi	r19, 0x00	; 0
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    2268:	67 2b       	or	r22, r23
    226a:	79 f4       	brne	.+30     	; 0x228a <writeBit+0x28>
	PORTE |= (1 << self->portBit);
	else
	PORTE &= ~(1 << self->portBit);
    226c:	b9 01       	movw	r22, r18
    226e:	fc 01       	movw	r30, r24
    2270:	04 80       	ldd	r0, Z+4	; 0x04
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <writeBit+0x16>
    2274:	66 0f       	add	r22, r22
    2276:	77 1f       	adc	r23, r23
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <writeBit+0x12>
    227c:	cb 01       	movw	r24, r22
    227e:	80 95       	com	r24
    2280:	84 23       	and	r24, r20
    2282:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	08 95       	ret
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
	PORTE |= (1 << self->portBit);
    228a:	b9 01       	movw	r22, r18
    228c:	fc 01       	movw	r30, r24
    228e:	04 80       	ldd	r0, Z+4	; 0x04
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <writeBit+0x34>
    2292:	66 0f       	add	r22, r22
    2294:	77 1f       	adc	r23, r23
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <writeBit+0x30>
    229a:	cb 01       	movw	r24, r22
    229c:	84 2b       	or	r24, r20
    229e:	8e b9       	out	0x0e, r24	; 14
	else
	PORTE &= ~(1 << self->portBit);
	return 0;
}
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	08 95       	ret

000022a6 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    22a6:	4e b1       	in	r20, 0x0e	; 14
    22a8:	21 e0       	ldi	r18, 0x01	; 1
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	fc 01       	movw	r30, r24
    22ae:	04 80       	ldd	r0, Z+4	; 0x04
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <toggleBit+0x10>
    22b2:	22 0f       	add	r18, r18
    22b4:	33 1f       	adc	r19, r19
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <toggleBit+0xc>
    22ba:	24 27       	eor	r18, r20
    22bc:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	08 95       	ret

000022c4 <__divmodhi4>:
    22c4:	97 fb       	bst	r25, 7
    22c6:	07 2e       	mov	r0, r23
    22c8:	16 f4       	brtc	.+4      	; 0x22ce <__divmodhi4+0xa>
    22ca:	00 94       	com	r0
    22cc:	07 d0       	rcall	.+14     	; 0x22dc <__divmodhi4_neg1>
    22ce:	77 fd       	sbrc	r23, 7
    22d0:	09 d0       	rcall	.+18     	; 0x22e4 <__divmodhi4_neg2>
    22d2:	0e 94 9c 11 	call	0x2338	; 0x2338 <__udivmodhi4>
    22d6:	07 fc       	sbrc	r0, 7
    22d8:	05 d0       	rcall	.+10     	; 0x22e4 <__divmodhi4_neg2>
    22da:	3e f4       	brtc	.+14     	; 0x22ea <__divmodhi4_exit>

000022dc <__divmodhi4_neg1>:
    22dc:	90 95       	com	r25
    22de:	81 95       	neg	r24
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	08 95       	ret

000022e4 <__divmodhi4_neg2>:
    22e4:	70 95       	com	r23
    22e6:	61 95       	neg	r22
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255

000022ea <__divmodhi4_exit>:
    22ea:	08 95       	ret

000022ec <__divmodsi4>:
    22ec:	05 2e       	mov	r0, r21
    22ee:	97 fb       	bst	r25, 7
    22f0:	1e f4       	brtc	.+6      	; 0x22f8 <__divmodsi4+0xc>
    22f2:	00 94       	com	r0
    22f4:	0e 94 8d 11 	call	0x231a	; 0x231a <__negsi2>
    22f8:	57 fd       	sbrc	r21, 7
    22fa:	07 d0       	rcall	.+14     	; 0x230a <__divmodsi4_neg2>
    22fc:	0e 94 b0 11 	call	0x2360	; 0x2360 <__udivmodsi4>
    2300:	07 fc       	sbrc	r0, 7
    2302:	03 d0       	rcall	.+6      	; 0x230a <__divmodsi4_neg2>
    2304:	4e f4       	brtc	.+18     	; 0x2318 <__divmodsi4_exit>
    2306:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__negsi2>

0000230a <__divmodsi4_neg2>:
    230a:	50 95       	com	r21
    230c:	40 95       	com	r20
    230e:	30 95       	com	r19
    2310:	21 95       	neg	r18
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	4f 4f       	sbci	r20, 0xFF	; 255
    2316:	5f 4f       	sbci	r21, 0xFF	; 255

00002318 <__divmodsi4_exit>:
    2318:	08 95       	ret

0000231a <__negsi2>:
    231a:	90 95       	com	r25
    231c:	80 95       	com	r24
    231e:	70 95       	com	r23
    2320:	61 95       	neg	r22
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	08 95       	ret

0000232a <__usmulhisi3>:
    232a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <__umulhisi3>

0000232e <__usmulhisi3_tail>:
    232e:	b7 ff       	sbrs	r27, 7
    2330:	08 95       	ret
    2332:	82 1b       	sub	r24, r18
    2334:	93 0b       	sbc	r25, r19
    2336:	08 95       	ret

00002338 <__udivmodhi4>:
    2338:	aa 1b       	sub	r26, r26
    233a:	bb 1b       	sub	r27, r27
    233c:	51 e1       	ldi	r21, 0x11	; 17
    233e:	07 c0       	rjmp	.+14     	; 0x234e <__udivmodhi4_ep>

00002340 <__udivmodhi4_loop>:
    2340:	aa 1f       	adc	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	a6 17       	cp	r26, r22
    2346:	b7 07       	cpc	r27, r23
    2348:	10 f0       	brcs	.+4      	; 0x234e <__udivmodhi4_ep>
    234a:	a6 1b       	sub	r26, r22
    234c:	b7 0b       	sbc	r27, r23

0000234e <__udivmodhi4_ep>:
    234e:	88 1f       	adc	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	5a 95       	dec	r21
    2354:	a9 f7       	brne	.-22     	; 0x2340 <__udivmodhi4_loop>
    2356:	80 95       	com	r24
    2358:	90 95       	com	r25
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	08 95       	ret

00002360 <__udivmodsi4>:
    2360:	a1 e2       	ldi	r26, 0x21	; 33
    2362:	1a 2e       	mov	r1, r26
    2364:	aa 1b       	sub	r26, r26
    2366:	bb 1b       	sub	r27, r27
    2368:	fd 01       	movw	r30, r26
    236a:	0d c0       	rjmp	.+26     	; 0x2386 <__udivmodsi4_ep>

0000236c <__udivmodsi4_loop>:
    236c:	aa 1f       	adc	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	ee 1f       	adc	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	a2 17       	cp	r26, r18
    2376:	b3 07       	cpc	r27, r19
    2378:	e4 07       	cpc	r30, r20
    237a:	f5 07       	cpc	r31, r21
    237c:	20 f0       	brcs	.+8      	; 0x2386 <__udivmodsi4_ep>
    237e:	a2 1b       	sub	r26, r18
    2380:	b3 0b       	sbc	r27, r19
    2382:	e4 0b       	sbc	r30, r20
    2384:	f5 0b       	sbc	r31, r21

00002386 <__udivmodsi4_ep>:
    2386:	66 1f       	adc	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	88 1f       	adc	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	1a 94       	dec	r1
    2390:	69 f7       	brne	.-38     	; 0x236c <__udivmodsi4_loop>
    2392:	60 95       	com	r22
    2394:	70 95       	com	r23
    2396:	80 95       	com	r24
    2398:	90 95       	com	r25
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	bd 01       	movw	r22, r26
    23a0:	cf 01       	movw	r24, r30
    23a2:	08 95       	ret

000023a4 <__umulhisi3>:
    23a4:	a2 9f       	mul	r26, r18
    23a6:	b0 01       	movw	r22, r0
    23a8:	b3 9f       	mul	r27, r19
    23aa:	c0 01       	movw	r24, r0
    23ac:	a3 9f       	mul	r26, r19
    23ae:	70 0d       	add	r23, r0
    23b0:	81 1d       	adc	r24, r1
    23b2:	11 24       	eor	r1, r1
    23b4:	91 1d       	adc	r25, r1
    23b6:	b2 9f       	mul	r27, r18
    23b8:	70 0d       	add	r23, r0
    23ba:	81 1d       	adc	r24, r1
    23bc:	11 24       	eor	r1, r1
    23be:	91 1d       	adc	r25, r1
    23c0:	08 95       	ret

000023c2 <setjmp>:
    23c2:	dc 01       	movw	r26, r24
    23c4:	2d 92       	st	X+, r2
    23c6:	3d 92       	st	X+, r3
    23c8:	4d 92       	st	X+, r4
    23ca:	5d 92       	st	X+, r5
    23cc:	6d 92       	st	X+, r6
    23ce:	7d 92       	st	X+, r7
    23d0:	8d 92       	st	X+, r8
    23d2:	9d 92       	st	X+, r9
    23d4:	ad 92       	st	X+, r10
    23d6:	bd 92       	st	X+, r11
    23d8:	cd 92       	st	X+, r12
    23da:	dd 92       	st	X+, r13
    23dc:	ed 92       	st	X+, r14
    23de:	fd 92       	st	X+, r15
    23e0:	0d 93       	st	X+, r16
    23e2:	1d 93       	st	X+, r17
    23e4:	cd 93       	st	X+, r28
    23e6:	dd 93       	st	X+, r29
    23e8:	ff 91       	pop	r31
    23ea:	ef 91       	pop	r30
    23ec:	8d b7       	in	r24, 0x3d	; 61
    23ee:	8d 93       	st	X+, r24
    23f0:	8e b7       	in	r24, 0x3e	; 62
    23f2:	8d 93       	st	X+, r24
    23f4:	8f b7       	in	r24, 0x3f	; 63
    23f6:	8d 93       	st	X+, r24
    23f8:	ed 93       	st	X+, r30
    23fa:	fd 93       	st	X+, r31
    23fc:	88 27       	eor	r24, r24
    23fe:	99 27       	eor	r25, r25
    2400:	09 94       	ijmp

00002402 <longjmp>:
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	91 05       	cpc	r25, r1
    240a:	81 1d       	adc	r24, r1
    240c:	2d 90       	ld	r2, X+
    240e:	3d 90       	ld	r3, X+
    2410:	4d 90       	ld	r4, X+
    2412:	5d 90       	ld	r5, X+
    2414:	6d 90       	ld	r6, X+
    2416:	7d 90       	ld	r7, X+
    2418:	8d 90       	ld	r8, X+
    241a:	9d 90       	ld	r9, X+
    241c:	ad 90       	ld	r10, X+
    241e:	bd 90       	ld	r11, X+
    2420:	cd 90       	ld	r12, X+
    2422:	dd 90       	ld	r13, X+
    2424:	ed 90       	ld	r14, X+
    2426:	fd 90       	ld	r15, X+
    2428:	0d 91       	ld	r16, X+
    242a:	1d 91       	ld	r17, X+
    242c:	cd 91       	ld	r28, X+
    242e:	dd 91       	ld	r29, X+
    2430:	ed 91       	ld	r30, X+
    2432:	fd 91       	ld	r31, X+
    2434:	0d 90       	ld	r0, X+
    2436:	f8 94       	cli
    2438:	fe bf       	out	0x3e, r31	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	ed bf       	out	0x3d, r30	; 61
    243e:	ed 91       	ld	r30, X+
    2440:	fd 91       	ld	r31, X+
    2442:	09 94       	ijmp

00002444 <_exit>:
    2444:	f8 94       	cli

00002446 <__stop_program>:
    2446:	ff cf       	rjmp	.-2      	; 0x2446 <__stop_program>
