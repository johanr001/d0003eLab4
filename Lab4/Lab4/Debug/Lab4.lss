
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000025c8  0000265c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800152  00800152  000026ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039ae  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a4  00000000  00000000  000063b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019af  00000000  00000000  0000765a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e7c  00000000  00000000  0000900c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a43  00000000  00000000  00009e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003378  00000000  00000000  0000a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000dc43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_1>
       8:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_2>
       c:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_3>
      10:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_4>
      14:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__vector_9>
      28:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_10>
      2c:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_11>
      30:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_12>
      34:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_13>
      38:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_14>
      3c:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_15>
      40:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_16>
      44:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_17>
      48:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_18>
      4c:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_19>
      50:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_20>
      54:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_21>
      58:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 ec       	ldi	r30, 0xC8	; 200
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 35       	cpi	r26, 0x52	; 82
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e5       	ldi	r26, 0x52	; 82
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a5 3a       	cpi	r26, 0xA5	; 165
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 92 04 	call	0x924	; 0x924 <main>
      92:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      aa:	fc 01       	movw	r30, r24
      ac:	20 85       	ldd	r18, Z+8	; 0x08
      ae:	22 23       	and	r18, r18
      b0:	41 f1       	breq	.+80     	; 0x102 <holdCheckerUp+0x68>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      b2:	1e 99       	sbic	0x03, 6	; 3
      b4:	24 c0       	rjmp	.+72     	; 0xfe <holdCheckerUp+0x64>
      b6:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      b8:	04 81       	ldd	r16, Z+4	; 0x04
      ba:	15 81       	ldd	r17, Z+5	; 0x05
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	f8 e2       	ldi	r31, 0x28	; 40
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
		AFTER(MSEC(1000), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      dc:	0f 2e       	mov	r0, r31
      de:	fd e4       	ldi	r31, 0x4D	; 77
      e0:	ef 2e       	mov	r14, r31
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	8e 01       	movw	r16, r28
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	a9 01       	movw	r20, r18
      f0:	62 e1       	ldi	r22, 0x12	; 18
      f2:	7a e7       	ldi	r23, 0x7A	; 122
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <holdCheckerUp+0x68>
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      fe:	fc 01       	movw	r30, r24
     100:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	1f 91       	pop	r17
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	df 90       	pop	r13
     114:	cf 90       	pop	r12
     116:	08 95       	ret

00000118 <holdCheckerDown>:

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     128:	fc 01       	movw	r30, r24
     12a:	21 85       	ldd	r18, Z+9	; 0x09
     12c:	22 23       	and	r18, r18
     12e:	41 f1       	breq	.+80     	; 0x180 <holdCheckerDown+0x68>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     130:	1f 99       	sbic	0x03, 7	; 3
     132:	24 c0       	rjmp	.+72     	; 0x17c <holdCheckerDown+0x64>
     134:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     136:	04 81       	ldd	r16, Z+4	; 0x04
     138:	15 81       	ldd	r17, Z+5	; 0x05
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	0f 2e       	mov	r0, r31
     140:	f5 e7       	ldi	r31, 0x75	; 117
     142:	ef 2e       	mov	r14, r31
     144:	f3 e0       	ldi	r31, 0x03	; 3
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	a9 01       	movw	r20, r18
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	cb 01       	movw	r24, r22
     156:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
		AFTER(MSEC(1000), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     15a:	0f 2e       	mov	r0, r31
     15c:	fc e8       	ldi	r31, 0x8C	; 140
     15e:	ef 2e       	mov	r14, r31
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ff 2e       	mov	r15, r31
     164:	f0 2d       	mov	r31, r0
     166:	8e 01       	movw	r16, r28
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	a9 01       	movw	r20, r18
     16e:	62 e1       	ldi	r22, 0x12	; 18
     170:	7a e7       	ldi	r23, 0x7A	; 122
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     17a:	02 c0       	rjmp	.+4      	; 0x180 <holdCheckerDown+0x68>
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     17c:	fc 01       	movw	r30, r24
     17e:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	08 95       	ret

00000196 <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     196:	85 b1       	in	r24, 0x05	; 5
     198:	80 6d       	ori	r24, 0xD0	; 208
     19a:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     19c:	8e b1       	in	r24, 0x0e	; 14
     19e:	8c 60       	ori	r24, 0x0C	; 12
     1a0:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     1a2:	8d b3       	in	r24, 0x1d	; 29
     1a4:	80 6c       	ori	r24, 0xC0	; 192
     1a6:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a8:	eb e6       	ldi	r30, 0x6B	; 107
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8c 60       	ori	r24, 0x0C	; 12
     1b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1b2:	ec e6       	ldi	r30, 0x6C	; 108
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 6d       	ori	r24, 0xD0	; 208
     1ba:	80 83       	st	Z, r24
     1bc:	08 95       	ret

000001be <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
	if (PRESSEDLT) {
     1ca:	62 99       	sbic	0x0c, 2	; 12
     1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <leftdir+0x36>
     1ce:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     1d0:	04 81       	ldd	r16, Z+4	; 0x04
     1d2:	15 81       	ldd	r17, Z+5	; 0x05
     1d4:	c1 2c       	mov	r12, r1
     1d6:	d1 2c       	mov	r13, r1
     1d8:	0f 2e       	mov	r0, r31
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	ef 2e       	mov	r14, r31
     1de:	f3 e0       	ldi	r31, 0x03	; 3
     1e0:	ff 2e       	mov	r15, r31
     1e2:	f0 2d       	mov	r31, r0
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	}
	return 0;
}
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	08 95       	ret

00000206 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
	if (PRESSEDRT) {
     212:	63 99       	sbic	0x0c, 3	; 12
     214:	14 c0       	rjmp	.+40     	; 0x23e <rightdir+0x38>
     216:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     218:	04 81       	ldd	r16, Z+4	; 0x04
     21a:	15 81       	ldd	r17, Z+5	; 0x05
     21c:	cc 24       	eor	r12, r12
     21e:	c3 94       	inc	r12
     220:	d1 2c       	mov	r13, r1
     222:	0f 2e       	mov	r0, r31
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	ef 2e       	mov	r14, r31
     228:	f3 e0       	ldi	r31, 0x03	; 3
     22a:	ff 2e       	mov	r15, r31
     22c:	f0 2d       	mov	r31, r0
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	a9 01       	movw	r20, r18
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	cb 01       	movw	r24, r22
     23a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	}
	return 0;
}
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	08 95       	ret

00000250 <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     256:	62 99       	sbic	0x0c, 2	; 12
     258:	04 c0       	rjmp	.+8      	; 0x262 <buttonCheckerLR+0x12>
		leftdir(self, 0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 df 00 	call	0x1be	; 0x1be <leftdir>
	}
	if (PRESSEDRT) {
     262:	63 99       	sbic	0x0c, 3	; 12
     264:	05 c0       	rjmp	.+10     	; 0x270 <buttonCheckerLR+0x20>
		rightdir(self, 0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	ce 01       	movw	r24, r28
     26c:	0e 94 03 01 	call	0x206	; 0x206 <rightdir>
	}
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     28a:	1e 99       	sbic	0x03, 6	; 3
     28c:	2f c0       	rjmp	.+94     	; 0x2ec <updir+0x72>
     28e:	fc 01       	movw	r30, r24
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	21 11       	cpse	r18, r1
     294:	2b c0       	rjmp	.+86     	; 0x2ec <updir+0x72>
     296:	ec 01       	movw	r28, r24
		self->heldUp = true; // Markera att knappen hålls nere
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     29c:	04 81       	ldd	r16, Z+4	; 0x04
     29e:	15 81       	ldd	r17, Z+5	; 0x05
     2a0:	c1 2c       	mov	r12, r1
     2a2:	d1 2c       	mov	r13, r1
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f8 e2       	ldi	r31, 0x28	; 40
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f3 e0       	ldi	r31, 0x03	; 3
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	cb 01       	movw	r24, r22
     2bc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     2c0:	88 85       	ldd	r24, Y+8	; 0x08
     2c2:	81 11       	cpse	r24, r1
     2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <updir+0x7a>
			self->holdUpRunning = true;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	88 87       	std	Y+8, r24	; 0x08
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     2ca:	0f 2e       	mov	r0, r31
     2cc:	fd e4       	ldi	r31, 0x4D	; 77
     2ce:	ef 2e       	mov	r14, r31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ff 2e       	mov	r15, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	8e 01       	movw	r16, r28
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	a9 01       	movw	r20, r18
     2de:	69 e0       	ldi	r22, 0x09	; 9
     2e0:	7d e3       	ldi	r23, 0x3D	; 61
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <updir+0x7a>
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     2ec:	1e 9b       	sbis	0x03, 6	; 3
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <updir+0x7a>
		self->heldUp = false;
     2f0:	fc 01       	movw	r30, r24
     2f2:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     31a:	1f 99       	sbic	0x03, 7	; 3
     31c:	2f c0       	rjmp	.+94     	; 0x37c <downdir+0x72>
     31e:	fc 01       	movw	r30, r24
     320:	27 81       	ldd	r18, Z+7	; 0x07
     322:	21 11       	cpse	r18, r1
     324:	2b c0       	rjmp	.+86     	; 0x37c <downdir+0x72>
     326:	ec 01       	movw	r28, r24
		self->heldDown = true; // Markera att knappen hålls nere
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	87 83       	std	Z+7, r24	; 0x07
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     32c:	04 81       	ldd	r16, Z+4	; 0x04
     32e:	15 81       	ldd	r17, Z+5	; 0x05
     330:	c1 2c       	mov	r12, r1
     332:	d1 2c       	mov	r13, r1
     334:	0f 2e       	mov	r0, r31
     336:	f5 e7       	ldi	r31, 0x75	; 117
     338:	ef 2e       	mov	r14, r31
     33a:	f3 e0       	ldi	r31, 0x03	; 3
     33c:	ff 2e       	mov	r15, r31
     33e:	f0 2d       	mov	r31, r0
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	a9 01       	movw	r20, r18
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	cb 01       	movw	r24, r22
     34c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     350:	89 85       	ldd	r24, Y+9	; 0x09
     352:	81 11       	cpse	r24, r1
     354:	17 c0       	rjmp	.+46     	; 0x384 <downdir+0x7a>
			self->holdDownRunning = true;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	89 87       	std	Y+9, r24	; 0x09
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     35a:	0f 2e       	mov	r0, r31
     35c:	fc e8       	ldi	r31, 0x8C	; 140
     35e:	ef 2e       	mov	r14, r31
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	8e 01       	movw	r16, r28
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	a9 01       	movw	r20, r18
     36e:	69 e0       	ldi	r22, 0x09	; 9
     370:	7d e3       	ldi	r23, 0x3D	; 61
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <downdir+0x7a>
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     37c:	1f 9b       	sbis	0x03, 7	; 3
     37e:	02 c0       	rjmp	.+4      	; 0x384 <downdir+0x7a>
		self->heldDown = false;
     380:	fc 01       	movw	r30, r24
     382:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <centerdir>:
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
	if (PRESSEDCN) {
     3a6:	1c 99       	sbic	0x03, 4	; 3
     3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <centerdir+0x38>
     3aa:	fc 01       	movw	r30, r24
		AFTER(MSEC(100),self->gui, guiFrecReset, 0);
     3ac:	04 81       	ldd	r16, Z+4	; 0x04
     3ae:	15 81       	ldd	r17, Z+5	; 0x05
     3b0:	c1 2c       	mov	r12, r1
     3b2:	d1 2c       	mov	r13, r1
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f2 ec       	ldi	r31, 0xC2	; 194
     3b8:	ef 2e       	mov	r14, r31
     3ba:	f3 e0       	ldi	r31, 0x03	; 3
     3bc:	ff 2e       	mov	r15, r31
     3be:	f0 2d       	mov	r31, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	a9 01       	movw	r20, r18
     3c6:	65 e3       	ldi	r22, 0x35	; 53
     3c8:	7c e0       	ldi	r23, 0x0C	; 12
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	}
	return 0;
}
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     3ea:	1e 99       	sbic	0x03, 6	; 3
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <buttonCheckerUDC+0x14>
		updir(self, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 3d 01 	call	0x27a	; 0x27a <updir>
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <buttonCheckerUDC+0x16>
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     3f8:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN) {
     3fa:	1f 99       	sbic	0x03, 7	; 3
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		downdir(self, 0); // Hantera ner-knappen
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	ce 01       	movw	r24, r28
     404:	0e 94 85 01 	call	0x30a	; 0x30a <downdir>
     408:	01 c0       	rjmp	.+2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     40a:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN) {
     40c:	1c 99       	sbic	0x03, 4	; 3
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		centerdir(self, 0);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	ce 01       	movw	r24, r28
     416:	0e 94 cd 01 	call	0x39a	; 0x39a <centerdir>
	}
	return 0;
}
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     424:	80 ec       	ldi	r24, 0xC0	; 192
     426:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     42a:	87 eb       	ldi	r24, 0xB7	; 183
     42c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     436:	08 95       	ret

00000438 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     438:	66 30       	cpi	r22, 0x06	; 6
     43a:	71 05       	cpc	r23, r1
     43c:	08 f0       	brcs	.+2      	; 0x440 <writeChar+0x8>
     43e:	6b c0       	rjmp	.+214    	; 0x516 <__stack+0x17>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     440:	90 ed       	ldi	r25, 0xD0	; 208
     442:	98 0f       	add	r25, r24
     444:	9a 30       	cpi	r25, 0x0A	; 10
     446:	48 f4       	brcc	.+18     	; 0x45a <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     448:	e8 2f       	mov	r30, r24
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	e3 52       	subi	r30, 0x23	; 35
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	02 c0       	rjmp	.+4      	; 0x45e <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     45e:	fb 01       	movw	r30, r22
     460:	77 23       	and	r23, r23
     462:	0c f4       	brge	.+2      	; 0x466 <writeChar+0x2e>
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	f5 95       	asr	r31
     468:	e7 95       	ror	r30
     46a:	e4 51       	subi	r30, 0x14	; 20
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     46e:	61 70       	andi	r22, 0x01	; 1
     470:	70 78       	andi	r23, 0x80	; 128
     472:	77 23       	and	r23, r23
     474:	34 f4       	brge	.+12     	; 0x482 <writeChar+0x4a>
     476:	61 50       	subi	r22, 0x01	; 1
     478:	71 09       	sbc	r23, r1
     47a:	6e 6f       	ori	r22, 0xFE	; 254
     47c:	7f 6f       	ori	r23, 0xFF	; 255
     47e:	6f 5f       	subi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	66 0f       	add	r22, r22
     488:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	06 2e       	mov	r0, r22
     490:	02 c0       	rjmp	.+4      	; 0x496 <writeChar+0x5e>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <writeChar+0x5a>
     49a:	80 95       	com	r24
     49c:	40 81       	ld	r20, Z
     49e:	98 2f       	mov	r25, r24
     4a0:	94 23       	and	r25, r20
     4a2:	a9 01       	movw	r20, r18
     4a4:	4f 70       	andi	r20, 0x0F	; 15
     4a6:	55 27       	eor	r21, r21
     4a8:	06 2e       	mov	r0, r22
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <writeChar+0x78>
     4ac:	44 0f       	add	r20, r20
     4ae:	55 1f       	adc	r21, r21
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <writeChar+0x74>
     4b4:	49 2b       	or	r20, r25
     4b6:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     4b8:	a9 01       	movw	r20, r18
     4ba:	52 95       	swap	r21
     4bc:	42 95       	swap	r20
     4be:	4f 70       	andi	r20, 0x0F	; 15
     4c0:	45 27       	eor	r20, r21
     4c2:	5f 70       	andi	r21, 0x0F	; 15
     4c4:	45 27       	eor	r20, r21
     4c6:	4f 70       	andi	r20, 0x0F	; 15
     4c8:	55 27       	eor	r21, r21
     4ca:	06 2e       	mov	r0, r22
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <writeChar+0x9a>
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	0a 94       	dec	r0
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <writeChar+0x96>
     4d6:	95 81       	ldd	r25, Z+5	; 0x05
     4d8:	98 23       	and	r25, r24
     4da:	49 2b       	or	r20, r25
     4dc:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     4de:	43 2f       	mov	r20, r19
     4e0:	55 27       	eor	r21, r21
     4e2:	4f 70       	andi	r20, 0x0F	; 15
     4e4:	55 27       	eor	r21, r21
     4e6:	06 2e       	mov	r0, r22
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <writeChar+0xb6>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	0a 94       	dec	r0
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <writeChar+0xb2>
     4f2:	92 85       	ldd	r25, Z+10	; 0x0a
     4f4:	98 23       	and	r25, r24
     4f6:	49 2b       	or	r20, r25
     4f8:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     4fa:	47 85       	ldd	r20, Z+15	; 0x0f
     4fc:	48 23       	and	r20, r24
     4fe:	c9 01       	movw	r24, r18
     500:	89 2f       	mov	r24, r25
     502:	99 27       	eor	r25, r25
     504:	82 95       	swap	r24
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	02 c0       	rjmp	.+4      	; 0x50e <__stack+0xf>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	6a 95       	dec	r22
     510:	e2 f7       	brpl	.-8      	; 0x50a <__stack+0xb>
     512:	84 2b       	or	r24, r20
     514:	87 87       	std	Z+15, r24	; 0x0f
     516:	08 95       	ret

00000518 <printAt>:
}

void printAt(long num, int pos) {
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	4b 01       	movw	r8, r22
     52e:	5c 01       	movw	r10, r24
     530:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     532:	24 e6       	ldi	r18, 0x64	; 100
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 36 12 	call	0x246c	; 0x246c <__divmodsi4>
     53e:	0f 2e       	mov	r0, r31
     540:	fa e0       	ldi	r31, 0x0A	; 10
     542:	cf 2e       	mov	r12, r31
     544:	d1 2c       	mov	r13, r1
     546:	e1 2c       	mov	r14, r1
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	a7 01       	movw	r20, r14
     54e:	96 01       	movw	r18, r12
     550:	0e 94 36 12 	call	0x246c	; 0x246c <__divmodsi4>
     554:	be 01       	movw	r22, r28
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	82 0f       	add	r24, r18
     55a:	0e 94 1c 02 	call	0x438	; 0x438 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     55e:	21 96       	adiw	r28, 0x01	; 1
     560:	c5 01       	movw	r24, r10
     562:	b4 01       	movw	r22, r8
     564:	a7 01       	movw	r20, r14
     566:	96 01       	movw	r18, r12
     568:	0e 94 36 12 	call	0x246c	; 0x246c <__divmodsi4>
     56c:	86 2f       	mov	r24, r22
     56e:	be 01       	movw	r22, r28
     570:	80 5d       	subi	r24, 0xD0	; 208
     572:	0e 94 1c 02 	call	0x438	; 0x438 <writeChar>
	
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	9f 90       	pop	r9
     588:	8f 90       	pop	r8
     58a:	08 95       	ret

0000058c <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	66 e1       	ldi	r22, 0x16	; 22
     598:	75 e0       	ldi	r23, 0x05	; 5
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	0e 94 bf 10 	call	0x217e	; 0x217e <sync>
     5a2:	bc 01       	movw	r22, r24
     5a4:	99 0f       	add	r25, r25
     5a6:	88 0b       	sbc	r24, r24
     5a8:	99 0b       	sbc	r25, r25
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	66 e1       	ldi	r22, 0x16	; 22
     5b8:	75 e0       	ldi	r23, 0x05	; 5
     5ba:	8e 81       	ldd	r24, Y+6	; 0x06
     5bc:	9f 81       	ldd	r25, Y+7	; 0x07
     5be:	0e 94 bf 10 	call	0x217e	; 0x217e <sync>
     5c2:	bc 01       	movw	r22, r24
     5c4:	99 0f       	add	r25, r25
     5c6:	88 0b       	sbc	r24, r24
     5c8:	99 0b       	sbc	r25, r25
     5ca:	44 e0       	ldi	r20, 0x04	; 4
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	81 11       	cpse	r24, r1
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <updateDisplay+0x5e>
		printAt(10, 2);
     5d8:	42 e0       	ldi	r20, 0x02	; 2
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	6a e0       	ldi	r22, 0x0A	; 10
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     5ea:	42 e0       	ldi	r20, 0x02	; 2
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
	}
	return 0;
}
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	67 2b       	or	r22, r23
     614:	09 f4       	brne	.+2      	; 0x618 <switchGen+0x14>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay,
	// så att vi inte blockeras, men ändå uppdaterar displayen direkt.
	ASYNC(self, updateDisplay, 0);
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	0f 2e       	mov	r0, r31
     622:	f6 ec       	ldi	r31, 0xC6	; 198
     624:	ef 2e       	mov	r14, r31
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	ff 2e       	mov	r15, r31
     62a:	f0 2d       	mov	r31, r0
     62c:	8c 01       	movw	r16, r24
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	cb 01       	movw	r24, r22
     63a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	return 0;
}
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret

00000650 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     662:	88 85       	ldd	r24, Y+8	; 0x08
     664:	81 11       	cpse	r24, r1
     666:	13 c0       	rjmp	.+38     	; 0x68e <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     668:	0c 81       	ldd	r16, Y+4	; 0x04
     66a:	1d 81       	ldd	r17, Y+5	; 0x05
     66c:	c1 2c       	mov	r12, r1
     66e:	d1 2c       	mov	r13, r1
     670:	0f 2e       	mov	r0, r31
     672:	fa e1       	ldi	r31, 0x1A	; 26
     674:	ef 2e       	mov	r14, r31
     676:	f5 e0       	ldi	r31, 0x05	; 5
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	cb 01       	movw	r24, r22
     688:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     68c:	12 c0       	rjmp	.+36     	; 0x6b2 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     68e:	0e 81       	ldd	r16, Y+6	; 0x06
     690:	1f 81       	ldd	r17, Y+7	; 0x07
     692:	c1 2c       	mov	r12, r1
     694:	d1 2c       	mov	r13, r1
     696:	0f 2e       	mov	r0, r31
     698:	fa e1       	ldi	r31, 0x1A	; 26
     69a:	ef 2e       	mov	r14, r31
     69c:	f5 e0       	ldi	r31, 0x05	; 5
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	}
	ASYNC(self, updateDisplay, 0);
     6b2:	c1 2c       	mov	r12, r1
     6b4:	d1 2c       	mov	r13, r1
     6b6:	0f 2e       	mov	r0, r31
     6b8:	f6 ec       	ldi	r31, 0xC6	; 198
     6ba:	ef 2e       	mov	r14, r31
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	ff 2e       	mov	r15, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	8e 01       	movw	r16, r28
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	cb 01       	movw	r24, r22
     6d0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	return 0;

}
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6fc:	88 85       	ldd	r24, Y+8	; 0x08
     6fe:	81 11       	cpse	r24, r1
     700:	13 c0       	rjmp	.+38     	; 0x728 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     702:	0c 81       	ldd	r16, Y+4	; 0x04
     704:	1d 81       	ldd	r17, Y+5	; 0x05
     706:	c1 2c       	mov	r12, r1
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	fa e4       	ldi	r31, 0x4A	; 74
     70e:	ef 2e       	mov	r14, r31
     710:	f5 e0       	ldi	r31, 0x05	; 5
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     726:	12 c0       	rjmp	.+36     	; 0x74c <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     728:	0e 81       	ldd	r16, Y+6	; 0x06
     72a:	1f 81       	ldd	r17, Y+7	; 0x07
     72c:	c1 2c       	mov	r12, r1
     72e:	d1 2c       	mov	r13, r1
     730:	0f 2e       	mov	r0, r31
     732:	fa e4       	ldi	r31, 0x4A	; 74
     734:	ef 2e       	mov	r14, r31
     736:	f5 e0       	ldi	r31, 0x05	; 5
     738:	ff 2e       	mov	r15, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	a9 01       	movw	r20, r18
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	cb 01       	movw	r24, r22
     748:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	}
	ASYNC(self, updateDisplay, 0);
     74c:	c1 2c       	mov	r12, r1
     74e:	d1 2c       	mov	r13, r1
     750:	0f 2e       	mov	r0, r31
     752:	f6 ec       	ldi	r31, 0xC6	; 198
     754:	ef 2e       	mov	r14, r31
     756:	f2 e0       	ldi	r31, 0x02	; 2
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	8e 01       	movw	r16, r28
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	return 0;
}
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	08 95       	ret

00000784 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     796:	88 85       	ldd	r24, Y+8	; 0x08
     798:	81 11       	cpse	r24, r1
     79a:	13 c0       	rjmp	.+38     	; 0x7c2 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     79c:	0c 81       	ldd	r16, Y+4	; 0x04
     79e:	1d 81       	ldd	r17, Y+5	; 0x05
     7a0:	c1 2c       	mov	r12, r1
     7a2:	d1 2c       	mov	r13, r1
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f3 e5       	ldi	r31, 0x53	; 83
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f5 e0       	ldi	r31, 0x05	; 5
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     7c2:	0e 81       	ldd	r16, Y+6	; 0x06
     7c4:	1f 81       	ldd	r17, Y+7	; 0x07
     7c6:	c1 2c       	mov	r12, r1
     7c8:	d1 2c       	mov	r13, r1
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f3 e5       	ldi	r31, 0x53	; 83
     7ce:	ef 2e       	mov	r14, r31
     7d0:	f5 e0       	ldi	r31, 0x05	; 5
     7d2:	ff 2e       	mov	r15, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	a9 01       	movw	r20, r18
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	cb 01       	movw	r24, r22
     7e2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	}
	ASYNC(self, updateDisplay, 0);
     7e6:	c1 2c       	mov	r12, r1
     7e8:	d1 2c       	mov	r13, r1
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f6 ec       	ldi	r31, 0xC6	; 198
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	8e 01       	movw	r16, r28
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a9 01       	movw	r20, r18
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	cb 01       	movw	r24, r22
     804:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	return 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     82a:	fc 01       	movw	r30, r24
     82c:	04 81       	ldd	r16, Z+4	; 0x04
     82e:	15 81       	ldd	r17, Z+5	; 0x05
     830:	c1 2c       	mov	r12, r1
     832:	d1 2c       	mov	r13, r1
     834:	0f 2e       	mov	r0, r31
     836:	f8 e2       	ldi	r31, 0x28	; 40
     838:	ef 2e       	mov	r14, r31
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	ff 2e       	mov	r15, r31
     83e:	f0 2d       	mov	r31, r0
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	cb 01       	movw	r24, r22
     84c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	return 0;
}
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	08 95       	ret

00000862 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     86e:	fc 01       	movw	r30, r24
     870:	04 81       	ldd	r16, Z+4	; 0x04
     872:	15 81       	ldd	r17, Z+5	; 0x05
     874:	c1 2c       	mov	r12, r1
     876:	d1 2c       	mov	r13, r1
     878:	0f 2e       	mov	r0, r31
     87a:	f2 ef       	ldi	r31, 0xF2	; 242
     87c:	ef 2e       	mov	r14, r31
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	ff 2e       	mov	r15, r31
     882:	f0 2d       	mov	r31, r0
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a9 01       	movw	r20, r18
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	cb 01       	movw	r24, r22
     890:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	return 0;
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
     8bc:	0f 2e       	mov	r0, r31
     8be:	ff ea       	ldi	r31, 0xAF	; 175
     8c0:	ef 2e       	mov	r14, r31
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	ff 2e       	mov	r15, r31
     8c6:	f0 2d       	mov	r31, r0
     8c8:	02 e2       	ldi	r16, 0x22	; 34
     8ca:	11 e0       	ldi	r17, 0x01	; 1
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	cb 01       	movw	r24, r22
     8d8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	ASYNC(&pulseGen2, setPulse, 0);
     8dc:	09 e1       	ldi	r16, 0x19	; 25
     8de:	11 e0       	ldi	r17, 0x01	; 1
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	a9 01       	movw	r20, r18
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	cb 01       	movw	r24, r22
     8ec:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f6 ec       	ldi	r31, 0xC6	; 198
     8f4:	ef 2e       	mov	r14, r31
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	ff 2e       	mov	r15, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	8e 01       	movw	r16, r28
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	cb 01       	movw	r24, r22
     90a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>

	return 0;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	08 95       	ret

00000924 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     924:	0e 94 90 05 	call	0xb20	; 0xb20 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     928:	0e 94 12 02 	call	0x424	; 0x424 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     92c:	0e 94 cb 00 	call	0x196	; 0x196 <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	6f e0       	ldi	r22, 0x0F	; 15
     934:	74 e0       	ldi	r23, 0x04	; 4
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 ba 11 	call	0x2374	; 0x2374 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     93e:	42 e0       	ldi	r20, 0x02	; 2
     940:	61 e3       	ldi	r22, 0x31	; 49
     942:	74 e0       	ldi	r23, 0x04	; 4
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 ba 11 	call	0x2374	; 0x2374 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	63 e5       	ldi	r22, 0x53	; 83
     952:	74 e0       	ldi	r23, 0x04	; 4
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <tinytimber>
}
     95c:	08 95       	ret

0000095e <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	81 11       	cpse	r24, r1
     974:	13 c0       	rjmp	.+38     	; 0x99c <setPulse+0x3e>
	    ASYNC(self->wbit, writeBit, 0);
     976:	0f 81       	ldd	r16, Y+7	; 0x07
     978:	18 85       	ldd	r17, Y+8	; 0x08
     97a:	c1 2c       	mov	r12, r1
     97c:	d1 2c       	mov	r13, r1
     97e:	0f 2e       	mov	r0, r31
     980:	f0 ef       	ldi	r31, 0xF0	; 240
     982:	ef 2e       	mov	r14, r31
     984:	f1 e1       	ldi	r31, 0x11	; 17
     986:	ff 2e       	mov	r15, r31
     988:	f0 2d       	mov	r31, r0
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	cb 01       	movw	r24, r22
     996:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	    return 0;
     99a:	3d c0       	rjmp	.+122    	; 0xa16 <setPulse+0xb8>
    }
	// Annars toggla outputHigh (true/false => bit=1/0).
    ASYNC(self->wbit, toggleBit, 0);
     99c:	0f 81       	ldd	r16, Y+7	; 0x07
     99e:	18 85       	ldd	r17, Y+8	; 0x08
     9a0:	c1 2c       	mov	r12, r1
     9a2:	d1 2c       	mov	r13, r1
     9a4:	0f 2e       	mov	r0, r31
     9a6:	f3 e1       	ldi	r31, 0x13	; 19
     9a8:	ef 2e       	mov	r14, r31
     9aa:	f2 e1       	ldi	r31, 0x12	; 18
     9ac:	ff 2e       	mov	r15, r31
     9ae:	f0 2d       	mov	r31, r0
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	a9 01       	movw	r20, r18
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	cb 01       	movw	r24, r22
     9bc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
	
	// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
    int delay = 1000 / self->frec;
    AFTER(MSEC(delay), self, setPulse, 0);
     9c0:	6c 81       	ldd	r22, Y+4	; 0x04
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	88 ee       	ldi	r24, 0xE8	; 232
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	0e 94 22 12 	call	0x2444	; 0x2444 <__divmodhi4>
     9cc:	2d e7       	ldi	r18, 0x7D	; 125
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	db 01       	movw	r26, r22
     9d2:	0e 94 55 12 	call	0x24aa	; 0x24aa <__usmulhisi3>
     9d6:	8b 01       	movw	r16, r22
     9d8:	9c 01       	movw	r18, r24
     9da:	99 23       	and	r25, r25
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <setPulse+0x88>
     9de:	0d 5f       	subi	r16, 0xFD	; 253
     9e0:	1f 4f       	sbci	r17, 0xFF	; 255
     9e2:	2f 4f       	sbci	r18, 0xFF	; 255
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	c9 01       	movw	r24, r18
     9e8:	b8 01       	movw	r22, r16
     9ea:	95 95       	asr	r25
     9ec:	87 95       	ror	r24
     9ee:	77 95       	ror	r23
     9f0:	67 95       	ror	r22
     9f2:	95 95       	asr	r25
     9f4:	87 95       	ror	r24
     9f6:	77 95       	ror	r23
     9f8:	67 95       	ror	r22
     9fa:	c1 2c       	mov	r12, r1
     9fc:	d1 2c       	mov	r13, r1
     9fe:	0f 2e       	mov	r0, r31
     a00:	ff ea       	ldi	r31, 0xAF	; 175
     a02:	ef 2e       	mov	r14, r31
     a04:	f4 e0       	ldi	r31, 0x04	; 4
     a06:	ff 2e       	mov	r15, r31
     a08:	f0 2d       	mov	r31, r0
     a0a:	8e 01       	movw	r16, r28
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	a9 01       	movw	r20, r18
     a12:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
    return 0;
}
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	df 90       	pop	r13
     a28:	cf 90       	pop	r12
     a2a:	08 95       	ret

00000a2c <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     a2c:	fc 01       	movw	r30, r24
     a2e:	84 81       	ldd	r24, Z+4	; 0x04
}
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	08 95       	ret

00000a34 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     a34:	cf 92       	push	r12
     a36:	df 92       	push	r13
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	ec 01       	movw	r28, r24
    unsigned char old = self->frec;
     a46:	8c 81       	ldd	r24, Y+4	; 0x04
    if (self->frec < 99) {
     a48:	83 36       	cpi	r24, 0x63	; 99
     a4a:	18 f4       	brcc	.+6      	; 0xa52 <FrecInc+0x1e>
	    self->frec++;
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	98 0f       	add	r25, r24
     a50:	9c 83       	std	Y+4, r25	; 0x04
    }
    // Om går från 0 till mer än 0 starta.
    if (old == 0 && self->frec > 0) {
     a52:	81 11       	cpse	r24, r1
     a54:	14 c0       	rjmp	.+40     	; 0xa7e <FrecInc+0x4a>
     a56:	8c 81       	ldd	r24, Y+4	; 0x04
     a58:	88 23       	and	r24, r24
     a5a:	89 f0       	breq	.+34     	; 0xa7e <FrecInc+0x4a>
	    ASYNC(self, setPulse, 0);
     a5c:	c1 2c       	mov	r12, r1
     a5e:	d1 2c       	mov	r13, r1
     a60:	0f 2e       	mov	r0, r31
     a62:	ff ea       	ldi	r31, 0xAF	; 175
     a64:	ef 2e       	mov	r14, r31
     a66:	f4 e0       	ldi	r31, 0x04	; 4
     a68:	ff 2e       	mov	r15, r31
     a6a:	f0 2d       	mov	r31, r0
     a6c:	8e 01       	movw	r16, r28
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	a9 01       	movw	r20, r18
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	cb 01       	movw	r24, r22
     a7a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
    }
    return self->frec;
     a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    }
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     a94:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     a96:	94 81       	ldd	r25, Z+4	; 0x04
     a98:	99 23       	and	r25, r25
     a9a:	11 f0       	breq	.+4      	; 0xaa0 <FrecDec+0xc>
		self->frec--;
     a9c:	91 50       	subi	r25, 0x01	; 1
     a9e:	94 83       	std	Z+4, r25	; 0x04
	}
	return self->frec;
     aa0:	84 81       	ldd	r24, Z+4	; 0x04
}
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	08 95       	ret

00000aa6 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     ab4:	84 81       	ldd	r24, Z+4	; 0x04
     ab6:	81 11       	cpse	r24, r1
     ab8:	16 c0       	rjmp	.+44     	; 0xae6 <FrecReset+0x40>
	    self->frec = self->frec_old;
     aba:	85 81       	ldd	r24, Z+5	; 0x05
     abc:	84 83       	std	Z+4, r24	; 0x04
	    if (self->frec > 0) {
     abe:	88 23       	and	r24, r24
     ac0:	31 f1       	breq	.+76     	; 0xb0e <FrecReset+0x68>
		    ASYNC(self, setPulse, 0);
     ac2:	c1 2c       	mov	r12, r1
     ac4:	d1 2c       	mov	r13, r1
     ac6:	0f 2e       	mov	r0, r31
     ac8:	ff ea       	ldi	r31, 0xAF	; 175
     aca:	ef 2e       	mov	r14, r31
     acc:	f4 e0       	ldi	r31, 0x04	; 4
     ace:	ff 2e       	mov	r15, r31
     ad0:	f0 2d       	mov	r31, r0
     ad2:	8f 01       	movw	r16, r30
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	a9 01       	movw	r20, r18
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	cb 01       	movw	r24, r22
     ae0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
     ae4:	14 c0       	rjmp	.+40     	; 0xb0e <FrecReset+0x68>
	    }
	    } else {
	    self->frec_old = self->frec;
     ae6:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     ae8:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     aea:	07 81       	ldd	r16, Z+7	; 0x07
     aec:	10 85       	ldd	r17, Z+8	; 0x08
     aee:	c1 2c       	mov	r12, r1
     af0:	d1 2c       	mov	r13, r1
     af2:	0f 2e       	mov	r0, r31
     af4:	f0 ef       	ldi	r31, 0xF0	; 240
     af6:	ef 2e       	mov	r14, r31
     af8:	f1 e1       	ldi	r31, 0x11	; 17
     afa:	ff 2e       	mov	r15, r31
     afc:	f0 2d       	mov	r31, r0
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	a9 01       	movw	r20, r18
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	cb 01       	movw	r24, r22
     b0a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
    }
    return 0;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	08 95       	ret

00000b20 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     b20:	e1 e6       	ldi	r30, 0x61	; 97
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 e8       	ldi	r24, 0x80	; 128
     b26:	80 83       	st	Z, r24
	CLKPR = 0x00;
     b28:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     b2a:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     b2c:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     b2e:	e1 e8       	ldi	r30, 0x81	; 129
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8d 60       	ori	r24, 0x0D	; 13
     b36:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     b38:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     b40:	ef e6       	ldi	r30, 0x6F	; 111
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	82 60       	ori	r24, 0x02	; 2
     b48:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     b4a:	82 ec       	ldi	r24, 0xC2	; 194
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b52:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b56:	08 95       	ret

00000b58 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <initialize+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <initialize+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	85 e4       	ldi	r24, 0x45	; 69
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	25 e2       	ldi	r18, 0x25	; 37
     b6a:	33 e0       	ldi	r19, 0x03	; 3
     b6c:	fc 01       	movw	r30, r24
     b6e:	70 97       	sbiw	r30, 0x10	; 16
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	80 83       	st	Z, r24
     b74:	40 96       	adiw	r24, 0x10	; 16
     b76:	82 17       	cp	r24, r18
     b78:	93 07       	cpc	r25, r19
     b7a:	c1 f7       	brne	.-16     	; 0xb6c <initialize+0x14>
     b7c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <messages+0xe1>
     b80:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <messages+0xe0>
     b84:	e0 e8       	ldi	r30, 0x80	; 128
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	8d e9       	ldi	r24, 0x9D	; 157
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	80 83       	st	Z, r24
     b90:	8a eb       	ldi	r24, 0xBA	; 186
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	96 8f       	std	Z+30, r25	; 0x1e
     b96:	85 8f       	std	Z+29, r24	; 0x1d
     b98:	a7 ed       	ldi	r26, 0xD7	; 215
     b9a:	b1 e0       	ldi	r27, 0x01	; 1
     b9c:	b3 af       	std	Z+59, r27	; 0x3b
     b9e:	a2 af       	std	Z+58, r26	; 0x3a
     ba0:	1d 92       	st	X+, r1
     ba2:	1c 92       	st	X, r1
     ba4:	fa 83       	std	Y+2, r31	; 0x02
     ba6:	e9 83       	std	Y+1, r30	; 0x01
     ba8:	e1 e8       	ldi	r30, 0x81	; 129
     baa:	f3 e0       	ldi	r31, 0x03	; 3
     bac:	fc 83       	std	Y+4, r31	; 0x04
     bae:	eb 83       	std	Y+3, r30	; 0x03
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	06 96       	adiw	r24, 0x06	; 6
     bb6:	0e 94 a1 12 	call	0x2542	; 0x2542 <setjmp>
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	e9 81       	ldd	r30, Y+1	; 0x01
     bc0:	fa 81       	ldd	r31, Y+2	; 0x02
     bc2:	97 8b       	std	Z+23, r25	; 0x17
     bc4:	86 8b       	std	Z+22, r24	; 0x16
     bc6:	91 8f       	std	Z+25, r25	; 0x19
     bc8:	80 8f       	std	Z+24, r24	; 0x18
     bca:	8c e4       	ldi	r24, 0x4C	; 76
     bcc:	91 e1       	ldi	r25, 0x11	; 17
     bce:	94 8f       	std	Z+28, r25	; 0x1c
     bd0:	83 8f       	std	Z+27, r24	; 0x1b
     bd2:	15 82       	std	Z+5, r1	; 0x05
     bd4:	14 82       	std	Z+4, r1	; 0x04
     bd6:	7d 96       	adiw	r30, 0x1d	; 29
     bd8:	fa 83       	std	Y+2, r31	; 0x02
     bda:	e9 83       	std	Y+1, r30	; 0x01
     bdc:	eb 81       	ldd	r30, Y+3	; 0x03
     bde:	fc 81       	ldd	r31, Y+4	; 0x04
     be0:	e0 5a       	subi	r30, 0xA0	; 160
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	fc 83       	std	Y+4, r31	; 0x04
     be6:	eb 83       	std	Y+3, r30	; 0x03
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	84 5f       	subi	r24, 0xF4	; 244
     bee:	91 40       	sbci	r25, 0x01	; 1
     bf0:	f9 f6       	brne	.-66     	; 0xbb0 <initialize+0x58>
     bf2:	e8 e1       	ldi	r30, 0x18	; 24
     bf4:	f2 e0       	ldi	r31, 0x02	; 2
     bf6:	11 82       	std	Z+1, r1	; 0x01
     bf8:	10 82       	st	Z, r1
     bfa:	15 82       	std	Z+5, r1	; 0x05
     bfc:	14 82       	std	Z+4, r1	; 0x04
     bfe:	13 82       	std	Z+3, r1	; 0x03
     c00:	12 82       	std	Z+2, r1	; 0x02
     c02:	e1 e6       	ldi	r30, 0x61	; 97
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 e8       	ldi	r24, 0x80	; 128
     c08:	80 83       	st	Z, r24
     c0a:	10 82       	st	Z, r1
     c0c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c10:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <dispatch>:
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	00 d0       	rcall	.+0      	; 0xc34 <dispatch+0x6>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current>
     c40:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <current+0x1>
     c44:	06 96       	adiw	r24, 0x06	; 6
     c46:	0e 94 a1 12 	call	0x2542	; 0x2542 <setjmp>
     c4a:	89 2b       	or	r24, r25
     c4c:	59 f4       	brne	.+22     	; 0xc64 <dispatch+0x36>
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <current+0x1>
     c56:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <current>
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	06 96       	adiw	r24, 0x06	; 6
     c60:	0e 94 c1 12 	call	0x2582	; 0x2582 <longjmp>
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <schedule>:
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <msgQ>
     c7a:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <msgQ+0x1>
     c7e:	30 97       	sbiw	r30, 0x00	; 0
     c80:	61 f1       	breq	.+88     	; 0xcda <schedule+0x6c>
     c82:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <threadPool>
     c86:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <threadPool+0x1>
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	31 f1       	breq	.+76     	; 0xcda <schedule+0x6c>
     c8e:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <activeStack>
     c92:	d0 91 38 01 	lds	r29, 0x0138	; 0x800138 <activeStack+0x1>
     c96:	aa 81       	ldd	r26, Y+2	; 0x02
     c98:	bb 81       	ldd	r27, Y+3	; 0x03
     c9a:	10 97       	sbiw	r26, 0x00	; 0
     c9c:	79 f0       	breq	.+30     	; 0xcbc <schedule+0x4e>
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	60 85       	ldd	r22, Z+8	; 0x08
     ca4:	71 85       	ldd	r23, Z+9	; 0x09
     ca6:	16 96       	adiw	r26, 0x06	; 6
     ca8:	0d 91       	ld	r16, X+
     caa:	1d 91       	ld	r17, X+
     cac:	2d 91       	ld	r18, X+
     cae:	3c 91       	ld	r19, X
     cb0:	19 97       	sbiw	r26, 0x09	; 9
     cb2:	40 1b       	sub	r20, r16
     cb4:	51 0b       	sbc	r21, r17
     cb6:	62 0b       	sbc	r22, r18
     cb8:	73 0b       	sbc	r23, r19
     cba:	7a f4       	brpl	.+30     	; 0xcda <schedule+0x6c>
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <threadPool+0x1>
     cc6:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <threadPool>
     cca:	d1 83       	std	Z+1, r29	; 0x01
     ccc:	c0 83       	st	Z, r28
     cce:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <activeStack+0x1>
     cd2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <activeStack>
     cd6:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispatch>
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <__vector_1>:
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
     d06:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
     d0a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
     d0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d16:	c9 01       	movw	r24, r18
     d18:	03 2e       	mov	r0, r19
     d1a:	00 0c       	add	r0, r0
     d1c:	aa 0b       	sbc	r26, r26
     d1e:	bb 0b       	sbc	r27, r27
     d20:	dc 01       	movw	r26, r24
     d22:	99 27       	eor	r25, r25
     d24:	88 27       	eor	r24, r24
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	84 2b       	or	r24, r20
     d2c:	95 2b       	or	r25, r21
     d2e:	a6 2b       	or	r26, r22
     d30:	b7 2b       	or	r27, r23
     d32:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     d36:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     d3a:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     d3e:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     d42:	b0 9b       	sbis	0x16, 0	; 22
     d44:	1b c0       	rjmp	.+54     	; 0xd7c <__vector_1+0x98>
     d46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d4e:	c9 01       	movw	r24, r18
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	09 2e       	mov	r0, r25
     d54:	00 0c       	add	r0, r0
     d56:	aa 0b       	sbc	r26, r26
     d58:	bb 0b       	sbc	r27, r27
     d5a:	dc 01       	movw	r26, r24
     d5c:	99 27       	eor	r25, r25
     d5e:	88 27       	eor	r24, r24
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	84 2b       	or	r24, r20
     d66:	95 2b       	or	r25, r21
     d68:	a6 2b       	or	r26, r22
     d6a:	b7 2b       	or	r27, r23
     d6c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     d70:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     d74:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     d78:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     d7c:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable>
     d80:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1>
     d84:	30 97       	sbiw	r30, 0x00	; 0
     d86:	39 f0       	breq	.+14     	; 0xd96 <__vector_1+0xb2>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable>
     d90:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1>
     d94:	09 95       	icall
     d96:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_2>:
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
     de2:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
     de6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dee:	c9 01       	movw	r24, r18
     df0:	03 2e       	mov	r0, r19
     df2:	00 0c       	add	r0, r0
     df4:	aa 0b       	sbc	r26, r26
     df6:	bb 0b       	sbc	r27, r27
     df8:	dc 01       	movw	r26, r24
     dfa:	99 27       	eor	r25, r25
     dfc:	88 27       	eor	r24, r24
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	84 2b       	or	r24, r20
     e04:	95 2b       	or	r25, r21
     e06:	a6 2b       	or	r26, r22
     e08:	b7 2b       	or	r27, r23
     e0a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     e0e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     e12:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     e16:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     e1a:	b0 9b       	sbis	0x16, 0	; 22
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <__vector_2+0x98>
     e1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e26:	c9 01       	movw	r24, r18
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	09 2e       	mov	r0, r25
     e2c:	00 0c       	add	r0, r0
     e2e:	aa 0b       	sbc	r26, r26
     e30:	bb 0b       	sbc	r27, r27
     e32:	dc 01       	movw	r26, r24
     e34:	99 27       	eor	r25, r25
     e36:	88 27       	eor	r24, r24
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	84 2b       	or	r24, r20
     e3e:	95 2b       	or	r25, r21
     e40:	a6 2b       	or	r26, r22
     e42:	b7 2b       	or	r27, r23
     e44:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     e48:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     e4c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     e50:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     e54:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x2>
     e58:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x3>
     e5c:	30 97       	sbiw	r30, 0x00	; 0
     e5e:	39 f0       	breq	.+14     	; 0xe6e <__vector_2+0xb2>
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x2>
     e68:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x3>
     e6c:	09 95       	icall
     e6e:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_3>:
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
     eba:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
     ebe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ec2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ec6:	c9 01       	movw	r24, r18
     ec8:	03 2e       	mov	r0, r19
     eca:	00 0c       	add	r0, r0
     ecc:	aa 0b       	sbc	r26, r26
     ece:	bb 0b       	sbc	r27, r27
     ed0:	dc 01       	movw	r26, r24
     ed2:	99 27       	eor	r25, r25
     ed4:	88 27       	eor	r24, r24
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	84 2b       	or	r24, r20
     edc:	95 2b       	or	r25, r21
     ede:	a6 2b       	or	r26, r22
     ee0:	b7 2b       	or	r27, r23
     ee2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     ee6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     eea:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     eee:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     ef2:	b0 9b       	sbis	0x16, 0	; 22
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__vector_3+0x98>
     ef6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     efa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     efe:	c9 01       	movw	r24, r18
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	09 2e       	mov	r0, r25
     f04:	00 0c       	add	r0, r0
     f06:	aa 0b       	sbc	r26, r26
     f08:	bb 0b       	sbc	r27, r27
     f0a:	dc 01       	movw	r26, r24
     f0c:	99 27       	eor	r25, r25
     f0e:	88 27       	eor	r24, r24
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	84 2b       	or	r24, r20
     f16:	95 2b       	or	r25, r21
     f18:	a6 2b       	or	r26, r22
     f1a:	b7 2b       	or	r27, r23
     f1c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     f20:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     f24:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     f28:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     f2c:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x4>
     f30:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x5>
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	39 f0       	breq	.+14     	; 0xf46 <__vector_3+0xb2>
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x4>
     f40:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x5>
     f44:	09 95       	icall
     f46:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_4>:
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31
     f8e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
     f92:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
     f96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f9e:	c9 01       	movw	r24, r18
     fa0:	03 2e       	mov	r0, r19
     fa2:	00 0c       	add	r0, r0
     fa4:	aa 0b       	sbc	r26, r26
     fa6:	bb 0b       	sbc	r27, r27
     fa8:	dc 01       	movw	r26, r24
     faa:	99 27       	eor	r25, r25
     fac:	88 27       	eor	r24, r24
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	84 2b       	or	r24, r20
     fb4:	95 2b       	or	r25, r21
     fb6:	a6 2b       	or	r26, r22
     fb8:	b7 2b       	or	r27, r23
     fba:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     fbe:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     fc2:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
     fc6:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
     fca:	b0 9b       	sbis	0x16, 0	; 22
     fcc:	1b c0       	rjmp	.+54     	; 0x1004 <__vector_4+0x98>
     fce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fd2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fd6:	c9 01       	movw	r24, r18
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	09 2e       	mov	r0, r25
     fdc:	00 0c       	add	r0, r0
     fde:	aa 0b       	sbc	r26, r26
     fe0:	bb 0b       	sbc	r27, r27
     fe2:	dc 01       	movw	r26, r24
     fe4:	99 27       	eor	r25, r25
     fe6:	88 27       	eor	r24, r24
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	84 2b       	or	r24, r20
     fee:	95 2b       	or	r25, r21
     ff0:	a6 2b       	or	r26, r22
     ff2:	b7 2b       	or	r27, r23
     ff4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
     ff8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
     ffc:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1000:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1004:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x6>
    1008:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x7>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	39 f0       	breq	.+14     	; 0x101e <__vector_4+0xb2>
    1010:	63 e0       	ldi	r22, 0x03	; 3
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x6>
    1018:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x7>
    101c:	09 95       	icall
    101e:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_5>:
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    106a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    106e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1072:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1076:	c9 01       	movw	r24, r18
    1078:	03 2e       	mov	r0, r19
    107a:	00 0c       	add	r0, r0
    107c:	aa 0b       	sbc	r26, r26
    107e:	bb 0b       	sbc	r27, r27
    1080:	dc 01       	movw	r26, r24
    1082:	99 27       	eor	r25, r25
    1084:	88 27       	eor	r24, r24
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	84 2b       	or	r24, r20
    108c:	95 2b       	or	r25, r21
    108e:	a6 2b       	or	r26, r22
    1090:	b7 2b       	or	r27, r23
    1092:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1096:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    109a:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    109e:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    10a2:	b0 9b       	sbis	0x16, 0	; 22
    10a4:	1b c0       	rjmp	.+54     	; 0x10dc <__vector_5+0x98>
    10a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10ae:	c9 01       	movw	r24, r18
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	09 2e       	mov	r0, r25
    10b4:	00 0c       	add	r0, r0
    10b6:	aa 0b       	sbc	r26, r26
    10b8:	bb 0b       	sbc	r27, r27
    10ba:	dc 01       	movw	r26, r24
    10bc:	99 27       	eor	r25, r25
    10be:	88 27       	eor	r24, r24
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	84 2b       	or	r24, r20
    10c6:	95 2b       	or	r25, r21
    10c8:	a6 2b       	or	r26, r22
    10ca:	b7 2b       	or	r27, r23
    10cc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    10d0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    10d4:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    10d8:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    10dc:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x8>
    10e0:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x9>
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	39 f0       	breq	.+14     	; 0x10f6 <__vector_5+0xb2>
    10e8:	64 e0       	ldi	r22, 0x04	; 4
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x8>
    10f0:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x9>
    10f4:	09 95       	icall
    10f6:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_10>:
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1142:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1146:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    114a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    114e:	c9 01       	movw	r24, r18
    1150:	03 2e       	mov	r0, r19
    1152:	00 0c       	add	r0, r0
    1154:	aa 0b       	sbc	r26, r26
    1156:	bb 0b       	sbc	r27, r27
    1158:	dc 01       	movw	r26, r24
    115a:	99 27       	eor	r25, r25
    115c:	88 27       	eor	r24, r24
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	84 2b       	or	r24, r20
    1164:	95 2b       	or	r25, r21
    1166:	a6 2b       	or	r26, r22
    1168:	b7 2b       	or	r27, r23
    116a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    116e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1172:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1176:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    117a:	b0 9b       	sbis	0x16, 0	; 22
    117c:	1b c0       	rjmp	.+54     	; 0x11b4 <__vector_10+0x98>
    117e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1182:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1186:	c9 01       	movw	r24, r18
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	09 2e       	mov	r0, r25
    118c:	00 0c       	add	r0, r0
    118e:	aa 0b       	sbc	r26, r26
    1190:	bb 0b       	sbc	r27, r27
    1192:	dc 01       	movw	r26, r24
    1194:	99 27       	eor	r25, r25
    1196:	88 27       	eor	r24, r24
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	84 2b       	or	r24, r20
    119e:	95 2b       	or	r25, r21
    11a0:	a6 2b       	or	r26, r22
    11a2:	b7 2b       	or	r27, r23
    11a4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    11a8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    11ac:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    11b0:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    11b4:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0xa>
    11b8:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0xb>
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	39 f0       	breq	.+14     	; 0x11ce <__vector_10+0xb2>
    11c0:	65 e0       	ldi	r22, 0x05	; 5
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0xa>
    11c8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0xb>
    11cc:	09 95       	icall
    11ce:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_11>:
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
    1216:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    121a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    121e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1222:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1226:	c9 01       	movw	r24, r18
    1228:	03 2e       	mov	r0, r19
    122a:	00 0c       	add	r0, r0
    122c:	aa 0b       	sbc	r26, r26
    122e:	bb 0b       	sbc	r27, r27
    1230:	dc 01       	movw	r26, r24
    1232:	99 27       	eor	r25, r25
    1234:	88 27       	eor	r24, r24
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	84 2b       	or	r24, r20
    123c:	95 2b       	or	r25, r21
    123e:	a6 2b       	or	r26, r22
    1240:	b7 2b       	or	r27, r23
    1242:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1246:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    124a:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    124e:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1252:	b0 9b       	sbis	0x16, 0	; 22
    1254:	1b c0       	rjmp	.+54     	; 0x128c <__vector_11+0x98>
    1256:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    125a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    125e:	c9 01       	movw	r24, r18
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	09 2e       	mov	r0, r25
    1264:	00 0c       	add	r0, r0
    1266:	aa 0b       	sbc	r26, r26
    1268:	bb 0b       	sbc	r27, r27
    126a:	dc 01       	movw	r26, r24
    126c:	99 27       	eor	r25, r25
    126e:	88 27       	eor	r24, r24
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	84 2b       	or	r24, r20
    1276:	95 2b       	or	r25, r21
    1278:	a6 2b       	or	r26, r22
    127a:	b7 2b       	or	r27, r23
    127c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1280:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1284:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1288:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    128c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0xc>
    1290:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0xd>
    1294:	30 97       	sbiw	r30, 0x00	; 0
    1296:	39 f0       	breq	.+14     	; 0x12a6 <__vector_11+0xb2>
    1298:	66 e0       	ldi	r22, 0x06	; 6
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xc>
    12a0:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xd>
    12a4:	09 95       	icall
    12a6:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <__vector_12>:
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	2f 93       	push	r18
    12d8:	3f 93       	push	r19
    12da:	4f 93       	push	r20
    12dc:	5f 93       	push	r21
    12de:	6f 93       	push	r22
    12e0:	7f 93       	push	r23
    12e2:	8f 93       	push	r24
    12e4:	9f 93       	push	r25
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
    12ee:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    12f2:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    12f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12fe:	c9 01       	movw	r24, r18
    1300:	03 2e       	mov	r0, r19
    1302:	00 0c       	add	r0, r0
    1304:	aa 0b       	sbc	r26, r26
    1306:	bb 0b       	sbc	r27, r27
    1308:	dc 01       	movw	r26, r24
    130a:	99 27       	eor	r25, r25
    130c:	88 27       	eor	r24, r24
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	84 2b       	or	r24, r20
    1314:	95 2b       	or	r25, r21
    1316:	a6 2b       	or	r26, r22
    1318:	b7 2b       	or	r27, r23
    131a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    131e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1322:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1326:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    132a:	b0 9b       	sbis	0x16, 0	; 22
    132c:	1b c0       	rjmp	.+54     	; 0x1364 <__vector_12+0x98>
    132e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1332:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1336:	c9 01       	movw	r24, r18
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	09 2e       	mov	r0, r25
    133c:	00 0c       	add	r0, r0
    133e:	aa 0b       	sbc	r26, r26
    1340:	bb 0b       	sbc	r27, r27
    1342:	dc 01       	movw	r26, r24
    1344:	99 27       	eor	r25, r25
    1346:	88 27       	eor	r24, r24
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	84 2b       	or	r24, r20
    134e:	95 2b       	or	r25, r21
    1350:	a6 2b       	or	r26, r22
    1352:	b7 2b       	or	r27, r23
    1354:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1358:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    135c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1360:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1364:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xe>
    1368:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xf>
    136c:	30 97       	sbiw	r30, 0x00	; 0
    136e:	39 f0       	breq	.+14     	; 0x137e <__vector_12+0xb2>
    1370:	67 e0       	ldi	r22, 0x07	; 7
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xe>
    1378:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xf>
    137c:	09 95       	icall
    137e:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_13>:
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    13ca:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    13ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d6:	c9 01       	movw	r24, r18
    13d8:	03 2e       	mov	r0, r19
    13da:	00 0c       	add	r0, r0
    13dc:	aa 0b       	sbc	r26, r26
    13de:	bb 0b       	sbc	r27, r27
    13e0:	dc 01       	movw	r26, r24
    13e2:	99 27       	eor	r25, r25
    13e4:	88 27       	eor	r24, r24
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	84 2b       	or	r24, r20
    13ec:	95 2b       	or	r25, r21
    13ee:	a6 2b       	or	r26, r22
    13f0:	b7 2b       	or	r27, r23
    13f2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    13f6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    13fa:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    13fe:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1402:	b0 9b       	sbis	0x16, 0	; 22
    1404:	1b c0       	rjmp	.+54     	; 0x143c <__vector_13+0x98>
    1406:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    140a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    140e:	c9 01       	movw	r24, r18
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	09 2e       	mov	r0, r25
    1414:	00 0c       	add	r0, r0
    1416:	aa 0b       	sbc	r26, r26
    1418:	bb 0b       	sbc	r27, r27
    141a:	dc 01       	movw	r26, r24
    141c:	99 27       	eor	r25, r25
    141e:	88 27       	eor	r24, r24
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	84 2b       	or	r24, r20
    1426:	95 2b       	or	r25, r21
    1428:	a6 2b       	or	r26, r22
    142a:	b7 2b       	or	r27, r23
    142c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1430:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1434:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1438:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    143c:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x10>
    1440:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x11>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	39 f0       	breq	.+14     	; 0x1456 <__vector_13+0xb2>
    1448:	68 e0       	ldi	r22, 0x08	; 8
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x10>
    1450:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x11>
    1454:	09 95       	icall
    1456:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_14>:
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    14a2:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    14a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ae:	c9 01       	movw	r24, r18
    14b0:	03 2e       	mov	r0, r19
    14b2:	00 0c       	add	r0, r0
    14b4:	aa 0b       	sbc	r26, r26
    14b6:	bb 0b       	sbc	r27, r27
    14b8:	dc 01       	movw	r26, r24
    14ba:	99 27       	eor	r25, r25
    14bc:	88 27       	eor	r24, r24
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	84 2b       	or	r24, r20
    14c4:	95 2b       	or	r25, r21
    14c6:	a6 2b       	or	r26, r22
    14c8:	b7 2b       	or	r27, r23
    14ca:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    14ce:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    14d2:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    14d6:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    14da:	b0 9b       	sbis	0x16, 0	; 22
    14dc:	1b c0       	rjmp	.+54     	; 0x1514 <__vector_14+0x98>
    14de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14e6:	c9 01       	movw	r24, r18
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	09 2e       	mov	r0, r25
    14ec:	00 0c       	add	r0, r0
    14ee:	aa 0b       	sbc	r26, r26
    14f0:	bb 0b       	sbc	r27, r27
    14f2:	dc 01       	movw	r26, r24
    14f4:	99 27       	eor	r25, r25
    14f6:	88 27       	eor	r24, r24
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	84 2b       	or	r24, r20
    14fe:	95 2b       	or	r25, r21
    1500:	a6 2b       	or	r26, r22
    1502:	b7 2b       	or	r27, r23
    1504:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1508:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    150c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1510:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1514:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x12>
    1518:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x13>
    151c:	30 97       	sbiw	r30, 0x00	; 0
    151e:	39 f0       	breq	.+14     	; 0x152e <__vector_14+0xb2>
    1520:	69 e0       	ldi	r22, 0x09	; 9
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x12>
    1528:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x13>
    152c:	09 95       	icall
    152e:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_15>:
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    157a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    157e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1582:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1586:	c9 01       	movw	r24, r18
    1588:	03 2e       	mov	r0, r19
    158a:	00 0c       	add	r0, r0
    158c:	aa 0b       	sbc	r26, r26
    158e:	bb 0b       	sbc	r27, r27
    1590:	dc 01       	movw	r26, r24
    1592:	99 27       	eor	r25, r25
    1594:	88 27       	eor	r24, r24
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	84 2b       	or	r24, r20
    159c:	95 2b       	or	r25, r21
    159e:	a6 2b       	or	r26, r22
    15a0:	b7 2b       	or	r27, r23
    15a2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    15a6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    15aa:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    15ae:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    15b2:	b0 9b       	sbis	0x16, 0	; 22
    15b4:	1b c0       	rjmp	.+54     	; 0x15ec <__vector_15+0x98>
    15b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15be:	c9 01       	movw	r24, r18
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	09 2e       	mov	r0, r25
    15c4:	00 0c       	add	r0, r0
    15c6:	aa 0b       	sbc	r26, r26
    15c8:	bb 0b       	sbc	r27, r27
    15ca:	dc 01       	movw	r26, r24
    15cc:	99 27       	eor	r25, r25
    15ce:	88 27       	eor	r24, r24
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	84 2b       	or	r24, r20
    15d6:	95 2b       	or	r25, r21
    15d8:	a6 2b       	or	r26, r22
    15da:	b7 2b       	or	r27, r23
    15dc:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    15e0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    15e4:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    15e8:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    15ec:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x14>
    15f0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x15>
    15f4:	30 97       	sbiw	r30, 0x00	; 0
    15f6:	39 f0       	breq	.+14     	; 0x1606 <__vector_15+0xb2>
    15f8:	6a e0       	ldi	r22, 0x0A	; 10
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x14>
    1600:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x15>
    1604:	09 95       	icall
    1606:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_16>:
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1652:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1656:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    165a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    165e:	c9 01       	movw	r24, r18
    1660:	03 2e       	mov	r0, r19
    1662:	00 0c       	add	r0, r0
    1664:	aa 0b       	sbc	r26, r26
    1666:	bb 0b       	sbc	r27, r27
    1668:	dc 01       	movw	r26, r24
    166a:	99 27       	eor	r25, r25
    166c:	88 27       	eor	r24, r24
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	84 2b       	or	r24, r20
    1674:	95 2b       	or	r25, r21
    1676:	a6 2b       	or	r26, r22
    1678:	b7 2b       	or	r27, r23
    167a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    167e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1682:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1686:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    168a:	b0 9b       	sbis	0x16, 0	; 22
    168c:	1b c0       	rjmp	.+54     	; 0x16c4 <__vector_16+0x98>
    168e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1692:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1696:	c9 01       	movw	r24, r18
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	09 2e       	mov	r0, r25
    169c:	00 0c       	add	r0, r0
    169e:	aa 0b       	sbc	r26, r26
    16a0:	bb 0b       	sbc	r27, r27
    16a2:	dc 01       	movw	r26, r24
    16a4:	99 27       	eor	r25, r25
    16a6:	88 27       	eor	r24, r24
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	84 2b       	or	r24, r20
    16ae:	95 2b       	or	r25, r21
    16b0:	a6 2b       	or	r26, r22
    16b2:	b7 2b       	or	r27, r23
    16b4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    16b8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    16bc:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    16c0:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    16c4:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x16>
    16c8:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x17>
    16cc:	30 97       	sbiw	r30, 0x00	; 0
    16ce:	39 f0       	breq	.+14     	; 0x16de <__vector_16+0xb2>
    16d0:	6b e0       	ldi	r22, 0x0B	; 11
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x16>
    16d8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x17>
    16dc:	09 95       	icall
    16de:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_17>:
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
    1726:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    172a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    172e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1732:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1736:	c9 01       	movw	r24, r18
    1738:	03 2e       	mov	r0, r19
    173a:	00 0c       	add	r0, r0
    173c:	aa 0b       	sbc	r26, r26
    173e:	bb 0b       	sbc	r27, r27
    1740:	dc 01       	movw	r26, r24
    1742:	99 27       	eor	r25, r25
    1744:	88 27       	eor	r24, r24
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	84 2b       	or	r24, r20
    174c:	95 2b       	or	r25, r21
    174e:	a6 2b       	or	r26, r22
    1750:	b7 2b       	or	r27, r23
    1752:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1756:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    175a:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    175e:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1762:	b0 9b       	sbis	0x16, 0	; 22
    1764:	1b c0       	rjmp	.+54     	; 0x179c <__vector_17+0x98>
    1766:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    176a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    176e:	c9 01       	movw	r24, r18
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	09 2e       	mov	r0, r25
    1774:	00 0c       	add	r0, r0
    1776:	aa 0b       	sbc	r26, r26
    1778:	bb 0b       	sbc	r27, r27
    177a:	dc 01       	movw	r26, r24
    177c:	99 27       	eor	r25, r25
    177e:	88 27       	eor	r24, r24
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	84 2b       	or	r24, r20
    1786:	95 2b       	or	r25, r21
    1788:	a6 2b       	or	r26, r22
    178a:	b7 2b       	or	r27, r23
    178c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1790:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1794:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1798:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    179c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x18>
    17a0:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x19>
    17a4:	30 97       	sbiw	r30, 0x00	; 0
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <__vector_17+0xb2>
    17a8:	6c e0       	ldi	r22, 0x0C	; 12
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x18>
    17b0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x19>
    17b4:	09 95       	icall
    17b6:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    17ba:	ff 91       	pop	r31
    17bc:	ef 91       	pop	r30
    17be:	bf 91       	pop	r27
    17c0:	af 91       	pop	r26
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	7f 91       	pop	r23
    17c8:	6f 91       	pop	r22
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <__vector_18>:
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	2f 93       	push	r18
    17e8:	3f 93       	push	r19
    17ea:	4f 93       	push	r20
    17ec:	5f 93       	push	r21
    17ee:	6f 93       	push	r22
    17f0:	7f 93       	push	r23
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    17fe:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1802:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1806:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    180a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    180e:	c9 01       	movw	r24, r18
    1810:	03 2e       	mov	r0, r19
    1812:	00 0c       	add	r0, r0
    1814:	aa 0b       	sbc	r26, r26
    1816:	bb 0b       	sbc	r27, r27
    1818:	dc 01       	movw	r26, r24
    181a:	99 27       	eor	r25, r25
    181c:	88 27       	eor	r24, r24
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	84 2b       	or	r24, r20
    1824:	95 2b       	or	r25, r21
    1826:	a6 2b       	or	r26, r22
    1828:	b7 2b       	or	r27, r23
    182a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    182e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1832:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1836:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    183a:	b0 9b       	sbis	0x16, 0	; 22
    183c:	1b c0       	rjmp	.+54     	; 0x1874 <__vector_18+0x98>
    183e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1842:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1846:	c9 01       	movw	r24, r18
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	09 2e       	mov	r0, r25
    184c:	00 0c       	add	r0, r0
    184e:	aa 0b       	sbc	r26, r26
    1850:	bb 0b       	sbc	r27, r27
    1852:	dc 01       	movw	r26, r24
    1854:	99 27       	eor	r25, r25
    1856:	88 27       	eor	r24, r24
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	84 2b       	or	r24, r20
    185e:	95 2b       	or	r25, r21
    1860:	a6 2b       	or	r26, r22
    1862:	b7 2b       	or	r27, r23
    1864:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1868:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    186c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1870:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1874:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x1a>
    1878:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x1b>
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	39 f0       	breq	.+14     	; 0x188e <__vector_18+0xb2>
    1880:	6d e0       	ldi	r22, 0x0D	; 13
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x1a>
    1888:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x1b>
    188c:	09 95       	icall
    188e:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	7f 91       	pop	r23
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	0f 90       	pop	r0
    18b0:	1f 90       	pop	r1
    18b2:	18 95       	reti

000018b4 <__vector_19>:
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	2f 93       	push	r18
    18c0:	3f 93       	push	r19
    18c2:	4f 93       	push	r20
    18c4:	5f 93       	push	r21
    18c6:	6f 93       	push	r22
    18c8:	7f 93       	push	r23
    18ca:	8f 93       	push	r24
    18cc:	9f 93       	push	r25
    18ce:	af 93       	push	r26
    18d0:	bf 93       	push	r27
    18d2:	ef 93       	push	r30
    18d4:	ff 93       	push	r31
    18d6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    18da:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    18de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e6:	c9 01       	movw	r24, r18
    18e8:	03 2e       	mov	r0, r19
    18ea:	00 0c       	add	r0, r0
    18ec:	aa 0b       	sbc	r26, r26
    18ee:	bb 0b       	sbc	r27, r27
    18f0:	dc 01       	movw	r26, r24
    18f2:	99 27       	eor	r25, r25
    18f4:	88 27       	eor	r24, r24
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	84 2b       	or	r24, r20
    18fc:	95 2b       	or	r25, r21
    18fe:	a6 2b       	or	r26, r22
    1900:	b7 2b       	or	r27, r23
    1902:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1906:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    190a:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    190e:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1912:	b0 9b       	sbis	0x16, 0	; 22
    1914:	1b c0       	rjmp	.+54     	; 0x194c <__vector_19+0x98>
    1916:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    191a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    191e:	c9 01       	movw	r24, r18
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	09 2e       	mov	r0, r25
    1924:	00 0c       	add	r0, r0
    1926:	aa 0b       	sbc	r26, r26
    1928:	bb 0b       	sbc	r27, r27
    192a:	dc 01       	movw	r26, r24
    192c:	99 27       	eor	r25, r25
    192e:	88 27       	eor	r24, r24
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	84 2b       	or	r24, r20
    1936:	95 2b       	or	r25, r21
    1938:	a6 2b       	or	r26, r22
    193a:	b7 2b       	or	r27, r23
    193c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1940:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1944:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1948:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    194c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x1c>
    1950:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x1d>
    1954:	30 97       	sbiw	r30, 0x00	; 0
    1956:	39 f0       	breq	.+14     	; 0x1966 <__vector_19+0xb2>
    1958:	6e e0       	ldi	r22, 0x0E	; 14
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1c>
    1960:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1d>
    1964:	09 95       	icall
    1966:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	7f 91       	pop	r23
    1978:	6f 91       	pop	r22
    197a:	5f 91       	pop	r21
    197c:	4f 91       	pop	r20
    197e:	3f 91       	pop	r19
    1980:	2f 91       	pop	r18
    1982:	0f 90       	pop	r0
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	0f 90       	pop	r0
    1988:	1f 90       	pop	r1
    198a:	18 95       	reti

0000198c <__vector_20>:
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	2f 93       	push	r18
    1998:	3f 93       	push	r19
    199a:	4f 93       	push	r20
    199c:	5f 93       	push	r21
    199e:	6f 93       	push	r22
    19a0:	7f 93       	push	r23
    19a2:	8f 93       	push	r24
    19a4:	9f 93       	push	r25
    19a6:	af 93       	push	r26
    19a8:	bf 93       	push	r27
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
    19ae:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    19b2:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    19b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19be:	c9 01       	movw	r24, r18
    19c0:	03 2e       	mov	r0, r19
    19c2:	00 0c       	add	r0, r0
    19c4:	aa 0b       	sbc	r26, r26
    19c6:	bb 0b       	sbc	r27, r27
    19c8:	dc 01       	movw	r26, r24
    19ca:	99 27       	eor	r25, r25
    19cc:	88 27       	eor	r24, r24
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	84 2b       	or	r24, r20
    19d4:	95 2b       	or	r25, r21
    19d6:	a6 2b       	or	r26, r22
    19d8:	b7 2b       	or	r27, r23
    19da:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    19de:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    19e2:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    19e6:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    19ea:	b0 9b       	sbis	0x16, 0	; 22
    19ec:	1b c0       	rjmp	.+54     	; 0x1a24 <__vector_20+0x98>
    19ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f6:	c9 01       	movw	r24, r18
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	09 2e       	mov	r0, r25
    19fc:	00 0c       	add	r0, r0
    19fe:	aa 0b       	sbc	r26, r26
    1a00:	bb 0b       	sbc	r27, r27
    1a02:	dc 01       	movw	r26, r24
    1a04:	99 27       	eor	r25, r25
    1a06:	88 27       	eor	r24, r24
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	84 2b       	or	r24, r20
    1a0e:	95 2b       	or	r25, r21
    1a10:	a6 2b       	or	r26, r22
    1a12:	b7 2b       	or	r27, r23
    1a14:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1a18:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1a1c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1a20:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1a24:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1e>
    1a28:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1f>
    1a2c:	30 97       	sbiw	r30, 0x00	; 0
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <__vector_20+0xb2>
    1a30:	6f e0       	ldi	r22, 0x0F	; 15
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1e>
    1a38:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1f>
    1a3c:	09 95       	icall
    1a3e:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_21>:
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	2f 93       	push	r18
    1a70:	3f 93       	push	r19
    1a72:	4f 93       	push	r20
    1a74:	5f 93       	push	r21
    1a76:	6f 93       	push	r22
    1a78:	7f 93       	push	r23
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	af 93       	push	r26
    1a80:	bf 93       	push	r27
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
    1a86:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1a8a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1a8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a96:	c9 01       	movw	r24, r18
    1a98:	03 2e       	mov	r0, r19
    1a9a:	00 0c       	add	r0, r0
    1a9c:	aa 0b       	sbc	r26, r26
    1a9e:	bb 0b       	sbc	r27, r27
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	99 27       	eor	r25, r25
    1aa4:	88 27       	eor	r24, r24
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	84 2b       	or	r24, r20
    1aac:	95 2b       	or	r25, r21
    1aae:	a6 2b       	or	r26, r22
    1ab0:	b7 2b       	or	r27, r23
    1ab2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1ab6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1aba:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1abe:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1ac2:	b0 9b       	sbis	0x16, 0	; 22
    1ac4:	1b c0       	rjmp	.+54     	; 0x1afc <__vector_21+0x98>
    1ac6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ace:	c9 01       	movw	r24, r18
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	09 2e       	mov	r0, r25
    1ad4:	00 0c       	add	r0, r0
    1ad6:	aa 0b       	sbc	r26, r26
    1ad8:	bb 0b       	sbc	r27, r27
    1ada:	dc 01       	movw	r26, r24
    1adc:	99 27       	eor	r25, r25
    1ade:	88 27       	eor	r24, r24
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	84 2b       	or	r24, r20
    1ae6:	95 2b       	or	r25, r21
    1ae8:	a6 2b       	or	r26, r22
    1aea:	b7 2b       	or	r27, r23
    1aec:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1af0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1af4:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1af8:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1afc:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x20>
    1b00:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x21>
    1b04:	30 97       	sbiw	r30, 0x00	; 0
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <__vector_21+0xb2>
    1b08:	60 e1       	ldi	r22, 0x10	; 16
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x20>
    1b10:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x21>
    1b14:	09 95       	icall
    1b16:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1b1a:	ff 91       	pop	r31
    1b1c:	ef 91       	pop	r30
    1b1e:	bf 91       	pop	r27
    1b20:	af 91       	pop	r26
    1b22:	9f 91       	pop	r25
    1b24:	8f 91       	pop	r24
    1b26:	7f 91       	pop	r23
    1b28:	6f 91       	pop	r22
    1b2a:	5f 91       	pop	r21
    1b2c:	4f 91       	pop	r20
    1b2e:	3f 91       	pop	r19
    1b30:	2f 91       	pop	r18
    1b32:	0f 90       	pop	r0
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	0f 90       	pop	r0
    1b38:	1f 90       	pop	r1
    1b3a:	18 95       	reti

00001b3c <__vector_22>:
    1b3c:	1f 92       	push	r1
    1b3e:	0f 92       	push	r0
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	0f 92       	push	r0
    1b44:	11 24       	eor	r1, r1
    1b46:	2f 93       	push	r18
    1b48:	3f 93       	push	r19
    1b4a:	4f 93       	push	r20
    1b4c:	5f 93       	push	r21
    1b4e:	6f 93       	push	r22
    1b50:	7f 93       	push	r23
    1b52:	8f 93       	push	r24
    1b54:	9f 93       	push	r25
    1b56:	af 93       	push	r26
    1b58:	bf 93       	push	r27
    1b5a:	ef 93       	push	r30
    1b5c:	ff 93       	push	r31
    1b5e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1b62:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1b66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b6e:	c9 01       	movw	r24, r18
    1b70:	03 2e       	mov	r0, r19
    1b72:	00 0c       	add	r0, r0
    1b74:	aa 0b       	sbc	r26, r26
    1b76:	bb 0b       	sbc	r27, r27
    1b78:	dc 01       	movw	r26, r24
    1b7a:	99 27       	eor	r25, r25
    1b7c:	88 27       	eor	r24, r24
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	84 2b       	or	r24, r20
    1b84:	95 2b       	or	r25, r21
    1b86:	a6 2b       	or	r26, r22
    1b88:	b7 2b       	or	r27, r23
    1b8a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1b8e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1b92:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1b96:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1b9a:	b0 9b       	sbis	0x16, 0	; 22
    1b9c:	1b c0       	rjmp	.+54     	; 0x1bd4 <__vector_22+0x98>
    1b9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ba2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ba6:	c9 01       	movw	r24, r18
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	09 2e       	mov	r0, r25
    1bac:	00 0c       	add	r0, r0
    1bae:	aa 0b       	sbc	r26, r26
    1bb0:	bb 0b       	sbc	r27, r27
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	99 27       	eor	r25, r25
    1bb6:	88 27       	eor	r24, r24
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	84 2b       	or	r24, r20
    1bbe:	95 2b       	or	r25, r21
    1bc0:	a6 2b       	or	r26, r22
    1bc2:	b7 2b       	or	r27, r23
    1bc4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <timestamp>
    1bc8:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <timestamp+0x1>
    1bcc:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <timestamp+0x2>
    1bd0:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <timestamp+0x3>
    1bd4:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x22>
    1bd8:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x23>
    1bdc:	30 97       	sbiw	r30, 0x00	; 0
    1bde:	39 f0       	breq	.+14     	; 0x1bee <__vector_22+0xb2>
    1be0:	61 e1       	ldi	r22, 0x11	; 17
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x22>
    1be8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x23>
    1bec:	09 95       	icall
    1bee:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1bf2:	ff 91       	pop	r31
    1bf4:	ef 91       	pop	r30
    1bf6:	bf 91       	pop	r27
    1bf8:	af 91       	pop	r26
    1bfa:	9f 91       	pop	r25
    1bfc:	8f 91       	pop	r24
    1bfe:	7f 91       	pop	r23
    1c00:	6f 91       	pop	r22
    1c02:	5f 91       	pop	r21
    1c04:	4f 91       	pop	r20
    1c06:	3f 91       	pop	r19
    1c08:	2f 91       	pop	r18
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <enqueueByDeadline>:
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	7b 01       	movw	r14, r22
    1c22:	eb 01       	movw	r28, r22
    1c24:	a8 81       	ld	r26, Y
    1c26:	b9 81       	ldd	r27, Y+1	; 0x01
    1c28:	10 97       	sbiw	r26, 0x00	; 0
    1c2a:	61 f1       	breq	.+88     	; 0x1c84 <enqueueByDeadline+0x70>
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	06 81       	ldd	r16, Z+6	; 0x06
    1c30:	17 81       	ldd	r17, Z+7	; 0x07
    1c32:	20 85       	ldd	r18, Z+8	; 0x08
    1c34:	31 85       	ldd	r19, Z+9	; 0x09
    1c36:	16 96       	adiw	r26, 0x06	; 6
    1c38:	4d 91       	ld	r20, X+
    1c3a:	5d 91       	ld	r21, X+
    1c3c:	6d 91       	ld	r22, X+
    1c3e:	7c 91       	ld	r23, X
    1c40:	19 97       	sbiw	r26, 0x09	; 9
    1c42:	04 17       	cp	r16, r20
    1c44:	15 07       	cpc	r17, r21
    1c46:	26 07       	cpc	r18, r22
    1c48:	37 07       	cpc	r19, r23
    1c4a:	14 f4       	brge	.+4      	; 0x1c50 <enqueueByDeadline+0x3c>
    1c4c:	1b c0       	rjmp	.+54     	; 0x1c84 <enqueueByDeadline+0x70>
    1c4e:	df 01       	movw	r26, r30
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	11 97       	sbiw	r26, 0x01	; 1
    1c56:	30 97       	sbiw	r30, 0x00	; 0
    1c58:	49 f0       	breq	.+18     	; 0x1c6c <enqueueByDeadline+0x58>
    1c5a:	46 81       	ldd	r20, Z+6	; 0x06
    1c5c:	57 81       	ldd	r21, Z+7	; 0x07
    1c5e:	60 85       	ldd	r22, Z+8	; 0x08
    1c60:	71 85       	ldd	r23, Z+9	; 0x09
    1c62:	04 17       	cp	r16, r20
    1c64:	15 07       	cpc	r17, r21
    1c66:	26 07       	cpc	r18, r22
    1c68:	37 07       	cpc	r19, r23
    1c6a:	8c f7       	brge	.-30     	; 0x1c4e <enqueueByDeadline+0x3a>
    1c6c:	ec 01       	movw	r28, r24
    1c6e:	f9 83       	std	Y+1, r31	; 0x01
    1c70:	e8 83       	st	Y, r30
    1c72:	10 97       	sbiw	r26, 0x00	; 0
    1c74:	21 f4       	brne	.+8      	; 0x1c7e <enqueueByDeadline+0x6a>
    1c76:	f7 01       	movw	r30, r14
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
    1c7c:	07 c0       	rjmp	.+14     	; 0x1c8c <enqueueByDeadline+0x78>
    1c7e:	8d 93       	st	X+, r24
    1c80:	9c 93       	st	X, r25
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <enqueueByDeadline+0x78>
    1c84:	ec 01       	movw	r28, r24
    1c86:	b9 83       	std	Y+1, r27	; 0x01
    1c88:	a8 83       	st	Y, r26
    1c8a:	f5 cf       	rjmp	.-22     	; 0x1c76 <enqueueByDeadline+0x62>
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	08 95       	ret

00001c9a <enqueueByBaseline>:
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	eb 01       	movw	r28, r22
    1caa:	a8 81       	ld	r26, Y
    1cac:	b9 81       	ldd	r27, Y+1	; 0x01
    1cae:	10 97       	sbiw	r26, 0x00	; 0
    1cb0:	61 f1       	breq	.+88     	; 0x1d0a <enqueueByBaseline+0x70>
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	02 81       	ldd	r16, Z+2	; 0x02
    1cb6:	13 81       	ldd	r17, Z+3	; 0x03
    1cb8:	24 81       	ldd	r18, Z+4	; 0x04
    1cba:	35 81       	ldd	r19, Z+5	; 0x05
    1cbc:	12 96       	adiw	r26, 0x02	; 2
    1cbe:	4d 91       	ld	r20, X+
    1cc0:	5d 91       	ld	r21, X+
    1cc2:	6d 91       	ld	r22, X+
    1cc4:	7c 91       	ld	r23, X
    1cc6:	15 97       	sbiw	r26, 0x05	; 5
    1cc8:	04 17       	cp	r16, r20
    1cca:	15 07       	cpc	r17, r21
    1ccc:	26 07       	cpc	r18, r22
    1cce:	37 07       	cpc	r19, r23
    1cd0:	14 f4       	brge	.+4      	; 0x1cd6 <enqueueByBaseline+0x3c>
    1cd2:	1b c0       	rjmp	.+54     	; 0x1d0a <enqueueByBaseline+0x70>
    1cd4:	df 01       	movw	r26, r30
    1cd6:	ed 91       	ld	r30, X+
    1cd8:	fc 91       	ld	r31, X
    1cda:	11 97       	sbiw	r26, 0x01	; 1
    1cdc:	30 97       	sbiw	r30, 0x00	; 0
    1cde:	49 f0       	breq	.+18     	; 0x1cf2 <enqueueByBaseline+0x58>
    1ce0:	42 81       	ldd	r20, Z+2	; 0x02
    1ce2:	53 81       	ldd	r21, Z+3	; 0x03
    1ce4:	64 81       	ldd	r22, Z+4	; 0x04
    1ce6:	75 81       	ldd	r23, Z+5	; 0x05
    1ce8:	04 17       	cp	r16, r20
    1cea:	15 07       	cpc	r17, r21
    1cec:	26 07       	cpc	r18, r22
    1cee:	37 07       	cpc	r19, r23
    1cf0:	8c f7       	brge	.-30     	; 0x1cd4 <enqueueByBaseline+0x3a>
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	f9 83       	std	Y+1, r31	; 0x01
    1cf6:	e8 83       	st	Y, r30
    1cf8:	10 97       	sbiw	r26, 0x00	; 0
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <enqueueByBaseline+0x6a>
    1cfc:	f7 01       	movw	r30, r14
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
    1d02:	07 c0       	rjmp	.+14     	; 0x1d12 <enqueueByBaseline+0x78>
    1d04:	8d 93       	st	X+, r24
    1d06:	9c 93       	st	X, r25
    1d08:	04 c0       	rjmp	.+8      	; 0x1d12 <enqueueByBaseline+0x78>
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	b9 83       	std	Y+1, r27	; 0x01
    1d0e:	a8 83       	st	Y, r26
    1d10:	f5 cf       	rjmp	.-22     	; 0x1cfc <enqueueByBaseline+0x62>
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	08 95       	ret

00001d20 <dequeue>:
    1d20:	dc 01       	movw	r26, r24
    1d22:	ed 91       	ld	r30, X+
    1d24:	fc 91       	ld	r31, X
    1d26:	11 97       	sbiw	r26, 0x01	; 1
    1d28:	30 97       	sbiw	r30, 0x00	; 0
    1d2a:	59 f4       	brne	.+22     	; 0x1d42 <dequeue+0x22>
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1d32:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1d36:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	83 bf       	out	0x33, r24	; 51
    1d3e:	88 95       	sleep
    1d40:	fd cf       	rjmp	.-6      	; 0x1d3c <dequeue+0x1c>
    1d42:	20 81       	ld	r18, Z
    1d44:	31 81       	ldd	r19, Z+1	; 0x01
    1d46:	2d 93       	st	X+, r18
    1d48:	3c 93       	st	X, r19
    1d4a:	cf 01       	movw	r24, r30
    1d4c:	08 95       	ret

00001d4e <__vector_9>:
    1d4e:	1f 92       	push	r1
    1d50:	0f 92       	push	r0
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	0f 92       	push	r0
    1d56:	11 24       	eor	r1, r1
    1d58:	2f 93       	push	r18
    1d5a:	3f 93       	push	r19
    1d5c:	4f 93       	push	r20
    1d5e:	5f 93       	push	r21
    1d60:	6f 93       	push	r22
    1d62:	7f 93       	push	r23
    1d64:	8f 93       	push	r24
    1d66:	9f 93       	push	r25
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
    1d70:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
    1d7a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
    1d7e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <timerQ>
    1d82:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <timerQ+0x1>
    1d86:	30 97       	sbiw	r30, 0x00	; 0
    1d88:	01 f1       	breq	.+64     	; 0x1dca <__vector_9+0x7c>
    1d8a:	42 81       	ldd	r20, Z+2	; 0x02
    1d8c:	53 81       	ldd	r21, Z+3	; 0x03
    1d8e:	64 81       	ldd	r22, Z+4	; 0x04
    1d90:	75 81       	ldd	r23, Z+5	; 0x05
    1d92:	86 17       	cp	r24, r22
    1d94:	97 07       	cpc	r25, r23
    1d96:	c9 f4       	brne	.+50     	; 0x1dca <__vector_9+0x7c>
    1d98:	ca 01       	movw	r24, r20
    1d9a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d9e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1da2:	42 1b       	sub	r20, r18
    1da4:	53 0b       	sbc	r21, r19
    1da6:	41 30       	cpi	r20, 0x01	; 1
    1da8:	51 05       	cpc	r21, r1
    1daa:	29 f4       	brne	.+10     	; 0x1db6 <__vector_9+0x68>
    1dac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1db0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1dba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1dbe:	ef e6       	ldi	r30, 0x6F	; 111
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	82 60       	ori	r24, 0x02	; 2
    1dc6:	80 83       	st	Z, r24
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <__vector_9+0x86>
    1dca:	ef e6       	ldi	r30, 0x6F	; 111
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8d 7f       	andi	r24, 0xFD	; 253
    1dd2:	80 83       	st	Z, r24
    1dd4:	ff 91       	pop	r31
    1dd6:	ef 91       	pop	r30
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	0f 90       	pop	r0
    1dee:	1f 90       	pop	r1
    1df0:	18 95       	reti

00001df2 <__vector_7>:
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	cf 92       	push	r12
    1dfe:	df 92       	push	r13
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	4f 93       	push	r20
    1e0a:	5f 93       	push	r21
    1e0c:	6f 93       	push	r22
    1e0e:	7f 93       	push	r23
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	af 93       	push	r26
    1e16:	bf 93       	push	r27
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    1e1c:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <__data_end>
    1e20:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <__data_end+0x1>
    1e24:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e28:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e2c:	b0 99       	sbic	0x16, 0	; 22
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <__vector_7+0x5c>
    1e30:	0d 2c       	mov	r0, r13
    1e32:	00 0c       	add	r0, r0
    1e34:	ee 08       	sbc	r14, r14
    1e36:	ff 08       	sbc	r15, r15
    1e38:	d6 01       	movw	r26, r12
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	69 01       	movw	r12, r18
    1e40:	e1 2c       	mov	r14, r1
    1e42:	f1 2c       	mov	r15, r1
    1e44:	c8 2a       	or	r12, r24
    1e46:	d9 2a       	or	r13, r25
    1e48:	ea 2a       	or	r14, r26
    1e4a:	fb 2a       	or	r15, r27
    1e4c:	15 c0       	rjmp	.+42     	; 0x1e78 <__vector_7+0x86>
    1e4e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e52:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	c8 1a       	sub	r12, r24
    1e5a:	d8 0a       	sbc	r13, r24
    1e5c:	0d 2c       	mov	r0, r13
    1e5e:	00 0c       	add	r0, r0
    1e60:	ee 08       	sbc	r14, r14
    1e62:	ff 08       	sbc	r15, r15
    1e64:	d6 01       	movw	r26, r12
    1e66:	99 27       	eor	r25, r25
    1e68:	88 27       	eor	r24, r24
    1e6a:	69 01       	movw	r12, r18
    1e6c:	e1 2c       	mov	r14, r1
    1e6e:	f1 2c       	mov	r15, r1
    1e70:	c8 2a       	or	r12, r24
    1e72:	d9 2a       	or	r13, r25
    1e74:	ea 2a       	or	r14, r26
    1e76:	fb 2a       	or	r15, r27
    1e78:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <timerQ>
    1e7c:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <timerQ+0x1>
    1e80:	30 97       	sbiw	r30, 0x00	; 0
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__vector_7+0x94>
    1e84:	42 c0       	rjmp	.+132    	; 0x1f0a <__vector_7+0x118>
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e8e:	8c 19       	sub	r24, r12
    1e90:	9d 09       	sbc	r25, r13
    1e92:	ae 09       	sbc	r26, r14
    1e94:	bf 09       	sbc	r27, r15
    1e96:	18 16       	cp	r1, r24
    1e98:	19 06       	cpc	r1, r25
    1e9a:	1a 06       	cpc	r1, r26
    1e9c:	1b 06       	cpc	r1, r27
    1e9e:	ec f1       	brlt	.+122    	; 0x1f1a <__vector_7+0x128>
    1ea0:	88 e5       	ldi	r24, 0x58	; 88
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <dequeue>
    1ea8:	6a e5       	ldi	r22, 0x5A	; 90
    1eaa:	71 e0       	ldi	r23, 0x01	; 1
    1eac:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <enqueueByDeadline>
    1eb0:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <timerQ>
    1eb4:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <timerQ+0x1>
    1eb8:	30 97       	sbiw	r30, 0x00	; 0
    1eba:	39 f1       	breq	.+78     	; 0x1f0a <__vector_7+0x118>
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ec2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ec4:	8c 19       	sub	r24, r12
    1ec6:	9d 09       	sbc	r25, r13
    1ec8:	ae 09       	sbc	r26, r14
    1eca:	bf 09       	sbc	r27, r15
    1ecc:	18 16       	cp	r1, r24
    1ece:	19 06       	cpc	r1, r25
    1ed0:	1a 06       	cpc	r1, r26
    1ed2:	1b 06       	cpc	r1, r27
    1ed4:	2c f7       	brge	.-54     	; 0x1ea0 <__vector_7+0xae>
    1ed6:	21 c0       	rjmp	.+66     	; 0x1f1a <__vector_7+0x128>
    1ed8:	9c 01       	movw	r18, r24
    1eda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ede:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee2:	84 1b       	sub	r24, r20
    1ee4:	95 0b       	sbc	r25, r21
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	31 f4       	brne	.+12     	; 0x1ef6 <__vector_7+0x104>
    1eea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ef2:	2f 5f       	subi	r18, 0xFF	; 255
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1efa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1efe:	ef e6       	ldi	r30, 0x6F	; 111
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	82 60       	ori	r24, 0x02	; 2
    1f06:	80 83       	st	Z, r24
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <__vector_7+0x122>
    1f0a:	ef e6       	ldi	r30, 0x6F	; 111
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8d 7f       	andi	r24, 0xFD	; 253
    1f12:	80 83       	st	Z, r24
    1f14:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    1f18:	0c c0       	rjmp	.+24     	; 0x1f32 <__vector_7+0x140>
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1f20:	b5 81       	ldd	r27, Z+5	; 0x05
    1f22:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    1f26:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    1f2a:	2a 17       	cp	r18, r26
    1f2c:	3b 07       	cpc	r19, r27
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <__vector_7+0x118>
    1f30:	d3 cf       	rjmp	.-90     	; 0x1ed8 <__vector_7+0xe6>
    1f32:	ff 91       	pop	r31
    1f34:	ef 91       	pop	r30
    1f36:	bf 91       	pop	r27
    1f38:	af 91       	pop	r26
    1f3a:	9f 91       	pop	r25
    1f3c:	8f 91       	pop	r24
    1f3e:	7f 91       	pop	r23
    1f40:	6f 91       	pop	r22
    1f42:	5f 91       	pop	r21
    1f44:	4f 91       	pop	r20
    1f46:	3f 91       	pop	r19
    1f48:	2f 91       	pop	r18
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	df 90       	pop	r13
    1f50:	cf 90       	pop	r12
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <async>:
    1f5c:	3f 92       	push	r3
    1f5e:	4f 92       	push	r4
    1f60:	5f 92       	push	r5
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	9f 92       	push	r9
    1f6a:	af 92       	push	r10
    1f6c:	bf 92       	push	r11
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	2b 01       	movw	r4, r22
    1f80:	3c 01       	movw	r6, r24
    1f82:	49 01       	movw	r8, r18
    1f84:	5a 01       	movw	r10, r20
    1f86:	8f b7       	in	r24, 0x3f	; 63
    1f88:	80 78       	andi	r24, 0x80	; 128
    1f8a:	38 2e       	mov	r3, r24
    1f8c:	f8 94       	cli
    1f8e:	8b e3       	ldi	r24, 0x3B	; 59
    1f90:	91 e0       	ldi	r25, 0x01	; 1
    1f92:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <dequeue>
    1f96:	ec 01       	movw	r28, r24
    1f98:	1b 87       	std	Y+11, r17	; 0x0b
    1f9a:	0a 87       	std	Y+10, r16	; 0x0a
    1f9c:	fd 86       	std	Y+13, r15	; 0x0d
    1f9e:	ec 86       	std	Y+12, r14	; 0x0c
    1fa0:	df 86       	std	Y+15, r13	; 0x0f
    1fa2:	ce 86       	std	Y+14, r12	; 0x0e
    1fa4:	33 20       	and	r3, r3
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <async+0x64>
    1fa8:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <current>
    1fac:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <current+0x1>
    1fb0:	02 80       	ldd	r0, Z+2	; 0x02
    1fb2:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	a4 81       	ldd	r26, Z+4	; 0x04
    1fbc:	b5 81       	ldd	r27, Z+5	; 0x05
    1fbe:	08 c0       	rjmp	.+16     	; 0x1fd0 <async+0x74>
    1fc0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <timestamp>
    1fc4:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <timestamp+0x1>
    1fc8:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <timestamp+0x2>
    1fcc:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <timestamp+0x3>
    1fd0:	48 0e       	add	r4, r24
    1fd2:	59 1e       	adc	r5, r25
    1fd4:	6a 1e       	adc	r6, r26
    1fd6:	7b 1e       	adc	r7, r27
    1fd8:	4a 82       	std	Y+2, r4	; 0x02
    1fda:	5b 82       	std	Y+3, r5	; 0x03
    1fdc:	6c 82       	std	Y+4, r6	; 0x04
    1fde:	7d 82       	std	Y+5, r7	; 0x05
    1fe0:	18 14       	cp	r1, r8
    1fe2:	19 04       	cpc	r1, r9
    1fe4:	1a 04       	cpc	r1, r10
    1fe6:	1b 04       	cpc	r1, r11
    1fe8:	44 f0       	brlt	.+16     	; 0x1ffa <async+0x9e>
    1fea:	0f 2e       	mov	r0, r31
    1fec:	88 24       	eor	r8, r8
    1fee:	8a 94       	dec	r8
    1ff0:	98 2c       	mov	r9, r8
    1ff2:	a8 2c       	mov	r10, r8
    1ff4:	ff e7       	ldi	r31, 0x7F	; 127
    1ff6:	bf 2e       	mov	r11, r31
    1ff8:	f0 2d       	mov	r31, r0
    1ffa:	84 0c       	add	r8, r4
    1ffc:	95 1c       	adc	r9, r5
    1ffe:	a6 1c       	adc	r10, r6
    2000:	b7 1c       	adc	r11, r7
    2002:	8e 82       	std	Y+6, r8	; 0x06
    2004:	9f 82       	std	Y+7, r9	; 0x07
    2006:	a8 86       	std	Y+8, r10	; 0x08
    2008:	b9 86       	std	Y+9, r11	; 0x09
    200a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
    200e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
    2012:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2016:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    201a:	b0 99       	sbic	0x16, 0	; 22
    201c:	0e c0       	rjmp	.+28     	; 0x203a <async+0xde>
    201e:	09 2e       	mov	r0, r25
    2020:	00 0c       	add	r0, r0
    2022:	aa 0b       	sbc	r26, r26
    2024:	bb 0b       	sbc	r27, r27
    2026:	dc 01       	movw	r26, r24
    2028:	99 27       	eor	r25, r25
    202a:	88 27       	eor	r24, r24
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	84 2b       	or	r24, r20
    2032:	95 2b       	or	r25, r21
    2034:	a6 2b       	or	r26, r22
    2036:	b7 2b       	or	r27, r23
    2038:	13 c0       	rjmp	.+38     	; 0x2060 <async+0x104>
    203a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    203e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	09 2e       	mov	r0, r25
    2046:	00 0c       	add	r0, r0
    2048:	aa 0b       	sbc	r26, r26
    204a:	bb 0b       	sbc	r27, r27
    204c:	dc 01       	movw	r26, r24
    204e:	99 27       	eor	r25, r25
    2050:	88 27       	eor	r24, r24
    2052:	a9 01       	movw	r20, r18
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	84 2b       	or	r24, r20
    205a:	95 2b       	or	r25, r21
    205c:	a6 2b       	or	r26, r22
    205e:	b7 2b       	or	r27, r23
    2060:	48 1a       	sub	r4, r24
    2062:	59 0a       	sbc	r5, r25
    2064:	6a 0a       	sbc	r6, r26
    2066:	7b 0a       	sbc	r7, r27
    2068:	14 14       	cp	r1, r4
    206a:	15 04       	cpc	r1, r5
    206c:	16 04       	cpc	r1, r6
    206e:	17 04       	cpc	r1, r7
    2070:	ac f5       	brge	.+106    	; 0x20dc <async+0x180>
    2072:	68 e5       	ldi	r22, 0x58	; 88
    2074:	71 e0       	ldi	r23, 0x01	; 1
    2076:	ce 01       	movw	r24, r28
    2078:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <enqueueByBaseline>
    207c:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <timerQ>
    2080:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <timerQ+0x1>
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	21 f1       	breq	.+72     	; 0x20d0 <async+0x174>
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	a4 81       	ldd	r26, Z+4	; 0x04
    208e:	b5 81       	ldd	r27, Z+5	; 0x05
    2090:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <__data_end>
    2094:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <__data_end+0x1>
    2098:	2a 17       	cp	r18, r26
    209a:	3b 07       	cpc	r19, r27
    209c:	c9 f4       	brne	.+50     	; 0x20d0 <async+0x174>
    209e:	9c 01       	movw	r18, r24
    20a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20a8:	84 1b       	sub	r24, r20
    20aa:	95 0b       	sbc	r25, r21
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	31 f4       	brne	.+12     	; 0x20bc <async+0x160>
    20b0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20b4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    20c0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    20c4:	ef e6       	ldi	r30, 0x6F	; 111
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	82 60       	ori	r24, 0x02	; 2
    20cc:	80 83       	st	Z, r24
    20ce:	41 c0       	rjmp	.+130    	; 0x2152 <async+0x1f6>
    20d0:	ef e6       	ldi	r30, 0x6F	; 111
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	8d 7f       	andi	r24, 0xFD	; 253
    20d8:	80 83       	st	Z, r24
    20da:	3b c0       	rjmp	.+118    	; 0x2152 <async+0x1f6>
    20dc:	6a e5       	ldi	r22, 0x5A	; 90
    20de:	71 e0       	ldi	r23, 0x01	; 1
    20e0:	ce 01       	movw	r24, r28
    20e2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <enqueueByDeadline>
    20e6:	33 20       	and	r3, r3
    20e8:	b9 f1       	breq	.+110    	; 0x2158 <async+0x1fc>
    20ea:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <threadPool>
    20ee:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <threadPool+0x1>
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	81 f1       	breq	.+96     	; 0x2156 <async+0x1fa>
    20f6:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <activeStack>
    20fa:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <activeStack+0x1>
    20fe:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <msgQ>
    2102:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <msgQ+0x1>
    2106:	02 81       	ldd	r16, Z+2	; 0x02
    2108:	13 81       	ldd	r17, Z+3	; 0x03
    210a:	d9 01       	movw	r26, r18
    210c:	16 96       	adiw	r26, 0x06	; 6
    210e:	4d 91       	ld	r20, X+
    2110:	5d 91       	ld	r21, X+
    2112:	6d 91       	ld	r22, X+
    2114:	7c 91       	ld	r23, X
    2116:	19 97       	sbiw	r26, 0x09	; 9
    2118:	d8 01       	movw	r26, r16
    211a:	16 96       	adiw	r26, 0x06	; 6
    211c:	0d 91       	ld	r16, X+
    211e:	1d 91       	ld	r17, X+
    2120:	2d 91       	ld	r18, X+
    2122:	3c 91       	ld	r19, X
    2124:	19 97       	sbiw	r26, 0x09	; 9
    2126:	40 1b       	sub	r20, r16
    2128:	51 0b       	sbc	r21, r17
    212a:	62 0b       	sbc	r22, r18
    212c:	73 0b       	sbc	r23, r19
    212e:	9a f4       	brpl	.+38     	; 0x2156 <async+0x1fa>
    2130:	dc 01       	movw	r26, r24
    2132:	2d 91       	ld	r18, X+
    2134:	3c 91       	ld	r19, X
    2136:	11 97       	sbiw	r26, 0x01	; 1
    2138:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <threadPool+0x1>
    213c:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <threadPool>
    2140:	ed 93       	st	X+, r30
    2142:	fc 93       	st	X, r31
    2144:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <activeStack+0x1>
    2148:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <activeStack>
    214c:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispatch>
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <async+0x1fa>
    2152:	33 20       	and	r3, r3
    2154:	09 f0       	breq	.+2      	; 0x2158 <async+0x1fc>
    2156:	78 94       	sei
    2158:	ce 01       	movw	r24, r28
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	df 90       	pop	r13
    2168:	cf 90       	pop	r12
    216a:	bf 90       	pop	r11
    216c:	af 90       	pop	r10
    216e:	9f 90       	pop	r9
    2170:	8f 90       	pop	r8
    2172:	7f 90       	pop	r7
    2174:	6f 90       	pop	r6
    2176:	5f 90       	pop	r5
    2178:	4f 90       	pop	r4
    217a:	3f 90       	pop	r3
    217c:	08 95       	ret

0000217e <sync>:
    217e:	cf 92       	push	r12
    2180:	df 92       	push	r13
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	ec 01       	movw	r28, r24
    2190:	7b 01       	movw	r14, r22
    2192:	6a 01       	movw	r12, r20
    2194:	1f b7       	in	r17, 0x3f	; 63
    2196:	10 78       	andi	r17, 0x80	; 128
    2198:	f8 94       	cli
    219a:	a8 81       	ld	r26, Y
    219c:	b9 81       	ldd	r27, Y+1	; 0x01
    219e:	10 97       	sbiw	r26, 0x00	; 0
    21a0:	61 f1       	breq	.+88     	; 0x21fa <sync+0x7c>
    21a2:	14 96       	adiw	r26, 0x04	; 4
    21a4:	ed 91       	ld	r30, X+
    21a6:	fc 91       	ld	r31, X
    21a8:	15 97       	sbiw	r26, 0x05	; 5
    21aa:	30 97       	sbiw	r30, 0x00	; 0
    21ac:	41 f0       	breq	.+16     	; 0x21be <sync+0x40>
    21ae:	a0 81       	ld	r26, Z
    21b0:	b1 81       	ldd	r27, Z+1	; 0x01
    21b2:	14 96       	adiw	r26, 0x04	; 4
    21b4:	ed 91       	ld	r30, X+
    21b6:	fc 91       	ld	r31, X
    21b8:	15 97       	sbiw	r26, 0x05	; 5
    21ba:	30 97       	sbiw	r30, 0x00	; 0
    21bc:	c1 f7       	brne	.-16     	; 0x21ae <sync+0x30>
    21be:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current>
    21c2:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <current+0x1>
    21c6:	2a 17       	cp	r18, r26
    21c8:	3b 07       	cpc	r19, r27
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <sync+0x56>
    21cc:	11 23       	and	r17, r17
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <sync+0x54>
    21d0:	3d c0       	rjmp	.+122    	; 0x224c <sync+0xce>
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <sync+0x64>
    21d4:	11 23       	and	r17, r17
    21d6:	09 f4       	brne	.+2      	; 0x21da <sync+0x5c>
    21d8:	3c c0       	rjmp	.+120    	; 0x2252 <sync+0xd4>
    21da:	78 94       	sei
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	9f ef       	ldi	r25, 0xFF	; 255
    21e0:	52 c0       	rjmp	.+164    	; 0x2286 <sync+0x108>
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d1 f1       	breq	.+116    	; 0x225e <sync+0xe0>
    21ea:	fc 01       	movw	r30, r24
    21ec:	15 82       	std	Z+5, r1	; 0x05
    21ee:	14 82       	std	Z+4, r1	; 0x04
    21f0:	36 c0       	rjmp	.+108    	; 0x225e <sync+0xe0>
    21f2:	78 94       	sei
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	46 c0       	rjmp	.+140    	; 0x2286 <sync+0x108>
    21fa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current>
    21fe:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <current+0x1>
    2202:	99 83       	std	Y+1, r25	; 0x01
    2204:	88 83       	st	Y, r24
    2206:	11 23       	and	r17, r17
    2208:	29 f0       	breq	.+10     	; 0x2214 <sync+0x96>
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	9b 81       	ldd	r25, Y+3	; 0x03
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	09 f0       	breq	.+2      	; 0x2214 <sync+0x96>
    2212:	78 94       	sei
    2214:	b6 01       	movw	r22, r12
    2216:	ce 01       	movw	r24, r28
    2218:	f7 01       	movw	r30, r14
    221a:	09 95       	icall
    221c:	f8 2e       	mov	r15, r24
    221e:	09 2f       	mov	r16, r25
    2220:	8f b7       	in	r24, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	18 82       	st	Y, r1
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	9b 81       	ldd	r25, Y+3	; 0x03
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	91 05       	cpc	r25, r1
    2230:	38 f0       	brcs	.+14     	; 0x2240 <sync+0xc2>
    2232:	1b 82       	std	Y+3, r1	; 0x03
    2234:	1a 82       	std	Y+2, r1	; 0x02
    2236:	fc 01       	movw	r30, r24
    2238:	15 82       	std	Z+5, r1	; 0x05
    223a:	14 82       	std	Z+4, r1	; 0x04
    223c:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispatch>
    2240:	11 23       	and	r17, r17
    2242:	51 f0       	breq	.+20     	; 0x2258 <sync+0xda>
    2244:	78 94       	sei
    2246:	8f 2d       	mov	r24, r15
    2248:	90 2f       	mov	r25, r16
    224a:	1d c0       	rjmp	.+58     	; 0x2286 <sync+0x108>
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	9f ef       	ldi	r25, 0xFF	; 255
    2250:	1a c0       	rjmp	.+52     	; 0x2286 <sync+0x108>
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	9f ef       	ldi	r25, 0xFF	; 255
    2256:	17 c0       	rjmp	.+46     	; 0x2286 <sync+0x108>
    2258:	8f 2d       	mov	r24, r15
    225a:	90 2f       	mov	r25, r16
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <sync+0x108>
    225e:	3b 83       	std	Y+3, r19	; 0x03
    2260:	2a 83       	std	Y+2, r18	; 0x02
    2262:	f9 01       	movw	r30, r18
    2264:	d5 83       	std	Z+5, r29	; 0x05
    2266:	c4 83       	std	Z+4, r28	; 0x04
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispatch>
    226e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <current>
    2272:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <current+0x1>
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	89 2b       	or	r24, r25
    227c:	09 f4       	brne	.+2      	; 0x2280 <sync+0x102>
    227e:	b9 cf       	rjmp	.-142    	; 0x21f2 <sync+0x74>
    2280:	f9 83       	std	Y+1, r31	; 0x01
    2282:	e8 83       	st	Y, r30
    2284:	c2 cf       	rjmp	.-124    	; 0x220a <sync+0x8c>
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	08 95       	ret

00002298 <run>:
    2298:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <current>
    229c:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <current+0x1>
    22a0:	8a e5       	ldi	r24, 0x5A	; 90
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <dequeue>
    22a8:	ec 01       	movw	r28, r24
    22aa:	d8 01       	movw	r26, r16
    22ac:	13 96       	adiw	r26, 0x03	; 3
    22ae:	9c 93       	st	X, r25
    22b0:	8e 93       	st	-X, r24
    22b2:	12 97       	sbiw	r26, 0x02	; 2
    22b4:	78 94       	sei
    22b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    22b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    22ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    22bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22be:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c2:	0e 94 bf 10 	call	0x217e	; 0x217e <sync>
    22c6:	8f b7       	in	r24, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <msgPool>
    22ce:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <msgPool+0x1>
    22d2:	99 83       	std	Y+1, r25	; 0x01
    22d4:	88 83       	st	Y, r24
    22d6:	d0 93 3c 01 	sts	0x013C, r29	; 0x80013c <msgPool+0x1>
    22da:	c0 93 3b 01 	sts	0x013B, r28	; 0x80013b <msgPool>
    22de:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <activeStack>
    22e2:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <activeStack+0x1>
    22e6:	00 81       	ld	r16, Z
    22e8:	11 81       	ldd	r17, Z+1	; 0x01
    22ea:	e8 01       	movw	r28, r16
    22ec:	2a 81       	ldd	r18, Y+2	; 0x02
    22ee:	3b 81       	ldd	r19, Y+3	; 0x03
    22f0:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <msgQ>
    22f4:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <msgQ+0x1>
    22f8:	10 97       	sbiw	r26, 0x00	; 0
    22fa:	c1 f0       	breq	.+48     	; 0x232c <run+0x94>
    22fc:	21 15       	cp	r18, r1
    22fe:	31 05       	cpc	r19, r1
    2300:	59 f2       	breq	.-106    	; 0x2298 <run>
    2302:	16 96       	adiw	r26, 0x06	; 6
    2304:	8d 91       	ld	r24, X+
    2306:	9d 91       	ld	r25, X+
    2308:	0d 90       	ld	r0, X+
    230a:	bc 91       	ld	r27, X
    230c:	a0 2d       	mov	r26, r0
    230e:	e9 01       	movw	r28, r18
    2310:	4e 81       	ldd	r20, Y+6	; 0x06
    2312:	5f 81       	ldd	r21, Y+7	; 0x07
    2314:	68 85       	ldd	r22, Y+8	; 0x08
    2316:	79 85       	ldd	r23, Y+9	; 0x09
    2318:	84 1b       	sub	r24, r20
    231a:	95 0b       	sbc	r25, r21
    231c:	a6 0b       	sbc	r26, r22
    231e:	b7 0b       	sbc	r27, r23
    2320:	18 16       	cp	r1, r24
    2322:	19 06       	cpc	r1, r25
    2324:	1a 06       	cpc	r1, r26
    2326:	1b 06       	cpc	r1, r27
    2328:	0c f0       	brlt	.+2      	; 0x232c <run+0x94>
    232a:	b6 cf       	rjmp	.-148    	; 0x2298 <run>
    232c:	10 93 38 01 	sts	0x0138, r17	; 0x800138 <activeStack+0x1>
    2330:	00 93 37 01 	sts	0x0137, r16	; 0x800137 <activeStack>
    2334:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <threadPool>
    2338:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <threadPool+0x1>
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	80 83       	st	Z, r24
    2340:	f0 93 3a 01 	sts	0x013A, r31	; 0x80013a <threadPool+0x1>
    2344:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <threadPool>
    2348:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <activeStack>
    234c:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <activeStack+0x1>
    2350:	14 96       	adiw	r26, 0x04	; 4
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	15 97       	sbiw	r26, 0x05	; 5
    2358:	30 97       	sbiw	r30, 0x00	; 0
    235a:	41 f0       	breq	.+16     	; 0x236c <run+0xd4>
    235c:	a0 81       	ld	r26, Z
    235e:	b1 81       	ldd	r27, Z+1	; 0x01
    2360:	14 96       	adiw	r26, 0x04	; 4
    2362:	ed 91       	ld	r30, X+
    2364:	fc 91       	ld	r31, X
    2366:	15 97       	sbiw	r26, 0x05	; 5
    2368:	30 97       	sbiw	r30, 0x00	; 0
    236a:	c1 f7       	brne	.-16     	; 0x235c <run+0xc4>
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispatch>
    2372:	92 cf       	rjmp	.-220    	; 0x2298 <run>

00002374 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2374:	42 31       	cpi	r20, 0x12	; 18
    2376:	b8 f4       	brcc	.+46     	; 0x23a6 <install+0x32>
        char status;
        DISABLE(status);
    2378:	2f b7       	in	r18, 0x3f	; 63
    237a:	f8 94       	cli
        otable[i] = obj;
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	44 0f       	add	r20, r20
    2380:	55 1f       	adc	r21, r21
    2382:	fa 01       	movw	r30, r20
    2384:	e4 5a       	subi	r30, 0xA4	; 164
    2386:	fe 4f       	sbci	r31, 0xFE	; 254
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	80 83       	st	Z, r24
        mtable[i] = m;
    238c:	fa 01       	movw	r30, r20
    238e:	ec 50       	subi	r30, 0x0C	; 12
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	71 83       	std	Z+1, r23	; 0x01
    2394:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	fc 01       	movw	r30, r24
    239c:	53 83       	std	Z+3, r21	; 0x03
    239e:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    23a0:	22 23       	and	r18, r18
    23a2:	0c f4       	brge	.+2      	; 0x23a6 <install+0x32>
    23a4:	78 94       	sei
    23a6:	08 95       	ret

000023a8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    23a8:	8c 01       	movw	r16, r24
    23aa:	7b 01       	movw	r14, r22
    23ac:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    23ae:	8f b7       	in	r24, 0x3f	; 63
    23b0:	f8 94       	cli
    initialize();
    23b2:	0e 94 ac 05 	call	0xb58	; 0xb58 <initialize>
    ENABLE(1);
    23b6:	78 94       	sei
    if (m != NULL)
    23b8:	e1 14       	cp	r14, r1
    23ba:	f1 04       	cpc	r15, r1
    23bc:	41 f0       	breq	.+16     	; 0x23ce <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	a9 01       	movw	r20, r18
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	cb 01       	movw	r24, r22
    23ca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <async>
    DISABLE(status);
    23ce:	8f b7       	in	r24, 0x3f	; 63
    23d0:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    23d2:	0e 94 37 06 	call	0xc6e	; 0xc6e <schedule>
    ENABLE(1);
    23d6:	78 94       	sei
    while (1) {
        SLEEP();
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	83 bf       	out	0x33, r24	; 51
    23dc:	88 95       	sleep
    23de:	fd cf       	rjmp	.-6      	; 0x23da <tinytimber+0x32>

000023e0 <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    23e0:	67 2b       	or	r22, r23
    23e2:	79 f0       	breq	.+30     	; 0x2402 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    23e4:	4e b1       	in	r20, 0x0e	; 14
    23e6:	21 e0       	ldi	r18, 0x01	; 1
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	b9 01       	movw	r22, r18
    23ec:	fc 01       	movw	r30, r24
    23ee:	04 80       	ldd	r0, Z+4	; 0x04
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <writeBit+0x16>
    23f2:	66 0f       	add	r22, r22
    23f4:	77 1f       	adc	r23, r23
    23f6:	0a 94       	dec	r0
    23f8:	e2 f7       	brpl	.-8      	; 0x23f2 <writeBit+0x12>
    23fa:	cb 01       	movw	r24, r22
    23fc:	84 2b       	or	r24, r20
    23fe:	8e b9       	out	0x0e, r24	; 14
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    2402:	4e b1       	in	r20, 0x0e	; 14
    2404:	21 e0       	ldi	r18, 0x01	; 1
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	b9 01       	movw	r22, r18
    240a:	fc 01       	movw	r30, r24
    240c:	04 80       	ldd	r0, Z+4	; 0x04
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <writeBit+0x34>
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	0a 94       	dec	r0
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <writeBit+0x30>
    2418:	cb 01       	movw	r24, r22
    241a:	80 95       	com	r24
    241c:	84 23       	and	r24, r20
    241e:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	08 95       	ret

00002426 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    2426:	4e b1       	in	r20, 0x0e	; 14
    2428:	21 e0       	ldi	r18, 0x01	; 1
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	fc 01       	movw	r30, r24
    242e:	04 80       	ldd	r0, Z+4	; 0x04
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <toggleBit+0x10>
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	0a 94       	dec	r0
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <toggleBit+0xc>
    243a:	24 27       	eor	r18, r20
    243c:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	08 95       	ret

00002444 <__divmodhi4>:
    2444:	97 fb       	bst	r25, 7
    2446:	07 2e       	mov	r0, r23
    2448:	16 f4       	brtc	.+4      	; 0x244e <__divmodhi4+0xa>
    244a:	00 94       	com	r0
    244c:	07 d0       	rcall	.+14     	; 0x245c <__divmodhi4_neg1>
    244e:	77 fd       	sbrc	r23, 7
    2450:	09 d0       	rcall	.+18     	; 0x2464 <__divmodhi4_neg2>
    2452:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__udivmodhi4>
    2456:	07 fc       	sbrc	r0, 7
    2458:	05 d0       	rcall	.+10     	; 0x2464 <__divmodhi4_neg2>
    245a:	3e f4       	brtc	.+14     	; 0x246a <__divmodhi4_exit>

0000245c <__divmodhi4_neg1>:
    245c:	90 95       	com	r25
    245e:	81 95       	neg	r24
    2460:	9f 4f       	sbci	r25, 0xFF	; 255
    2462:	08 95       	ret

00002464 <__divmodhi4_neg2>:
    2464:	70 95       	com	r23
    2466:	61 95       	neg	r22
    2468:	7f 4f       	sbci	r23, 0xFF	; 255

0000246a <__divmodhi4_exit>:
    246a:	08 95       	ret

0000246c <__divmodsi4>:
    246c:	05 2e       	mov	r0, r21
    246e:	97 fb       	bst	r25, 7
    2470:	1e f4       	brtc	.+6      	; 0x2478 <__divmodsi4+0xc>
    2472:	00 94       	com	r0
    2474:	0e 94 4d 12 	call	0x249a	; 0x249a <__negsi2>
    2478:	57 fd       	sbrc	r21, 7
    247a:	07 d0       	rcall	.+14     	; 0x248a <__divmodsi4_neg2>
    247c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__udivmodsi4>
    2480:	07 fc       	sbrc	r0, 7
    2482:	03 d0       	rcall	.+6      	; 0x248a <__divmodsi4_neg2>
    2484:	4e f4       	brtc	.+18     	; 0x2498 <__divmodsi4_exit>
    2486:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__negsi2>

0000248a <__divmodsi4_neg2>:
    248a:	50 95       	com	r21
    248c:	40 95       	com	r20
    248e:	30 95       	com	r19
    2490:	21 95       	neg	r18
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
    2494:	4f 4f       	sbci	r20, 0xFF	; 255
    2496:	5f 4f       	sbci	r21, 0xFF	; 255

00002498 <__divmodsi4_exit>:
    2498:	08 95       	ret

0000249a <__negsi2>:
    249a:	90 95       	com	r25
    249c:	80 95       	com	r24
    249e:	70 95       	com	r23
    24a0:	61 95       	neg	r22
    24a2:	7f 4f       	sbci	r23, 0xFF	; 255
    24a4:	8f 4f       	sbci	r24, 0xFF	; 255
    24a6:	9f 4f       	sbci	r25, 0xFF	; 255
    24a8:	08 95       	ret

000024aa <__usmulhisi3>:
    24aa:	0e 94 92 12 	call	0x2524	; 0x2524 <__umulhisi3>

000024ae <__usmulhisi3_tail>:
    24ae:	b7 ff       	sbrs	r27, 7
    24b0:	08 95       	ret
    24b2:	82 1b       	sub	r24, r18
    24b4:	93 0b       	sbc	r25, r19
    24b6:	08 95       	ret

000024b8 <__udivmodhi4>:
    24b8:	aa 1b       	sub	r26, r26
    24ba:	bb 1b       	sub	r27, r27
    24bc:	51 e1       	ldi	r21, 0x11	; 17
    24be:	07 c0       	rjmp	.+14     	; 0x24ce <__udivmodhi4_ep>

000024c0 <__udivmodhi4_loop>:
    24c0:	aa 1f       	adc	r26, r26
    24c2:	bb 1f       	adc	r27, r27
    24c4:	a6 17       	cp	r26, r22
    24c6:	b7 07       	cpc	r27, r23
    24c8:	10 f0       	brcs	.+4      	; 0x24ce <__udivmodhi4_ep>
    24ca:	a6 1b       	sub	r26, r22
    24cc:	b7 0b       	sbc	r27, r23

000024ce <__udivmodhi4_ep>:
    24ce:	88 1f       	adc	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	5a 95       	dec	r21
    24d4:	a9 f7       	brne	.-22     	; 0x24c0 <__udivmodhi4_loop>
    24d6:	80 95       	com	r24
    24d8:	90 95       	com	r25
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	08 95       	ret

000024e0 <__udivmodsi4>:
    24e0:	a1 e2       	ldi	r26, 0x21	; 33
    24e2:	1a 2e       	mov	r1, r26
    24e4:	aa 1b       	sub	r26, r26
    24e6:	bb 1b       	sub	r27, r27
    24e8:	fd 01       	movw	r30, r26
    24ea:	0d c0       	rjmp	.+26     	; 0x2506 <__udivmodsi4_ep>

000024ec <__udivmodsi4_loop>:
    24ec:	aa 1f       	adc	r26, r26
    24ee:	bb 1f       	adc	r27, r27
    24f0:	ee 1f       	adc	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	a2 17       	cp	r26, r18
    24f6:	b3 07       	cpc	r27, r19
    24f8:	e4 07       	cpc	r30, r20
    24fa:	f5 07       	cpc	r31, r21
    24fc:	20 f0       	brcs	.+8      	; 0x2506 <__udivmodsi4_ep>
    24fe:	a2 1b       	sub	r26, r18
    2500:	b3 0b       	sbc	r27, r19
    2502:	e4 0b       	sbc	r30, r20
    2504:	f5 0b       	sbc	r31, r21

00002506 <__udivmodsi4_ep>:
    2506:	66 1f       	adc	r22, r22
    2508:	77 1f       	adc	r23, r23
    250a:	88 1f       	adc	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	1a 94       	dec	r1
    2510:	69 f7       	brne	.-38     	; 0x24ec <__udivmodsi4_loop>
    2512:	60 95       	com	r22
    2514:	70 95       	com	r23
    2516:	80 95       	com	r24
    2518:	90 95       	com	r25
    251a:	9b 01       	movw	r18, r22
    251c:	ac 01       	movw	r20, r24
    251e:	bd 01       	movw	r22, r26
    2520:	cf 01       	movw	r24, r30
    2522:	08 95       	ret

00002524 <__umulhisi3>:
    2524:	a2 9f       	mul	r26, r18
    2526:	b0 01       	movw	r22, r0
    2528:	b3 9f       	mul	r27, r19
    252a:	c0 01       	movw	r24, r0
    252c:	a3 9f       	mul	r26, r19
    252e:	70 0d       	add	r23, r0
    2530:	81 1d       	adc	r24, r1
    2532:	11 24       	eor	r1, r1
    2534:	91 1d       	adc	r25, r1
    2536:	b2 9f       	mul	r27, r18
    2538:	70 0d       	add	r23, r0
    253a:	81 1d       	adc	r24, r1
    253c:	11 24       	eor	r1, r1
    253e:	91 1d       	adc	r25, r1
    2540:	08 95       	ret

00002542 <setjmp>:
    2542:	dc 01       	movw	r26, r24
    2544:	2d 92       	st	X+, r2
    2546:	3d 92       	st	X+, r3
    2548:	4d 92       	st	X+, r4
    254a:	5d 92       	st	X+, r5
    254c:	6d 92       	st	X+, r6
    254e:	7d 92       	st	X+, r7
    2550:	8d 92       	st	X+, r8
    2552:	9d 92       	st	X+, r9
    2554:	ad 92       	st	X+, r10
    2556:	bd 92       	st	X+, r11
    2558:	cd 92       	st	X+, r12
    255a:	dd 92       	st	X+, r13
    255c:	ed 92       	st	X+, r14
    255e:	fd 92       	st	X+, r15
    2560:	0d 93       	st	X+, r16
    2562:	1d 93       	st	X+, r17
    2564:	cd 93       	st	X+, r28
    2566:	dd 93       	st	X+, r29
    2568:	ff 91       	pop	r31
    256a:	ef 91       	pop	r30
    256c:	8d b7       	in	r24, 0x3d	; 61
    256e:	8d 93       	st	X+, r24
    2570:	8e b7       	in	r24, 0x3e	; 62
    2572:	8d 93       	st	X+, r24
    2574:	8f b7       	in	r24, 0x3f	; 63
    2576:	8d 93       	st	X+, r24
    2578:	ed 93       	st	X+, r30
    257a:	fd 93       	st	X+, r31
    257c:	88 27       	eor	r24, r24
    257e:	99 27       	eor	r25, r25
    2580:	09 94       	ijmp

00002582 <longjmp>:
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	91 05       	cpc	r25, r1
    258a:	81 1d       	adc	r24, r1
    258c:	2d 90       	ld	r2, X+
    258e:	3d 90       	ld	r3, X+
    2590:	4d 90       	ld	r4, X+
    2592:	5d 90       	ld	r5, X+
    2594:	6d 90       	ld	r6, X+
    2596:	7d 90       	ld	r7, X+
    2598:	8d 90       	ld	r8, X+
    259a:	9d 90       	ld	r9, X+
    259c:	ad 90       	ld	r10, X+
    259e:	bd 90       	ld	r11, X+
    25a0:	cd 90       	ld	r12, X+
    25a2:	dd 90       	ld	r13, X+
    25a4:	ed 90       	ld	r14, X+
    25a6:	fd 90       	ld	r15, X+
    25a8:	0d 91       	ld	r16, X+
    25aa:	1d 91       	ld	r17, X+
    25ac:	cd 91       	ld	r28, X+
    25ae:	dd 91       	ld	r29, X+
    25b0:	ed 91       	ld	r30, X+
    25b2:	fd 91       	ld	r31, X+
    25b4:	0d 90       	ld	r0, X+
    25b6:	f8 94       	cli
    25b8:	fe bf       	out	0x3e, r31	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	ed bf       	out	0x3d, r30	; 61
    25be:	ed 91       	ld	r30, X+
    25c0:	fd 91       	ld	r31, X+
    25c2:	09 94       	ijmp

000025c4 <_exit>:
    25c4:	f8 94       	cli

000025c6 <__stop_program>:
    25c6:	ff cf       	rjmp	.-2      	; 0x25c6 <__stop_program>
