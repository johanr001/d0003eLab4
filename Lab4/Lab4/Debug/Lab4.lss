
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000025ba  0000264e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800156  00800156  000026a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a34  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012af  00000000  00000000  00006430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e5  00000000  00000000  000076df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e54  00000000  00000000  000090c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6d  00000000  00000000  00009f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033bc  00000000  00000000  0000a985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000dd41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_1>
       8:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_2>
       c:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__vector_3>
      10:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__vector_4>
      14:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__vector_9>
      28:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_10>
      2c:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__vector_11>
      30:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_12>
      34:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_13>
      38:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_14>
      3c:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_15>
      40:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_16>
      44:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_17>
      48:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_18>
      4c:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_19>
      50:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_20>
      54:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_21>
      58:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea eb       	ldi	r30, 0xBA	; 186
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 35       	cpi	r26, 0x56	; 86
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e5       	ldi	r26, 0x56	; 86
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3a       	cpi	r26, 0xA9	; 169
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 b5 04 	call	0x96a	; 0x96a <main>
      92:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      aa:	fc 01       	movw	r30, r24
      ac:	22 85       	ldd	r18, Z+10	; 0x0a
      ae:	22 23       	and	r18, r18
      b0:	41 f1       	breq	.+80     	; 0x102 <holdCheckerUp+0x68>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      b2:	1e 99       	sbic	0x03, 6	; 3
      b4:	24 c0       	rjmp	.+72     	; 0xfe <holdCheckerUp+0x64>
      b6:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      b8:	04 81       	ldd	r16, Z+4	; 0x04
      ba:	15 81       	ldd	r17, Z+5	; 0x05
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	fb e4       	ldi	r31, 0x4B	; 75
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      dc:	0f 2e       	mov	r0, r31
      de:	fd e4       	ldi	r31, 0x4D	; 77
      e0:	ef 2e       	mov	r14, r31
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	8e 01       	movw	r16, r28
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	a9 01       	movw	r20, r18
      f0:	65 e3       	ldi	r22, 0x35	; 53
      f2:	7c e0       	ldi	r23, 0x0C	; 12
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <holdCheckerUp+0x68>
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      fe:	fc 01       	movw	r30, r24
     100:	12 86       	std	Z+10, r1	; 0x0a
	}
	return 0;
}
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	1f 91       	pop	r17
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	df 90       	pop	r13
     114:	cf 90       	pop	r12
     116:	08 95       	ret

00000118 <holdCheckerDown>:

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     128:	fc 01       	movw	r30, r24
     12a:	23 85       	ldd	r18, Z+11	; 0x0b
     12c:	22 23       	and	r18, r18
     12e:	41 f1       	breq	.+80     	; 0x180 <holdCheckerDown+0x68>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     130:	1f 99       	sbic	0x03, 7	; 3
     132:	24 c0       	rjmp	.+72     	; 0x17c <holdCheckerDown+0x64>
     134:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     136:	04 81       	ldd	r16, Z+4	; 0x04
     138:	15 81       	ldd	r17, Z+5	; 0x05
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	0f 2e       	mov	r0, r31
     140:	f8 e9       	ldi	r31, 0x98	; 152
     142:	ef 2e       	mov	r14, r31
     144:	f3 e0       	ldi	r31, 0x03	; 3
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	a9 01       	movw	r20, r18
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	cb 01       	movw	r24, r22
     156:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     15a:	0f 2e       	mov	r0, r31
     15c:	fc e8       	ldi	r31, 0x8C	; 140
     15e:	ef 2e       	mov	r14, r31
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ff 2e       	mov	r15, r31
     164:	f0 2d       	mov	r31, r0
     166:	8e 01       	movw	r16, r28
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	a9 01       	movw	r20, r18
     16e:	65 e3       	ldi	r22, 0x35	; 53
     170:	7c e0       	ldi	r23, 0x0C	; 12
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     17a:	02 c0       	rjmp	.+4      	; 0x180 <holdCheckerDown+0x68>
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     17c:	fc 01       	movw	r30, r24
     17e:	13 86       	std	Z+11, r1	; 0x0b
	}
	return 0;
}
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	08 95       	ret

00000196 <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     196:	85 b1       	in	r24, 0x05	; 5
     198:	80 6d       	ori	r24, 0xD0	; 208
     19a:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     19c:	8e b1       	in	r24, 0x0e	; 14
     19e:	8c 60       	ori	r24, 0x0C	; 12
     1a0:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     1a2:	8d b3       	in	r24, 0x1d	; 29
     1a4:	80 6c       	ori	r24, 0xC0	; 192
     1a6:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a8:	eb e6       	ldi	r30, 0x6B	; 107
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8c 60       	ori	r24, 0x0C	; 12
     1b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1b2:	ec e6       	ldi	r30, 0x6C	; 108
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 6d       	ori	r24, 0xD0	; 208
     1ba:	80 83       	st	Z, r24
     1bc:	08 95       	ret

000001be <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
	if (PRESSEDLT && !self->heldLeft) {
     1ca:	62 99       	sbic	0x0c, 2	; 12
     1cc:	19 c0       	rjmp	.+50     	; 0x200 <__EEPROM_REGION_LENGTH__>
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 85       	ldd	r18, Z+8	; 0x08
     1d2:	21 11       	cpse	r18, r1
     1d4:	15 c0       	rjmp	.+42     	; 0x200 <__EEPROM_REGION_LENGTH__>
		self->heldLeft = true;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 87       	std	Z+8, r24	; 0x08
		ASYNC(self->gui, switchGen, 0);
     1da:	04 81       	ldd	r16, Z+4	; 0x04
     1dc:	15 81       	ldd	r17, Z+5	; 0x05
     1de:	c1 2c       	mov	r12, r1
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	f5 e2       	ldi	r31, 0x25	; 37
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f3 e0       	ldi	r31, 0x03	; 3
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	a9 01       	movw	r20, r18
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	cb 01       	movw	r24, r22
     1fa:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
	}
	
	else if (!PRESSEDLT) {
     200:	62 9b       	sbis	0x0c, 2	; 12
     202:	02 c0       	rjmp	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		self->heldLeft = false;
     204:	fc 01       	movw	r30, r24
     206:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	ff 90       	pop	r15
     212:	ef 90       	pop	r14
     214:	df 90       	pop	r13
     216:	cf 90       	pop	r12
     218:	08 95       	ret

0000021a <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
     21a:	cf 92       	push	r12
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
	if (PRESSEDRT && !self->heldRight) {
     226:	63 99       	sbic	0x0c, 3	; 12
     228:	1a c0       	rjmp	.+52     	; 0x25e <rightdir+0x44>
     22a:	fc 01       	movw	r30, r24
     22c:	21 85       	ldd	r18, Z+9	; 0x09
     22e:	21 11       	cpse	r18, r1
     230:	16 c0       	rjmp	.+44     	; 0x25e <rightdir+0x44>
		self->heldRight = true;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	81 87       	std	Z+9, r24	; 0x09
		ASYNC(self->gui, switchGen, 1);
     236:	04 81       	ldd	r16, Z+4	; 0x04
     238:	15 81       	ldd	r17, Z+5	; 0x05
     23a:	cc 24       	eor	r12, r12
     23c:	c3 94       	inc	r12
     23e:	d1 2c       	mov	r13, r1
     240:	0f 2e       	mov	r0, r31
     242:	f5 e2       	ldi	r31, 0x25	; 37
     244:	ef 2e       	mov	r14, r31
     246:	f3 e0       	ldi	r31, 0x03	; 3
     248:	ff 2e       	mov	r15, r31
     24a:	f0 2d       	mov	r31, r0
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	cb 01       	movw	r24, r22
     258:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     25c:	04 c0       	rjmp	.+8      	; 0x266 <rightdir+0x4c>
	}
	else if (!PRESSEDRT) {
     25e:	63 9b       	sbis	0x0c, 3	; 12
     260:	02 c0       	rjmp	.+4      	; 0x266 <rightdir+0x4c>
		self->heldRight = false;
     262:	fc 01       	movw	r30, r24
     264:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	08 95       	ret

00000278 <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     27e:	62 99       	sbic	0x0c, 2	; 12
     280:	05 c0       	rjmp	.+10     	; 0x28c <buttonCheckerLR+0x14>
		leftdir(self, 0);
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	0e 94 df 00 	call	0x1be	; 0x1be <leftdir>
     28a:	01 c0       	rjmp	.+2      	; 0x28e <buttonCheckerLR+0x16>
	}
	else {
		self->heldLeft = false;
     28c:	18 86       	std	Y+8, r1	; 0x08
	}
	if (PRESSEDRT) {
     28e:	63 99       	sbic	0x0c, 3	; 12
     290:	06 c0       	rjmp	.+12     	; 0x29e <buttonCheckerLR+0x26>
		rightdir(self, 0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	ce 01       	movw	r24, r28
     298:	0e 94 0d 01 	call	0x21a	; 0x21a <rightdir>
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <buttonCheckerLR+0x28>
	}
	else {
		self->heldRight = false;
     29e:	19 86       	std	Y+9, r1	; 0x09
	}
	return 0;
}
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     2aa:	cf 92       	push	r12
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     2ba:	1e 99       	sbic	0x03, 6	; 3
     2bc:	2f c0       	rjmp	.+94     	; 0x31c <updir+0x72>
     2be:	fc 01       	movw	r30, r24
     2c0:	26 81       	ldd	r18, Z+6	; 0x06
     2c2:	21 11       	cpse	r18, r1
     2c4:	2b c0       	rjmp	.+86     	; 0x31c <updir+0x72>
     2c6:	ec 01       	movw	r28, r24
		self->heldUp = true; // Markera att knappen hålls nere
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     2cc:	04 81       	ldd	r16, Z+4	; 0x04
     2ce:	15 81       	ldd	r17, Z+5	; 0x05
     2d0:	c1 2c       	mov	r12, r1
     2d2:	d1 2c       	mov	r13, r1
     2d4:	0f 2e       	mov	r0, r31
     2d6:	fb e4       	ldi	r31, 0x4B	; 75
     2d8:	ef 2e       	mov	r14, r31
     2da:	f3 e0       	ldi	r31, 0x03	; 3
     2dc:	ff 2e       	mov	r15, r31
     2de:	f0 2d       	mov	r31, r0
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	a9 01       	movw	r20, r18
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	cb 01       	movw	r24, r22
     2ec:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     2f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2f2:	81 11       	cpse	r24, r1
     2f4:	17 c0       	rjmp	.+46     	; 0x324 <updir+0x7a>
			self->holdUpRunning = true;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	8a 87       	std	Y+10, r24	; 0x0a
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     2fa:	0f 2e       	mov	r0, r31
     2fc:	fd e4       	ldi	r31, 0x4D	; 77
     2fe:	ef 2e       	mov	r14, r31
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	ff 2e       	mov	r15, r31
     304:	f0 2d       	mov	r31, r0
     306:	8e 01       	movw	r16, r28
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	a9 01       	movw	r20, r18
     30e:	69 e0       	ldi	r22, 0x09	; 9
     310:	7d e3       	ldi	r23, 0x3D	; 61
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     31a:	04 c0       	rjmp	.+8      	; 0x324 <updir+0x7a>
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     31c:	1e 9b       	sbis	0x03, 6	; 3
     31e:	02 c0       	rjmp	.+4      	; 0x324 <updir+0x7a>
		self->heldUp = false;
     320:	fc 01       	movw	r30, r24
     322:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	08 95       	ret

0000033a <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     34a:	1f 99       	sbic	0x03, 7	; 3
     34c:	2f c0       	rjmp	.+94     	; 0x3ac <downdir+0x72>
     34e:	fc 01       	movw	r30, r24
     350:	27 81       	ldd	r18, Z+7	; 0x07
     352:	21 11       	cpse	r18, r1
     354:	2b c0       	rjmp	.+86     	; 0x3ac <downdir+0x72>
     356:	ec 01       	movw	r28, r24
		self->heldDown = true; // Markera att knappen hålls nere
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	87 83       	std	Z+7, r24	; 0x07
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     35c:	04 81       	ldd	r16, Z+4	; 0x04
     35e:	15 81       	ldd	r17, Z+5	; 0x05
     360:	c1 2c       	mov	r12, r1
     362:	d1 2c       	mov	r13, r1
     364:	0f 2e       	mov	r0, r31
     366:	f8 e9       	ldi	r31, 0x98	; 152
     368:	ef 2e       	mov	r14, r31
     36a:	f3 e0       	ldi	r31, 0x03	; 3
     36c:	ff 2e       	mov	r15, r31
     36e:	f0 2d       	mov	r31, r0
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	a9 01       	movw	r20, r18
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	cb 01       	movw	r24, r22
     37c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     380:	8b 85       	ldd	r24, Y+11	; 0x0b
     382:	81 11       	cpse	r24, r1
     384:	17 c0       	rjmp	.+46     	; 0x3b4 <downdir+0x7a>
			self->holdDownRunning = true;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	8b 87       	std	Y+11, r24	; 0x0b
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     38a:	0f 2e       	mov	r0, r31
     38c:	fc e8       	ldi	r31, 0x8C	; 140
     38e:	ef 2e       	mov	r14, r31
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	ff 2e       	mov	r15, r31
     394:	f0 2d       	mov	r31, r0
     396:	8e 01       	movw	r16, r28
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	69 e0       	ldi	r22, 0x09	; 9
     3a0:	7d e3       	ldi	r23, 0x3D	; 61
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <downdir+0x7a>
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     3ac:	1f 9b       	sbis	0x03, 7	; 3
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <downdir+0x7a>
		self->heldDown = false;
     3b0:	fc 01       	movw	r30, r24
     3b2:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	08 95       	ret

000003ca <centerdir>:
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
	if (PRESSEDCN && !self->heldCenter) {
     3d6:	1c 99       	sbic	0x03, 4	; 3
     3d8:	19 c0       	rjmp	.+50     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
     3da:	fc 01       	movw	r30, r24
     3dc:	24 85       	ldd	r18, Z+12	; 0x0c
     3de:	21 11       	cpse	r18, r1
     3e0:	15 c0       	rjmp	.+42     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
		self->heldCenter = true;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	84 87       	std	Z+12, r24	; 0x0c
		ASYNC(self->gui, guiFrecReset, 0);
     3e6:	04 81       	ldd	r16, Z+4	; 0x04
     3e8:	15 81       	ldd	r17, Z+5	; 0x05
     3ea:	c1 2c       	mov	r12, r1
     3ec:	d1 2c       	mov	r13, r1
     3ee:	0f 2e       	mov	r0, r31
     3f0:	f5 ee       	ldi	r31, 0xE5	; 229
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f3 e0       	ldi	r31, 0x03	; 3
     3f6:	ff 2e       	mov	r15, r31
     3f8:	f0 2d       	mov	r31, r0
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	a9 01       	movw	r20, r18
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	cb 01       	movw	r24, r22
     406:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     40a:	04 c0       	rjmp	.+8      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
	}
	else if (!PRESSEDCN) {
     40c:	1c 9b       	sbis	0x03, 4	; 3
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
		self->heldCenter = false;
     410:	fc 01       	movw	r30, r24
     412:	14 86       	std	Z+12, r1	; 0x0c
	}
	return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	08 95       	ret

00000426 <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     42c:	1e 99       	sbic	0x03, 6	; 3
     42e:	05 c0       	rjmp	.+10     	; 0x43a <buttonCheckerUDC+0x14>
		updir(self, 0);
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	0e 94 55 01 	call	0x2aa	; 0x2aa <updir>
     438:	01 c0       	rjmp	.+2      	; 0x43c <buttonCheckerUDC+0x16>
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     43a:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN) {
     43c:	1f 99       	sbic	0x03, 7	; 3
     43e:	06 c0       	rjmp	.+12     	; 0x44c <buttonCheckerUDC+0x26>
		downdir(self, 0); // Hantera ner-knappen
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	ce 01       	movw	r24, r28
     446:	0e 94 9d 01 	call	0x33a	; 0x33a <downdir>
     44a:	01 c0       	rjmp	.+2      	; 0x44e <buttonCheckerUDC+0x28>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     44c:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN) {
     44e:	1c 99       	sbic	0x03, 4	; 3
     450:	06 c0       	rjmp	.+12     	; 0x45e <buttonCheckerUDC+0x38>
		centerdir(self, 0);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	ce 01       	movw	r24, r28
     458:	0e 94 e5 01 	call	0x3ca	; 0x3ca <centerdir>
     45c:	01 c0       	rjmp	.+2      	; 0x460 <buttonCheckerUDC+0x3a>
	}
	else {
		self->heldCenter = false;
     45e:	1c 86       	std	Y+12, r1	; 0x0c
	}
	return 0;
}
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     46a:	80 ec       	ldi	r24, 0xC0	; 192
     46c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     470:	87 eb       	ldi	r24, 0xB7	; 183
     472:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     476:	8f e0       	ldi	r24, 0x0F	; 15
     478:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     47c:	08 95       	ret

0000047e <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     47e:	66 30       	cpi	r22, 0x06	; 6
     480:	71 05       	cpc	r23, r1
     482:	08 f0       	brcs	.+2      	; 0x486 <writeChar+0x8>
     484:	6b c0       	rjmp	.+214    	; 0x55c <__stack+0x5d>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     486:	90 ed       	ldi	r25, 0xD0	; 208
     488:	98 0f       	add	r25, r24
     48a:	9a 30       	cpi	r25, 0x0A	; 10
     48c:	48 f4       	brcc	.+18     	; 0x4a0 <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     48e:	e8 2f       	mov	r30, r24
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	ee 51       	subi	r30, 0x1E	; 30
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	20 81       	ld	r18, Z
     49c:	31 81       	ldd	r19, Z+1	; 0x01
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     4a4:	fb 01       	movw	r30, r22
     4a6:	77 23       	and	r23, r23
     4a8:	0c f4       	brge	.+2      	; 0x4ac <writeChar+0x2e>
     4aa:	31 96       	adiw	r30, 0x01	; 1
     4ac:	f5 95       	asr	r31
     4ae:	e7 95       	ror	r30
     4b0:	e4 51       	subi	r30, 0x14	; 20
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     4b4:	61 70       	andi	r22, 0x01	; 1
     4b6:	70 78       	andi	r23, 0x80	; 128
     4b8:	77 23       	and	r23, r23
     4ba:	34 f4       	brge	.+12     	; 0x4c8 <writeChar+0x4a>
     4bc:	61 50       	subi	r22, 0x01	; 1
     4be:	71 09       	sbc	r23, r1
     4c0:	6e 6f       	ori	r22, 0xFE	; 254
     4c2:	7f 6f       	ori	r23, 0xFF	; 255
     4c4:	6f 5f       	subi	r22, 0xFF	; 255
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	66 0f       	add	r22, r22
     4ca:	77 1f       	adc	r23, r23
     4cc:	66 0f       	add	r22, r22
     4ce:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     4d0:	8f e0       	ldi	r24, 0x0F	; 15
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	06 2e       	mov	r0, r22
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <writeChar+0x5e>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <writeChar+0x5a>
     4e0:	80 95       	com	r24
     4e2:	40 81       	ld	r20, Z
     4e4:	98 2f       	mov	r25, r24
     4e6:	94 23       	and	r25, r20
     4e8:	a9 01       	movw	r20, r18
     4ea:	4f 70       	andi	r20, 0x0F	; 15
     4ec:	55 27       	eor	r21, r21
     4ee:	06 2e       	mov	r0, r22
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <writeChar+0x78>
     4f2:	44 0f       	add	r20, r20
     4f4:	55 1f       	adc	r21, r21
     4f6:	0a 94       	dec	r0
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <writeChar+0x74>
     4fa:	49 2b       	or	r20, r25
     4fc:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     4fe:	a9 01       	movw	r20, r18
     500:	52 95       	swap	r21
     502:	42 95       	swap	r20
     504:	4f 70       	andi	r20, 0x0F	; 15
     506:	45 27       	eor	r20, r21
     508:	5f 70       	andi	r21, 0x0F	; 15
     50a:	45 27       	eor	r20, r21
     50c:	4f 70       	andi	r20, 0x0F	; 15
     50e:	55 27       	eor	r21, r21
     510:	06 2e       	mov	r0, r22
     512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0x19>
     514:	44 0f       	add	r20, r20
     516:	55 1f       	adc	r21, r21
     518:	0a 94       	dec	r0
     51a:	e2 f7       	brpl	.-8      	; 0x514 <__stack+0x15>
     51c:	95 81       	ldd	r25, Z+5	; 0x05
     51e:	98 23       	and	r25, r24
     520:	49 2b       	or	r20, r25
     522:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     524:	43 2f       	mov	r20, r19
     526:	55 27       	eor	r21, r21
     528:	4f 70       	andi	r20, 0x0F	; 15
     52a:	55 27       	eor	r21, r21
     52c:	06 2e       	mov	r0, r22
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__stack+0x35>
     530:	44 0f       	add	r20, r20
     532:	55 1f       	adc	r21, r21
     534:	0a 94       	dec	r0
     536:	e2 f7       	brpl	.-8      	; 0x530 <__stack+0x31>
     538:	92 85       	ldd	r25, Z+10	; 0x0a
     53a:	98 23       	and	r25, r24
     53c:	49 2b       	or	r20, r25
     53e:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     540:	47 85       	ldd	r20, Z+15	; 0x0f
     542:	48 23       	and	r20, r24
     544:	c9 01       	movw	r24, r18
     546:	89 2f       	mov	r24, r25
     548:	99 27       	eor	r25, r25
     54a:	82 95       	swap	r24
     54c:	8f 70       	andi	r24, 0x0F	; 15
     54e:	02 c0       	rjmp	.+4      	; 0x554 <__stack+0x55>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	6a 95       	dec	r22
     556:	e2 f7       	brpl	.-8      	; 0x550 <__stack+0x51>
     558:	84 2b       	or	r24, r20
     55a:	87 87       	std	Z+15, r24	; 0x0f
     55c:	08 95       	ret

0000055e <printAt>:
}

void printAt(long num, int pos) {
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	4b 01       	movw	r8, r22
     574:	5c 01       	movw	r10, r24
     576:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     578:	24 e6       	ldi	r18, 0x64	; 100
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodsi4>
     584:	0f 2e       	mov	r0, r31
     586:	fa e0       	ldi	r31, 0x0A	; 10
     588:	cf 2e       	mov	r12, r31
     58a:	d1 2c       	mov	r13, r1
     58c:	e1 2c       	mov	r14, r1
     58e:	f1 2c       	mov	r15, r1
     590:	f0 2d       	mov	r31, r0
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodsi4>
     59a:	be 01       	movw	r22, r28
     59c:	80 e3       	ldi	r24, 0x30	; 48
     59e:	82 0f       	add	r24, r18
     5a0:	0e 94 3f 02 	call	0x47e	; 0x47e <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     5a4:	21 96       	adiw	r28, 0x01	; 1
     5a6:	c5 01       	movw	r24, r10
     5a8:	b4 01       	movw	r22, r8
     5aa:	a7 01       	movw	r20, r14
     5ac:	96 01       	movw	r18, r12
     5ae:	0e 94 2f 12 	call	0x245e	; 0x245e <__divmodsi4>
     5b2:	86 2f       	mov	r24, r22
     5b4:	be 01       	movw	r22, r28
     5b6:	80 5d       	subi	r24, 0xD0	; 208
     5b8:	0e 94 3f 02 	call	0x47e	; 0x47e <writeChar>
	
}
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	af 90       	pop	r10
     5cc:	9f 90       	pop	r9
     5ce:	8f 90       	pop	r8
     5d0:	08 95       	ret

000005d2 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	69 e4       	ldi	r22, 0x49	; 73
     5de:	75 e0       	ldi	r23, 0x05	; 5
     5e0:	8c 81       	ldd	r24, Y+4	; 0x04
     5e2:	9d 81       	ldd	r25, Y+5	; 0x05
     5e4:	0e 94 b8 10 	call	0x2170	; 0x2170 <sync>
     5e8:	bc 01       	movw	r22, r24
     5ea:	99 0f       	add	r25, r25
     5ec:	88 0b       	sbc	r24, r24
     5ee:	99 0b       	sbc	r25, r25
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	0e 94 af 02 	call	0x55e	; 0x55e <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	69 e4       	ldi	r22, 0x49	; 73
     5fe:	75 e0       	ldi	r23, 0x05	; 5
     600:	8e 81       	ldd	r24, Y+6	; 0x06
     602:	9f 81       	ldd	r25, Y+7	; 0x07
     604:	0e 94 b8 10 	call	0x2170	; 0x2170 <sync>
     608:	bc 01       	movw	r22, r24
     60a:	99 0f       	add	r25, r25
     60c:	88 0b       	sbc	r24, r24
     60e:	99 0b       	sbc	r25, r25
     610:	44 e0       	ldi	r20, 0x04	; 4
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	0e 94 af 02 	call	0x55e	; 0x55e <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     618:	88 85       	ldd	r24, Y+8	; 0x08
     61a:	81 11       	cpse	r24, r1
     61c:	09 c0       	rjmp	.+18     	; 0x630 <updateDisplay+0x5e>
		printAt(10, 2);
     61e:	42 e0       	ldi	r20, 0x02	; 2
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	6a e0       	ldi	r22, 0x0A	; 10
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 af 02 	call	0x55e	; 0x55e <printAt>
     62e:	08 c0       	rjmp	.+16     	; 0x640 <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     630:	42 e0       	ldi	r20, 0x02	; 2
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 af 02 	call	0x55e	; 0x55e <printAt>
	}
	return 0;
}
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	67 2b       	or	r22, r23
     65a:	09 f4       	brne	.+2      	; 0x65e <switchGen+0x14>
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     662:	c1 2c       	mov	r12, r1
     664:	d1 2c       	mov	r13, r1
     666:	0f 2e       	mov	r0, r31
     668:	f9 ee       	ldi	r31, 0xE9	; 233
     66a:	ef 2e       	mov	r14, r31
     66c:	f2 e0       	ldi	r31, 0x02	; 2
     66e:	ff 2e       	mov	r15, r31
     670:	f0 2d       	mov	r31, r0
     672:	8c 01       	movw	r16, r24
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	a9 01       	movw	r20, r18
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	cb 01       	movw	r24, r22
     680:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	return 0;
}
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	08 95       	ret

00000696 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6a8:	88 85       	ldd	r24, Y+8	; 0x08
     6aa:	81 11       	cpse	r24, r1
     6ac:	13 c0       	rjmp	.+38     	; 0x6d4 <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     6ae:	0c 81       	ldd	r16, Y+4	; 0x04
     6b0:	1d 81       	ldd	r17, Y+5	; 0x05
     6b2:	c1 2c       	mov	r12, r1
     6b4:	d1 2c       	mov	r13, r1
     6b6:	0f 2e       	mov	r0, r31
     6b8:	fd e4       	ldi	r31, 0x4D	; 77
     6ba:	ef 2e       	mov	r14, r31
     6bc:	f5 e0       	ldi	r31, 0x05	; 5
     6be:	ff 2e       	mov	r15, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	a9 01       	movw	r20, r18
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	cb 01       	movw	r24, r22
     6ce:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     6d2:	12 c0       	rjmp	.+36     	; 0x6f8 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     6d4:	0e 81       	ldd	r16, Y+6	; 0x06
     6d6:	1f 81       	ldd	r17, Y+7	; 0x07
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	0f 2e       	mov	r0, r31
     6de:	fd e4       	ldi	r31, 0x4D	; 77
     6e0:	ef 2e       	mov	r14, r31
     6e2:	f5 e0       	ldi	r31, 0x05	; 5
     6e4:	ff 2e       	mov	r15, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	a9 01       	movw	r20, r18
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	cb 01       	movw	r24, r22
     6f4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	}
	ASYNC(self, updateDisplay, 0);
     6f8:	c1 2c       	mov	r12, r1
     6fa:	d1 2c       	mov	r13, r1
     6fc:	0f 2e       	mov	r0, r31
     6fe:	f9 ee       	ldi	r31, 0xE9	; 233
     700:	ef 2e       	mov	r14, r31
     702:	f2 e0       	ldi	r31, 0x02	; 2
     704:	ff 2e       	mov	r15, r31
     706:	f0 2d       	mov	r31, r0
     708:	8e 01       	movw	r16, r28
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	a9 01       	movw	r20, r18
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	cb 01       	movw	r24, r22
     716:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	return 0;

}
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     742:	88 85       	ldd	r24, Y+8	; 0x08
     744:	81 11       	cpse	r24, r1
     746:	13 c0       	rjmp	.+38     	; 0x76e <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     748:	0c 81       	ldd	r16, Y+4	; 0x04
     74a:	1d 81       	ldd	r17, Y+5	; 0x05
     74c:	c1 2c       	mov	r12, r1
     74e:	d1 2c       	mov	r13, r1
     750:	0f 2e       	mov	r0, r31
     752:	f6 e5       	ldi	r31, 0x56	; 86
     754:	ef 2e       	mov	r14, r31
     756:	f5 e0       	ldi	r31, 0x05	; 5
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	a9 01       	movw	r20, r18
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	cb 01       	movw	r24, r22
     768:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     76c:	12 c0       	rjmp	.+36     	; 0x792 <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     76e:	0e 81       	ldd	r16, Y+6	; 0x06
     770:	1f 81       	ldd	r17, Y+7	; 0x07
     772:	c1 2c       	mov	r12, r1
     774:	d1 2c       	mov	r13, r1
     776:	0f 2e       	mov	r0, r31
     778:	f6 e5       	ldi	r31, 0x56	; 86
     77a:	ef 2e       	mov	r14, r31
     77c:	f5 e0       	ldi	r31, 0x05	; 5
     77e:	ff 2e       	mov	r15, r31
     780:	f0 2d       	mov	r31, r0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	cb 01       	movw	r24, r22
     78e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	}
	ASYNC(self, updateDisplay, 0);
     792:	c1 2c       	mov	r12, r1
     794:	d1 2c       	mov	r13, r1
     796:	0f 2e       	mov	r0, r31
     798:	f9 ee       	ldi	r31, 0xE9	; 233
     79a:	ef 2e       	mov	r14, r31
     79c:	f2 e0       	ldi	r31, 0x02	; 2
     79e:	ff 2e       	mov	r15, r31
     7a0:	f0 2d       	mov	r31, r0
     7a2:	8e 01       	movw	r16, r28
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	a9 01       	movw	r20, r18
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	cb 01       	movw	r24, r22
     7b0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	return 0;
}
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	08 95       	ret

000007ca <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     7dc:	88 85       	ldd	r24, Y+8	; 0x08
     7de:	81 11       	cpse	r24, r1
     7e0:	13 c0       	rjmp	.+38     	; 0x808 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     7e2:	0c 81       	ldd	r16, Y+4	; 0x04
     7e4:	1d 81       	ldd	r17, Y+5	; 0x05
     7e6:	c1 2c       	mov	r12, r1
     7e8:	d1 2c       	mov	r13, r1
     7ea:	0f 2e       	mov	r0, r31
     7ec:	ff e5       	ldi	r31, 0x5F	; 95
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f5 e0       	ldi	r31, 0x05	; 5
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	a9 01       	movw	r20, r18
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	cb 01       	movw	r24, r22
     802:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     806:	12 c0       	rjmp	.+36     	; 0x82c <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     808:	0e 81       	ldd	r16, Y+6	; 0x06
     80a:	1f 81       	ldd	r17, Y+7	; 0x07
     80c:	c1 2c       	mov	r12, r1
     80e:	d1 2c       	mov	r13, r1
     810:	0f 2e       	mov	r0, r31
     812:	ff e5       	ldi	r31, 0x5F	; 95
     814:	ef 2e       	mov	r14, r31
     816:	f5 e0       	ldi	r31, 0x05	; 5
     818:	ff 2e       	mov	r15, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	a9 01       	movw	r20, r18
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	cb 01       	movw	r24, r22
     828:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	}
	ASYNC(self, updateDisplay, 0);
     82c:	c1 2c       	mov	r12, r1
     82e:	d1 2c       	mov	r13, r1
     830:	0f 2e       	mov	r0, r31
     832:	f9 ee       	ldi	r31, 0xE9	; 233
     834:	ef 2e       	mov	r14, r31
     836:	f2 e0       	ldi	r31, 0x02	; 2
     838:	ff 2e       	mov	r15, r31
     83a:	f0 2d       	mov	r31, r0
     83c:	8e 01       	movw	r16, r28
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	a9 01       	movw	r20, r18
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	cb 01       	movw	r24, r22
     84a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	return 0;
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	08 95       	ret

00000864 <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     870:	fc 01       	movw	r30, r24
     872:	04 81       	ldd	r16, Z+4	; 0x04
     874:	15 81       	ldd	r17, Z+5	; 0x05
     876:	c1 2c       	mov	r12, r1
     878:	d1 2c       	mov	r13, r1
     87a:	0f 2e       	mov	r0, r31
     87c:	fc e3       	ldi	r31, 0x3C	; 60
     87e:	ef 2e       	mov	r14, r31
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	ff 2e       	mov	r15, r31
     884:	f0 2d       	mov	r31, r0
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	a9 01       	movw	r20, r18
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	cb 01       	movw	r24, r22
     892:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	return 0;
}
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     8b4:	fc 01       	movw	r30, r24
     8b6:	04 81       	ldd	r16, Z+4	; 0x04
     8b8:	15 81       	ldd	r17, Z+5	; 0x05
     8ba:	c1 2c       	mov	r12, r1
     8bc:	d1 2c       	mov	r13, r1
     8be:	0f 2e       	mov	r0, r31
     8c0:	f3 e1       	ldi	r31, 0x13	; 19
     8c2:	ef 2e       	mov	r14, r31
     8c4:	f2 e0       	ldi	r31, 0x02	; 2
     8c6:	ff 2e       	mov	r15, r31
     8c8:	f0 2d       	mov	r31, r0
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	a9 01       	movw	r20, r18
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	cb 01       	movw	r24, r22
     8d6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	return 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	08 95       	ret

000008ec <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     8fe:	c1 2c       	mov	r12, r1
     900:	d1 2c       	mov	r13, r1
     902:	0f 2e       	mov	r0, r31
     904:	f2 ed       	ldi	r31, 0xD2	; 210
     906:	ef 2e       	mov	r14, r31
     908:	f4 e0       	ldi	r31, 0x04	; 4
     90a:	ff 2e       	mov	r15, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	06 e2       	ldi	r16, 0x26	; 38
     910:	11 e0       	ldi	r17, 0x01	; 1
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	a9 01       	movw	r20, r18
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	cb 01       	movw	r24, r22
     91e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	ASYNC(&pulseGen2, setPulse, 0);
     922:	0c e1       	ldi	r16, 0x1C	; 28
     924:	11 e0       	ldi	r17, 0x01	; 1
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	a9 01       	movw	r20, r18
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	cb 01       	movw	r24, r22
     932:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     936:	0f 2e       	mov	r0, r31
     938:	f9 ee       	ldi	r31, 0xE9	; 233
     93a:	ef 2e       	mov	r14, r31
     93c:	f2 e0       	ldi	r31, 0x02	; 2
     93e:	ff 2e       	mov	r15, r31
     940:	f0 2d       	mov	r31, r0
     942:	8e 01       	movw	r16, r28
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	cb 01       	movw	r24, r22
     950:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	
	return 0;
}
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	08 95       	ret

0000096a <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     96a:	0e 94 89 05 	call	0xb12	; 0xb12 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     96e:	0e 94 35 02 	call	0x46a	; 0x46a <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     972:	0e 94 cb 00 	call	0x196	; 0x196 <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	62 e3       	ldi	r22, 0x32	; 50
     97a:	74 e0       	ldi	r23, 0x04	; 4
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 b3 11 	call	0x2366	; 0x2366 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     984:	42 e0       	ldi	r20, 0x02	; 2
     986:	64 e5       	ldi	r22, 0x54	; 84
     988:	74 e0       	ldi	r23, 0x04	; 4
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 b3 11 	call	0x2366	; 0x2366 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	66 e7       	ldi	r22, 0x76	; 118
     998:	74 e0       	ldi	r23, 0x04	; 4
     99a:	83 e1       	ldi	r24, 0x13	; 19
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 cd 11 	call	0x239a	; 0x239a <tinytimber>
}
     9a2:	08 95       	ret

000009a4 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     9b6:	8c 81       	ldd	r24, Y+4	; 0x04
     9b8:	81 11       	cpse	r24, r1
     9ba:	23 c0       	rjmp	.+70     	; 0xa02 <setPulse+0x5e>
	    ASYNC(self->wbit, writeBit, 0);
     9bc:	0f 81       	ldd	r16, Y+7	; 0x07
     9be:	18 85       	ldd	r17, Y+8	; 0x08
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f9 ee       	ldi	r31, 0xE9	; 233
     9c8:	ef 2e       	mov	r14, r31
     9ca:	f1 e1       	ldi	r31, 0x11	; 17
     9cc:	ff 2e       	mov	r15, r31
     9ce:	f0 2d       	mov	r31, r0
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	cb 01       	movw	r24, r22
     9dc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
		AFTER(MSEC(1000), self, setPulse, 0);
     9e0:	0f 2e       	mov	r0, r31
     9e2:	f2 ed       	ldi	r31, 0xD2	; 210
     9e4:	ef 2e       	mov	r14, r31
     9e6:	f4 e0       	ldi	r31, 0x04	; 4
     9e8:	ff 2e       	mov	r15, r31
     9ea:	f0 2d       	mov	r31, r0
     9ec:	8e 01       	movw	r16, r28
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	a9 01       	movw	r20, r18
     9f4:	62 e1       	ldi	r22, 0x12	; 18
     9f6:	7a e7       	ldi	r23, 0x7A	; 122
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
     a00:	3d c0       	rjmp	.+122    	; 0xa7c <setPulse+0xd8>
    }
	else {
		// Annars toggla outputHigh.
		ASYNC(self->wbit, toggleBit, 0);
     a02:	0f 81       	ldd	r16, Y+7	; 0x07
     a04:	18 85       	ldd	r17, Y+8	; 0x08
     a06:	c1 2c       	mov	r12, r1
     a08:	d1 2c       	mov	r13, r1
     a0a:	0f 2e       	mov	r0, r31
     a0c:	fc e0       	ldi	r31, 0x0C	; 12
     a0e:	ef 2e       	mov	r14, r31
     a10:	f2 e1       	ldi	r31, 0x12	; 18
     a12:	ff 2e       	mov	r15, r31
     a14:	f0 2d       	mov	r31, r0
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	a9 01       	movw	r20, r18
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	cb 01       	movw	r24, r22
     a22:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
		
		// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
		int delay = 1000 / self->frec;
		AFTER(MSEC(delay), self, setPulse, 0);
     a26:	6c 81       	ldd	r22, Y+4	; 0x04
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	88 ee       	ldi	r24, 0xE8	; 232
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	0e 94 1b 12 	call	0x2436	; 0x2436 <__divmodhi4>
     a32:	2d e7       	ldi	r18, 0x7D	; 125
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	db 01       	movw	r26, r22
     a38:	0e 94 4e 12 	call	0x249c	; 0x249c <__usmulhisi3>
     a3c:	8b 01       	movw	r16, r22
     a3e:	9c 01       	movw	r18, r24
     a40:	99 23       	and	r25, r25
     a42:	24 f4       	brge	.+8      	; 0xa4c <setPulse+0xa8>
     a44:	0d 5f       	subi	r16, 0xFD	; 253
     a46:	1f 4f       	sbci	r17, 0xFF	; 255
     a48:	2f 4f       	sbci	r18, 0xFF	; 255
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	c9 01       	movw	r24, r18
     a4e:	b8 01       	movw	r22, r16
     a50:	95 95       	asr	r25
     a52:	87 95       	ror	r24
     a54:	77 95       	ror	r23
     a56:	67 95       	ror	r22
     a58:	95 95       	asr	r25
     a5a:	87 95       	ror	r24
     a5c:	77 95       	ror	r23
     a5e:	67 95       	ror	r22
     a60:	c1 2c       	mov	r12, r1
     a62:	d1 2c       	mov	r13, r1
     a64:	0f 2e       	mov	r0, r31
     a66:	f2 ed       	ldi	r31, 0xD2	; 210
     a68:	ef 2e       	mov	r14, r31
     a6a:	f4 e0       	ldi	r31, 0x04	; 4
     a6c:	ff 2e       	mov	r15, r31
     a6e:	f0 2d       	mov	r31, r0
     a70:	8e 01       	movw	r16, r28
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	a9 01       	movw	r20, r18
     a78:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
	}
	return 0;
}
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	08 95       	ret

00000a92 <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     a92:	fc 01       	movw	r30, r24
     a94:	84 81       	ldd	r24, Z+4	; 0x04
}
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	08 95       	ret

00000a9a <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     a9a:	fc 01       	movw	r30, r24
    unsigned char old = self->frec;
    if (self->frec < 99) {
     a9c:	94 81       	ldd	r25, Z+4	; 0x04
     a9e:	93 36       	cpi	r25, 0x63	; 99
     aa0:	10 f4       	brcc	.+4      	; 0xaa6 <FrecInc+0xc>
	    self->frec++;
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	94 83       	std	Z+4, r25	; 0x04
    }
    return 0;
}
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	08 95       	ret

00000aac <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     aac:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     aae:	94 81       	ldd	r25, Z+4	; 0x04
     ab0:	99 23       	and	r25, r25
     ab2:	11 f0       	breq	.+4      	; 0xab8 <FrecDec+0xc>
		self->frec--;
     ab4:	91 50       	subi	r25, 0x01	; 1
     ab6:	94 83       	std	Z+4, r25	; 0x04
	}
	return 0;
}
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	08 95       	ret

00000abe <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     acc:	84 81       	ldd	r24, Z+4	; 0x04
     ace:	81 11       	cpse	r24, r1
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <FrecReset+0x1a>
	    self->frec = self->frec_old;
     ad2:	85 81       	ldd	r24, Z+5	; 0x05
     ad4:	84 83       	std	Z+4, r24	; 0x04
     ad6:	14 c0       	rjmp	.+40     	; 0xb00 <FrecReset+0x42>
	    } 
	else {
	    self->frec_old = self->frec;
     ad8:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     ada:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     adc:	07 81       	ldd	r16, Z+7	; 0x07
     ade:	10 85       	ldd	r17, Z+8	; 0x08
     ae0:	c1 2c       	mov	r12, r1
     ae2:	d1 2c       	mov	r13, r1
     ae4:	0f 2e       	mov	r0, r31
     ae6:	f9 ee       	ldi	r31, 0xE9	; 233
     ae8:	ef 2e       	mov	r14, r31
     aea:	f1 e1       	ldi	r31, 0x11	; 17
     aec:	ff 2e       	mov	r15, r31
     aee:	f0 2d       	mov	r31, r0
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	a9 01       	movw	r20, r18
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	cb 01       	movw	r24, r22
     afc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
    }
    return 0;
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     b12:	e1 e6       	ldi	r30, 0x61	; 97
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	80 83       	st	Z, r24
	CLKPR = 0x00;
     b1a:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     b1c:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     b1e:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     b20:	e1 e8       	ldi	r30, 0x81	; 129
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	8d 60       	ori	r24, 0x0D	; 13
     b28:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     b2a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b2e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     b32:	ef e6       	ldi	r30, 0x6F	; 111
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	82 60       	ori	r24, 0x02	; 2
     b3a:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     b3c:	82 ec       	ldi	r24, 0xC2	; 194
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b44:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b48:	08 95       	ret

00000b4a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <initialize+0x6>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <initialize+0x8>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	89 e4       	ldi	r24, 0x49	; 73
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	29 e2       	ldi	r18, 0x29	; 41
     b5c:	33 e0       	ldi	r19, 0x03	; 3
     b5e:	fc 01       	movw	r30, r24
     b60:	70 97       	sbiw	r30, 0x10	; 16
     b62:	91 83       	std	Z+1, r25	; 0x01
     b64:	80 83       	st	Z, r24
     b66:	40 96       	adiw	r24, 0x10	; 16
     b68:	82 17       	cp	r24, r18
     b6a:	93 07       	cpc	r25, r19
     b6c:	c1 f7       	brne	.-16     	; 0xb5e <initialize+0x14>
     b6e:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <messages+0xe1>
     b72:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <messages+0xe0>
     b76:	e4 e8       	ldi	r30, 0x84	; 132
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	81 ea       	ldi	r24, 0xA1	; 161
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	80 83       	st	Z, r24
     b82:	8e eb       	ldi	r24, 0xBE	; 190
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	96 8f       	std	Z+30, r25	; 0x1e
     b88:	85 8f       	std	Z+29, r24	; 0x1d
     b8a:	ab ed       	ldi	r26, 0xDB	; 219
     b8c:	b1 e0       	ldi	r27, 0x01	; 1
     b8e:	b3 af       	std	Z+59, r27	; 0x3b
     b90:	a2 af       	std	Z+58, r26	; 0x3a
     b92:	1d 92       	st	X+, r1
     b94:	1c 92       	st	X, r1
     b96:	fa 83       	std	Y+2, r31	; 0x02
     b98:	e9 83       	std	Y+1, r30	; 0x01
     b9a:	e5 e8       	ldi	r30, 0x85	; 133
     b9c:	f3 e0       	ldi	r31, 0x03	; 3
     b9e:	fc 83       	std	Y+4, r31	; 0x04
     ba0:	eb 83       	std	Y+3, r30	; 0x03
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	06 96       	adiw	r24, 0x06	; 6
     ba8:	0e 94 9a 12 	call	0x2534	; 0x2534 <setjmp>
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	e9 81       	ldd	r30, Y+1	; 0x01
     bb2:	fa 81       	ldd	r31, Y+2	; 0x02
     bb4:	97 8b       	std	Z+23, r25	; 0x17
     bb6:	86 8b       	std	Z+22, r24	; 0x16
     bb8:	91 8f       	std	Z+25, r25	; 0x19
     bba:	80 8f       	std	Z+24, r24	; 0x18
     bbc:	85 e4       	ldi	r24, 0x45	; 69
     bbe:	91 e1       	ldi	r25, 0x11	; 17
     bc0:	94 8f       	std	Z+28, r25	; 0x1c
     bc2:	83 8f       	std	Z+27, r24	; 0x1b
     bc4:	15 82       	std	Z+5, r1	; 0x05
     bc6:	14 82       	std	Z+4, r1	; 0x04
     bc8:	7d 96       	adiw	r30, 0x1d	; 29
     bca:	fa 83       	std	Y+2, r31	; 0x02
     bcc:	e9 83       	std	Y+1, r30	; 0x01
     bce:	eb 81       	ldd	r30, Y+3	; 0x03
     bd0:	fc 81       	ldd	r31, Y+4	; 0x04
     bd2:	e0 5a       	subi	r30, 0xA0	; 160
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	fc 83       	std	Y+4, r31	; 0x04
     bd8:	eb 83       	std	Y+3, r30	; 0x03
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	88 5f       	subi	r24, 0xF8	; 248
     be0:	91 40       	sbci	r25, 0x01	; 1
     be2:	f9 f6       	brne	.-66     	; 0xba2 <initialize+0x58>
     be4:	ec e1       	ldi	r30, 0x1C	; 28
     be6:	f2 e0       	ldi	r31, 0x02	; 2
     be8:	11 82       	std	Z+1, r1	; 0x01
     bea:	10 82       	st	Z, r1
     bec:	15 82       	std	Z+5, r1	; 0x05
     bee:	14 82       	std	Z+4, r1	; 0x04
     bf0:	13 82       	std	Z+3, r1	; 0x03
     bf2:	12 82       	std	Z+2, r1	; 0x02
     bf4:	e1 e6       	ldi	r30, 0x61	; 97
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 e8       	ldi	r24, 0x80	; 128
     bfa:	80 83       	st	Z, r24
     bfc:	10 82       	st	Z, r1
     bfe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c02:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <dispatch>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <dispatch+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
     c32:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
     c36:	06 96       	adiw	r24, 0x06	; 6
     c38:	0e 94 9a 12 	call	0x2534	; 0x2534 <setjmp>
     c3c:	89 2b       	or	r24, r25
     c3e:	59 f4       	brne	.+22     	; 0xc56 <dispatch+0x36>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <current+0x1>
     c48:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current>
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	06 96       	adiw	r24, 0x06	; 6
     c52:	0e 94 ba 12 	call	0x2574	; 0x2574 <longjmp>
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	08 95       	ret

00000c60 <schedule>:
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
     c6c:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
     c70:	30 97       	sbiw	r30, 0x00	; 0
     c72:	61 f1       	breq	.+88     	; 0xccc <schedule+0x6c>
     c74:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
     c78:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	31 f1       	breq	.+76     	; 0xccc <schedule+0x6c>
     c80:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <activeStack>
     c84:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <activeStack+0x1>
     c88:	aa 81       	ldd	r26, Y+2	; 0x02
     c8a:	bb 81       	ldd	r27, Y+3	; 0x03
     c8c:	10 97       	sbiw	r26, 0x00	; 0
     c8e:	79 f0       	breq	.+30     	; 0xcae <schedule+0x4e>
     c90:	46 81       	ldd	r20, Z+6	; 0x06
     c92:	57 81       	ldd	r21, Z+7	; 0x07
     c94:	60 85       	ldd	r22, Z+8	; 0x08
     c96:	71 85       	ldd	r23, Z+9	; 0x09
     c98:	16 96       	adiw	r26, 0x06	; 6
     c9a:	0d 91       	ld	r16, X+
     c9c:	1d 91       	ld	r17, X+
     c9e:	2d 91       	ld	r18, X+
     ca0:	3c 91       	ld	r19, X
     ca2:	19 97       	sbiw	r26, 0x09	; 9
     ca4:	40 1b       	sub	r20, r16
     ca6:	51 0b       	sbc	r21, r17
     ca8:	62 0b       	sbc	r22, r18
     caa:	73 0b       	sbc	r23, r19
     cac:	7a f4       	brpl	.+30     	; 0xccc <schedule+0x6c>
     cae:	fc 01       	movw	r30, r24
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
     cb8:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
     cbc:	d1 83       	std	Z+1, r29	; 0x01
     cbe:	c0 83       	st	Z, r28
     cc0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
     cc4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
     cc8:	0e 94 10 06 	call	0xc20	; 0xc20 <dispatch>
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <__vector_1>:
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     cfc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     d00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d08:	c9 01       	movw	r24, r18
     d0a:	03 2e       	mov	r0, r19
     d0c:	00 0c       	add	r0, r0
     d0e:	aa 0b       	sbc	r26, r26
     d10:	bb 0b       	sbc	r27, r27
     d12:	dc 01       	movw	r26, r24
     d14:	99 27       	eor	r25, r25
     d16:	88 27       	eor	r24, r24
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	84 2b       	or	r24, r20
     d1e:	95 2b       	or	r25, r21
     d20:	a6 2b       	or	r26, r22
     d22:	b7 2b       	or	r27, r23
     d24:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     d28:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     d2c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     d30:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     d34:	b0 9b       	sbis	0x16, 0	; 22
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <__vector_1+0x98>
     d38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d40:	c9 01       	movw	r24, r18
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	09 2e       	mov	r0, r25
     d46:	00 0c       	add	r0, r0
     d48:	aa 0b       	sbc	r26, r26
     d4a:	bb 0b       	sbc	r27, r27
     d4c:	dc 01       	movw	r26, r24
     d4e:	99 27       	eor	r25, r25
     d50:	88 27       	eor	r24, r24
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	84 2b       	or	r24, r20
     d58:	95 2b       	or	r25, r21
     d5a:	a6 2b       	or	r26, r22
     d5c:	b7 2b       	or	r27, r23
     d5e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     d62:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     d66:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     d6a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     d6e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable>
     d72:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1>
     d76:	30 97       	sbiw	r30, 0x00	; 0
     d78:	39 f0       	breq	.+14     	; 0xd88 <__vector_1+0xb2>
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable>
     d82:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1>
     d86:	09 95       	icall
     d88:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <__vector_2>:
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     dd4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     dd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ddc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     de0:	c9 01       	movw	r24, r18
     de2:	03 2e       	mov	r0, r19
     de4:	00 0c       	add	r0, r0
     de6:	aa 0b       	sbc	r26, r26
     de8:	bb 0b       	sbc	r27, r27
     dea:	dc 01       	movw	r26, r24
     dec:	99 27       	eor	r25, r25
     dee:	88 27       	eor	r24, r24
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	84 2b       	or	r24, r20
     df6:	95 2b       	or	r25, r21
     df8:	a6 2b       	or	r26, r22
     dfa:	b7 2b       	or	r27, r23
     dfc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e00:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e04:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e08:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e0c:	b0 9b       	sbis	0x16, 0	; 22
     e0e:	1b c0       	rjmp	.+54     	; 0xe46 <__vector_2+0x98>
     e10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e18:	c9 01       	movw	r24, r18
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	09 2e       	mov	r0, r25
     e1e:	00 0c       	add	r0, r0
     e20:	aa 0b       	sbc	r26, r26
     e22:	bb 0b       	sbc	r27, r27
     e24:	dc 01       	movw	r26, r24
     e26:	99 27       	eor	r25, r25
     e28:	88 27       	eor	r24, r24
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	84 2b       	or	r24, r20
     e30:	95 2b       	or	r25, r21
     e32:	a6 2b       	or	r26, r22
     e34:	b7 2b       	or	r27, r23
     e36:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e3a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e3e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e42:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e46:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x2>
     e4a:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x3>
     e4e:	30 97       	sbiw	r30, 0x00	; 0
     e50:	39 f0       	breq	.+14     	; 0xe60 <__vector_2+0xb2>
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x2>
     e5a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x3>
     e5e:	09 95       	icall
     e60:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <__vector_3>:
     e86:	1f 92       	push	r1
     e88:	0f 92       	push	r0
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	0f 92       	push	r0
     e8e:	11 24       	eor	r1, r1
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     eac:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     eb0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb8:	c9 01       	movw	r24, r18
     eba:	03 2e       	mov	r0, r19
     ebc:	00 0c       	add	r0, r0
     ebe:	aa 0b       	sbc	r26, r26
     ec0:	bb 0b       	sbc	r27, r27
     ec2:	dc 01       	movw	r26, r24
     ec4:	99 27       	eor	r25, r25
     ec6:	88 27       	eor	r24, r24
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	84 2b       	or	r24, r20
     ece:	95 2b       	or	r25, r21
     ed0:	a6 2b       	or	r26, r22
     ed2:	b7 2b       	or	r27, r23
     ed4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     ed8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     edc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     ee0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     ee4:	b0 9b       	sbis	0x16, 0	; 22
     ee6:	1b c0       	rjmp	.+54     	; 0xf1e <__vector_3+0x98>
     ee8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ef0:	c9 01       	movw	r24, r18
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	09 2e       	mov	r0, r25
     ef6:	00 0c       	add	r0, r0
     ef8:	aa 0b       	sbc	r26, r26
     efa:	bb 0b       	sbc	r27, r27
     efc:	dc 01       	movw	r26, r24
     efe:	99 27       	eor	r25, r25
     f00:	88 27       	eor	r24, r24
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	84 2b       	or	r24, r20
     f08:	95 2b       	or	r25, r21
     f0a:	a6 2b       	or	r26, r22
     f0c:	b7 2b       	or	r27, r23
     f0e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f12:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f16:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f1a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f1e:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x4>
     f22:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x5>
     f26:	30 97       	sbiw	r30, 0x00	; 0
     f28:	39 f0       	breq	.+14     	; 0xf38 <__vector_3+0xb2>
     f2a:	62 e0       	ldi	r22, 0x02	; 2
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x4>
     f32:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x5>
     f36:	09 95       	icall
     f38:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	bf 91       	pop	r27
     f42:	af 91       	pop	r26
     f44:	9f 91       	pop	r25
     f46:	8f 91       	pop	r24
     f48:	7f 91       	pop	r23
     f4a:	6f 91       	pop	r22
     f4c:	5f 91       	pop	r21
     f4e:	4f 91       	pop	r20
     f50:	3f 91       	pop	r19
     f52:	2f 91       	pop	r18
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <__vector_4>:
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	2f 93       	push	r18
     f6a:	3f 93       	push	r19
     f6c:	4f 93       	push	r20
     f6e:	5f 93       	push	r21
     f70:	6f 93       	push	r22
     f72:	7f 93       	push	r23
     f74:	8f 93       	push	r24
     f76:	9f 93       	push	r25
     f78:	af 93       	push	r26
     f7a:	bf 93       	push	r27
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
     f80:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     f84:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     f88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f90:	c9 01       	movw	r24, r18
     f92:	03 2e       	mov	r0, r19
     f94:	00 0c       	add	r0, r0
     f96:	aa 0b       	sbc	r26, r26
     f98:	bb 0b       	sbc	r27, r27
     f9a:	dc 01       	movw	r26, r24
     f9c:	99 27       	eor	r25, r25
     f9e:	88 27       	eor	r24, r24
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	84 2b       	or	r24, r20
     fa6:	95 2b       	or	r25, r21
     fa8:	a6 2b       	or	r26, r22
     faa:	b7 2b       	or	r27, r23
     fac:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     fb0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     fb4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     fb8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     fbc:	b0 9b       	sbis	0x16, 0	; 22
     fbe:	1b c0       	rjmp	.+54     	; 0xff6 <__vector_4+0x98>
     fc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc8:	c9 01       	movw	r24, r18
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	09 2e       	mov	r0, r25
     fce:	00 0c       	add	r0, r0
     fd0:	aa 0b       	sbc	r26, r26
     fd2:	bb 0b       	sbc	r27, r27
     fd4:	dc 01       	movw	r26, r24
     fd6:	99 27       	eor	r25, r25
     fd8:	88 27       	eor	r24, r24
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	84 2b       	or	r24, r20
     fe0:	95 2b       	or	r25, r21
     fe2:	a6 2b       	or	r26, r22
     fe4:	b7 2b       	or	r27, r23
     fe6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     fea:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     fee:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     ff2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     ff6:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x6>
     ffa:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x7>
     ffe:	30 97       	sbiw	r30, 0x00	; 0
    1000:	39 f0       	breq	.+14     	; 0x1010 <__vector_4+0xb2>
    1002:	63 e0       	ldi	r22, 0x03	; 3
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x6>
    100a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x7>
    100e:	09 95       	icall
    1010:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__vector_5>:
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    105c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1060:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1064:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1068:	c9 01       	movw	r24, r18
    106a:	03 2e       	mov	r0, r19
    106c:	00 0c       	add	r0, r0
    106e:	aa 0b       	sbc	r26, r26
    1070:	bb 0b       	sbc	r27, r27
    1072:	dc 01       	movw	r26, r24
    1074:	99 27       	eor	r25, r25
    1076:	88 27       	eor	r24, r24
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	84 2b       	or	r24, r20
    107e:	95 2b       	or	r25, r21
    1080:	a6 2b       	or	r26, r22
    1082:	b7 2b       	or	r27, r23
    1084:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1088:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    108c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1090:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1094:	b0 9b       	sbis	0x16, 0	; 22
    1096:	1b c0       	rjmp	.+54     	; 0x10ce <__vector_5+0x98>
    1098:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    109c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a0:	c9 01       	movw	r24, r18
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	09 2e       	mov	r0, r25
    10a6:	00 0c       	add	r0, r0
    10a8:	aa 0b       	sbc	r26, r26
    10aa:	bb 0b       	sbc	r27, r27
    10ac:	dc 01       	movw	r26, r24
    10ae:	99 27       	eor	r25, r25
    10b0:	88 27       	eor	r24, r24
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	84 2b       	or	r24, r20
    10b8:	95 2b       	or	r25, r21
    10ba:	a6 2b       	or	r26, r22
    10bc:	b7 2b       	or	r27, r23
    10be:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    10c2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    10c6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    10ca:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    10ce:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x8>
    10d2:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x9>
    10d6:	30 97       	sbiw	r30, 0x00	; 0
    10d8:	39 f0       	breq	.+14     	; 0x10e8 <__vector_5+0xb2>
    10da:	64 e0       	ldi	r22, 0x04	; 4
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x8>
    10e2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x9>
    10e6:	09 95       	icall
    10e8:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_10>:
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    1130:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1134:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1138:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    113c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1140:	c9 01       	movw	r24, r18
    1142:	03 2e       	mov	r0, r19
    1144:	00 0c       	add	r0, r0
    1146:	aa 0b       	sbc	r26, r26
    1148:	bb 0b       	sbc	r27, r27
    114a:	dc 01       	movw	r26, r24
    114c:	99 27       	eor	r25, r25
    114e:	88 27       	eor	r24, r24
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	84 2b       	or	r24, r20
    1156:	95 2b       	or	r25, r21
    1158:	a6 2b       	or	r26, r22
    115a:	b7 2b       	or	r27, r23
    115c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1160:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1164:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1168:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    116c:	b0 9b       	sbis	0x16, 0	; 22
    116e:	1b c0       	rjmp	.+54     	; 0x11a6 <__vector_10+0x98>
    1170:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1174:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1178:	c9 01       	movw	r24, r18
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	09 2e       	mov	r0, r25
    117e:	00 0c       	add	r0, r0
    1180:	aa 0b       	sbc	r26, r26
    1182:	bb 0b       	sbc	r27, r27
    1184:	dc 01       	movw	r26, r24
    1186:	99 27       	eor	r25, r25
    1188:	88 27       	eor	r24, r24
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	84 2b       	or	r24, r20
    1190:	95 2b       	or	r25, r21
    1192:	a6 2b       	or	r26, r22
    1194:	b7 2b       	or	r27, r23
    1196:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    119a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    119e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    11a2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    11a6:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xa>
    11aa:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xb>
    11ae:	30 97       	sbiw	r30, 0x00	; 0
    11b0:	39 f0       	breq	.+14     	; 0x11c0 <__vector_10+0xb2>
    11b2:	65 e0       	ldi	r22, 0x05	; 5
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xa>
    11ba:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xb>
    11be:	09 95       	icall
    11c0:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <__vector_11>:
    11e6:	1f 92       	push	r1
    11e8:	0f 92       	push	r0
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	0f 92       	push	r0
    11ee:	11 24       	eor	r1, r1
    11f0:	2f 93       	push	r18
    11f2:	3f 93       	push	r19
    11f4:	4f 93       	push	r20
    11f6:	5f 93       	push	r21
    11f8:	6f 93       	push	r22
    11fa:	7f 93       	push	r23
    11fc:	8f 93       	push	r24
    11fe:	9f 93       	push	r25
    1200:	af 93       	push	r26
    1202:	bf 93       	push	r27
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    1208:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    120c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1210:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1214:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1218:	c9 01       	movw	r24, r18
    121a:	03 2e       	mov	r0, r19
    121c:	00 0c       	add	r0, r0
    121e:	aa 0b       	sbc	r26, r26
    1220:	bb 0b       	sbc	r27, r27
    1222:	dc 01       	movw	r26, r24
    1224:	99 27       	eor	r25, r25
    1226:	88 27       	eor	r24, r24
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	84 2b       	or	r24, r20
    122e:	95 2b       	or	r25, r21
    1230:	a6 2b       	or	r26, r22
    1232:	b7 2b       	or	r27, r23
    1234:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1238:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    123c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1240:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1244:	b0 9b       	sbis	0x16, 0	; 22
    1246:	1b c0       	rjmp	.+54     	; 0x127e <__vector_11+0x98>
    1248:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    124c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1250:	c9 01       	movw	r24, r18
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	09 2e       	mov	r0, r25
    1256:	00 0c       	add	r0, r0
    1258:	aa 0b       	sbc	r26, r26
    125a:	bb 0b       	sbc	r27, r27
    125c:	dc 01       	movw	r26, r24
    125e:	99 27       	eor	r25, r25
    1260:	88 27       	eor	r24, r24
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	84 2b       	or	r24, r20
    1268:	95 2b       	or	r25, r21
    126a:	a6 2b       	or	r26, r22
    126c:	b7 2b       	or	r27, r23
    126e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1272:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1276:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    127a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    127e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xc>
    1282:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xd>
    1286:	30 97       	sbiw	r30, 0x00	; 0
    1288:	39 f0       	breq	.+14     	; 0x1298 <__vector_11+0xb2>
    128a:	66 e0       	ldi	r22, 0x06	; 6
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xc>
    1292:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xd>
    1296:	09 95       	icall
    1298:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <__vector_12>:
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    12e4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    12e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f0:	c9 01       	movw	r24, r18
    12f2:	03 2e       	mov	r0, r19
    12f4:	00 0c       	add	r0, r0
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	bb 0b       	sbc	r27, r27
    12fa:	dc 01       	movw	r26, r24
    12fc:	99 27       	eor	r25, r25
    12fe:	88 27       	eor	r24, r24
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	84 2b       	or	r24, r20
    1306:	95 2b       	or	r25, r21
    1308:	a6 2b       	or	r26, r22
    130a:	b7 2b       	or	r27, r23
    130c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1310:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1314:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1318:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    131c:	b0 9b       	sbis	0x16, 0	; 22
    131e:	1b c0       	rjmp	.+54     	; 0x1356 <__vector_12+0x98>
    1320:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1324:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1328:	c9 01       	movw	r24, r18
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	09 2e       	mov	r0, r25
    132e:	00 0c       	add	r0, r0
    1330:	aa 0b       	sbc	r26, r26
    1332:	bb 0b       	sbc	r27, r27
    1334:	dc 01       	movw	r26, r24
    1336:	99 27       	eor	r25, r25
    1338:	88 27       	eor	r24, r24
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	84 2b       	or	r24, r20
    1340:	95 2b       	or	r25, r21
    1342:	a6 2b       	or	r26, r22
    1344:	b7 2b       	or	r27, r23
    1346:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    134a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    134e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1352:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1356:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0xe>
    135a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0xf>
    135e:	30 97       	sbiw	r30, 0x00	; 0
    1360:	39 f0       	breq	.+14     	; 0x1370 <__vector_12+0xb2>
    1362:	67 e0       	ldi	r22, 0x07	; 7
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0xe>
    136a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0xf>
    136e:	09 95       	icall
    1370:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_13>:
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    13bc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    13c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13c8:	c9 01       	movw	r24, r18
    13ca:	03 2e       	mov	r0, r19
    13cc:	00 0c       	add	r0, r0
    13ce:	aa 0b       	sbc	r26, r26
    13d0:	bb 0b       	sbc	r27, r27
    13d2:	dc 01       	movw	r26, r24
    13d4:	99 27       	eor	r25, r25
    13d6:	88 27       	eor	r24, r24
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	84 2b       	or	r24, r20
    13de:	95 2b       	or	r25, r21
    13e0:	a6 2b       	or	r26, r22
    13e2:	b7 2b       	or	r27, r23
    13e4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    13e8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    13ec:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    13f0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    13f4:	b0 9b       	sbis	0x16, 0	; 22
    13f6:	1b c0       	rjmp	.+54     	; 0x142e <__vector_13+0x98>
    13f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1400:	c9 01       	movw	r24, r18
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	09 2e       	mov	r0, r25
    1406:	00 0c       	add	r0, r0
    1408:	aa 0b       	sbc	r26, r26
    140a:	bb 0b       	sbc	r27, r27
    140c:	dc 01       	movw	r26, r24
    140e:	99 27       	eor	r25, r25
    1410:	88 27       	eor	r24, r24
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	84 2b       	or	r24, r20
    1418:	95 2b       	or	r25, r21
    141a:	a6 2b       	or	r26, r22
    141c:	b7 2b       	or	r27, r23
    141e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1422:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1426:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    142a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    142e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x10>
    1432:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x11>
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	39 f0       	breq	.+14     	; 0x1448 <__vector_13+0xb2>
    143a:	68 e0       	ldi	r22, 0x08	; 8
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x10>
    1442:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x11>
    1446:	09 95       	icall
    1448:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <__vector_14>:
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1494:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1498:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    149c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14a0:	c9 01       	movw	r24, r18
    14a2:	03 2e       	mov	r0, r19
    14a4:	00 0c       	add	r0, r0
    14a6:	aa 0b       	sbc	r26, r26
    14a8:	bb 0b       	sbc	r27, r27
    14aa:	dc 01       	movw	r26, r24
    14ac:	99 27       	eor	r25, r25
    14ae:	88 27       	eor	r24, r24
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	84 2b       	or	r24, r20
    14b6:	95 2b       	or	r25, r21
    14b8:	a6 2b       	or	r26, r22
    14ba:	b7 2b       	or	r27, r23
    14bc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    14c0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    14c4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    14c8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    14cc:	b0 9b       	sbis	0x16, 0	; 22
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <__vector_14+0x98>
    14d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d8:	c9 01       	movw	r24, r18
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	09 2e       	mov	r0, r25
    14de:	00 0c       	add	r0, r0
    14e0:	aa 0b       	sbc	r26, r26
    14e2:	bb 0b       	sbc	r27, r27
    14e4:	dc 01       	movw	r26, r24
    14e6:	99 27       	eor	r25, r25
    14e8:	88 27       	eor	r24, r24
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	84 2b       	or	r24, r20
    14f0:	95 2b       	or	r25, r21
    14f2:	a6 2b       	or	r26, r22
    14f4:	b7 2b       	or	r27, r23
    14f6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    14fa:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    14fe:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1502:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1506:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x12>
    150a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x13>
    150e:	30 97       	sbiw	r30, 0x00	; 0
    1510:	39 f0       	breq	.+14     	; 0x1520 <__vector_14+0xb2>
    1512:	69 e0       	ldi	r22, 0x09	; 9
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x12>
    151a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x13>
    151e:	09 95       	icall
    1520:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1524:	ff 91       	pop	r31
    1526:	ef 91       	pop	r30
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	7f 91       	pop	r23
    1532:	6f 91       	pop	r22
    1534:	5f 91       	pop	r21
    1536:	4f 91       	pop	r20
    1538:	3f 91       	pop	r19
    153a:	2f 91       	pop	r18
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_15>:
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	2f 93       	push	r18
    1552:	3f 93       	push	r19
    1554:	4f 93       	push	r20
    1556:	5f 93       	push	r21
    1558:	6f 93       	push	r22
    155a:	7f 93       	push	r23
    155c:	8f 93       	push	r24
    155e:	9f 93       	push	r25
    1560:	af 93       	push	r26
    1562:	bf 93       	push	r27
    1564:	ef 93       	push	r30
    1566:	ff 93       	push	r31
    1568:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    156c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1570:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1574:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1578:	c9 01       	movw	r24, r18
    157a:	03 2e       	mov	r0, r19
    157c:	00 0c       	add	r0, r0
    157e:	aa 0b       	sbc	r26, r26
    1580:	bb 0b       	sbc	r27, r27
    1582:	dc 01       	movw	r26, r24
    1584:	99 27       	eor	r25, r25
    1586:	88 27       	eor	r24, r24
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	84 2b       	or	r24, r20
    158e:	95 2b       	or	r25, r21
    1590:	a6 2b       	or	r26, r22
    1592:	b7 2b       	or	r27, r23
    1594:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1598:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    159c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    15a0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    15a4:	b0 9b       	sbis	0x16, 0	; 22
    15a6:	1b c0       	rjmp	.+54     	; 0x15de <__vector_15+0x98>
    15a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15b0:	c9 01       	movw	r24, r18
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	09 2e       	mov	r0, r25
    15b6:	00 0c       	add	r0, r0
    15b8:	aa 0b       	sbc	r26, r26
    15ba:	bb 0b       	sbc	r27, r27
    15bc:	dc 01       	movw	r26, r24
    15be:	99 27       	eor	r25, r25
    15c0:	88 27       	eor	r24, r24
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	84 2b       	or	r24, r20
    15c8:	95 2b       	or	r25, r21
    15ca:	a6 2b       	or	r26, r22
    15cc:	b7 2b       	or	r27, r23
    15ce:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    15d2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    15d6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    15da:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    15de:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x14>
    15e2:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x15>
    15e6:	30 97       	sbiw	r30, 0x00	; 0
    15e8:	39 f0       	breq	.+14     	; 0x15f8 <__vector_15+0xb2>
    15ea:	6a e0       	ldi	r22, 0x0A	; 10
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x14>
    15f2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x15>
    15f6:	09 95       	icall
    15f8:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_16>:
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1644:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1648:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    164c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1650:	c9 01       	movw	r24, r18
    1652:	03 2e       	mov	r0, r19
    1654:	00 0c       	add	r0, r0
    1656:	aa 0b       	sbc	r26, r26
    1658:	bb 0b       	sbc	r27, r27
    165a:	dc 01       	movw	r26, r24
    165c:	99 27       	eor	r25, r25
    165e:	88 27       	eor	r24, r24
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	84 2b       	or	r24, r20
    1666:	95 2b       	or	r25, r21
    1668:	a6 2b       	or	r26, r22
    166a:	b7 2b       	or	r27, r23
    166c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1670:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1674:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1678:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    167c:	b0 9b       	sbis	0x16, 0	; 22
    167e:	1b c0       	rjmp	.+54     	; 0x16b6 <__vector_16+0x98>
    1680:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1684:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1688:	c9 01       	movw	r24, r18
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	09 2e       	mov	r0, r25
    168e:	00 0c       	add	r0, r0
    1690:	aa 0b       	sbc	r26, r26
    1692:	bb 0b       	sbc	r27, r27
    1694:	dc 01       	movw	r26, r24
    1696:	99 27       	eor	r25, r25
    1698:	88 27       	eor	r24, r24
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	84 2b       	or	r24, r20
    16a0:	95 2b       	or	r25, r21
    16a2:	a6 2b       	or	r26, r22
    16a4:	b7 2b       	or	r27, r23
    16a6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    16aa:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    16ae:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    16b2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    16b6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x16>
    16ba:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x17>
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <__vector_16+0xb2>
    16c2:	6b e0       	ldi	r22, 0x0B	; 11
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x16>
    16ca:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x17>
    16ce:	09 95       	icall
    16d0:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    16d4:	ff 91       	pop	r31
    16d6:	ef 91       	pop	r30
    16d8:	bf 91       	pop	r27
    16da:	af 91       	pop	r26
    16dc:	9f 91       	pop	r25
    16de:	8f 91       	pop	r24
    16e0:	7f 91       	pop	r23
    16e2:	6f 91       	pop	r22
    16e4:	5f 91       	pop	r21
    16e6:	4f 91       	pop	r20
    16e8:	3f 91       	pop	r19
    16ea:	2f 91       	pop	r18
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <__vector_17>:
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
    1718:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    171c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1720:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1724:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1728:	c9 01       	movw	r24, r18
    172a:	03 2e       	mov	r0, r19
    172c:	00 0c       	add	r0, r0
    172e:	aa 0b       	sbc	r26, r26
    1730:	bb 0b       	sbc	r27, r27
    1732:	dc 01       	movw	r26, r24
    1734:	99 27       	eor	r25, r25
    1736:	88 27       	eor	r24, r24
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	84 2b       	or	r24, r20
    173e:	95 2b       	or	r25, r21
    1740:	a6 2b       	or	r26, r22
    1742:	b7 2b       	or	r27, r23
    1744:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1748:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    174c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1750:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1754:	b0 9b       	sbis	0x16, 0	; 22
    1756:	1b c0       	rjmp	.+54     	; 0x178e <__vector_17+0x98>
    1758:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1760:	c9 01       	movw	r24, r18
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	09 2e       	mov	r0, r25
    1766:	00 0c       	add	r0, r0
    1768:	aa 0b       	sbc	r26, r26
    176a:	bb 0b       	sbc	r27, r27
    176c:	dc 01       	movw	r26, r24
    176e:	99 27       	eor	r25, r25
    1770:	88 27       	eor	r24, r24
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	84 2b       	or	r24, r20
    1778:	95 2b       	or	r25, r21
    177a:	a6 2b       	or	r26, r22
    177c:	b7 2b       	or	r27, r23
    177e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1782:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1786:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    178a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    178e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x18>
    1792:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x19>
    1796:	30 97       	sbiw	r30, 0x00	; 0
    1798:	39 f0       	breq	.+14     	; 0x17a8 <__vector_17+0xb2>
    179a:	6c e0       	ldi	r22, 0x0C	; 12
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x18>
    17a2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x19>
    17a6:	09 95       	icall
    17a8:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    17ac:	ff 91       	pop	r31
    17ae:	ef 91       	pop	r30
    17b0:	bf 91       	pop	r27
    17b2:	af 91       	pop	r26
    17b4:	9f 91       	pop	r25
    17b6:	8f 91       	pop	r24
    17b8:	7f 91       	pop	r23
    17ba:	6f 91       	pop	r22
    17bc:	5f 91       	pop	r21
    17be:	4f 91       	pop	r20
    17c0:	3f 91       	pop	r19
    17c2:	2f 91       	pop	r18
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <__vector_18>:
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	2f 93       	push	r18
    17da:	3f 93       	push	r19
    17dc:	4f 93       	push	r20
    17de:	5f 93       	push	r21
    17e0:	6f 93       	push	r22
    17e2:	7f 93       	push	r23
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	af 93       	push	r26
    17ea:	bf 93       	push	r27
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
    17f0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    17f4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    17f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1800:	c9 01       	movw	r24, r18
    1802:	03 2e       	mov	r0, r19
    1804:	00 0c       	add	r0, r0
    1806:	aa 0b       	sbc	r26, r26
    1808:	bb 0b       	sbc	r27, r27
    180a:	dc 01       	movw	r26, r24
    180c:	99 27       	eor	r25, r25
    180e:	88 27       	eor	r24, r24
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	84 2b       	or	r24, r20
    1816:	95 2b       	or	r25, r21
    1818:	a6 2b       	or	r26, r22
    181a:	b7 2b       	or	r27, r23
    181c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1820:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1824:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1828:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    182c:	b0 9b       	sbis	0x16, 0	; 22
    182e:	1b c0       	rjmp	.+54     	; 0x1866 <__vector_18+0x98>
    1830:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1834:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1838:	c9 01       	movw	r24, r18
    183a:	01 96       	adiw	r24, 0x01	; 1
    183c:	09 2e       	mov	r0, r25
    183e:	00 0c       	add	r0, r0
    1840:	aa 0b       	sbc	r26, r26
    1842:	bb 0b       	sbc	r27, r27
    1844:	dc 01       	movw	r26, r24
    1846:	99 27       	eor	r25, r25
    1848:	88 27       	eor	r24, r24
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	84 2b       	or	r24, r20
    1850:	95 2b       	or	r25, r21
    1852:	a6 2b       	or	r26, r22
    1854:	b7 2b       	or	r27, r23
    1856:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    185a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    185e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1862:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1866:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1a>
    186a:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1b>
    186e:	30 97       	sbiw	r30, 0x00	; 0
    1870:	39 f0       	breq	.+14     	; 0x1880 <__vector_18+0xb2>
    1872:	6d e0       	ldi	r22, 0x0D	; 13
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1a>
    187a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1b>
    187e:	09 95       	icall
    1880:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <__vector_19>:
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	2f 93       	push	r18
    18b2:	3f 93       	push	r19
    18b4:	4f 93       	push	r20
    18b6:	5f 93       	push	r21
    18b8:	6f 93       	push	r22
    18ba:	7f 93       	push	r23
    18bc:	8f 93       	push	r24
    18be:	9f 93       	push	r25
    18c0:	af 93       	push	r26
    18c2:	bf 93       	push	r27
    18c4:	ef 93       	push	r30
    18c6:	ff 93       	push	r31
    18c8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    18cc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    18d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18d8:	c9 01       	movw	r24, r18
    18da:	03 2e       	mov	r0, r19
    18dc:	00 0c       	add	r0, r0
    18de:	aa 0b       	sbc	r26, r26
    18e0:	bb 0b       	sbc	r27, r27
    18e2:	dc 01       	movw	r26, r24
    18e4:	99 27       	eor	r25, r25
    18e6:	88 27       	eor	r24, r24
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	84 2b       	or	r24, r20
    18ee:	95 2b       	or	r25, r21
    18f0:	a6 2b       	or	r26, r22
    18f2:	b7 2b       	or	r27, r23
    18f4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    18f8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    18fc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1900:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1904:	b0 9b       	sbis	0x16, 0	; 22
    1906:	1b c0       	rjmp	.+54     	; 0x193e <__vector_19+0x98>
    1908:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    190c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1910:	c9 01       	movw	r24, r18
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	09 2e       	mov	r0, r25
    1916:	00 0c       	add	r0, r0
    1918:	aa 0b       	sbc	r26, r26
    191a:	bb 0b       	sbc	r27, r27
    191c:	dc 01       	movw	r26, r24
    191e:	99 27       	eor	r25, r25
    1920:	88 27       	eor	r24, r24
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	84 2b       	or	r24, r20
    1928:	95 2b       	or	r25, r21
    192a:	a6 2b       	or	r26, r22
    192c:	b7 2b       	or	r27, r23
    192e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1932:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1936:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    193a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    193e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1c>
    1942:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1d>
    1946:	30 97       	sbiw	r30, 0x00	; 0
    1948:	39 f0       	breq	.+14     	; 0x1958 <__vector_19+0xb2>
    194a:	6e e0       	ldi	r22, 0x0E	; 14
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1c>
    1952:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1d>
    1956:	09 95       	icall
    1958:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <__vector_20>:
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	11 24       	eor	r1, r1
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
    19a0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    19a4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    19a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19b0:	c9 01       	movw	r24, r18
    19b2:	03 2e       	mov	r0, r19
    19b4:	00 0c       	add	r0, r0
    19b6:	aa 0b       	sbc	r26, r26
    19b8:	bb 0b       	sbc	r27, r27
    19ba:	dc 01       	movw	r26, r24
    19bc:	99 27       	eor	r25, r25
    19be:	88 27       	eor	r24, r24
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	84 2b       	or	r24, r20
    19c6:	95 2b       	or	r25, r21
    19c8:	a6 2b       	or	r26, r22
    19ca:	b7 2b       	or	r27, r23
    19cc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    19d0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    19d4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    19d8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    19dc:	b0 9b       	sbis	0x16, 0	; 22
    19de:	1b c0       	rjmp	.+54     	; 0x1a16 <__vector_20+0x98>
    19e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19e8:	c9 01       	movw	r24, r18
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	09 2e       	mov	r0, r25
    19ee:	00 0c       	add	r0, r0
    19f0:	aa 0b       	sbc	r26, r26
    19f2:	bb 0b       	sbc	r27, r27
    19f4:	dc 01       	movw	r26, r24
    19f6:	99 27       	eor	r25, r25
    19f8:	88 27       	eor	r24, r24
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	84 2b       	or	r24, r20
    1a00:	95 2b       	or	r25, r21
    1a02:	a6 2b       	or	r26, r22
    1a04:	b7 2b       	or	r27, r23
    1a06:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a0a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a0e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a12:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a16:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x1e>
    1a1a:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x1f>
    1a1e:	30 97       	sbiw	r30, 0x00	; 0
    1a20:	39 f0       	breq	.+14     	; 0x1a30 <__vector_20+0xb2>
    1a22:	6f e0       	ldi	r22, 0x0F	; 15
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x1e>
    1a2a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x1f>
    1a2e:	09 95       	icall
    1a30:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1a34:	ff 91       	pop	r31
    1a36:	ef 91       	pop	r30
    1a38:	bf 91       	pop	r27
    1a3a:	af 91       	pop	r26
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	7f 91       	pop	r23
    1a42:	6f 91       	pop	r22
    1a44:	5f 91       	pop	r21
    1a46:	4f 91       	pop	r20
    1a48:	3f 91       	pop	r19
    1a4a:	2f 91       	pop	r18
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__vector_21>:
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
    1a78:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1a7c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1a80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a88:	c9 01       	movw	r24, r18
    1a8a:	03 2e       	mov	r0, r19
    1a8c:	00 0c       	add	r0, r0
    1a8e:	aa 0b       	sbc	r26, r26
    1a90:	bb 0b       	sbc	r27, r27
    1a92:	dc 01       	movw	r26, r24
    1a94:	99 27       	eor	r25, r25
    1a96:	88 27       	eor	r24, r24
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	70 e0       	ldi	r23, 0x00	; 0
    1a9c:	84 2b       	or	r24, r20
    1a9e:	95 2b       	or	r25, r21
    1aa0:	a6 2b       	or	r26, r22
    1aa2:	b7 2b       	or	r27, r23
    1aa4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1aa8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1aac:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1ab0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1ab4:	b0 9b       	sbis	0x16, 0	; 22
    1ab6:	1b c0       	rjmp	.+54     	; 0x1aee <__vector_21+0x98>
    1ab8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1abc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ac0:	c9 01       	movw	r24, r18
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	09 2e       	mov	r0, r25
    1ac6:	00 0c       	add	r0, r0
    1ac8:	aa 0b       	sbc	r26, r26
    1aca:	bb 0b       	sbc	r27, r27
    1acc:	dc 01       	movw	r26, r24
    1ace:	99 27       	eor	r25, r25
    1ad0:	88 27       	eor	r24, r24
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	84 2b       	or	r24, r20
    1ad8:	95 2b       	or	r25, r21
    1ada:	a6 2b       	or	r26, r22
    1adc:	b7 2b       	or	r27, r23
    1ade:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1ae2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1ae6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1aea:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1aee:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x20>
    1af2:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x21>
    1af6:	30 97       	sbiw	r30, 0x00	; 0
    1af8:	39 f0       	breq	.+14     	; 0x1b08 <__vector_21+0xb2>
    1afa:	60 e1       	ldi	r22, 0x10	; 16
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x20>
    1b02:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x21>
    1b06:	09 95       	icall
    1b08:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1b0c:	ff 91       	pop	r31
    1b0e:	ef 91       	pop	r30
    1b10:	bf 91       	pop	r27
    1b12:	af 91       	pop	r26
    1b14:	9f 91       	pop	r25
    1b16:	8f 91       	pop	r24
    1b18:	7f 91       	pop	r23
    1b1a:	6f 91       	pop	r22
    1b1c:	5f 91       	pop	r21
    1b1e:	4f 91       	pop	r20
    1b20:	3f 91       	pop	r19
    1b22:	2f 91       	pop	r18
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	0f 90       	pop	r0
    1b2a:	1f 90       	pop	r1
    1b2c:	18 95       	reti

00001b2e <__vector_22>:
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	5f 93       	push	r21
    1b40:	6f 93       	push	r22
    1b42:	7f 93       	push	r23
    1b44:	8f 93       	push	r24
    1b46:	9f 93       	push	r25
    1b48:	af 93       	push	r26
    1b4a:	bf 93       	push	r27
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
    1b50:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1b54:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1b58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b60:	c9 01       	movw	r24, r18
    1b62:	03 2e       	mov	r0, r19
    1b64:	00 0c       	add	r0, r0
    1b66:	aa 0b       	sbc	r26, r26
    1b68:	bb 0b       	sbc	r27, r27
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	99 27       	eor	r25, r25
    1b6e:	88 27       	eor	r24, r24
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	84 2b       	or	r24, r20
    1b76:	95 2b       	or	r25, r21
    1b78:	a6 2b       	or	r26, r22
    1b7a:	b7 2b       	or	r27, r23
    1b7c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1b80:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1b84:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1b88:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1b8c:	b0 9b       	sbis	0x16, 0	; 22
    1b8e:	1b c0       	rjmp	.+54     	; 0x1bc6 <__vector_22+0x98>
    1b90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b98:	c9 01       	movw	r24, r18
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	09 2e       	mov	r0, r25
    1b9e:	00 0c       	add	r0, r0
    1ba0:	aa 0b       	sbc	r26, r26
    1ba2:	bb 0b       	sbc	r27, r27
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	99 27       	eor	r25, r25
    1ba8:	88 27       	eor	r24, r24
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	84 2b       	or	r24, r20
    1bb0:	95 2b       	or	r25, r21
    1bb2:	a6 2b       	or	r26, r22
    1bb4:	b7 2b       	or	r27, r23
    1bb6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1bba:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1bbe:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1bc2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1bc6:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x22>
    1bca:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x23>
    1bce:	30 97       	sbiw	r30, 0x00	; 0
    1bd0:	39 f0       	breq	.+14     	; 0x1be0 <__vector_22+0xb2>
    1bd2:	61 e1       	ldi	r22, 0x11	; 17
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x22>
    1bda:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x23>
    1bde:	09 95       	icall
    1be0:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	0f 90       	pop	r0
    1c02:	1f 90       	pop	r1
    1c04:	18 95       	reti

00001c06 <enqueueByDeadline>:
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	7b 01       	movw	r14, r22
    1c14:	eb 01       	movw	r28, r22
    1c16:	a8 81       	ld	r26, Y
    1c18:	b9 81       	ldd	r27, Y+1	; 0x01
    1c1a:	10 97       	sbiw	r26, 0x00	; 0
    1c1c:	61 f1       	breq	.+88     	; 0x1c76 <enqueueByDeadline+0x70>
    1c1e:	fc 01       	movw	r30, r24
    1c20:	06 81       	ldd	r16, Z+6	; 0x06
    1c22:	17 81       	ldd	r17, Z+7	; 0x07
    1c24:	20 85       	ldd	r18, Z+8	; 0x08
    1c26:	31 85       	ldd	r19, Z+9	; 0x09
    1c28:	16 96       	adiw	r26, 0x06	; 6
    1c2a:	4d 91       	ld	r20, X+
    1c2c:	5d 91       	ld	r21, X+
    1c2e:	6d 91       	ld	r22, X+
    1c30:	7c 91       	ld	r23, X
    1c32:	19 97       	sbiw	r26, 0x09	; 9
    1c34:	04 17       	cp	r16, r20
    1c36:	15 07       	cpc	r17, r21
    1c38:	26 07       	cpc	r18, r22
    1c3a:	37 07       	cpc	r19, r23
    1c3c:	14 f4       	brge	.+4      	; 0x1c42 <enqueueByDeadline+0x3c>
    1c3e:	1b c0       	rjmp	.+54     	; 0x1c76 <enqueueByDeadline+0x70>
    1c40:	df 01       	movw	r26, r30
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	11 97       	sbiw	r26, 0x01	; 1
    1c48:	30 97       	sbiw	r30, 0x00	; 0
    1c4a:	49 f0       	breq	.+18     	; 0x1c5e <enqueueByDeadline+0x58>
    1c4c:	46 81       	ldd	r20, Z+6	; 0x06
    1c4e:	57 81       	ldd	r21, Z+7	; 0x07
    1c50:	60 85       	ldd	r22, Z+8	; 0x08
    1c52:	71 85       	ldd	r23, Z+9	; 0x09
    1c54:	04 17       	cp	r16, r20
    1c56:	15 07       	cpc	r17, r21
    1c58:	26 07       	cpc	r18, r22
    1c5a:	37 07       	cpc	r19, r23
    1c5c:	8c f7       	brge	.-30     	; 0x1c40 <enqueueByDeadline+0x3a>
    1c5e:	ec 01       	movw	r28, r24
    1c60:	f9 83       	std	Y+1, r31	; 0x01
    1c62:	e8 83       	st	Y, r30
    1c64:	10 97       	sbiw	r26, 0x00	; 0
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <enqueueByDeadline+0x6a>
    1c68:	f7 01       	movw	r30, r14
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <enqueueByDeadline+0x78>
    1c70:	8d 93       	st	X+, r24
    1c72:	9c 93       	st	X, r25
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <enqueueByDeadline+0x78>
    1c76:	ec 01       	movw	r28, r24
    1c78:	b9 83       	std	Y+1, r27	; 0x01
    1c7a:	a8 83       	st	Y, r26
    1c7c:	f5 cf       	rjmp	.-22     	; 0x1c68 <enqueueByDeadline+0x62>
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	08 95       	ret

00001c8c <enqueueByBaseline>:
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	7b 01       	movw	r14, r22
    1c9a:	eb 01       	movw	r28, r22
    1c9c:	a8 81       	ld	r26, Y
    1c9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca0:	10 97       	sbiw	r26, 0x00	; 0
    1ca2:	61 f1       	breq	.+88     	; 0x1cfc <enqueueByBaseline+0x70>
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	02 81       	ldd	r16, Z+2	; 0x02
    1ca8:	13 81       	ldd	r17, Z+3	; 0x03
    1caa:	24 81       	ldd	r18, Z+4	; 0x04
    1cac:	35 81       	ldd	r19, Z+5	; 0x05
    1cae:	12 96       	adiw	r26, 0x02	; 2
    1cb0:	4d 91       	ld	r20, X+
    1cb2:	5d 91       	ld	r21, X+
    1cb4:	6d 91       	ld	r22, X+
    1cb6:	7c 91       	ld	r23, X
    1cb8:	15 97       	sbiw	r26, 0x05	; 5
    1cba:	04 17       	cp	r16, r20
    1cbc:	15 07       	cpc	r17, r21
    1cbe:	26 07       	cpc	r18, r22
    1cc0:	37 07       	cpc	r19, r23
    1cc2:	14 f4       	brge	.+4      	; 0x1cc8 <enqueueByBaseline+0x3c>
    1cc4:	1b c0       	rjmp	.+54     	; 0x1cfc <enqueueByBaseline+0x70>
    1cc6:	df 01       	movw	r26, r30
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	11 97       	sbiw	r26, 0x01	; 1
    1cce:	30 97       	sbiw	r30, 0x00	; 0
    1cd0:	49 f0       	breq	.+18     	; 0x1ce4 <enqueueByBaseline+0x58>
    1cd2:	42 81       	ldd	r20, Z+2	; 0x02
    1cd4:	53 81       	ldd	r21, Z+3	; 0x03
    1cd6:	64 81       	ldd	r22, Z+4	; 0x04
    1cd8:	75 81       	ldd	r23, Z+5	; 0x05
    1cda:	04 17       	cp	r16, r20
    1cdc:	15 07       	cpc	r17, r21
    1cde:	26 07       	cpc	r18, r22
    1ce0:	37 07       	cpc	r19, r23
    1ce2:	8c f7       	brge	.-30     	; 0x1cc6 <enqueueByBaseline+0x3a>
    1ce4:	ec 01       	movw	r28, r24
    1ce6:	f9 83       	std	Y+1, r31	; 0x01
    1ce8:	e8 83       	st	Y, r30
    1cea:	10 97       	sbiw	r26, 0x00	; 0
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <enqueueByBaseline+0x6a>
    1cee:	f7 01       	movw	r30, r14
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <enqueueByBaseline+0x78>
    1cf6:	8d 93       	st	X+, r24
    1cf8:	9c 93       	st	X, r25
    1cfa:	04 c0       	rjmp	.+8      	; 0x1d04 <enqueueByBaseline+0x78>
    1cfc:	ec 01       	movw	r28, r24
    1cfe:	b9 83       	std	Y+1, r27	; 0x01
    1d00:	a8 83       	st	Y, r26
    1d02:	f5 cf       	rjmp	.-22     	; 0x1cee <enqueueByBaseline+0x62>
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	08 95       	ret

00001d12 <dequeue>:
    1d12:	dc 01       	movw	r26, r24
    1d14:	ed 91       	ld	r30, X+
    1d16:	fc 91       	ld	r31, X
    1d18:	11 97       	sbiw	r26, 0x01	; 1
    1d1a:	30 97       	sbiw	r30, 0x00	; 0
    1d1c:	59 f4       	brne	.+22     	; 0x1d34 <dequeue+0x22>
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1d24:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1d28:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	83 bf       	out	0x33, r24	; 51
    1d30:	88 95       	sleep
    1d32:	fd cf       	rjmp	.-6      	; 0x1d2e <dequeue+0x1c>
    1d34:	20 81       	ld	r18, Z
    1d36:	31 81       	ldd	r19, Z+1	; 0x01
    1d38:	2d 93       	st	X+, r18
    1d3a:	3c 93       	st	X, r19
    1d3c:	cf 01       	movw	r24, r30
    1d3e:	08 95       	ret

00001d40 <__vector_9>:
    1d40:	1f 92       	push	r1
    1d42:	0f 92       	push	r0
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	0f 92       	push	r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	2f 93       	push	r18
    1d4c:	3f 93       	push	r19
    1d4e:	4f 93       	push	r20
    1d50:	5f 93       	push	r21
    1d52:	6f 93       	push	r22
    1d54:	7f 93       	push	r23
    1d56:	8f 93       	push	r24
    1d58:	9f 93       	push	r25
    1d5a:	ef 93       	push	r30
    1d5c:	ff 93       	push	r31
    1d5e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1d62:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1d66:	01 96       	adiw	r24, 0x01	; 1
    1d68:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
    1d6c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
    1d70:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1d74:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1d78:	30 97       	sbiw	r30, 0x00	; 0
    1d7a:	01 f1       	breq	.+64     	; 0x1dbc <__vector_9+0x7c>
    1d7c:	42 81       	ldd	r20, Z+2	; 0x02
    1d7e:	53 81       	ldd	r21, Z+3	; 0x03
    1d80:	64 81       	ldd	r22, Z+4	; 0x04
    1d82:	75 81       	ldd	r23, Z+5	; 0x05
    1d84:	86 17       	cp	r24, r22
    1d86:	97 07       	cpc	r25, r23
    1d88:	c9 f4       	brne	.+50     	; 0x1dbc <__vector_9+0x7c>
    1d8a:	ca 01       	movw	r24, r20
    1d8c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d90:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d94:	42 1b       	sub	r20, r18
    1d96:	53 0b       	sbc	r21, r19
    1d98:	41 30       	cpi	r20, 0x01	; 1
    1d9a:	51 05       	cpc	r21, r1
    1d9c:	29 f4       	brne	.+10     	; 0x1da8 <__vector_9+0x68>
    1d9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1da2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1dac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1db0:	ef e6       	ldi	r30, 0x6F	; 111
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	82 60       	ori	r24, 0x02	; 2
    1db8:	80 83       	st	Z, r24
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <__vector_9+0x86>
    1dbc:	ef e6       	ldi	r30, 0x6F	; 111
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8d 7f       	andi	r24, 0xFD	; 253
    1dc4:	80 83       	st	Z, r24
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	9f 91       	pop	r25
    1dcc:	8f 91       	pop	r24
    1dce:	7f 91       	pop	r23
    1dd0:	6f 91       	pop	r22
    1dd2:	5f 91       	pop	r21
    1dd4:	4f 91       	pop	r20
    1dd6:	3f 91       	pop	r19
    1dd8:	2f 91       	pop	r18
    1dda:	0f 90       	pop	r0
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	0f 90       	pop	r0
    1de0:	1f 90       	pop	r1
    1de2:	18 95       	reti

00001de4 <__vector_7>:
    1de4:	1f 92       	push	r1
    1de6:	0f 92       	push	r0
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	0f 92       	push	r0
    1dec:	11 24       	eor	r1, r1
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	2f 93       	push	r18
    1df8:	3f 93       	push	r19
    1dfa:	4f 93       	push	r20
    1dfc:	5f 93       	push	r21
    1dfe:	6f 93       	push	r22
    1e00:	7f 93       	push	r23
    1e02:	8f 93       	push	r24
    1e04:	9f 93       	push	r25
    1e06:	af 93       	push	r26
    1e08:	bf 93       	push	r27
    1e0a:	ef 93       	push	r30
    1e0c:	ff 93       	push	r31
    1e0e:	c0 90 56 01 	lds	r12, 0x0156	; 0x800156 <__data_end>
    1e12:	d0 90 57 01 	lds	r13, 0x0157	; 0x800157 <__data_end+0x1>
    1e16:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e1a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e1e:	b0 99       	sbic	0x16, 0	; 22
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <__vector_7+0x5c>
    1e22:	0d 2c       	mov	r0, r13
    1e24:	00 0c       	add	r0, r0
    1e26:	ee 08       	sbc	r14, r14
    1e28:	ff 08       	sbc	r15, r15
    1e2a:	d6 01       	movw	r26, r12
    1e2c:	99 27       	eor	r25, r25
    1e2e:	88 27       	eor	r24, r24
    1e30:	69 01       	movw	r12, r18
    1e32:	e1 2c       	mov	r14, r1
    1e34:	f1 2c       	mov	r15, r1
    1e36:	c8 2a       	or	r12, r24
    1e38:	d9 2a       	or	r13, r25
    1e3a:	ea 2a       	or	r14, r26
    1e3c:	fb 2a       	or	r15, r27
    1e3e:	15 c0       	rjmp	.+42     	; 0x1e6a <__vector_7+0x86>
    1e40:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e44:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	c8 1a       	sub	r12, r24
    1e4c:	d8 0a       	sbc	r13, r24
    1e4e:	0d 2c       	mov	r0, r13
    1e50:	00 0c       	add	r0, r0
    1e52:	ee 08       	sbc	r14, r14
    1e54:	ff 08       	sbc	r15, r15
    1e56:	d6 01       	movw	r26, r12
    1e58:	99 27       	eor	r25, r25
    1e5a:	88 27       	eor	r24, r24
    1e5c:	69 01       	movw	r12, r18
    1e5e:	e1 2c       	mov	r14, r1
    1e60:	f1 2c       	mov	r15, r1
    1e62:	c8 2a       	or	r12, r24
    1e64:	d9 2a       	or	r13, r25
    1e66:	ea 2a       	or	r14, r26
    1e68:	fb 2a       	or	r15, r27
    1e6a:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1e6e:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1e72:	30 97       	sbiw	r30, 0x00	; 0
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <__vector_7+0x94>
    1e76:	42 c0       	rjmp	.+132    	; 0x1efc <__vector_7+0x118>
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e7e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e80:	8c 19       	sub	r24, r12
    1e82:	9d 09       	sbc	r25, r13
    1e84:	ae 09       	sbc	r26, r14
    1e86:	bf 09       	sbc	r27, r15
    1e88:	18 16       	cp	r1, r24
    1e8a:	19 06       	cpc	r1, r25
    1e8c:	1a 06       	cpc	r1, r26
    1e8e:	1b 06       	cpc	r1, r27
    1e90:	ec f1       	brlt	.+122    	; 0x1f0c <__vector_7+0x128>
    1e92:	8c e5       	ldi	r24, 0x5C	; 92
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <dequeue>
    1e9a:	6e e5       	ldi	r22, 0x5E	; 94
    1e9c:	71 e0       	ldi	r23, 0x01	; 1
    1e9e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <enqueueByDeadline>
    1ea2:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1ea6:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1eaa:	30 97       	sbiw	r30, 0x00	; 0
    1eac:	39 f1       	breq	.+78     	; 0x1efc <__vector_7+0x118>
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	a4 81       	ldd	r26, Z+4	; 0x04
    1eb4:	b5 81       	ldd	r27, Z+5	; 0x05
    1eb6:	8c 19       	sub	r24, r12
    1eb8:	9d 09       	sbc	r25, r13
    1eba:	ae 09       	sbc	r26, r14
    1ebc:	bf 09       	sbc	r27, r15
    1ebe:	18 16       	cp	r1, r24
    1ec0:	19 06       	cpc	r1, r25
    1ec2:	1a 06       	cpc	r1, r26
    1ec4:	1b 06       	cpc	r1, r27
    1ec6:	2c f7       	brge	.-54     	; 0x1e92 <__vector_7+0xae>
    1ec8:	21 c0       	rjmp	.+66     	; 0x1f0c <__vector_7+0x128>
    1eca:	9c 01       	movw	r18, r24
    1ecc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed4:	84 1b       	sub	r24, r20
    1ed6:	95 0b       	sbc	r25, r21
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	31 f4       	brne	.+12     	; 0x1ee8 <__vector_7+0x104>
    1edc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ee0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ee4:	2f 5f       	subi	r18, 0xFF	; 255
    1ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1eec:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ef0:	ef e6       	ldi	r30, 0x6F	; 111
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	82 60       	ori	r24, 0x02	; 2
    1ef8:	80 83       	st	Z, r24
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <__vector_7+0x122>
    1efc:	ef e6       	ldi	r30, 0x6F	; 111
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8d 7f       	andi	r24, 0xFD	; 253
    1f04:	80 83       	st	Z, r24
    1f06:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    1f0a:	0c c0       	rjmp	.+24     	; 0x1f24 <__vector_7+0x140>
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	a4 81       	ldd	r26, Z+4	; 0x04
    1f12:	b5 81       	ldd	r27, Z+5	; 0x05
    1f14:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1f18:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1f1c:	2a 17       	cp	r18, r26
    1f1e:	3b 07       	cpc	r19, r27
    1f20:	69 f7       	brne	.-38     	; 0x1efc <__vector_7+0x118>
    1f22:	d3 cf       	rjmp	.-90     	; 0x1eca <__vector_7+0xe6>
    1f24:	ff 91       	pop	r31
    1f26:	ef 91       	pop	r30
    1f28:	bf 91       	pop	r27
    1f2a:	af 91       	pop	r26
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	7f 91       	pop	r23
    1f32:	6f 91       	pop	r22
    1f34:	5f 91       	pop	r21
    1f36:	4f 91       	pop	r20
    1f38:	3f 91       	pop	r19
    1f3a:	2f 91       	pop	r18
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti

00001f4e <async>:
    1f4e:	3f 92       	push	r3
    1f50:	4f 92       	push	r4
    1f52:	5f 92       	push	r5
    1f54:	6f 92       	push	r6
    1f56:	7f 92       	push	r7
    1f58:	8f 92       	push	r8
    1f5a:	9f 92       	push	r9
    1f5c:	af 92       	push	r10
    1f5e:	bf 92       	push	r11
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	2b 01       	movw	r4, r22
    1f72:	3c 01       	movw	r6, r24
    1f74:	49 01       	movw	r8, r18
    1f76:	5a 01       	movw	r10, r20
    1f78:	8f b7       	in	r24, 0x3f	; 63
    1f7a:	80 78       	andi	r24, 0x80	; 128
    1f7c:	38 2e       	mov	r3, r24
    1f7e:	f8 94       	cli
    1f80:	80 e4       	ldi	r24, 0x40	; 64
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <dequeue>
    1f88:	ec 01       	movw	r28, r24
    1f8a:	1b 87       	std	Y+11, r17	; 0x0b
    1f8c:	0a 87       	std	Y+10, r16	; 0x0a
    1f8e:	fd 86       	std	Y+13, r15	; 0x0d
    1f90:	ec 86       	std	Y+12, r14	; 0x0c
    1f92:	df 86       	std	Y+15, r13	; 0x0f
    1f94:	ce 86       	std	Y+14, r12	; 0x0e
    1f96:	33 20       	and	r3, r3
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <async+0x64>
    1f9a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    1f9e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    1fa2:	02 80       	ldd	r0, Z+2	; 0x02
    1fa4:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa6:	e0 2d       	mov	r30, r0
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	a4 81       	ldd	r26, Z+4	; 0x04
    1fae:	b5 81       	ldd	r27, Z+5	; 0x05
    1fb0:	08 c0       	rjmp	.+16     	; 0x1fc2 <async+0x74>
    1fb2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <timestamp>
    1fb6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <timestamp+0x1>
    1fba:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <timestamp+0x2>
    1fbe:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <timestamp+0x3>
    1fc2:	48 0e       	add	r4, r24
    1fc4:	59 1e       	adc	r5, r25
    1fc6:	6a 1e       	adc	r6, r26
    1fc8:	7b 1e       	adc	r7, r27
    1fca:	4a 82       	std	Y+2, r4	; 0x02
    1fcc:	5b 82       	std	Y+3, r5	; 0x03
    1fce:	6c 82       	std	Y+4, r6	; 0x04
    1fd0:	7d 82       	std	Y+5, r7	; 0x05
    1fd2:	18 14       	cp	r1, r8
    1fd4:	19 04       	cpc	r1, r9
    1fd6:	1a 04       	cpc	r1, r10
    1fd8:	1b 04       	cpc	r1, r11
    1fda:	44 f0       	brlt	.+16     	; 0x1fec <async+0x9e>
    1fdc:	0f 2e       	mov	r0, r31
    1fde:	88 24       	eor	r8, r8
    1fe0:	8a 94       	dec	r8
    1fe2:	98 2c       	mov	r9, r8
    1fe4:	a8 2c       	mov	r10, r8
    1fe6:	ff e7       	ldi	r31, 0x7F	; 127
    1fe8:	bf 2e       	mov	r11, r31
    1fea:	f0 2d       	mov	r31, r0
    1fec:	84 0c       	add	r8, r4
    1fee:	95 1c       	adc	r9, r5
    1ff0:	a6 1c       	adc	r10, r6
    1ff2:	b7 1c       	adc	r11, r7
    1ff4:	8e 82       	std	Y+6, r8	; 0x06
    1ff6:	9f 82       	std	Y+7, r9	; 0x07
    1ff8:	a8 86       	std	Y+8, r10	; 0x08
    1ffa:	b9 86       	std	Y+9, r11	; 0x09
    1ffc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    2000:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    2004:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2008:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    200c:	b0 99       	sbic	0x16, 0	; 22
    200e:	0e c0       	rjmp	.+28     	; 0x202c <async+0xde>
    2010:	09 2e       	mov	r0, r25
    2012:	00 0c       	add	r0, r0
    2014:	aa 0b       	sbc	r26, r26
    2016:	bb 0b       	sbc	r27, r27
    2018:	dc 01       	movw	r26, r24
    201a:	99 27       	eor	r25, r25
    201c:	88 27       	eor	r24, r24
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	84 2b       	or	r24, r20
    2024:	95 2b       	or	r25, r21
    2026:	a6 2b       	or	r26, r22
    2028:	b7 2b       	or	r27, r23
    202a:	13 c0       	rjmp	.+38     	; 0x2052 <async+0x104>
    202c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2030:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	09 2e       	mov	r0, r25
    2038:	00 0c       	add	r0, r0
    203a:	aa 0b       	sbc	r26, r26
    203c:	bb 0b       	sbc	r27, r27
    203e:	dc 01       	movw	r26, r24
    2040:	99 27       	eor	r25, r25
    2042:	88 27       	eor	r24, r24
    2044:	a9 01       	movw	r20, r18
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	84 2b       	or	r24, r20
    204c:	95 2b       	or	r25, r21
    204e:	a6 2b       	or	r26, r22
    2050:	b7 2b       	or	r27, r23
    2052:	48 1a       	sub	r4, r24
    2054:	59 0a       	sbc	r5, r25
    2056:	6a 0a       	sbc	r6, r26
    2058:	7b 0a       	sbc	r7, r27
    205a:	14 14       	cp	r1, r4
    205c:	15 04       	cpc	r1, r5
    205e:	16 04       	cpc	r1, r6
    2060:	17 04       	cpc	r1, r7
    2062:	ac f5       	brge	.+106    	; 0x20ce <async+0x180>
    2064:	6c e5       	ldi	r22, 0x5C	; 92
    2066:	71 e0       	ldi	r23, 0x01	; 1
    2068:	ce 01       	movw	r24, r28
    206a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <enqueueByBaseline>
    206e:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    2072:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    2076:	30 97       	sbiw	r30, 0x00	; 0
    2078:	21 f1       	breq	.+72     	; 0x20c2 <async+0x174>
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	a4 81       	ldd	r26, Z+4	; 0x04
    2080:	b5 81       	ldd	r27, Z+5	; 0x05
    2082:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    2086:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    208a:	2a 17       	cp	r18, r26
    208c:	3b 07       	cpc	r19, r27
    208e:	c9 f4       	brne	.+50     	; 0x20c2 <async+0x174>
    2090:	9c 01       	movw	r18, r24
    2092:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2096:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    209a:	84 1b       	sub	r24, r20
    209c:	95 0b       	sbc	r25, r21
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	31 f4       	brne	.+12     	; 0x20ae <async+0x160>
    20a2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    20a6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    20b2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    20b6:	ef e6       	ldi	r30, 0x6F	; 111
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	82 60       	ori	r24, 0x02	; 2
    20be:	80 83       	st	Z, r24
    20c0:	41 c0       	rjmp	.+130    	; 0x2144 <async+0x1f6>
    20c2:	ef e6       	ldi	r30, 0x6F	; 111
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8d 7f       	andi	r24, 0xFD	; 253
    20ca:	80 83       	st	Z, r24
    20cc:	3b c0       	rjmp	.+118    	; 0x2144 <async+0x1f6>
    20ce:	6e e5       	ldi	r22, 0x5E	; 94
    20d0:	71 e0       	ldi	r23, 0x01	; 1
    20d2:	ce 01       	movw	r24, r28
    20d4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <enqueueByDeadline>
    20d8:	33 20       	and	r3, r3
    20da:	b9 f1       	breq	.+110    	; 0x214a <async+0x1fc>
    20dc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    20e0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	81 f1       	breq	.+96     	; 0x2148 <async+0x1fa>
    20e8:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <activeStack>
    20ec:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <activeStack+0x1>
    20f0:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <msgQ>
    20f4:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <msgQ+0x1>
    20f8:	02 81       	ldd	r16, Z+2	; 0x02
    20fa:	13 81       	ldd	r17, Z+3	; 0x03
    20fc:	d9 01       	movw	r26, r18
    20fe:	16 96       	adiw	r26, 0x06	; 6
    2100:	4d 91       	ld	r20, X+
    2102:	5d 91       	ld	r21, X+
    2104:	6d 91       	ld	r22, X+
    2106:	7c 91       	ld	r23, X
    2108:	19 97       	sbiw	r26, 0x09	; 9
    210a:	d8 01       	movw	r26, r16
    210c:	16 96       	adiw	r26, 0x06	; 6
    210e:	0d 91       	ld	r16, X+
    2110:	1d 91       	ld	r17, X+
    2112:	2d 91       	ld	r18, X+
    2114:	3c 91       	ld	r19, X
    2116:	19 97       	sbiw	r26, 0x09	; 9
    2118:	40 1b       	sub	r20, r16
    211a:	51 0b       	sbc	r21, r17
    211c:	62 0b       	sbc	r22, r18
    211e:	73 0b       	sbc	r23, r19
    2120:	9a f4       	brpl	.+38     	; 0x2148 <async+0x1fa>
    2122:	dc 01       	movw	r26, r24
    2124:	2d 91       	ld	r18, X+
    2126:	3c 91       	ld	r19, X
    2128:	11 97       	sbiw	r26, 0x01	; 1
    212a:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
    212e:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
    2132:	ed 93       	st	X+, r30
    2134:	fc 93       	st	X, r31
    2136:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
    213a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
    213e:	0e 94 10 06 	call	0xc20	; 0xc20 <dispatch>
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <async+0x1fa>
    2144:	33 20       	and	r3, r3
    2146:	09 f0       	breq	.+2      	; 0x214a <async+0x1fc>
    2148:	78 94       	sei
    214a:	ce 01       	movw	r24, r28
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	cf 90       	pop	r12
    215c:	bf 90       	pop	r11
    215e:	af 90       	pop	r10
    2160:	9f 90       	pop	r9
    2162:	8f 90       	pop	r8
    2164:	7f 90       	pop	r7
    2166:	6f 90       	pop	r6
    2168:	5f 90       	pop	r5
    216a:	4f 90       	pop	r4
    216c:	3f 90       	pop	r3
    216e:	08 95       	ret

00002170 <sync>:
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	ec 01       	movw	r28, r24
    2182:	7b 01       	movw	r14, r22
    2184:	6a 01       	movw	r12, r20
    2186:	1f b7       	in	r17, 0x3f	; 63
    2188:	10 78       	andi	r17, 0x80	; 128
    218a:	f8 94       	cli
    218c:	a8 81       	ld	r26, Y
    218e:	b9 81       	ldd	r27, Y+1	; 0x01
    2190:	10 97       	sbiw	r26, 0x00	; 0
    2192:	61 f1       	breq	.+88     	; 0x21ec <sync+0x7c>
    2194:	14 96       	adiw	r26, 0x04	; 4
    2196:	ed 91       	ld	r30, X+
    2198:	fc 91       	ld	r31, X
    219a:	15 97       	sbiw	r26, 0x05	; 5
    219c:	30 97       	sbiw	r30, 0x00	; 0
    219e:	41 f0       	breq	.+16     	; 0x21b0 <sync+0x40>
    21a0:	a0 81       	ld	r26, Z
    21a2:	b1 81       	ldd	r27, Z+1	; 0x01
    21a4:	14 96       	adiw	r26, 0x04	; 4
    21a6:	ed 91       	ld	r30, X+
    21a8:	fc 91       	ld	r31, X
    21aa:	15 97       	sbiw	r26, 0x05	; 5
    21ac:	30 97       	sbiw	r30, 0x00	; 0
    21ae:	c1 f7       	brne	.-16     	; 0x21a0 <sync+0x30>
    21b0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <current>
    21b4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <current+0x1>
    21b8:	2a 17       	cp	r18, r26
    21ba:	3b 07       	cpc	r19, r27
    21bc:	21 f0       	breq	.+8      	; 0x21c6 <sync+0x56>
    21be:	11 23       	and	r17, r17
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <sync+0x54>
    21c2:	3d c0       	rjmp	.+122    	; 0x223e <sync+0xce>
    21c4:	07 c0       	rjmp	.+14     	; 0x21d4 <sync+0x64>
    21c6:	11 23       	and	r17, r17
    21c8:	09 f4       	brne	.+2      	; 0x21cc <sync+0x5c>
    21ca:	3c c0       	rjmp	.+120    	; 0x2244 <sync+0xd4>
    21cc:	78 94       	sei
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	9f ef       	ldi	r25, 0xFF	; 255
    21d2:	52 c0       	rjmp	.+164    	; 0x2278 <sync+0x108>
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	d1 f1       	breq	.+116    	; 0x2250 <sync+0xe0>
    21dc:	fc 01       	movw	r30, r24
    21de:	15 82       	std	Z+5, r1	; 0x05
    21e0:	14 82       	std	Z+4, r1	; 0x04
    21e2:	36 c0       	rjmp	.+108    	; 0x2250 <sync+0xe0>
    21e4:	78 94       	sei
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	46 c0       	rjmp	.+140    	; 0x2278 <sync+0x108>
    21ec:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
    21f0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
    21f4:	99 83       	std	Y+1, r25	; 0x01
    21f6:	88 83       	st	Y, r24
    21f8:	11 23       	and	r17, r17
    21fa:	29 f0       	breq	.+10     	; 0x2206 <sync+0x96>
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	09 f0       	breq	.+2      	; 0x2206 <sync+0x96>
    2204:	78 94       	sei
    2206:	b6 01       	movw	r22, r12
    2208:	ce 01       	movw	r24, r28
    220a:	f7 01       	movw	r30, r14
    220c:	09 95       	icall
    220e:	f8 2e       	mov	r15, r24
    2210:	09 2f       	mov	r16, r25
    2212:	8f b7       	in	r24, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	19 82       	std	Y+1, r1	; 0x01
    2218:	18 82       	st	Y, r1
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	91 05       	cpc	r25, r1
    2222:	38 f0       	brcs	.+14     	; 0x2232 <sync+0xc2>
    2224:	1b 82       	std	Y+3, r1	; 0x03
    2226:	1a 82       	std	Y+2, r1	; 0x02
    2228:	fc 01       	movw	r30, r24
    222a:	15 82       	std	Z+5, r1	; 0x05
    222c:	14 82       	std	Z+4, r1	; 0x04
    222e:	0e 94 10 06 	call	0xc20	; 0xc20 <dispatch>
    2232:	11 23       	and	r17, r17
    2234:	51 f0       	breq	.+20     	; 0x224a <sync+0xda>
    2236:	78 94       	sei
    2238:	8f 2d       	mov	r24, r15
    223a:	90 2f       	mov	r25, r16
    223c:	1d c0       	rjmp	.+58     	; 0x2278 <sync+0x108>
    223e:	8f ef       	ldi	r24, 0xFF	; 255
    2240:	9f ef       	ldi	r25, 0xFF	; 255
    2242:	1a c0       	rjmp	.+52     	; 0x2278 <sync+0x108>
    2244:	8f ef       	ldi	r24, 0xFF	; 255
    2246:	9f ef       	ldi	r25, 0xFF	; 255
    2248:	17 c0       	rjmp	.+46     	; 0x2278 <sync+0x108>
    224a:	8f 2d       	mov	r24, r15
    224c:	90 2f       	mov	r25, r16
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <sync+0x108>
    2250:	3b 83       	std	Y+3, r19	; 0x03
    2252:	2a 83       	std	Y+2, r18	; 0x02
    2254:	f9 01       	movw	r30, r18
    2256:	d5 83       	std	Z+5, r29	; 0x05
    2258:	c4 83       	std	Z+4, r28	; 0x04
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 10 06 	call	0xc20	; 0xc20 <dispatch>
    2260:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    2264:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	89 2b       	or	r24, r25
    226e:	09 f4       	brne	.+2      	; 0x2272 <sync+0x102>
    2270:	b9 cf       	rjmp	.-142    	; 0x21e4 <sync+0x74>
    2272:	f9 83       	std	Y+1, r31	; 0x01
    2274:	e8 83       	st	Y, r30
    2276:	c2 cf       	rjmp	.-124    	; 0x21fc <sync+0x8c>
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	08 95       	ret

0000228a <run>:
    228a:	00 91 3a 01 	lds	r16, 0x013A	; 0x80013a <current>
    228e:	10 91 3b 01 	lds	r17, 0x013B	; 0x80013b <current+0x1>
    2292:	8e e5       	ldi	r24, 0x5E	; 94
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <dequeue>
    229a:	ec 01       	movw	r28, r24
    229c:	d8 01       	movw	r26, r16
    229e:	13 96       	adiw	r26, 0x03	; 3
    22a0:	9c 93       	st	X, r25
    22a2:	8e 93       	st	-X, r24
    22a4:	12 97       	sbiw	r26, 0x02	; 2
    22a6:	78 94       	sei
    22a8:	4e 85       	ldd	r20, Y+14	; 0x0e
    22aa:	5f 85       	ldd	r21, Y+15	; 0x0f
    22ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b4:	0e 94 b8 10 	call	0x2170	; 0x2170 <sync>
    22b8:	8f b7       	in	r24, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <msgPool>
    22c0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <msgPool+0x1>
    22c4:	99 83       	std	Y+1, r25	; 0x01
    22c6:	88 83       	st	Y, r24
    22c8:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <msgPool+0x1>
    22cc:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <msgPool>
    22d0:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <activeStack>
    22d4:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <activeStack+0x1>
    22d8:	00 81       	ld	r16, Z
    22da:	11 81       	ldd	r17, Z+1	; 0x01
    22dc:	e8 01       	movw	r28, r16
    22de:	2a 81       	ldd	r18, Y+2	; 0x02
    22e0:	3b 81       	ldd	r19, Y+3	; 0x03
    22e2:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <msgQ>
    22e6:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <msgQ+0x1>
    22ea:	10 97       	sbiw	r26, 0x00	; 0
    22ec:	c1 f0       	breq	.+48     	; 0x231e <run+0x94>
    22ee:	21 15       	cp	r18, r1
    22f0:	31 05       	cpc	r19, r1
    22f2:	59 f2       	breq	.-106    	; 0x228a <run>
    22f4:	16 96       	adiw	r26, 0x06	; 6
    22f6:	8d 91       	ld	r24, X+
    22f8:	9d 91       	ld	r25, X+
    22fa:	0d 90       	ld	r0, X+
    22fc:	bc 91       	ld	r27, X
    22fe:	a0 2d       	mov	r26, r0
    2300:	e9 01       	movw	r28, r18
    2302:	4e 81       	ldd	r20, Y+6	; 0x06
    2304:	5f 81       	ldd	r21, Y+7	; 0x07
    2306:	68 85       	ldd	r22, Y+8	; 0x08
    2308:	79 85       	ldd	r23, Y+9	; 0x09
    230a:	84 1b       	sub	r24, r20
    230c:	95 0b       	sbc	r25, r21
    230e:	a6 0b       	sbc	r26, r22
    2310:	b7 0b       	sbc	r27, r23
    2312:	18 16       	cp	r1, r24
    2314:	19 06       	cpc	r1, r25
    2316:	1a 06       	cpc	r1, r26
    2318:	1b 06       	cpc	r1, r27
    231a:	0c f0       	brlt	.+2      	; 0x231e <run+0x94>
    231c:	b6 cf       	rjmp	.-148    	; 0x228a <run>
    231e:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <activeStack+0x1>
    2322:	00 93 3c 01 	sts	0x013C, r16	; 0x80013c <activeStack>
    2326:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    232a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	f0 93 3f 01 	sts	0x013F, r31	; 0x80013f <threadPool+0x1>
    2336:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <threadPool>
    233a:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <activeStack>
    233e:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <activeStack+0x1>
    2342:	14 96       	adiw	r26, 0x04	; 4
    2344:	ed 91       	ld	r30, X+
    2346:	fc 91       	ld	r31, X
    2348:	15 97       	sbiw	r26, 0x05	; 5
    234a:	30 97       	sbiw	r30, 0x00	; 0
    234c:	41 f0       	breq	.+16     	; 0x235e <run+0xd4>
    234e:	a0 81       	ld	r26, Z
    2350:	b1 81       	ldd	r27, Z+1	; 0x01
    2352:	14 96       	adiw	r26, 0x04	; 4
    2354:	ed 91       	ld	r30, X+
    2356:	fc 91       	ld	r31, X
    2358:	15 97       	sbiw	r26, 0x05	; 5
    235a:	30 97       	sbiw	r30, 0x00	; 0
    235c:	c1 f7       	brne	.-16     	; 0x234e <run+0xc4>
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 10 06 	call	0xc20	; 0xc20 <dispatch>
    2364:	92 cf       	rjmp	.-220    	; 0x228a <run>

00002366 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2366:	42 31       	cpi	r20, 0x12	; 18
    2368:	b8 f4       	brcc	.+46     	; 0x2398 <install+0x32>
        char status;
        DISABLE(status);
    236a:	2f b7       	in	r18, 0x3f	; 63
    236c:	f8 94       	cli
        otable[i] = obj;
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	44 0f       	add	r20, r20
    2372:	55 1f       	adc	r21, r21
    2374:	fa 01       	movw	r30, r20
    2376:	e0 5a       	subi	r30, 0xA0	; 160
    2378:	fe 4f       	sbci	r31, 0xFE	; 254
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
        mtable[i] = m;
    237e:	fa 01       	movw	r30, r20
    2380:	e8 50       	subi	r30, 0x08	; 8
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	71 83       	std	Z+1, r23	; 0x01
    2386:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	fc 01       	movw	r30, r24
    238e:	53 83       	std	Z+3, r21	; 0x03
    2390:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2392:	22 23       	and	r18, r18
    2394:	0c f4       	brge	.+2      	; 0x2398 <install+0x32>
    2396:	78 94       	sei
    2398:	08 95       	ret

0000239a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    239a:	8c 01       	movw	r16, r24
    239c:	7b 01       	movw	r14, r22
    239e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    23a0:	8f b7       	in	r24, 0x3f	; 63
    23a2:	f8 94       	cli
    initialize();
    23a4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <initialize>
    ENABLE(1);
    23a8:	78 94       	sei
    if (m != NULL)
    23aa:	e1 14       	cp	r14, r1
    23ac:	f1 04       	cpc	r15, r1
    23ae:	41 f0       	breq	.+16     	; 0x23c0 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	a9 01       	movw	r20, r18
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	cb 01       	movw	r24, r22
    23bc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <async>
    DISABLE(status);
    23c0:	8f b7       	in	r24, 0x3f	; 63
    23c2:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    23c4:	0e 94 30 06 	call	0xc60	; 0xc60 <schedule>
    ENABLE(1);
    23c8:	78 94       	sei
    while (1) {
        SLEEP();
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	83 bf       	out	0x33, r24	; 51
    23ce:	88 95       	sleep
    23d0:	fd cf       	rjmp	.-6      	; 0x23cc <tinytimber+0x32>

000023d2 <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    23d2:	67 2b       	or	r22, r23
    23d4:	79 f0       	breq	.+30     	; 0x23f4 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    23d6:	4e b1       	in	r20, 0x0e	; 14
    23d8:	21 e0       	ldi	r18, 0x01	; 1
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	b9 01       	movw	r22, r18
    23de:	fc 01       	movw	r30, r24
    23e0:	04 80       	ldd	r0, Z+4	; 0x04
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <writeBit+0x16>
    23e4:	66 0f       	add	r22, r22
    23e6:	77 1f       	adc	r23, r23
    23e8:	0a 94       	dec	r0
    23ea:	e2 f7       	brpl	.-8      	; 0x23e4 <writeBit+0x12>
    23ec:	cb 01       	movw	r24, r22
    23ee:	84 2b       	or	r24, r20
    23f0:	8e b9       	out	0x0e, r24	; 14
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    23f4:	4e b1       	in	r20, 0x0e	; 14
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	b9 01       	movw	r22, r18
    23fc:	fc 01       	movw	r30, r24
    23fe:	04 80       	ldd	r0, Z+4	; 0x04
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <writeBit+0x34>
    2402:	66 0f       	add	r22, r22
    2404:	77 1f       	adc	r23, r23
    2406:	0a 94       	dec	r0
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <writeBit+0x30>
    240a:	cb 01       	movw	r24, r22
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	08 95       	ret

00002418 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    2418:	4e b1       	in	r20, 0x0e	; 14
    241a:	21 e0       	ldi	r18, 0x01	; 1
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	fc 01       	movw	r30, r24
    2420:	04 80       	ldd	r0, Z+4	; 0x04
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <toggleBit+0x10>
    2424:	22 0f       	add	r18, r18
    2426:	33 1f       	adc	r19, r19
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <toggleBit+0xc>
    242c:	24 27       	eor	r18, r20
    242e:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	08 95       	ret

00002436 <__divmodhi4>:
    2436:	97 fb       	bst	r25, 7
    2438:	07 2e       	mov	r0, r23
    243a:	16 f4       	brtc	.+4      	; 0x2440 <__divmodhi4+0xa>
    243c:	00 94       	com	r0
    243e:	07 d0       	rcall	.+14     	; 0x244e <__divmodhi4_neg1>
    2440:	77 fd       	sbrc	r23, 7
    2442:	09 d0       	rcall	.+18     	; 0x2456 <__divmodhi4_neg2>
    2444:	0e 94 55 12 	call	0x24aa	; 0x24aa <__udivmodhi4>
    2448:	07 fc       	sbrc	r0, 7
    244a:	05 d0       	rcall	.+10     	; 0x2456 <__divmodhi4_neg2>
    244c:	3e f4       	brtc	.+14     	; 0x245c <__divmodhi4_exit>

0000244e <__divmodhi4_neg1>:
    244e:	90 95       	com	r25
    2450:	81 95       	neg	r24
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	08 95       	ret

00002456 <__divmodhi4_neg2>:
    2456:	70 95       	com	r23
    2458:	61 95       	neg	r22
    245a:	7f 4f       	sbci	r23, 0xFF	; 255

0000245c <__divmodhi4_exit>:
    245c:	08 95       	ret

0000245e <__divmodsi4>:
    245e:	05 2e       	mov	r0, r21
    2460:	97 fb       	bst	r25, 7
    2462:	1e f4       	brtc	.+6      	; 0x246a <__divmodsi4+0xc>
    2464:	00 94       	com	r0
    2466:	0e 94 46 12 	call	0x248c	; 0x248c <__negsi2>
    246a:	57 fd       	sbrc	r21, 7
    246c:	07 d0       	rcall	.+14     	; 0x247c <__divmodsi4_neg2>
    246e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__udivmodsi4>
    2472:	07 fc       	sbrc	r0, 7
    2474:	03 d0       	rcall	.+6      	; 0x247c <__divmodsi4_neg2>
    2476:	4e f4       	brtc	.+18     	; 0x248a <__divmodsi4_exit>
    2478:	0c 94 46 12 	jmp	0x248c	; 0x248c <__negsi2>

0000247c <__divmodsi4_neg2>:
    247c:	50 95       	com	r21
    247e:	40 95       	com	r20
    2480:	30 95       	com	r19
    2482:	21 95       	neg	r18
    2484:	3f 4f       	sbci	r19, 0xFF	; 255
    2486:	4f 4f       	sbci	r20, 0xFF	; 255
    2488:	5f 4f       	sbci	r21, 0xFF	; 255

0000248a <__divmodsi4_exit>:
    248a:	08 95       	ret

0000248c <__negsi2>:
    248c:	90 95       	com	r25
    248e:	80 95       	com	r24
    2490:	70 95       	com	r23
    2492:	61 95       	neg	r22
    2494:	7f 4f       	sbci	r23, 0xFF	; 255
    2496:	8f 4f       	sbci	r24, 0xFF	; 255
    2498:	9f 4f       	sbci	r25, 0xFF	; 255
    249a:	08 95       	ret

0000249c <__usmulhisi3>:
    249c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__umulhisi3>

000024a0 <__usmulhisi3_tail>:
    24a0:	b7 ff       	sbrs	r27, 7
    24a2:	08 95       	ret
    24a4:	82 1b       	sub	r24, r18
    24a6:	93 0b       	sbc	r25, r19
    24a8:	08 95       	ret

000024aa <__udivmodhi4>:
    24aa:	aa 1b       	sub	r26, r26
    24ac:	bb 1b       	sub	r27, r27
    24ae:	51 e1       	ldi	r21, 0x11	; 17
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <__udivmodhi4_ep>

000024b2 <__udivmodhi4_loop>:
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	a6 17       	cp	r26, r22
    24b8:	b7 07       	cpc	r27, r23
    24ba:	10 f0       	brcs	.+4      	; 0x24c0 <__udivmodhi4_ep>
    24bc:	a6 1b       	sub	r26, r22
    24be:	b7 0b       	sbc	r27, r23

000024c0 <__udivmodhi4_ep>:
    24c0:	88 1f       	adc	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	5a 95       	dec	r21
    24c6:	a9 f7       	brne	.-22     	; 0x24b2 <__udivmodhi4_loop>
    24c8:	80 95       	com	r24
    24ca:	90 95       	com	r25
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	08 95       	ret

000024d2 <__udivmodsi4>:
    24d2:	a1 e2       	ldi	r26, 0x21	; 33
    24d4:	1a 2e       	mov	r1, r26
    24d6:	aa 1b       	sub	r26, r26
    24d8:	bb 1b       	sub	r27, r27
    24da:	fd 01       	movw	r30, r26
    24dc:	0d c0       	rjmp	.+26     	; 0x24f8 <__udivmodsi4_ep>

000024de <__udivmodsi4_loop>:
    24de:	aa 1f       	adc	r26, r26
    24e0:	bb 1f       	adc	r27, r27
    24e2:	ee 1f       	adc	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	a2 17       	cp	r26, r18
    24e8:	b3 07       	cpc	r27, r19
    24ea:	e4 07       	cpc	r30, r20
    24ec:	f5 07       	cpc	r31, r21
    24ee:	20 f0       	brcs	.+8      	; 0x24f8 <__udivmodsi4_ep>
    24f0:	a2 1b       	sub	r26, r18
    24f2:	b3 0b       	sbc	r27, r19
    24f4:	e4 0b       	sbc	r30, r20
    24f6:	f5 0b       	sbc	r31, r21

000024f8 <__udivmodsi4_ep>:
    24f8:	66 1f       	adc	r22, r22
    24fa:	77 1f       	adc	r23, r23
    24fc:	88 1f       	adc	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	1a 94       	dec	r1
    2502:	69 f7       	brne	.-38     	; 0x24de <__udivmodsi4_loop>
    2504:	60 95       	com	r22
    2506:	70 95       	com	r23
    2508:	80 95       	com	r24
    250a:	90 95       	com	r25
    250c:	9b 01       	movw	r18, r22
    250e:	ac 01       	movw	r20, r24
    2510:	bd 01       	movw	r22, r26
    2512:	cf 01       	movw	r24, r30
    2514:	08 95       	ret

00002516 <__umulhisi3>:
    2516:	a2 9f       	mul	r26, r18
    2518:	b0 01       	movw	r22, r0
    251a:	b3 9f       	mul	r27, r19
    251c:	c0 01       	movw	r24, r0
    251e:	a3 9f       	mul	r26, r19
    2520:	70 0d       	add	r23, r0
    2522:	81 1d       	adc	r24, r1
    2524:	11 24       	eor	r1, r1
    2526:	91 1d       	adc	r25, r1
    2528:	b2 9f       	mul	r27, r18
    252a:	70 0d       	add	r23, r0
    252c:	81 1d       	adc	r24, r1
    252e:	11 24       	eor	r1, r1
    2530:	91 1d       	adc	r25, r1
    2532:	08 95       	ret

00002534 <setjmp>:
    2534:	dc 01       	movw	r26, r24
    2536:	2d 92       	st	X+, r2
    2538:	3d 92       	st	X+, r3
    253a:	4d 92       	st	X+, r4
    253c:	5d 92       	st	X+, r5
    253e:	6d 92       	st	X+, r6
    2540:	7d 92       	st	X+, r7
    2542:	8d 92       	st	X+, r8
    2544:	9d 92       	st	X+, r9
    2546:	ad 92       	st	X+, r10
    2548:	bd 92       	st	X+, r11
    254a:	cd 92       	st	X+, r12
    254c:	dd 92       	st	X+, r13
    254e:	ed 92       	st	X+, r14
    2550:	fd 92       	st	X+, r15
    2552:	0d 93       	st	X+, r16
    2554:	1d 93       	st	X+, r17
    2556:	cd 93       	st	X+, r28
    2558:	dd 93       	st	X+, r29
    255a:	ff 91       	pop	r31
    255c:	ef 91       	pop	r30
    255e:	8d b7       	in	r24, 0x3d	; 61
    2560:	8d 93       	st	X+, r24
    2562:	8e b7       	in	r24, 0x3e	; 62
    2564:	8d 93       	st	X+, r24
    2566:	8f b7       	in	r24, 0x3f	; 63
    2568:	8d 93       	st	X+, r24
    256a:	ed 93       	st	X+, r30
    256c:	fd 93       	st	X+, r31
    256e:	88 27       	eor	r24, r24
    2570:	99 27       	eor	r25, r25
    2572:	09 94       	ijmp

00002574 <longjmp>:
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	91 05       	cpc	r25, r1
    257c:	81 1d       	adc	r24, r1
    257e:	2d 90       	ld	r2, X+
    2580:	3d 90       	ld	r3, X+
    2582:	4d 90       	ld	r4, X+
    2584:	5d 90       	ld	r5, X+
    2586:	6d 90       	ld	r6, X+
    2588:	7d 90       	ld	r7, X+
    258a:	8d 90       	ld	r8, X+
    258c:	9d 90       	ld	r9, X+
    258e:	ad 90       	ld	r10, X+
    2590:	bd 90       	ld	r11, X+
    2592:	cd 90       	ld	r12, X+
    2594:	dd 90       	ld	r13, X+
    2596:	ed 90       	ld	r14, X+
    2598:	fd 90       	ld	r15, X+
    259a:	0d 91       	ld	r16, X+
    259c:	1d 91       	ld	r17, X+
    259e:	cd 91       	ld	r28, X+
    25a0:	dd 91       	ld	r29, X+
    25a2:	ed 91       	ld	r30, X+
    25a4:	fd 91       	ld	r31, X+
    25a6:	0d 90       	ld	r0, X+
    25a8:	f8 94       	cli
    25aa:	fe bf       	out	0x3e, r31	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	ed bf       	out	0x3d, r30	; 61
    25b0:	ed 91       	ld	r30, X+
    25b2:	fd 91       	ld	r31, X+
    25b4:	09 94       	ijmp

000025b6 <_exit>:
    25b6:	f8 94       	cli

000025b8 <__stop_program>:
    25b8:	ff cf       	rjmp	.-2      	; 0x25b8 <__stop_program>
