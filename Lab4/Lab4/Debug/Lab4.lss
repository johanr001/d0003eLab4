
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000038c4  00003958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800154  00800154  000039ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00003a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002740  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001098  00000000  00000000  00006454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b9c  00000000  00000000  000074ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011b8  00000000  00000000  00009088  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a56  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000280b  00000000  00000000  0000ac96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_1>
       8:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__vector_2>
       c:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_3>
      10:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_4>
      14:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__vector_9>
      28:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__vector_10>
      2c:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__vector_11>
      30:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_12>
      34:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <__vector_13>
      38:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__vector_14>
      3c:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <__vector_15>
      40:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__vector_16>
      44:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__vector_17>
      48:	0c 94 85 10 	jmp	0x210a	; 0x210a <__vector_18>
      4c:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__vector_19>
      50:	0c 94 95 11 	jmp	0x232a	; 0x232a <__vector_20>
      54:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__vector_21>
      58:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 ec       	ldi	r30, 0xC4	; 196
      70:	f8 e3       	ldi	r31, 0x38	; 56
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 35       	cpi	r26, 0x54	; 84
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e5       	ldi	r26, 0x54	; 84
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 3a       	cpi	r26, 0xA7	; 167
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 8a 07 	call	0xf14	; 0xf14 <main>
      92:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <btn_init>:
#include "GUI.h"
#include <avr/io.h>

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	cd b7       	in	r28, 0x3d	; 61
      a0:	de b7       	in	r29, 0x3e	; 62
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
      a2:	85 e2       	ldi	r24, 0x25	; 37
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	25 e2       	ldi	r18, 0x25	; 37
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	f9 01       	movw	r30, r18
      ac:	20 81       	ld	r18, Z
      ae:	20 6d       	ori	r18, 0xD0	; 208
      b0:	fc 01       	movw	r30, r24
      b2:	20 83       	st	Z, r18
	PORTE |= (1<<PE3) | (1<<PE2);
      b4:	8e e2       	ldi	r24, 0x2E	; 46
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	2e e2       	ldi	r18, 0x2E	; 46
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	f9 01       	movw	r30, r18
      be:	20 81       	ld	r18, Z
      c0:	2c 60       	ori	r18, 0x0C	; 12
      c2:	fc 01       	movw	r30, r24
      c4:	20 83       	st	Z, r18
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
      c6:	8d e3       	ldi	r24, 0x3D	; 61
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2d e3       	ldi	r18, 0x3D	; 61
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	f9 01       	movw	r30, r18
      d0:	20 81       	ld	r18, Z
      d2:	20 6c       	ori	r18, 0xC0	; 192
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
      d8:	8b e6       	ldi	r24, 0x6B	; 107
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2b e6       	ldi	r18, 0x6B	; 107
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	2c 60       	ori	r18, 0x0C	; 12
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
      ea:	8c e6       	ldi	r24, 0x6C	; 108
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	2c e6       	ldi	r18, 0x6C	; 108
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	20 6d       	ori	r18, 0xD0	; 208
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
}
      fc:	00 00       	nop
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <holdCheckerUp>:


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	00 d0       	rcall	.+0      	; 0x116 <holdCheckerUp+0x12>
     116:	00 d0       	rcall	.+0      	; 0x118 <holdCheckerUp+0x14>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	7c 83       	std	Y+4, r23	; 0x04
     122:	6b 83       	std	Y+3, r22	; 0x03
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
     124:	89 81       	ldd	r24, Y+1	; 0x01
     126:	9a 81       	ldd	r25, Y+2	; 0x02
     128:	fc 01       	movw	r30, r24
     12a:	90 85       	ldd	r25, Z+8	; 0x08
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	89 27       	eor	r24, r25
     130:	88 23       	and	r24, r24
     132:	19 f0       	breq	.+6      	; 0x13a <holdCheckerUp+0x36>
		return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	45 c0       	rjmp	.+138    	; 0x1c4 <holdCheckerUp+0xc0>
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	fc 01       	movw	r30, r24
     140:	80 85       	ldd	r24, Z+8	; 0x08
     142:	88 23       	and	r24, r24
     144:	c9 f1       	breq	.+114    	; 0x1b8 <holdCheckerUp+0xb4>
     146:	83 e2       	ldi	r24, 0x23	; 35
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	fc 01       	movw	r30, r24
     14c:	80 81       	ld	r24, Z
     14e:	82 95       	swap	r24
     150:	86 95       	lsr	r24
     152:	86 95       	lsr	r24
     154:	83 70       	andi	r24, 0x03	; 3
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	81 70       	andi	r24, 0x01	; 1
     15c:	99 27       	eor	r25, r25
     15e:	89 2b       	or	r24, r25
     160:	59 f5       	brne	.+86     	; 0x1b8 <holdCheckerUp+0xb4>
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	9a 81       	ldd	r25, Y+2	; 0x02
     166:	fc 01       	movw	r30, r24
     168:	84 81       	ldd	r24, Z+4	; 0x04
     16a:	95 81       	ldd	r25, Z+5	; 0x05
     16c:	c1 2c       	mov	r12, r1
     16e:	d1 2c       	mov	r13, r1
     170:	0f 2e       	mov	r0, r31
     172:	fa e9       	ldi	r31, 0x9A	; 154
     174:	ef 2e       	mov	r14, r31
     176:	f5 e0       	ldi	r31, 0x05	; 5
     178:	ff 2e       	mov	r15, r31
     17a:	f0 2d       	mov	r31, r0
     17c:	8c 01       	movw	r16, r24
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	a9 01       	movw	r20, r18
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	cb 01       	movw	r24, r22
     18a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	9a 81       	ldd	r25, Y+2	; 0x02
     192:	c1 2c       	mov	r12, r1
     194:	d1 2c       	mov	r13, r1
     196:	0f 2e       	mov	r0, r31
     198:	f2 e8       	ldi	r31, 0x82	; 130
     19a:	ef 2e       	mov	r14, r31
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	ff 2e       	mov	r15, r31
     1a0:	f0 2d       	mov	r31, r0
     1a2:	8c 01       	movw	r16, r24
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	a9 01       	movw	r20, r18
     1aa:	65 e3       	ldi	r22, 0x35	; 53
     1ac:	7c e0       	ldi	r23, 0x0C	; 12
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <holdCheckerUp+0xbc>
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	fc 01       	movw	r30, r24
     1be:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
}
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	08 95       	ret

000001de <holdCheckerDown>:

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <holdCheckerDown+0x12>
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <holdCheckerDown+0x14>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	89 83       	std	Y+1, r24	; 0x01
     1fa:	7c 83       	std	Y+4, r23	; 0x04
     1fc:	6b 83       	std	Y+3, r22	; 0x03
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	fc 01       	movw	r30, r24
     204:	91 85       	ldd	r25, Z+9	; 0x09
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	89 27       	eor	r24, r25
     20a:	88 23       	and	r24, r24
     20c:	19 f0       	breq	.+6      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
		return 0;
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	44 c0       	rjmp	.+136    	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	9a 81       	ldd	r25, Y+2	; 0x02
     218:	fc 01       	movw	r30, r24
     21a:	81 85       	ldd	r24, Z+9	; 0x09
     21c:	88 23       	and	r24, r24
     21e:	c1 f1       	breq	.+112    	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
     220:	83 e2       	ldi	r24, 0x23	; 35
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	88 1f       	adc	r24, r24
     22a:	88 27       	eor	r24, r24
     22c:	88 1f       	adc	r24, r24
     22e:	88 2f       	mov	r24, r24
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	81 70       	andi	r24, 0x01	; 1
     234:	99 27       	eor	r25, r25
     236:	89 2b       	or	r24, r25
     238:	59 f5       	brne	.+86     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	9a 81       	ldd	r25, Y+2	; 0x02
     23e:	fc 01       	movw	r30, r24
     240:	84 81       	ldd	r24, Z+4	; 0x04
     242:	95 81       	ldd	r25, Z+5	; 0x05
     244:	c1 2c       	mov	r12, r1
     246:	d1 2c       	mov	r13, r1
     248:	0f 2e       	mov	r0, r31
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	ef 2e       	mov	r14, r31
     24e:	f6 e0       	ldi	r31, 0x06	; 6
     250:	ff 2e       	mov	r15, r31
     252:	f0 2d       	mov	r31, r0
     254:	8c 01       	movw	r16, r24
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	a9 01       	movw	r20, r18
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	cb 01       	movw	r24, r22
     262:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	c1 2c       	mov	r12, r1
     26c:	d1 2c       	mov	r13, r1
     26e:	0f 2e       	mov	r0, r31
     270:	ff ee       	ldi	r31, 0xEF	; 239
     272:	ef 2e       	mov	r14, r31
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	ff 2e       	mov	r15, r31
     278:	f0 2d       	mov	r31, r0
     27a:	8c 01       	movw	r16, r24
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	a9 01       	movw	r20, r18
     282:	65 e3       	ldi	r22, 0x35	; 53
     284:	7c e0       	ldi	r23, 0x0C	; 12
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
     28e:	04 c0       	rjmp	.+8      	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	fc 01       	movw	r30, r24
     296:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
}
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	08 95       	ret

000002b6 <buttonCheckerLR>:

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <buttonCheckerLR+0x6>
     2bc:	00 d0       	rcall	.+0      	; 0x2be <buttonCheckerLR+0x8>
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9a 83       	std	Y+2, r25	; 0x02
     2c4:	89 83       	std	Y+1, r24	; 0x01
     2c6:	7c 83       	std	Y+4, r23	; 0x04
     2c8:	6b 83       	std	Y+3, r22	; 0x03
	if (PRESSEDLT) {
     2ca:	8c e2       	ldi	r24, 0x2C	; 44
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	86 95       	lsr	r24
     2d4:	86 95       	lsr	r24
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	81 70       	andi	r24, 0x01	; 1
     2dc:	99 27       	eor	r25, r25
     2de:	89 2b       	or	r24, r25
     2e0:	31 f4       	brne	.+12     	; 0x2ee <buttonCheckerLR+0x38>
		leftdir(self, 0);
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leftdir>
	}
	if (PRESSEDRT) {
     2ee:	8c e2       	ldi	r24, 0x2C	; 44
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	fc 01       	movw	r30, r24
     2f4:	80 81       	ld	r24, Z
     2f6:	86 95       	lsr	r24
     2f8:	86 95       	lsr	r24
     2fa:	86 95       	lsr	r24
     2fc:	88 2f       	mov	r24, r24
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	81 70       	andi	r24, 0x01	; 1
     302:	99 27       	eor	r25, r25
     304:	89 2b       	or	r24, r25
     306:	31 f4       	brne	.+12     	; 0x314 <buttonCheckerLR+0x5e>
		rightdir(self, 0);
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	9a 81       	ldd	r25, Y+2	; 0x02
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	0e 94 2a 02 	call	0x454	; 0x454 <rightdir>
	}
	return 0;
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
}
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <buttonCheckerUDC>:


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	00 d0       	rcall	.+0      	; 0x32c <buttonCheckerUDC+0x6>
     32c:	00 d0       	rcall	.+0      	; 0x32e <buttonCheckerUDC+0x8>
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	89 83       	std	Y+1, r24	; 0x01
     336:	7c 83       	std	Y+4, r23	; 0x04
     338:	6b 83       	std	Y+3, r22	; 0x03
	if (PRESSEDUP) {
     33a:	83 e2       	ldi	r24, 0x23	; 35
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	fc 01       	movw	r30, r24
     340:	80 81       	ld	r24, Z
     342:	82 95       	swap	r24
     344:	86 95       	lsr	r24
     346:	86 95       	lsr	r24
     348:	83 70       	andi	r24, 0x03	; 3
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	81 70       	andi	r24, 0x01	; 1
     350:	99 27       	eor	r25, r25
     352:	89 2b       	or	r24, r25
     354:	39 f4       	brne	.+14     	; 0x364 <buttonCheckerUDC+0x3e>
		updir(self, 0);
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 6d 02 	call	0x4da	; 0x4da <updir>
     362:	04 c0       	rjmp	.+8      	; 0x36c <buttonCheckerUDC+0x46>
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	16 82       	std	Z+6, r1	; 0x06
	}
	if (PRESSEDDN) {
     36c:	83 e2       	ldi	r24, 0x23	; 35
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	88 1f       	adc	r24, r24
     376:	88 27       	eor	r24, r24
     378:	88 1f       	adc	r24, r24
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	81 70       	andi	r24, 0x01	; 1
     380:	99 27       	eor	r25, r25
     382:	89 2b       	or	r24, r25
     384:	39 f4       	brne	.+14     	; 0x394 <buttonCheckerUDC+0x6e>
		downdir(self, 0); // Hantera ner-knappen
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <downdir>
     392:	04 c0       	rjmp	.+8      	; 0x39c <buttonCheckerUDC+0x76>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	fc 01       	movw	r30, r24
     39a:	17 82       	std	Z+7, r1	; 0x07
	}
	if (PRESSEDCN) {
     39c:	83 e2       	ldi	r24, 0x23	; 35
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	80 81       	ld	r24, Z
     3a4:	82 95       	swap	r24
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	81 70       	andi	r24, 0x01	; 1
     3ae:	99 27       	eor	r25, r25
     3b0:	89 2b       	or	r24, r25
     3b2:	31 f4       	brne	.+12     	; 0x3c0 <buttonCheckerUDC+0x9a>
		centerdir(self, 0);
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	0e 94 75 03 	call	0x6ea	; 0x6ea <centerdir>
	}
	return 0;
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
}
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <leftdir>:

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <leftdir+0x12>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <leftdir+0x14>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
     3ee:	7c 83       	std	Y+4, r23	; 0x04
     3f0:	6b 83       	std	Y+3, r22	; 0x03
	if (PRESSEDLT) {
     3f2:	8c e2       	ldi	r24, 0x2C	; 44
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	80 81       	ld	r24, Z
     3fa:	86 95       	lsr	r24
     3fc:	86 95       	lsr	r24
     3fe:	88 2f       	mov	r24, r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	81 70       	andi	r24, 0x01	; 1
     404:	99 27       	eor	r25, r25
     406:	89 2b       	or	r24, r25
     408:	b1 f4       	brne	.+44     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
		ASYNC(self->gui, switchGen, 0);
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	fc 01       	movw	r30, r24
     410:	84 81       	ldd	r24, Z+4	; 0x04
     412:	95 81       	ldd	r25, Z+5	; 0x05
     414:	c1 2c       	mov	r12, r1
     416:	d1 2c       	mov	r13, r1
     418:	0f 2e       	mov	r0, r31
     41a:	f8 e0       	ldi	r31, 0x08	; 8
     41c:	ef 2e       	mov	r14, r31
     41e:	f5 e0       	ldi	r31, 0x05	; 5
     420:	ff 2e       	mov	r15, r31
     422:	f0 2d       	mov	r31, r0
     424:	8c 01       	movw	r16, r24
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	a9 01       	movw	r20, r18
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	cb 01       	movw	r24, r22
     432:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	}
	return 0;
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
}
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	df 90       	pop	r13
     450:	cf 90       	pop	r12
     452:	08 95       	ret

00000454 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <rightdir+0x12>
     466:	00 d0       	rcall	.+0      	; 0x468 <rightdir+0x14>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	9a 83       	std	Y+2, r25	; 0x02
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	7c 83       	std	Y+4, r23	; 0x04
     472:	6b 83       	std	Y+3, r22	; 0x03
	if (PRESSEDRT) {
     474:	8c e2       	ldi	r24, 0x2C	; 44
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	80 81       	ld	r24, Z
     47c:	86 95       	lsr	r24
     47e:	86 95       	lsr	r24
     480:	86 95       	lsr	r24
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	81 70       	andi	r24, 0x01	; 1
     488:	99 27       	eor	r25, r25
     48a:	89 2b       	or	r24, r25
     48c:	b9 f4       	brne	.+46     	; 0x4bc <rightdir+0x68>
		ASYNC(self->gui, switchGen, 1);
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
     492:	fc 01       	movw	r30, r24
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	95 81       	ldd	r25, Z+5	; 0x05
     498:	cc 24       	eor	r12, r12
     49a:	c3 94       	inc	r12
     49c:	d1 2c       	mov	r13, r1
     49e:	0f 2e       	mov	r0, r31
     4a0:	f8 e0       	ldi	r31, 0x08	; 8
     4a2:	ef 2e       	mov	r14, r31
     4a4:	f5 e0       	ldi	r31, 0x05	; 5
     4a6:	ff 2e       	mov	r15, r31
     4a8:	f0 2d       	mov	r31, r0
     4aa:	8c 01       	movw	r16, r24
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	a9 01       	movw	r20, r18
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	cb 01       	movw	r24, r22
     4b8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	}
	return 0;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
}
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	08 95       	ret

000004da <updir>:

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <updir+0x12>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <updir+0x14>
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	7c 83       	std	Y+4, r23	; 0x04
     4f8:	6b 83       	std	Y+3, r22	; 0x03
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     4fa:	83 e2       	ldi	r24, 0x23	; 35
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	82 95       	swap	r24
     504:	86 95       	lsr	r24
     506:	86 95       	lsr	r24
     508:	83 70       	andi	r24, 0x03	; 3
     50a:	88 2f       	mov	r24, r24
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	81 70       	andi	r24, 0x01	; 1
     510:	99 27       	eor	r25, r25
     512:	89 2b       	or	r24, r25
     514:	09 f0       	breq	.+2      	; 0x518 <__stack+0x19>
     516:	45 c0       	rjmp	.+138    	; 0x5a2 <__stack+0xa3>
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	fc 01       	movw	r30, r24
     51e:	96 81       	ldd	r25, Z+6	; 0x06
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	89 27       	eor	r24, r25
     524:	88 23       	and	r24, r24
     526:	e9 f1       	breq	.+122    	; 0x5a2 <__stack+0xa3>
		self->heldUp = true; // Markera att knappen hålls nere
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	fc 01       	movw	r30, r24
     530:	26 83       	std	Z+6, r18	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	9a 81       	ldd	r25, Y+2	; 0x02
     536:	fc 01       	movw	r30, r24
     538:	84 81       	ldd	r24, Z+4	; 0x04
     53a:	95 81       	ldd	r25, Z+5	; 0x05
     53c:	c1 2c       	mov	r12, r1
     53e:	d1 2c       	mov	r13, r1
     540:	0f 2e       	mov	r0, r31
     542:	fa e9       	ldi	r31, 0x9A	; 154
     544:	ef 2e       	mov	r14, r31
     546:	f5 e0       	ldi	r31, 0x05	; 5
     548:	ff 2e       	mov	r15, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	8c 01       	movw	r16, r24
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a9 01       	movw	r20, r18
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	cb 01       	movw	r24, r22
     55a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	fc 01       	movw	r30, r24
     564:	90 85       	ldd	r25, Z+8	; 0x08
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	89 27       	eor	r24, r25
     56a:	88 23       	and	r24, r24
     56c:	61 f1       	breq	.+88     	; 0x5c6 <__stack+0xc7>
			self->holdUpRunning = true;
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	9a 81       	ldd	r25, Y+2	; 0x02
     572:	21 e0       	ldi	r18, 0x01	; 1
     574:	fc 01       	movw	r30, r24
     576:	20 87       	std	Z+8, r18	; 0x08
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	c1 2c       	mov	r12, r1
     57e:	d1 2c       	mov	r13, r1
     580:	0f 2e       	mov	r0, r31
     582:	f2 e8       	ldi	r31, 0x82	; 130
     584:	ef 2e       	mov	r14, r31
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
     58c:	8c 01       	movw	r16, r24
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	a9 01       	movw	r20, r18
     594:	69 e0       	ldi	r22, 0x09	; 9
     596:	7d e3       	ldi	r23, 0x3D	; 61
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
int updir(Button *self, int arg) {
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
		self->heldUp = true; // Markera att knappen hålls nere
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     5a0:	12 c0       	rjmp	.+36     	; 0x5c6 <__stack+0xc7>
			self->holdUpRunning = true;
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     5a2:	83 e2       	ldi	r24, 0x23	; 35
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	80 81       	ld	r24, Z
     5aa:	82 95       	swap	r24
     5ac:	86 95       	lsr	r24
     5ae:	86 95       	lsr	r24
     5b0:	83 70       	andi	r24, 0x03	; 3
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	81 70       	andi	r24, 0x01	; 1
     5b8:	99 27       	eor	r25, r25
     5ba:	89 2b       	or	r24, r25
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <__stack+0xc7>
		self->heldUp = false;
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	fc 01       	movw	r30, r24
     5c4:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
}
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	08 95       	ret

000005e4 <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <downdir+0x12>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <downdir+0x14>
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	7c 83       	std	Y+4, r23	; 0x04
     602:	6b 83       	std	Y+3, r22	; 0x03
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     604:	83 e2       	ldi	r24, 0x23	; 35
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	fc 01       	movw	r30, r24
     60a:	80 81       	ld	r24, Z
     60c:	88 1f       	adc	r24, r24
     60e:	88 27       	eor	r24, r24
     610:	88 1f       	adc	r24, r24
     612:	88 2f       	mov	r24, r24
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	81 70       	andi	r24, 0x01	; 1
     618:	99 27       	eor	r25, r25
     61a:	89 2b       	or	r24, r25
     61c:	09 f0       	breq	.+2      	; 0x620 <downdir+0x3c>
     61e:	45 c0       	rjmp	.+138    	; 0x6aa <downdir+0xc6>
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	97 81       	ldd	r25, Z+7	; 0x07
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	89 27       	eor	r24, r25
     62c:	88 23       	and	r24, r24
     62e:	e9 f1       	breq	.+122    	; 0x6aa <downdir+0xc6>
		self->heldDown = true; // Markera att knappen hålls nere
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	9a 81       	ldd	r25, Y+2	; 0x02
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	fc 01       	movw	r30, r24
     638:	27 83       	std	Z+7, r18	; 0x07
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	fc 01       	movw	r30, r24
     640:	84 81       	ldd	r24, Z+4	; 0x04
     642:	95 81       	ldd	r25, Z+5	; 0x05
     644:	c1 2c       	mov	r12, r1
     646:	d1 2c       	mov	r13, r1
     648:	0f 2e       	mov	r0, r31
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	ef 2e       	mov	r14, r31
     64e:	f6 e0       	ldi	r31, 0x06	; 6
     650:	ff 2e       	mov	r15, r31
     652:	f0 2d       	mov	r31, r0
     654:	8c 01       	movw	r16, r24
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	cb 01       	movw	r24, r22
     662:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	9a 81       	ldd	r25, Y+2	; 0x02
     66a:	fc 01       	movw	r30, r24
     66c:	91 85       	ldd	r25, Z+9	; 0x09
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	89 27       	eor	r24, r25
     672:	88 23       	and	r24, r24
     674:	59 f1       	breq	.+86     	; 0x6cc <downdir+0xe8>
			self->holdDownRunning = true;
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	21 87       	std	Z+9, r18	; 0x09
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	c1 2c       	mov	r12, r1
     686:	d1 2c       	mov	r13, r1
     688:	0f 2e       	mov	r0, r31
     68a:	ff ee       	ldi	r31, 0xEF	; 239
     68c:	ef 2e       	mov	r14, r31
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ff 2e       	mov	r15, r31
     692:	f0 2d       	mov	r31, r0
     694:	8c 01       	movw	r16, r24
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	a9 01       	movw	r20, r18
     69c:	69 e0       	ldi	r22, 0x09	; 9
     69e:	7d e3       	ldi	r23, 0x3D	; 61
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
int downdir(Button *self, int arg) {
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
		self->heldDown = true; // Markera att knappen hålls nere
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     6a8:	11 c0       	rjmp	.+34     	; 0x6cc <downdir+0xe8>
			self->holdDownRunning = true;
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     6aa:	83 e2       	ldi	r24, 0x23	; 35
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	80 81       	ld	r24, Z
     6b2:	88 1f       	adc	r24, r24
     6b4:	88 27       	eor	r24, r24
     6b6:	88 1f       	adc	r24, r24
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	81 70       	andi	r24, 0x01	; 1
     6be:	99 27       	eor	r25, r25
     6c0:	89 2b       	or	r24, r25
     6c2:	21 f0       	breq	.+8      	; 0x6cc <downdir+0xe8>
		self->heldDown = false;
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	fc 01       	movw	r30, r24
     6ca:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
}
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <centerdir>:
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <centerdir+0x12>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <centerdir+0x14>
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	9a 83       	std	Y+2, r25	; 0x02
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	7c 83       	std	Y+4, r23	; 0x04
     708:	6b 83       	std	Y+3, r22	; 0x03
	if (PRESSEDCN) {
     70a:	83 e2       	ldi	r24, 0x23	; 35
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	fc 01       	movw	r30, r24
     710:	80 81       	ld	r24, Z
     712:	82 95       	swap	r24
     714:	8f 70       	andi	r24, 0x0F	; 15
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	81 70       	andi	r24, 0x01	; 1
     71c:	99 27       	eor	r25, r25
     71e:	89 2b       	or	r24, r25
     720:	b9 f4       	brne	.+46     	; 0x750 <centerdir+0x66>
		AFTER(MSEC(100),self->gui, guiFrecReset, 0);
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	9a 81       	ldd	r25, Y+2	; 0x02
     726:	fc 01       	movw	r30, r24
     728:	84 81       	ldd	r24, Z+4	; 0x04
     72a:	95 81       	ldd	r25, Z+5	; 0x05
     72c:	c1 2c       	mov	r12, r1
     72e:	d1 2c       	mov	r13, r1
     730:	0f 2e       	mov	r0, r31
     732:	f8 e6       	ldi	r31, 0x68	; 104
     734:	ef 2e       	mov	r14, r31
     736:	f6 e0       	ldi	r31, 0x06	; 6
     738:	ff 2e       	mov	r15, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	8c 01       	movw	r16, r24
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	65 e3       	ldi	r22, 0x35	; 53
     746:	7c e0       	ldi	r23, 0x0C	; 12
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	}
	return 0;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
}
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <lcd_init>:
};



// Starta LCD
void lcd_init() {
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     776:	84 ee       	ldi	r24, 0xE4	; 228
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	20 ec       	ldi	r18, 0xC0	; 192
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     780:	85 ee       	ldi	r24, 0xE5	; 229
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	27 eb       	ldi	r18, 0xB7	; 183
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     78a:	87 ee       	ldi	r24, 0xE7	; 231
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	2f e0       	ldi	r18, 0x0F	; 15
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
}
     794:	00 00       	nop
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <writeChar>:

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	29 97       	sbiw	r28, 0x09	; 9
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	8f 83       	std	Y+7, r24	; 0x07
     7b2:	79 87       	std	Y+9, r23	; 0x09
     7b4:	68 87       	std	Y+8, r22	; 0x08
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     7b6:	88 85       	ldd	r24, Y+8	; 0x08
     7b8:	99 85       	ldd	r25, Y+9	; 0x09
     7ba:	99 23       	and	r25, r25
     7bc:	0c f4       	brge	.+2      	; 0x7c0 <writeChar+0x24>
     7be:	c5 c0       	rjmp	.+394    	; 0x94a <writeChar+0x1ae>
     7c0:	88 85       	ldd	r24, Y+8	; 0x08
     7c2:	99 85       	ldd	r25, Y+9	; 0x09
     7c4:	06 97       	sbiw	r24, 0x06	; 6
     7c6:	0c f0       	brlt	.+2      	; 0x7ca <writeChar+0x2e>
     7c8:	c0 c0       	rjmp	.+384    	; 0x94a <writeChar+0x1ae>
	uint16_t segments = 0x0000;   // Default är tom.
     7ca:	1a 82       	std	Y+2, r1	; 0x02
     7cc:	19 82       	std	Y+1, r1	; 0x01
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     7ce:	8f 81       	ldd	r24, Y+7	; 0x07
     7d0:	80 33       	cpi	r24, 0x30	; 48
     7d2:	80 f0       	brcs	.+32     	; 0x7f4 <writeChar+0x58>
     7d4:	8f 81       	ldd	r24, Y+7	; 0x07
     7d6:	8a 33       	cpi	r24, 0x3A	; 58
     7d8:	68 f4       	brcc	.+26     	; 0x7f4 <writeChar+0x58>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     7da:	8f 81       	ldd	r24, Y+7	; 0x07
     7dc:	88 2f       	mov	r24, r24
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	c0 97       	sbiw	r24, 0x30	; 48
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	81 5c       	subi	r24, 0xC1	; 193
     7e8:	9e 4f       	sbci	r25, 0xFE	; 254
     7ea:	fc 01       	movw	r30, r24
     7ec:	80 81       	ld	r24, Z
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     7f4:	88 85       	ldd	r24, Y+8	; 0x08
     7f6:	99 85       	ldd	r25, Y+9	; 0x09
     7f8:	99 23       	and	r25, r25
     7fa:	0c f4       	brge	.+2      	; 0x7fe <writeChar+0x62>
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	95 95       	asr	r25
     800:	87 95       	ror	r24
     802:	84 51       	subi	r24, 0x14	; 20
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	9c 83       	std	Y+4, r25	; 0x04
     808:	8b 83       	std	Y+3, r24	; 0x03
	int offset = (pos % 2) * 4;
     80a:	88 85       	ldd	r24, Y+8	; 0x08
     80c:	99 85       	ldd	r25, Y+9	; 0x09
     80e:	81 70       	andi	r24, 0x01	; 1
     810:	90 78       	andi	r25, 0x80	; 128
     812:	99 23       	and	r25, r25
     814:	24 f4       	brge	.+8      	; 0x81e <writeChar+0x82>
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	8e 6f       	ori	r24, 0xFE	; 254
     81a:	9f 6f       	ori	r25, 0xFF	; 255
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	9e 83       	std	Y+6, r25	; 0x06
     828:	8d 83       	std	Y+5, r24	; 0x05

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	9c 81       	ldd	r25, Y+4	; 0x04
     82e:	fc 01       	movw	r30, r24
     830:	80 81       	ld	r24, Z
     832:	28 2f       	mov	r18, r24
     834:	8f e0       	ldi	r24, 0x0F	; 15
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0d 80       	ldd	r0, Y+5	; 0x05
     83a:	02 c0       	rjmp	.+4      	; 0x840 <writeChar+0xa4>
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	0a 94       	dec	r0
     842:	e2 f7       	brpl	.-8      	; 0x83c <writeChar+0xa0>
     844:	80 95       	com	r24
     846:	82 23       	and	r24, r18
     848:	28 2f       	mov	r18, r24
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	8f 70       	andi	r24, 0x0F	; 15
     850:	99 27       	eor	r25, r25
     852:	0d 80       	ldd	r0, Y+5	; 0x05
     854:	02 c0       	rjmp	.+4      	; 0x85a <writeChar+0xbe>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	0a 94       	dec	r0
     85c:	e2 f7       	brpl	.-8      	; 0x856 <writeChar+0xba>
     85e:	28 2b       	or	r18, r24
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	05 96       	adiw	r24, 0x05	; 5
     86e:	2b 81       	ldd	r18, Y+3	; 0x03
     870:	3c 81       	ldd	r19, Y+4	; 0x04
     872:	2b 5f       	subi	r18, 0xFB	; 251
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	f9 01       	movw	r30, r18
     878:	20 81       	ld	r18, Z
     87a:	42 2f       	mov	r20, r18
     87c:	2f e0       	ldi	r18, 0x0F	; 15
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	0d 80       	ldd	r0, Y+5	; 0x05
     882:	02 c0       	rjmp	.+4      	; 0x888 <writeChar+0xec>
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	0a 94       	dec	r0
     88a:	e2 f7       	brpl	.-8      	; 0x884 <writeChar+0xe8>
     88c:	20 95       	com	r18
     88e:	24 23       	and	r18, r20
     890:	42 2f       	mov	r20, r18
     892:	29 81       	ldd	r18, Y+1	; 0x01
     894:	3a 81       	ldd	r19, Y+2	; 0x02
     896:	32 95       	swap	r19
     898:	22 95       	swap	r18
     89a:	2f 70       	andi	r18, 0x0F	; 15
     89c:	23 27       	eor	r18, r19
     89e:	3f 70       	andi	r19, 0x0F	; 15
     8a0:	23 27       	eor	r18, r19
     8a2:	2f 70       	andi	r18, 0x0F	; 15
     8a4:	33 27       	eor	r19, r19
     8a6:	0d 80       	ldd	r0, Y+5	; 0x05
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <writeChar+0x112>
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	0a 94       	dec	r0
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <writeChar+0x10e>
     8b2:	24 2b       	or	r18, r20
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 83       	st	Z, r18
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	9c 81       	ldd	r25, Y+4	; 0x04
     8bc:	0a 96       	adiw	r24, 0x0a	; 10
     8be:	2b 81       	ldd	r18, Y+3	; 0x03
     8c0:	3c 81       	ldd	r19, Y+4	; 0x04
     8c2:	26 5f       	subi	r18, 0xF6	; 246
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	42 2f       	mov	r20, r18
     8cc:	2f e0       	ldi	r18, 0x0F	; 15
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	0d 80       	ldd	r0, Y+5	; 0x05
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <writeChar+0x13c>
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	0a 94       	dec	r0
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <writeChar+0x138>
     8dc:	20 95       	com	r18
     8de:	24 23       	and	r18, r20
     8e0:	42 2f       	mov	r20, r18
     8e2:	29 81       	ldd	r18, Y+1	; 0x01
     8e4:	3a 81       	ldd	r19, Y+2	; 0x02
     8e6:	23 2f       	mov	r18, r19
     8e8:	33 27       	eor	r19, r19
     8ea:	2f 70       	andi	r18, 0x0F	; 15
     8ec:	33 27       	eor	r19, r19
     8ee:	0d 80       	ldd	r0, Y+5	; 0x05
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <writeChar+0x15a>
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	0a 94       	dec	r0
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <writeChar+0x156>
     8fa:	24 2b       	or	r18, r20
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	0f 96       	adiw	r24, 0x0f	; 15
     906:	2b 81       	ldd	r18, Y+3	; 0x03
     908:	3c 81       	ldd	r19, Y+4	; 0x04
     90a:	21 5f       	subi	r18, 0xF1	; 241
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	42 2f       	mov	r20, r18
     914:	2f e0       	ldi	r18, 0x0F	; 15
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	0d 80       	ldd	r0, Y+5	; 0x05
     91a:	02 c0       	rjmp	.+4      	; 0x920 <writeChar+0x184>
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	0a 94       	dec	r0
     922:	e2 f7       	brpl	.-8      	; 0x91c <writeChar+0x180>
     924:	20 95       	com	r18
     926:	24 23       	and	r18, r20
     928:	42 2f       	mov	r20, r18
     92a:	29 81       	ldd	r18, Y+1	; 0x01
     92c:	3a 81       	ldd	r19, Y+2	; 0x02
     92e:	23 2f       	mov	r18, r19
     930:	33 27       	eor	r19, r19
     932:	22 95       	swap	r18
     934:	2f 70       	andi	r18, 0x0F	; 15
     936:	0d 80       	ldd	r0, Y+5	; 0x05
     938:	02 c0       	rjmp	.+4      	; 0x93e <writeChar+0x1a2>
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	0a 94       	dec	r0
     940:	e2 f7       	brpl	.-8      	; 0x93a <writeChar+0x19e>
     942:	24 2b       	or	r18, r20
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
     948:	01 c0       	rjmp	.+2      	; 0x94c <writeChar+0x1b0>
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     94a:	00 00       	nop

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
}
     94c:	29 96       	adiw	r28, 0x09	; 9
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <printAt>:

void printAt(long num, int pos) {
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	28 97       	sbiw	r28, 0x08	; 8
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	6b 83       	std	Y+3, r22	; 0x03
     974:	7c 83       	std	Y+4, r23	; 0x04
     976:	8d 83       	std	Y+5, r24	; 0x05
     978:	9e 83       	std	Y+6, r25	; 0x06
     97a:	58 87       	std	Y+8, r21	; 0x08
     97c:	4f 83       	std	Y+7, r20	; 0x07
	int pp = pos;
     97e:	8f 81       	ldd	r24, Y+7	; 0x07
     980:	98 85       	ldd	r25, Y+8	; 0x08
     982:	9a 83       	std	Y+2, r25	; 0x02
     984:	89 83       	std	Y+1, r24	; 0x01
	writeChar( (num % 100) / 10 + '0', pp);
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	ad 81       	ldd	r26, Y+5	; 0x05
     98c:	be 81       	ldd	r27, Y+6	; 0x06
     98e:	24 e6       	ldi	r18, 0x64	; 100
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__divmodsi4>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	2a e0       	ldi	r18, 0x0A	; 10
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	bc 01       	movw	r22, r24
     9ac:	cd 01       	movw	r24, r26
     9ae:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__divmodsi4>
     9b2:	da 01       	movw	r26, r20
     9b4:	c9 01       	movw	r24, r18
     9b6:	20 e3       	ldi	r18, 0x30	; 48
     9b8:	28 0f       	add	r18, r24
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	bc 01       	movw	r22, r24
     9c0:	82 2f       	mov	r24, r18
     9c2:	0e 94 ce 03 	call	0x79c	; 0x79c <writeChar>
	pp++;
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
	writeChar( num % 10 + '0', pp);
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	ad 81       	ldd	r26, Y+5	; 0x05
     9d6:	be 81       	ldd	r27, Y+6	; 0x06
     9d8:	2a e0       	ldi	r18, 0x0A	; 10
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__divmodsi4>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	20 e3       	ldi	r18, 0x30	; 48
     9ee:	28 0f       	add	r18, r24
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	bc 01       	movw	r22, r24
     9f6:	82 2f       	mov	r24, r18
     9f8:	0e 94 ce 03 	call	0x79c	; 0x79c <writeChar>
	
}
     9fc:	00 00       	nop
     9fe:	28 96       	adiw	r28, 0x08	; 8
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <switchGen>:


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	00 d0       	rcall	.+0      	; 0xa22 <switchGen+0x12>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <switchGen+0x14>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	7c 83       	std	Y+4, r23	; 0x04
     a2e:	6b 83       	std	Y+3, r22	; 0x03
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	89 2b       	or	r24, r25
     a38:	09 f4       	brne	.+2      	; 0xa3c <switchGen+0x2c>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	fc 01       	movw	r30, r24
     a42:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	c1 2c       	mov	r12, r1
     a4a:	d1 2c       	mov	r13, r1
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f4 e4       	ldi	r31, 0x44	; 68
     a50:	ef 2e       	mov	r14, r31
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	ff 2e       	mov	r15, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	8c 01       	movw	r16, r24
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	a9 01       	movw	r20, r18
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	cb 01       	movw	r24, r22
     a66:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	return 0;
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
}
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	08 95       	ret

00000a88 <updateDisplay>:

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <updateDisplay+0x6>
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <updateDisplay+0x8>
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	7c 83       	std	Y+4, r23	; 0x04
     a9a:	6b 83       	std	Y+3, r22	; 0x03
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	fc 01       	movw	r30, r24
     aa2:	84 81       	ldd	r24, Z+4	; 0x04
     aa4:	95 81       	ldd	r25, Z+5	; 0x05
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	6f e5       	ldi	r22, 0x5F	; 95
     aac:	78 e0       	ldi	r23, 0x08	; 8
     aae:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <sync>
     ab2:	09 2e       	mov	r0, r25
     ab4:	00 0c       	add	r0, r0
     ab6:	aa 0b       	sbc	r26, r26
     ab8:	bb 0b       	sbc	r27, r27
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	bc 01       	movw	r22, r24
     ac0:	cd 01       	movw	r24, r26
     ac2:	0e 94 af 04 	call	0x95e	; 0x95e <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	fc 01       	movw	r30, r24
     acc:	86 81       	ldd	r24, Z+6	; 0x06
     ace:	97 81       	ldd	r25, Z+7	; 0x07
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	6f e5       	ldi	r22, 0x5F	; 95
     ad6:	78 e0       	ldi	r23, 0x08	; 8
     ad8:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <sync>
     adc:	09 2e       	mov	r0, r25
     ade:	00 0c       	add	r0, r0
     ae0:	aa 0b       	sbc	r26, r26
     ae2:	bb 0b       	sbc	r27, r27
     ae4:	44 e0       	ldi	r20, 0x04	; 4
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	bc 01       	movw	r22, r24
     aea:	cd 01       	movw	r24, r26
     aec:	0e 94 af 04 	call	0x95e	; 0x95e <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	fc 01       	movw	r30, r24
     af6:	90 85       	ldd	r25, Z+8	; 0x08
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	89 27       	eor	r24, r25
     afc:	88 23       	and	r24, r24
     afe:	49 f0       	breq	.+18     	; 0xb12 <updateDisplay+0x8a>
		printAt(10, 2);
     b00:	42 e0       	ldi	r20, 0x02	; 2
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	6a e0       	ldi	r22, 0x0A	; 10
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 af 04 	call	0x95e	; 0x95e <printAt>
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <updateDisplay+0x9a>
		} else {
		printAt(1, 2);
     b12:	42 e0       	ldi	r20, 0x02	; 2
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 af 04 	call	0x95e	; 0x95e <printAt>
	}
	return 0;
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
}
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <guiFrecInc>:

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <guiFrecInc+0x12>
     b46:	00 d0       	rcall	.+0      	; 0xb48 <guiFrecInc+0x14>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	7c 83       	std	Y+4, r23	; 0x04
     b52:	6b 83       	std	Y+3, r22	; 0x03
	if (self->midPos == 0) {
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	fc 01       	movw	r30, r24
     b5a:	90 85       	ldd	r25, Z+8	; 0x08
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	89 27       	eor	r24, r25
     b60:	88 23       	and	r24, r24
     b62:	b9 f0       	breq	.+46     	; 0xb92 <guiFrecInc+0x5e>
		ASYNC(self->gen1, FrecInc, 0);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	fc 01       	movw	r30, r24
     b6a:	84 81       	ldd	r24, Z+4	; 0x04
     b6c:	95 81       	ldd	r25, Z+5	; 0x05
     b6e:	c1 2c       	mov	r12, r1
     b70:	d1 2c       	mov	r13, r1
     b72:	0f 2e       	mov	r0, r31
     b74:	f6 e7       	ldi	r31, 0x76	; 118
     b76:	ef 2e       	mov	r14, r31
     b78:	f8 e0       	ldi	r31, 0x08	; 8
     b7a:	ff 2e       	mov	r15, r31
     b7c:	f0 2d       	mov	r31, r0
     b7e:	8c 01       	movw	r16, r24
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	a9 01       	movw	r20, r18
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	cb 01       	movw	r24, r22
     b8c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
     b90:	16 c0       	rjmp	.+44     	; 0xbbe <guiFrecInc+0x8a>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	fc 01       	movw	r30, r24
     b98:	86 81       	ldd	r24, Z+6	; 0x06
     b9a:	97 81       	ldd	r25, Z+7	; 0x07
     b9c:	c1 2c       	mov	r12, r1
     b9e:	d1 2c       	mov	r13, r1
     ba0:	0f 2e       	mov	r0, r31
     ba2:	f6 e7       	ldi	r31, 0x76	; 118
     ba4:	ef 2e       	mov	r14, r31
     ba6:	f8 e0       	ldi	r31, 0x08	; 8
     ba8:	ff 2e       	mov	r15, r31
     baa:	f0 2d       	mov	r31, r0
     bac:	8c 01       	movw	r16, r24
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	a9 01       	movw	r20, r18
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	cb 01       	movw	r24, r22
     bba:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	}
	ASYNC(self, updateDisplay, 0);
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	c1 2c       	mov	r12, r1
     bc4:	d1 2c       	mov	r13, r1
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f4 e4       	ldi	r31, 0x44	; 68
     bca:	ef 2e       	mov	r14, r31
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	ff 2e       	mov	r15, r31
     bd0:	f0 2d       	mov	r31, r0
     bd2:	8c 01       	movw	r16, r24
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	a9 01       	movw	r20, r18
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	cb 01       	movw	r24, r22
     be0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	return 0;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0

}
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	08 95       	ret

00000c02 <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	00 d0       	rcall	.+0      	; 0xc14 <guiFrecDec+0x12>
     c14:	00 d0       	rcall	.+0      	; 0xc16 <guiFrecDec+0x14>
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	7c 83       	std	Y+4, r23	; 0x04
     c20:	6b 83       	std	Y+3, r22	; 0x03
	if (self->midPos == 0) {
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	9a 81       	ldd	r25, Y+2	; 0x02
     c26:	fc 01       	movw	r30, r24
     c28:	90 85       	ldd	r25, Z+8	; 0x08
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	89 27       	eor	r24, r25
     c2e:	88 23       	and	r24, r24
     c30:	b9 f0       	breq	.+46     	; 0xc60 <guiFrecDec+0x5e>
		ASYNC(self->gen1, FrecDec, 0);
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	fc 01       	movw	r30, r24
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	95 81       	ldd	r25, Z+5	; 0x05
     c3c:	c1 2c       	mov	r12, r1
     c3e:	d1 2c       	mov	r13, r1
     c40:	0f 2e       	mov	r0, r31
     c42:	fc ec       	ldi	r31, 0xCC	; 204
     c44:	ef 2e       	mov	r14, r31
     c46:	f8 e0       	ldi	r31, 0x08	; 8
     c48:	ff 2e       	mov	r15, r31
     c4a:	f0 2d       	mov	r31, r0
     c4c:	8c 01       	movw	r16, r24
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	a9 01       	movw	r20, r18
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	cb 01       	movw	r24, r22
     c5a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
     c5e:	16 c0       	rjmp	.+44     	; 0xc8c <guiFrecDec+0x8a>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	fc 01       	movw	r30, r24
     c66:	86 81       	ldd	r24, Z+6	; 0x06
     c68:	97 81       	ldd	r25, Z+7	; 0x07
     c6a:	c1 2c       	mov	r12, r1
     c6c:	d1 2c       	mov	r13, r1
     c6e:	0f 2e       	mov	r0, r31
     c70:	fc ec       	ldi	r31, 0xCC	; 204
     c72:	ef 2e       	mov	r14, r31
     c74:	f8 e0       	ldi	r31, 0x08	; 8
     c76:	ff 2e       	mov	r15, r31
     c78:	f0 2d       	mov	r31, r0
     c7a:	8c 01       	movw	r16, r24
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	a9 01       	movw	r20, r18
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	cb 01       	movw	r24, r22
     c88:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	}
	ASYNC(self, updateDisplay, 0);
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	c1 2c       	mov	r12, r1
     c92:	d1 2c       	mov	r13, r1
     c94:	0f 2e       	mov	r0, r31
     c96:	f4 e4       	ldi	r31, 0x44	; 68
     c98:	ef 2e       	mov	r14, r31
     c9a:	f5 e0       	ldi	r31, 0x05	; 5
     c9c:	ff 2e       	mov	r15, r31
     c9e:	f0 2d       	mov	r31, r0
     ca0:	8c 01       	movw	r16, r24
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	cb 01       	movw	r24, r22
     cae:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	return 0;
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	08 95       	ret

00000cd0 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <guiFrecReset+0x12>
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <guiFrecReset+0x14>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	7c 83       	std	Y+4, r23	; 0x04
     cee:	6b 83       	std	Y+3, r22	; 0x03
	if (self->midPos == 0) {
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	fc 01       	movw	r30, r24
     cf6:	90 85       	ldd	r25, Z+8	; 0x08
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 27       	eor	r24, r25
     cfc:	88 23       	and	r24, r24
     cfe:	b9 f0       	breq	.+46     	; 0xd2e <guiFrecReset+0x5e>
		ASYNC(self->gen1, FrecReset, 0);
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	fc 01       	movw	r30, r24
     d06:	84 81       	ldd	r24, Z+4	; 0x04
     d08:	95 81       	ldd	r25, Z+5	; 0x05
     d0a:	c1 2c       	mov	r12, r1
     d0c:	d1 2c       	mov	r13, r1
     d0e:	0f 2e       	mov	r0, r31
     d10:	f3 ef       	ldi	r31, 0xF3	; 243
     d12:	ef 2e       	mov	r14, r31
     d14:	f8 e0       	ldi	r31, 0x08	; 8
     d16:	ff 2e       	mov	r15, r31
     d18:	f0 2d       	mov	r31, r0
     d1a:	8c 01       	movw	r16, r24
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	a9 01       	movw	r20, r18
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	cb 01       	movw	r24, r22
     d28:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
     d2c:	16 c0       	rjmp	.+44     	; 0xd5a <guiFrecReset+0x8a>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	fc 01       	movw	r30, r24
     d34:	86 81       	ldd	r24, Z+6	; 0x06
     d36:	97 81       	ldd	r25, Z+7	; 0x07
     d38:	c1 2c       	mov	r12, r1
     d3a:	d1 2c       	mov	r13, r1
     d3c:	0f 2e       	mov	r0, r31
     d3e:	f3 ef       	ldi	r31, 0xF3	; 243
     d40:	ef 2e       	mov	r14, r31
     d42:	f8 e0       	ldi	r31, 0x08	; 8
     d44:	ff 2e       	mov	r15, r31
     d46:	f0 2d       	mov	r31, r0
     d48:	8c 01       	movw	r16, r24
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	a9 01       	movw	r20, r18
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	cb 01       	movw	r24, r22
     d56:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	}
	ASYNC(self, updateDisplay, 0);
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	c1 2c       	mov	r12, r1
     d60:	d1 2c       	mov	r13, r1
     d62:	0f 2e       	mov	r0, r31
     d64:	f4 e4       	ldi	r31, 0x44	; 68
     d66:	ef 2e       	mov	r14, r31
     d68:	f5 e0       	ldi	r31, 0x05	; 5
     d6a:	ff 2e       	mov	r15, r31
     d6c:	f0 2d       	mov	r31, r0
     d6e:	8c 01       	movw	r16, r24
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	a9 01       	movw	r20, r18
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	cb 01       	movw	r24, r22
     d7c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	return 0;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	08 95       	ret

00000d9e <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <horizontal+0x12>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <horizontal+0x14>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	7c 83       	std	Y+4, r23	; 0x04
     dbc:	6b 83       	std	Y+3, r22	; 0x03
	
	ASYNC(self->button, buttonCheckerLR, 0);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	fc 01       	movw	r30, r24
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	95 81       	ldd	r25, Z+5	; 0x05
     dc8:	c1 2c       	mov	r12, r1
     dca:	d1 2c       	mov	r13, r1
     dcc:	0f 2e       	mov	r0, r31
     dce:	fb e5       	ldi	r31, 0x5B	; 91
     dd0:	ef 2e       	mov	r14, r31
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	ff 2e       	mov	r15, r31
     dd6:	f0 2d       	mov	r31, r0
     dd8:	8c 01       	movw	r16, r24
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	a9 01       	movw	r20, r18
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	cb 01       	movw	r24, r22
     de6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	return 0;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
}
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	08 95       	ret

00000e08 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <vertandcent+0x12>
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <vertandcent+0x14>
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	7c 83       	std	Y+4, r23	; 0x04
     e26:	6b 83       	std	Y+3, r22	; 0x03
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	fc 01       	movw	r30, r24
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	95 81       	ldd	r25, Z+5	; 0x05
     e32:	c1 2c       	mov	r12, r1
     e34:	d1 2c       	mov	r13, r1
     e36:	0f 2e       	mov	r0, r31
     e38:	f3 e9       	ldi	r31, 0x93	; 147
     e3a:	ef 2e       	mov	r14, r31
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	ff 2e       	mov	r15, r31
     e40:	f0 2d       	mov	r31, r0
     e42:	8c 01       	movw	r16, r24
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	cb 01       	movw	r24, r22
     e50:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	return 0;
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	08 95       	ret

00000e72 <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	00 d0       	rcall	.+0      	; 0xe84 <startProgram+0x12>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     e8c:	c1 2c       	mov	r12, r1
     e8e:	d1 2c       	mov	r13, r1
     e90:	0f 2e       	mov	r0, r31
     e92:	fd ea       	ldi	r31, 0xAD	; 173
     e94:	ef 2e       	mov	r14, r31
     e96:	f7 e0       	ldi	r31, 0x07	; 7
     e98:	ff 2e       	mov	r15, r31
     e9a:	f0 2d       	mov	r31, r0
     e9c:	0a e0       	ldi	r16, 0x0A	; 10
     e9e:	11 e0       	ldi	r17, 0x01	; 1
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	a9 01       	movw	r20, r18
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	cb 01       	movw	r24, r22
     eac:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	ASYNC(&pulseGen2, setPulse, 0);
     eb0:	c1 2c       	mov	r12, r1
     eb2:	d1 2c       	mov	r13, r1
     eb4:	0f 2e       	mov	r0, r31
     eb6:	fd ea       	ldi	r31, 0xAD	; 173
     eb8:	ef 2e       	mov	r14, r31
     eba:	f7 e0       	ldi	r31, 0x07	; 7
     ebc:	ff 2e       	mov	r15, r31
     ebe:	f0 2d       	mov	r31, r0
     ec0:	04 e1       	ldi	r16, 0x14	; 20
     ec2:	11 e0       	ldi	r17, 0x01	; 1
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	a9 01       	movw	r20, r18
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	cb 01       	movw	r24, r22
     ed0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	c1 2c       	mov	r12, r1
     eda:	d1 2c       	mov	r13, r1
     edc:	0f 2e       	mov	r0, r31
     ede:	f4 e4       	ldi	r31, 0x44	; 68
     ee0:	ef 2e       	mov	r14, r31
     ee2:	f5 e0       	ldi	r31, 0x05	; 5
     ee4:	ff 2e       	mov	r15, r31
     ee6:	f0 2d       	mov	r31, r0
     ee8:	8c 01       	movw	r16, r24
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	cb 01       	movw	r24, r22
     ef6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	
	// AFTER(MSEC(500), &button, pressSimulator, 0);
	
	return 0;
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <main>:

int main(void) {
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	// Initiera timer/klocka via avr_init().
	avr_init();
     f1c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     f20:	0e 94 b7 03 	call	0x76e	; 0x76e <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     f24:	0e 94 4d 00 	call	0x9a	; 0x9a <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	6f ec       	ldi	r22, 0xCF	; 207
     f2c:	76 e0       	ldi	r23, 0x06	; 6
     f2e:	81 e3       	ldi	r24, 0x31	; 49
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 99 1a 	call	0x3532	; 0x3532 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     f36:	42 e0       	ldi	r20, 0x02	; 2
     f38:	64 e0       	ldi	r22, 0x04	; 4
     f3a:	77 e0       	ldi	r23, 0x07	; 7
     f3c:	81 e3       	ldi	r24, 0x31	; 49
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	0e 94 99 1a 	call	0x3532	; 0x3532 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	69 e3       	ldi	r22, 0x39	; 57
     f4a:	77 e0       	ldi	r23, 0x07	; 7
     f4c:	8e e1       	ldi	r24, 0x1E	; 30
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <tinytimber>
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     f5a:	8f 92       	push	r8
     f5c:	9f 92       	push	r9
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 d0       	rcall	.+0      	; 0xf74 <setPulse+0x1a>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <setPulse+0x1c>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <setPulse+0x1e>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	7e 83       	std	Y+6, r23	; 0x06
     f82:	6d 83       	std	Y+5, r22	; 0x05
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	fc 01       	movw	r30, r24
     f8a:	84 81       	ldd	r24, Z+4	; 0x04
     f8c:	88 23       	and	r24, r24
     f8e:	e9 f4       	brne	.+58     	; 0xfca <setPulse+0x70>
	    ASYNC(self->wbit, writeBit, 0);
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	fc 01       	movw	r30, r24
     f96:	87 81       	ldd	r24, Z+7	; 0x07
     f98:	90 85       	ldd	r25, Z+8	; 0x08
     f9a:	c1 2c       	mov	r12, r1
     f9c:	d1 2c       	mov	r13, r1
     f9e:	0f 2e       	mov	r0, r31
     fa0:	fb e2       	ldi	r31, 0x2B	; 43
     fa2:	ef 2e       	mov	r14, r31
     fa4:	fb e1       	ldi	r31, 0x1B	; 27
     fa6:	ff 2e       	mov	r15, r31
     fa8:	f0 2d       	mov	r31, r0
     faa:	8c 01       	movw	r16, r24
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	cb 01       	movw	r24, r22
     fb8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
		self->pulseActive = false;
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	fc 01       	movw	r30, r24
     fc2:	11 86       	std	Z+9, r1	; 0x09
	    return 0;
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	67 c0       	rjmp	.+206    	; 0x1098 <setPulse+0x13e>
    }
	
	// Inom setPulse callar vi med arg 1, så arg == 0 är utanför denna funktion.
    if (arg == 0) { // Om den är utanför,
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	89 2b       	or	r24, r25
     fd0:	71 f4       	brne	.+28     	; 0xfee <setPulse+0x94>
	    if (self->pulseActive) { // Om den redan är aktiv returna bara,
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	fc 01       	movw	r30, r24
     fd8:	81 85       	ldd	r24, Z+9	; 0x09
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <setPulse+0x8a>
		    return 0;
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	5a c0       	rjmp	.+180    	; 0x1098 <setPulse+0x13e>
	    }
	    self->pulseActive = true; // Om den inte är aktiv, sätt den till aktiv och fortsätt
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	fc 01       	movw	r30, r24
     fec:	21 87       	std	Z+9, r18	; 0x09
    } // Sedan kommer SetPulse, 1 after att skippa denna check eftersom den passar arg = 1.
	
	// Annars toggla outputHigh.
    ASYNC(self->wbit, toggleBit, 0);
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	fc 01       	movw	r30, r24
     ff4:	87 81       	ldd	r24, Z+7	; 0x07
     ff6:	90 85       	ldd	r25, Z+8	; 0x08
     ff8:	c1 2c       	mov	r12, r1
     ffa:	d1 2c       	mov	r13, r1
     ffc:	0f 2e       	mov	r0, r31
     ffe:	f2 e7       	ldi	r31, 0x72	; 114
    1000:	ef 2e       	mov	r14, r31
    1002:	fb e1       	ldi	r31, 0x1B	; 27
    1004:	ff 2e       	mov	r15, r31
    1006:	f0 2d       	mov	r31, r0
    1008:	8c 01       	movw	r16, r24
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	a9 01       	movw	r20, r18
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	cb 01       	movw	r24, r22
    1016:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
	
	// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
    int delay = 1000 / self->frec;
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	fc 01       	movw	r30, r24
    1020:	84 81       	ldd	r24, Z+4	; 0x04
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	88 ee       	ldi	r24, 0xE8	; 232
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	b9 01       	movw	r22, r18
    102c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__divmodhi4>
    1030:	cb 01       	movw	r24, r22
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
    AFTER(MSEC(delay), self, setPulse, 1);
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	9c 01       	movw	r18, r24
    103c:	99 0f       	add	r25, r25
    103e:	44 0b       	sbc	r20, r20
    1040:	55 0b       	sbc	r21, r21
    1042:	8d e7       	ldi	r24, 0x7D	; 125
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	dc 01       	movw	r26, r24
    1048:	0e 94 cf 1b 	call	0x379e	; 0x379e <__muluhisi3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bb 23       	and	r27, r27
    1052:	1c f4       	brge	.+6      	; 0x105a <setPulse+0x100>
    1054:	03 96       	adiw	r24, 0x03	; 3
    1056:	a1 1d       	adc	r26, r1
    1058:	b1 1d       	adc	r27, r1
    105a:	b5 95       	asr	r27
    105c:	a7 95       	ror	r26
    105e:	97 95       	ror	r25
    1060:	87 95       	ror	r24
    1062:	b5 95       	asr	r27
    1064:	a7 95       	ror	r26
    1066:	97 95       	ror	r25
    1068:	87 95       	ror	r24
    106a:	4c 01       	movw	r8, r24
    106c:	5d 01       	movw	r10, r26
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	cc 24       	eor	r12, r12
    1074:	c3 94       	inc	r12
    1076:	d1 2c       	mov	r13, r1
    1078:	0f 2e       	mov	r0, r31
    107a:	fd ea       	ldi	r31, 0xAD	; 173
    107c:	ef 2e       	mov	r14, r31
    107e:	f7 e0       	ldi	r31, 0x07	; 7
    1080:	ff 2e       	mov	r15, r31
    1082:	f0 2d       	mov	r31, r0
    1084:	8c 01       	movw	r16, r24
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	c5 01       	movw	r24, r10
    108e:	b4 01       	movw	r22, r8
    1090:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
    return 0;
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
}
    1098:	26 96       	adiw	r28, 0x06	; 6
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	bf 90       	pop	r11
    10b6:	af 90       	pop	r10
    10b8:	9f 90       	pop	r9
    10ba:	8f 90       	pop	r8
    10bc:	08 95       	ret

000010be <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <getFrec+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <getFrec+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	7c 83       	std	Y+4, r23	; 0x04
    10d0:	6b 83       	std	Y+3, r22	; 0x03
	return self->frec;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	9a 81       	ldd	r25, Y+2	; 0x02
    10d6:	fc 01       	movw	r30, r24
    10d8:	84 81       	ldd	r24, Z+4	; 0x04
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <FrecInc+0x12>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <FrecInc+0x14>
    1100:	1f 92       	push	r1
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	9b 83       	std	Y+3, r25	; 0x03
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	7d 83       	std	Y+5, r23	; 0x05
    110c:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char old = self->frec;
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	fc 01       	movw	r30, r24
    1114:	84 81       	ldd	r24, Z+4	; 0x04
    1116:	89 83       	std	Y+1, r24	; 0x01
    if (self->frec < 99) {
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	9b 81       	ldd	r25, Y+3	; 0x03
    111c:	fc 01       	movw	r30, r24
    111e:	84 81       	ldd	r24, Z+4	; 0x04
    1120:	83 36       	cpi	r24, 0x63	; 99
    1122:	50 f4       	brcc	.+20     	; 0x1138 <FrecInc+0x4c>
	    self->frec++;
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	fc 01       	movw	r30, r24
    112a:	84 81       	ldd	r24, Z+4	; 0x04
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	28 0f       	add	r18, r24
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	9b 81       	ldd	r25, Y+3	; 0x03
    1134:	fc 01       	movw	r30, r24
    1136:	24 83       	std	Z+4, r18	; 0x04
    }
    // Om går från 0 till mer än 0 starta.
    if (old == 0 && self->frec > 0) {
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 23       	and	r24, r24
    113c:	c9 f4       	brne	.+50     	; 0x1170 <FrecInc+0x84>
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	9b 81       	ldd	r25, Y+3	; 0x03
    1142:	fc 01       	movw	r30, r24
    1144:	84 81       	ldd	r24, Z+4	; 0x04
    1146:	88 23       	and	r24, r24
    1148:	99 f0       	breq	.+38     	; 0x1170 <FrecInc+0x84>
	    ASYNC(self, setPulse, 0);
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	c1 2c       	mov	r12, r1
    1150:	d1 2c       	mov	r13, r1
    1152:	0f 2e       	mov	r0, r31
    1154:	fd ea       	ldi	r31, 0xAD	; 173
    1156:	ef 2e       	mov	r14, r31
    1158:	f7 e0       	ldi	r31, 0x07	; 7
    115a:	ff 2e       	mov	r15, r31
    115c:	f0 2d       	mov	r31, r0
    115e:	8c 01       	movw	r16, r24
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	cb 01       	movw	r24, r22
    116c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
    }
    return self->frec;
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	fc 01       	movw	r30, r24
    1176:	84 81       	ldd	r24, Z+4	; 0x04
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    }
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	08 95       	ret

00001198 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	00 d0       	rcall	.+0      	; 0x119e <FrecDec+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <FrecDec+0x8>
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	7c 83       	std	Y+4, r23	; 0x04
    11aa:	6b 83       	std	Y+3, r22	; 0x03
	if (self->frec > 0) {
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	fc 01       	movw	r30, r24
    11b2:	84 81       	ldd	r24, Z+4	; 0x04
    11b4:	88 23       	and	r24, r24
    11b6:	51 f0       	breq	.+20     	; 0x11cc <FrecDec+0x34>
		self->frec--;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	fc 01       	movw	r30, r24
    11be:	84 81       	ldd	r24, Z+4	; 0x04
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	28 0f       	add	r18, r24
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	fc 01       	movw	r30, r24
    11ca:	24 83       	std	Z+4, r18	; 0x04
	}
	return self->frec;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	fc 01       	movw	r30, r24
    11d2:	84 81       	ldd	r24, Z+4	; 0x04
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <FrecReset+0x12>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <FrecReset+0x14>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	7c 83       	std	Y+4, r23	; 0x04
    1204:	6b 83       	std	Y+3, r22	; 0x03
    if (self->frec == 0) {
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	9a 81       	ldd	r25, Y+2	; 0x02
    120a:	fc 01       	movw	r30, r24
    120c:	84 81       	ldd	r24, Z+4	; 0x04
    120e:	88 23       	and	r24, r24
    1210:	11 f5       	brne	.+68     	; 0x1256 <FrecReset+0x70>
	    self->frec = self->frec_old;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	fc 01       	movw	r30, r24
    1218:	25 81       	ldd	r18, Z+5	; 0x05
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	fc 01       	movw	r30, r24
    1220:	24 83       	std	Z+4, r18	; 0x04
	    if (self->frec > 0) {
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	fc 01       	movw	r30, r24
    1228:	84 81       	ldd	r24, Z+4	; 0x04
    122a:	88 23       	and	r24, r24
    122c:	b1 f1       	breq	.+108    	; 0x129a <FrecReset+0xb4>
		    ASYNC(self, setPulse, 0);
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	0f 2e       	mov	r0, r31
    1238:	fd ea       	ldi	r31, 0xAD	; 173
    123a:	ef 2e       	mov	r14, r31
    123c:	f7 e0       	ldi	r31, 0x07	; 7
    123e:	ff 2e       	mov	r15, r31
    1240:	f0 2d       	mov	r31, r0
    1242:	8c 01       	movw	r16, r24
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	cb 01       	movw	r24, r22
    1250:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
    1254:	22 c0       	rjmp	.+68     	; 0x129a <FrecReset+0xb4>
	    }
	    } else {
	    self->frec_old = self->frec;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	fc 01       	movw	r30, r24
    125c:	24 81       	ldd	r18, Z+4	; 0x04
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	fc 01       	movw	r30, r24
    1264:	25 83       	std	Z+5, r18	; 0x05
	    self->frec = 0;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	fc 01       	movw	r30, r24
    126c:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	fc 01       	movw	r30, r24
    1274:	87 81       	ldd	r24, Z+7	; 0x07
    1276:	90 85       	ldd	r25, Z+8	; 0x08
    1278:	c1 2c       	mov	r12, r1
    127a:	d1 2c       	mov	r13, r1
    127c:	0f 2e       	mov	r0, r31
    127e:	fb e2       	ldi	r31, 0x2B	; 43
    1280:	ef 2e       	mov	r14, r31
    1282:	fb e1       	ldi	r31, 0x1B	; 27
    1284:	ff 2e       	mov	r15, r31
    1286:	f0 2d       	mov	r31, r0
    1288:	8c 01       	movw	r16, r24
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	cb 01       	movw	r24, r22
    1296:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
    }
    return 0;
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	08 95       	ret

000012b8 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	CLKPR = 0x80;
    12c0:	81 e6       	ldi	r24, 0x61	; 97
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	20 e8       	ldi	r18, 0x80	; 128
    12c6:	fc 01       	movw	r30, r24
    12c8:	20 83       	st	Z, r18
	CLKPR = 0x00;
    12ca:	81 e6       	ldi	r24, 0x61	; 97
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	fc 01       	movw	r30, r24
    12d0:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
    12d2:	84 e2       	ldi	r24, 0x24	; 36
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	24 e2       	ldi	r18, 0x24	; 36
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	2f 77       	andi	r18, 0x7F	; 127
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
    12e4:	85 e2       	ldi	r24, 0x25	; 37
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	25 e2       	ldi	r18, 0x25	; 37
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	f9 01       	movw	r30, r18
    12ee:	20 81       	ld	r18, Z
    12f0:	20 68       	ori	r18, 0x80	; 128
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
    12f6:	81 e8       	ldi	r24, 0x81	; 129
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	21 e8       	ldi	r18, 0x81	; 129
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	f9 01       	movw	r30, r18
    1300:	20 81       	ld	r18, Z
    1302:	2d 60       	ori	r18, 0x0D	; 13
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
	
	TCNT1 = 0;
    1308:	84 e8       	ldi	r24, 0x84	; 132
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	fc 01       	movw	r30, r24
    130e:	11 82       	std	Z+1, r1	; 0x01
    1310:	10 82       	st	Z, r1
	
	TIMSK1 |= (1 << OCIE1A);
    1312:	8f e6       	ldi	r24, 0x6F	; 111
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	2f e6       	ldi	r18, 0x6F	; 111
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	22 60       	ori	r18, 0x02	; 2
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
    1324:	88 e8       	ldi	r24, 0x88	; 136
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	22 ec       	ldi	r18, 0xC2	; 194
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	fc 01       	movw	r30, r24
    132e:	31 83       	std	Z+1, r19	; 0x01
    1330:	20 83       	st	Z, r18
};
    1332:	00 00       	nop
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <__vector_1>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    136a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    136e:	09 2e       	mov	r0, r25
    1370:	00 0c       	add	r0, r0
    1372:	aa 0b       	sbc	r26, r26
    1374:	bb 0b       	sbc	r27, r27
    1376:	ac 01       	movw	r20, r24
    1378:	33 27       	eor	r19, r19
    137a:	22 27       	eor	r18, r18
    137c:	84 e8       	ldi	r24, 0x84	; 132
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	fc 01       	movw	r30, r24
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	cc 01       	movw	r24, r24
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	82 2b       	or	r24, r18
    138e:	93 2b       	or	r25, r19
    1390:	a4 2b       	or	r26, r20
    1392:	b5 2b       	or	r27, r21
    1394:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1398:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    139c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    13a0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    13a4:	86 e3       	ldi	r24, 0x36	; 54
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	fc 01       	movw	r30, r24
    13aa:	80 81       	ld	r24, Z
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	99 27       	eor	r25, r25
    13b4:	89 2b       	or	r24, r25
    13b6:	01 f1       	breq	.+64     	; 0x13f8 <__vector_1+0xbe>
    13b8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    13bc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	09 2e       	mov	r0, r25
    13c4:	00 0c       	add	r0, r0
    13c6:	aa 0b       	sbc	r26, r26
    13c8:	bb 0b       	sbc	r27, r27
    13ca:	ac 01       	movw	r20, r24
    13cc:	33 27       	eor	r19, r19
    13ce:	22 27       	eor	r18, r18
    13d0:	84 e8       	ldi	r24, 0x84	; 132
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	fc 01       	movw	r30, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	cc 01       	movw	r24, r24
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	82 2b       	or	r24, r18
    13e2:	93 2b       	or	r25, r19
    13e4:	a4 2b       	or	r26, r20
    13e6:	b5 2b       	or	r27, r21
    13e8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    13ec:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    13f0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    13f4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    13f8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <mtable>
    13fc:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <mtable+0x1>
    1400:	89 2b       	or	r24, r25
    1402:	61 f0       	breq	.+24     	; 0x141c <__vector_1+0xe2>
    1404:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <mtable>
    1408:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <mtable+0x1>
    140c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable>
    1410:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1>
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	09 95       	icall
    141c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1420:	00 00       	nop
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1444:	0f 90       	pop	r0
    1446:	1f 90       	pop	r1
    1448:	18 95       	reti

0000144a <__vector_2>:
    144a:	1f 92       	push	r1
    144c:	0f 92       	push	r0
    144e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	af 93       	push	r26
    1468:	bf 93       	push	r27
    146a:	ef 93       	push	r30
    146c:	ff 93       	push	r31
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    147a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    147e:	09 2e       	mov	r0, r25
    1480:	00 0c       	add	r0, r0
    1482:	aa 0b       	sbc	r26, r26
    1484:	bb 0b       	sbc	r27, r27
    1486:	ac 01       	movw	r20, r24
    1488:	33 27       	eor	r19, r19
    148a:	22 27       	eor	r18, r18
    148c:	84 e8       	ldi	r24, 0x84	; 132
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	fc 01       	movw	r30, r24
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	cc 01       	movw	r24, r24
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	82 2b       	or	r24, r18
    149e:	93 2b       	or	r25, r19
    14a0:	a4 2b       	or	r26, r20
    14a2:	b5 2b       	or	r27, r21
    14a4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    14a8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    14ac:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    14b0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    14b4:	86 e3       	ldi	r24, 0x36	; 54
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	80 81       	ld	r24, Z
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	99 27       	eor	r25, r25
    14c4:	89 2b       	or	r24, r25
    14c6:	01 f1       	breq	.+64     	; 0x1508 <__vector_2+0xbe>
    14c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    14cc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	09 2e       	mov	r0, r25
    14d4:	00 0c       	add	r0, r0
    14d6:	aa 0b       	sbc	r26, r26
    14d8:	bb 0b       	sbc	r27, r27
    14da:	ac 01       	movw	r20, r24
    14dc:	33 27       	eor	r19, r19
    14de:	22 27       	eor	r18, r18
    14e0:	84 e8       	ldi	r24, 0x84	; 132
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	fc 01       	movw	r30, r24
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	cc 01       	movw	r24, r24
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	82 2b       	or	r24, r18
    14f2:	93 2b       	or	r25, r19
    14f4:	a4 2b       	or	r26, r20
    14f6:	b5 2b       	or	r27, r21
    14f8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    14fc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1500:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1504:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1508:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <mtable+0x2>
    150c:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <mtable+0x3>
    1510:	89 2b       	or	r24, r25
    1512:	61 f0       	breq	.+24     	; 0x152c <__vector_2+0xe2>
    1514:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <mtable+0x2>
    1518:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <mtable+0x3>
    151c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x2>
    1520:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x3>
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	f9 01       	movw	r30, r18
    152a:	09 95       	icall
    152c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1530:	00 00       	nop
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	0f 90       	pop	r0
    1550:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_3>:
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    158a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    158e:	09 2e       	mov	r0, r25
    1590:	00 0c       	add	r0, r0
    1592:	aa 0b       	sbc	r26, r26
    1594:	bb 0b       	sbc	r27, r27
    1596:	ac 01       	movw	r20, r24
    1598:	33 27       	eor	r19, r19
    159a:	22 27       	eor	r18, r18
    159c:	84 e8       	ldi	r24, 0x84	; 132
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	fc 01       	movw	r30, r24
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	cc 01       	movw	r24, r24
    15a8:	a0 e0       	ldi	r26, 0x00	; 0
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	82 2b       	or	r24, r18
    15ae:	93 2b       	or	r25, r19
    15b0:	a4 2b       	or	r26, r20
    15b2:	b5 2b       	or	r27, r21
    15b4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    15b8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    15bc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    15c0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    15c4:	86 e3       	ldi	r24, 0x36	; 54
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	fc 01       	movw	r30, r24
    15ca:	80 81       	ld	r24, Z
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	99 27       	eor	r25, r25
    15d4:	89 2b       	or	r24, r25
    15d6:	01 f1       	breq	.+64     	; 0x1618 <__vector_3+0xbe>
    15d8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    15dc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	09 2e       	mov	r0, r25
    15e4:	00 0c       	add	r0, r0
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	bb 0b       	sbc	r27, r27
    15ea:	ac 01       	movw	r20, r24
    15ec:	33 27       	eor	r19, r19
    15ee:	22 27       	eor	r18, r18
    15f0:	84 e8       	ldi	r24, 0x84	; 132
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	fc 01       	movw	r30, r24
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	cc 01       	movw	r24, r24
    15fc:	a0 e0       	ldi	r26, 0x00	; 0
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	82 2b       	or	r24, r18
    1602:	93 2b       	or	r25, r19
    1604:	a4 2b       	or	r26, r20
    1606:	b5 2b       	or	r27, r21
    1608:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    160c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1610:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1614:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1618:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <mtable+0x4>
    161c:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <mtable+0x5>
    1620:	89 2b       	or	r24, r25
    1622:	61 f0       	breq	.+24     	; 0x163c <__vector_3+0xe2>
    1624:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <mtable+0x4>
    1628:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <mtable+0x5>
    162c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x4>
    1630:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x5>
    1634:	62 e0       	ldi	r22, 0x02	; 2
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	f9 01       	movw	r30, r18
    163a:	09 95       	icall
    163c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1640:	00 00       	nop
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	ff 91       	pop	r31
    1648:	ef 91       	pop	r30
    164a:	bf 91       	pop	r27
    164c:	af 91       	pop	r26
    164e:	9f 91       	pop	r25
    1650:	8f 91       	pop	r24
    1652:	7f 91       	pop	r23
    1654:	6f 91       	pop	r22
    1656:	5f 91       	pop	r21
    1658:	4f 91       	pop	r20
    165a:	3f 91       	pop	r19
    165c:	2f 91       	pop	r18
    165e:	0f 90       	pop	r0
    1660:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <__vector_4>:
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1672:	0f 92       	push	r0
    1674:	11 24       	eor	r1, r1
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    169a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    169e:	09 2e       	mov	r0, r25
    16a0:	00 0c       	add	r0, r0
    16a2:	aa 0b       	sbc	r26, r26
    16a4:	bb 0b       	sbc	r27, r27
    16a6:	ac 01       	movw	r20, r24
    16a8:	33 27       	eor	r19, r19
    16aa:	22 27       	eor	r18, r18
    16ac:	84 e8       	ldi	r24, 0x84	; 132
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	fc 01       	movw	r30, r24
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	cc 01       	movw	r24, r24
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	82 2b       	or	r24, r18
    16be:	93 2b       	or	r25, r19
    16c0:	a4 2b       	or	r26, r20
    16c2:	b5 2b       	or	r27, r21
    16c4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    16c8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    16cc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    16d0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    16d4:	86 e3       	ldi	r24, 0x36	; 54
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	fc 01       	movw	r30, r24
    16da:	80 81       	ld	r24, Z
    16dc:	88 2f       	mov	r24, r24
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	99 27       	eor	r25, r25
    16e4:	89 2b       	or	r24, r25
    16e6:	01 f1       	breq	.+64     	; 0x1728 <__vector_4+0xbe>
    16e8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    16ec:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	09 2e       	mov	r0, r25
    16f4:	00 0c       	add	r0, r0
    16f6:	aa 0b       	sbc	r26, r26
    16f8:	bb 0b       	sbc	r27, r27
    16fa:	ac 01       	movw	r20, r24
    16fc:	33 27       	eor	r19, r19
    16fe:	22 27       	eor	r18, r18
    1700:	84 e8       	ldi	r24, 0x84	; 132
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	fc 01       	movw	r30, r24
    1706:	80 81       	ld	r24, Z
    1708:	91 81       	ldd	r25, Z+1	; 0x01
    170a:	cc 01       	movw	r24, r24
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	82 2b       	or	r24, r18
    1712:	93 2b       	or	r25, r19
    1714:	a4 2b       	or	r26, r20
    1716:	b5 2b       	or	r27, r21
    1718:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    171c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1720:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1724:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1728:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <mtable+0x6>
    172c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <mtable+0x7>
    1730:	89 2b       	or	r24, r25
    1732:	61 f0       	breq	.+24     	; 0x174c <__vector_4+0xe2>
    1734:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <mtable+0x6>
    1738:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <mtable+0x7>
    173c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x6>
    1740:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x7>
    1744:	63 e0       	ldi	r22, 0x03	; 3
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	f9 01       	movw	r30, r18
    174a:	09 95       	icall
    174c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1750:	00 00       	nop
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	ff 91       	pop	r31
    1758:	ef 91       	pop	r30
    175a:	bf 91       	pop	r27
    175c:	af 91       	pop	r26
    175e:	9f 91       	pop	r25
    1760:	8f 91       	pop	r24
    1762:	7f 91       	pop	r23
    1764:	6f 91       	pop	r22
    1766:	5f 91       	pop	r21
    1768:	4f 91       	pop	r20
    176a:	3f 91       	pop	r19
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <__vector_5>:
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    17aa:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    17ae:	09 2e       	mov	r0, r25
    17b0:	00 0c       	add	r0, r0
    17b2:	aa 0b       	sbc	r26, r26
    17b4:	bb 0b       	sbc	r27, r27
    17b6:	ac 01       	movw	r20, r24
    17b8:	33 27       	eor	r19, r19
    17ba:	22 27       	eor	r18, r18
    17bc:	84 e8       	ldi	r24, 0x84	; 132
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	fc 01       	movw	r30, r24
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	cc 01       	movw	r24, r24
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	82 2b       	or	r24, r18
    17ce:	93 2b       	or	r25, r19
    17d0:	a4 2b       	or	r26, r20
    17d2:	b5 2b       	or	r27, r21
    17d4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    17d8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    17dc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    17e0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    17e4:	86 e3       	ldi	r24, 0x36	; 54
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	99 27       	eor	r25, r25
    17f4:	89 2b       	or	r24, r25
    17f6:	01 f1       	breq	.+64     	; 0x1838 <__vector_5+0xbe>
    17f8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    17fc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	09 2e       	mov	r0, r25
    1804:	00 0c       	add	r0, r0
    1806:	aa 0b       	sbc	r26, r26
    1808:	bb 0b       	sbc	r27, r27
    180a:	ac 01       	movw	r20, r24
    180c:	33 27       	eor	r19, r19
    180e:	22 27       	eor	r18, r18
    1810:	84 e8       	ldi	r24, 0x84	; 132
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	fc 01       	movw	r30, r24
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	cc 01       	movw	r24, r24
    181c:	a0 e0       	ldi	r26, 0x00	; 0
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	82 2b       	or	r24, r18
    1822:	93 2b       	or	r25, r19
    1824:	a4 2b       	or	r26, r20
    1826:	b5 2b       	or	r27, r21
    1828:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    182c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1830:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1834:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1838:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <mtable+0x8>
    183c:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <mtable+0x9>
    1840:	89 2b       	or	r24, r25
    1842:	61 f0       	breq	.+24     	; 0x185c <__vector_5+0xe2>
    1844:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <mtable+0x8>
    1848:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <mtable+0x9>
    184c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x8>
    1850:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x9>
    1854:	64 e0       	ldi	r22, 0x04	; 4
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	f9 01       	movw	r30, r18
    185a:	09 95       	icall
    185c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1860:	00 00       	nop
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	7f 91       	pop	r23
    1874:	6f 91       	pop	r22
    1876:	5f 91       	pop	r21
    1878:	4f 91       	pop	r20
    187a:	3f 91       	pop	r19
    187c:	2f 91       	pop	r18
    187e:	0f 90       	pop	r0
    1880:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <__vector_10>:
    188a:	1f 92       	push	r1
    188c:	0f 92       	push	r0
    188e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1892:	0f 92       	push	r0
    1894:	11 24       	eor	r1, r1
    1896:	2f 93       	push	r18
    1898:	3f 93       	push	r19
    189a:	4f 93       	push	r20
    189c:	5f 93       	push	r21
    189e:	6f 93       	push	r22
    18a0:	7f 93       	push	r23
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	ef 93       	push	r30
    18ac:	ff 93       	push	r31
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    18ba:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    18be:	09 2e       	mov	r0, r25
    18c0:	00 0c       	add	r0, r0
    18c2:	aa 0b       	sbc	r26, r26
    18c4:	bb 0b       	sbc	r27, r27
    18c6:	ac 01       	movw	r20, r24
    18c8:	33 27       	eor	r19, r19
    18ca:	22 27       	eor	r18, r18
    18cc:	84 e8       	ldi	r24, 0x84	; 132
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	fc 01       	movw	r30, r24
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	cc 01       	movw	r24, r24
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	82 2b       	or	r24, r18
    18de:	93 2b       	or	r25, r19
    18e0:	a4 2b       	or	r26, r20
    18e2:	b5 2b       	or	r27, r21
    18e4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    18e8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    18ec:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    18f0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    18f4:	86 e3       	ldi	r24, 0x36	; 54
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	80 81       	ld	r24, Z
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	81 70       	andi	r24, 0x01	; 1
    1902:	99 27       	eor	r25, r25
    1904:	89 2b       	or	r24, r25
    1906:	01 f1       	breq	.+64     	; 0x1948 <__vector_10+0xbe>
    1908:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    190c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	09 2e       	mov	r0, r25
    1914:	00 0c       	add	r0, r0
    1916:	aa 0b       	sbc	r26, r26
    1918:	bb 0b       	sbc	r27, r27
    191a:	ac 01       	movw	r20, r24
    191c:	33 27       	eor	r19, r19
    191e:	22 27       	eor	r18, r18
    1920:	84 e8       	ldi	r24, 0x84	; 132
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	cc 01       	movw	r24, r24
    192c:	a0 e0       	ldi	r26, 0x00	; 0
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	82 2b       	or	r24, r18
    1932:	93 2b       	or	r25, r19
    1934:	a4 2b       	or	r26, r20
    1936:	b5 2b       	or	r27, r21
    1938:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    193c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1940:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1944:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1948:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <mtable+0xa>
    194c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <mtable+0xb>
    1950:	89 2b       	or	r24, r25
    1952:	61 f0       	breq	.+24     	; 0x196c <__vector_10+0xe2>
    1954:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <mtable+0xa>
    1958:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <mtable+0xb>
    195c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xa>
    1960:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xb>
    1964:	65 e0       	ldi	r22, 0x05	; 5
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	09 95       	icall
    196c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1970:	00 00       	nop
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1994:	0f 90       	pop	r0
    1996:	1f 90       	pop	r1
    1998:	18 95       	reti

0000199a <__vector_11>:
    199a:	1f 92       	push	r1
    199c:	0f 92       	push	r0
    199e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    19ca:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    19ce:	09 2e       	mov	r0, r25
    19d0:	00 0c       	add	r0, r0
    19d2:	aa 0b       	sbc	r26, r26
    19d4:	bb 0b       	sbc	r27, r27
    19d6:	ac 01       	movw	r20, r24
    19d8:	33 27       	eor	r19, r19
    19da:	22 27       	eor	r18, r18
    19dc:	84 e8       	ldi	r24, 0x84	; 132
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	fc 01       	movw	r30, r24
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	cc 01       	movw	r24, r24
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	82 2b       	or	r24, r18
    19ee:	93 2b       	or	r25, r19
    19f0:	a4 2b       	or	r26, r20
    19f2:	b5 2b       	or	r27, r21
    19f4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    19f8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    19fc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a00:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a04:	86 e3       	ldi	r24, 0x36	; 54
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	fc 01       	movw	r30, r24
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	99 27       	eor	r25, r25
    1a14:	89 2b       	or	r24, r25
    1a16:	01 f1       	breq	.+64     	; 0x1a58 <__vector_11+0xbe>
    1a18:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1a1c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	09 2e       	mov	r0, r25
    1a24:	00 0c       	add	r0, r0
    1a26:	aa 0b       	sbc	r26, r26
    1a28:	bb 0b       	sbc	r27, r27
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	33 27       	eor	r19, r19
    1a2e:	22 27       	eor	r18, r18
    1a30:	84 e8       	ldi	r24, 0x84	; 132
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	cc 01       	movw	r24, r24
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	82 2b       	or	r24, r18
    1a42:	93 2b       	or	r25, r19
    1a44:	a4 2b       	or	r26, r20
    1a46:	b5 2b       	or	r27, r21
    1a48:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a4c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a50:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a54:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a58:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <mtable+0xc>
    1a5c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <mtable+0xd>
    1a60:	89 2b       	or	r24, r25
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <__vector_11+0xe2>
    1a64:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <mtable+0xc>
    1a68:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <mtable+0xd>
    1a6c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xc>
    1a70:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xd>
    1a74:	66 e0       	ldi	r22, 0x06	; 6
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	f9 01       	movw	r30, r18
    1a7a:	09 95       	icall
    1a7c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1a80:	00 00       	nop
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	ff 91       	pop	r31
    1a88:	ef 91       	pop	r30
    1a8a:	bf 91       	pop	r27
    1a8c:	af 91       	pop	r26
    1a8e:	9f 91       	pop	r25
    1a90:	8f 91       	pop	r24
    1a92:	7f 91       	pop	r23
    1a94:	6f 91       	pop	r22
    1a96:	5f 91       	pop	r21
    1a98:	4f 91       	pop	r20
    1a9a:	3f 91       	pop	r19
    1a9c:	2f 91       	pop	r18
    1a9e:	0f 90       	pop	r0
    1aa0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <__vector_12>:
    1aaa:	1f 92       	push	r1
    1aac:	0f 92       	push	r0
    1aae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 93       	push	r18
    1ab8:	3f 93       	push	r19
    1aba:	4f 93       	push	r20
    1abc:	5f 93       	push	r21
    1abe:	6f 93       	push	r22
    1ac0:	7f 93       	push	r23
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	af 93       	push	r26
    1ac8:	bf 93       	push	r27
    1aca:	ef 93       	push	r30
    1acc:	ff 93       	push	r31
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1ada:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1ade:	09 2e       	mov	r0, r25
    1ae0:	00 0c       	add	r0, r0
    1ae2:	aa 0b       	sbc	r26, r26
    1ae4:	bb 0b       	sbc	r27, r27
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	33 27       	eor	r19, r19
    1aea:	22 27       	eor	r18, r18
    1aec:	84 e8       	ldi	r24, 0x84	; 132
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	fc 01       	movw	r30, r24
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	cc 01       	movw	r24, r24
    1af8:	a0 e0       	ldi	r26, 0x00	; 0
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	82 2b       	or	r24, r18
    1afe:	93 2b       	or	r25, r19
    1b00:	a4 2b       	or	r26, r20
    1b02:	b5 2b       	or	r27, r21
    1b04:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1b08:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1b0c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1b10:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1b14:	86 e3       	ldi	r24, 0x36	; 54
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	fc 01       	movw	r30, r24
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	99 27       	eor	r25, r25
    1b24:	89 2b       	or	r24, r25
    1b26:	01 f1       	breq	.+64     	; 0x1b68 <__vector_12+0xbe>
    1b28:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1b2c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	09 2e       	mov	r0, r25
    1b34:	00 0c       	add	r0, r0
    1b36:	aa 0b       	sbc	r26, r26
    1b38:	bb 0b       	sbc	r27, r27
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	33 27       	eor	r19, r19
    1b3e:	22 27       	eor	r18, r18
    1b40:	84 e8       	ldi	r24, 0x84	; 132
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	fc 01       	movw	r30, r24
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	cc 01       	movw	r24, r24
    1b4c:	a0 e0       	ldi	r26, 0x00	; 0
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	82 2b       	or	r24, r18
    1b52:	93 2b       	or	r25, r19
    1b54:	a4 2b       	or	r26, r20
    1b56:	b5 2b       	or	r27, r21
    1b58:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1b5c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1b60:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1b64:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1b68:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <mtable+0xe>
    1b6c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <mtable+0xf>
    1b70:	89 2b       	or	r24, r25
    1b72:	61 f0       	breq	.+24     	; 0x1b8c <__vector_12+0xe2>
    1b74:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <mtable+0xe>
    1b78:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <mtable+0xf>
    1b7c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xe>
    1b80:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xf>
    1b84:	67 e0       	ldi	r22, 0x07	; 7
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	f9 01       	movw	r30, r18
    1b8a:	09 95       	icall
    1b8c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1b90:	00 00       	nop
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	bf 91       	pop	r27
    1b9c:	af 91       	pop	r26
    1b9e:	9f 91       	pop	r25
    1ba0:	8f 91       	pop	r24
    1ba2:	7f 91       	pop	r23
    1ba4:	6f 91       	pop	r22
    1ba6:	5f 91       	pop	r21
    1ba8:	4f 91       	pop	r20
    1baa:	3f 91       	pop	r19
    1bac:	2f 91       	pop	r18
    1bae:	0f 90       	pop	r0
    1bb0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <__vector_13>:
    1bba:	1f 92       	push	r1
    1bbc:	0f 92       	push	r0
    1bbe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1bc2:	0f 92       	push	r0
    1bc4:	11 24       	eor	r1, r1
    1bc6:	2f 93       	push	r18
    1bc8:	3f 93       	push	r19
    1bca:	4f 93       	push	r20
    1bcc:	5f 93       	push	r21
    1bce:	6f 93       	push	r22
    1bd0:	7f 93       	push	r23
    1bd2:	8f 93       	push	r24
    1bd4:	9f 93       	push	r25
    1bd6:	af 93       	push	r26
    1bd8:	bf 93       	push	r27
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1bea:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1bee:	09 2e       	mov	r0, r25
    1bf0:	00 0c       	add	r0, r0
    1bf2:	aa 0b       	sbc	r26, r26
    1bf4:	bb 0b       	sbc	r27, r27
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	33 27       	eor	r19, r19
    1bfa:	22 27       	eor	r18, r18
    1bfc:	84 e8       	ldi	r24, 0x84	; 132
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	fc 01       	movw	r30, r24
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	cc 01       	movw	r24, r24
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	82 2b       	or	r24, r18
    1c0e:	93 2b       	or	r25, r19
    1c10:	a4 2b       	or	r26, r20
    1c12:	b5 2b       	or	r27, r21
    1c14:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1c18:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1c1c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1c20:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1c24:	86 e3       	ldi	r24, 0x36	; 54
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	80 81       	ld	r24, Z
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	99 27       	eor	r25, r25
    1c34:	89 2b       	or	r24, r25
    1c36:	01 f1       	breq	.+64     	; 0x1c78 <__vector_13+0xbe>
    1c38:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1c3c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	09 2e       	mov	r0, r25
    1c44:	00 0c       	add	r0, r0
    1c46:	aa 0b       	sbc	r26, r26
    1c48:	bb 0b       	sbc	r27, r27
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	33 27       	eor	r19, r19
    1c4e:	22 27       	eor	r18, r18
    1c50:	84 e8       	ldi	r24, 0x84	; 132
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	fc 01       	movw	r30, r24
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	cc 01       	movw	r24, r24
    1c5c:	a0 e0       	ldi	r26, 0x00	; 0
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	82 2b       	or	r24, r18
    1c62:	93 2b       	or	r25, r19
    1c64:	a4 2b       	or	r26, r20
    1c66:	b5 2b       	or	r27, r21
    1c68:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1c6c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1c70:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1c74:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1c78:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <mtable+0x10>
    1c7c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <mtable+0x11>
    1c80:	89 2b       	or	r24, r25
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <__vector_13+0xe2>
    1c84:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <mtable+0x10>
    1c88:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <mtable+0x11>
    1c8c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x10>
    1c90:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x11>
    1c94:	68 e0       	ldi	r22, 0x08	; 8
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	f9 01       	movw	r30, r18
    1c9a:	09 95       	icall
    1c9c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1ca0:	00 00       	nop
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	ff 91       	pop	r31
    1ca8:	ef 91       	pop	r30
    1caa:	bf 91       	pop	r27
    1cac:	af 91       	pop	r26
    1cae:	9f 91       	pop	r25
    1cb0:	8f 91       	pop	r24
    1cb2:	7f 91       	pop	r23
    1cb4:	6f 91       	pop	r22
    1cb6:	5f 91       	pop	r21
    1cb8:	4f 91       	pop	r20
    1cba:	3f 91       	pop	r19
    1cbc:	2f 91       	pop	r18
    1cbe:	0f 90       	pop	r0
    1cc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1cc4:	0f 90       	pop	r0
    1cc6:	1f 90       	pop	r1
    1cc8:	18 95       	reti

00001cca <__vector_14>:
    1cca:	1f 92       	push	r1
    1ccc:	0f 92       	push	r0
    1cce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1cd2:	0f 92       	push	r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	2f 93       	push	r18
    1cd8:	3f 93       	push	r19
    1cda:	4f 93       	push	r20
    1cdc:	5f 93       	push	r21
    1cde:	6f 93       	push	r22
    1ce0:	7f 93       	push	r23
    1ce2:	8f 93       	push	r24
    1ce4:	9f 93       	push	r25
    1ce6:	af 93       	push	r26
    1ce8:	bf 93       	push	r27
    1cea:	ef 93       	push	r30
    1cec:	ff 93       	push	r31
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1cfa:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1cfe:	09 2e       	mov	r0, r25
    1d00:	00 0c       	add	r0, r0
    1d02:	aa 0b       	sbc	r26, r26
    1d04:	bb 0b       	sbc	r27, r27
    1d06:	ac 01       	movw	r20, r24
    1d08:	33 27       	eor	r19, r19
    1d0a:	22 27       	eor	r18, r18
    1d0c:	84 e8       	ldi	r24, 0x84	; 132
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	fc 01       	movw	r30, r24
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	cc 01       	movw	r24, r24
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	82 2b       	or	r24, r18
    1d1e:	93 2b       	or	r25, r19
    1d20:	a4 2b       	or	r26, r20
    1d22:	b5 2b       	or	r27, r21
    1d24:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1d28:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1d2c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1d30:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1d34:	86 e3       	ldi	r24, 0x36	; 54
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	fc 01       	movw	r30, r24
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	81 70       	andi	r24, 0x01	; 1
    1d42:	99 27       	eor	r25, r25
    1d44:	89 2b       	or	r24, r25
    1d46:	01 f1       	breq	.+64     	; 0x1d88 <__vector_14+0xbe>
    1d48:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1d4c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	09 2e       	mov	r0, r25
    1d54:	00 0c       	add	r0, r0
    1d56:	aa 0b       	sbc	r26, r26
    1d58:	bb 0b       	sbc	r27, r27
    1d5a:	ac 01       	movw	r20, r24
    1d5c:	33 27       	eor	r19, r19
    1d5e:	22 27       	eor	r18, r18
    1d60:	84 e8       	ldi	r24, 0x84	; 132
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	fc 01       	movw	r30, r24
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	cc 01       	movw	r24, r24
    1d6c:	a0 e0       	ldi	r26, 0x00	; 0
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	82 2b       	or	r24, r18
    1d72:	93 2b       	or	r25, r19
    1d74:	a4 2b       	or	r26, r20
    1d76:	b5 2b       	or	r27, r21
    1d78:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1d7c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1d80:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1d84:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1d88:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <mtable+0x12>
    1d8c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <mtable+0x13>
    1d90:	89 2b       	or	r24, r25
    1d92:	61 f0       	breq	.+24     	; 0x1dac <__vector_14+0xe2>
    1d94:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <mtable+0x12>
    1d98:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <mtable+0x13>
    1d9c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x12>
    1da0:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x13>
    1da4:	69 e0       	ldi	r22, 0x09	; 9
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	f9 01       	movw	r30, r18
    1daa:	09 95       	icall
    1dac:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1db0:	00 00       	nop
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <__vector_15>:
    1dda:	1f 92       	push	r1
    1ddc:	0f 92       	push	r0
    1dde:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1e0a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1e0e:	09 2e       	mov	r0, r25
    1e10:	00 0c       	add	r0, r0
    1e12:	aa 0b       	sbc	r26, r26
    1e14:	bb 0b       	sbc	r27, r27
    1e16:	ac 01       	movw	r20, r24
    1e18:	33 27       	eor	r19, r19
    1e1a:	22 27       	eor	r18, r18
    1e1c:	84 e8       	ldi	r24, 0x84	; 132
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	fc 01       	movw	r30, r24
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	cc 01       	movw	r24, r24
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	82 2b       	or	r24, r18
    1e2e:	93 2b       	or	r25, r19
    1e30:	a4 2b       	or	r26, r20
    1e32:	b5 2b       	or	r27, r21
    1e34:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1e38:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1e3c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1e40:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1e44:	86 e3       	ldi	r24, 0x36	; 54
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	fc 01       	movw	r30, r24
    1e4a:	80 81       	ld	r24, Z
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	81 70       	andi	r24, 0x01	; 1
    1e52:	99 27       	eor	r25, r25
    1e54:	89 2b       	or	r24, r25
    1e56:	01 f1       	breq	.+64     	; 0x1e98 <__vector_15+0xbe>
    1e58:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1e5c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	09 2e       	mov	r0, r25
    1e64:	00 0c       	add	r0, r0
    1e66:	aa 0b       	sbc	r26, r26
    1e68:	bb 0b       	sbc	r27, r27
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	33 27       	eor	r19, r19
    1e6e:	22 27       	eor	r18, r18
    1e70:	84 e8       	ldi	r24, 0x84	; 132
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	fc 01       	movw	r30, r24
    1e76:	80 81       	ld	r24, Z
    1e78:	91 81       	ldd	r25, Z+1	; 0x01
    1e7a:	cc 01       	movw	r24, r24
    1e7c:	a0 e0       	ldi	r26, 0x00	; 0
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	82 2b       	or	r24, r18
    1e82:	93 2b       	or	r25, r19
    1e84:	a4 2b       	or	r26, r20
    1e86:	b5 2b       	or	r27, r21
    1e88:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1e8c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1e90:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1e94:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1e98:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <mtable+0x14>
    1e9c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <mtable+0x15>
    1ea0:	89 2b       	or	r24, r25
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <__vector_15+0xe2>
    1ea4:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <mtable+0x14>
    1ea8:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <mtable+0x15>
    1eac:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x14>
    1eb0:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x15>
    1eb4:	6a e0       	ldi	r22, 0x0A	; 10
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	f9 01       	movw	r30, r18
    1eba:	09 95       	icall
    1ebc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1ec0:	00 00       	nop
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	ff 91       	pop	r31
    1ec8:	ef 91       	pop	r30
    1eca:	bf 91       	pop	r27
    1ecc:	af 91       	pop	r26
    1ece:	9f 91       	pop	r25
    1ed0:	8f 91       	pop	r24
    1ed2:	7f 91       	pop	r23
    1ed4:	6f 91       	pop	r22
    1ed6:	5f 91       	pop	r21
    1ed8:	4f 91       	pop	r20
    1eda:	3f 91       	pop	r19
    1edc:	2f 91       	pop	r18
    1ede:	0f 90       	pop	r0
    1ee0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ee4:	0f 90       	pop	r0
    1ee6:	1f 90       	pop	r1
    1ee8:	18 95       	reti

00001eea <__vector_16>:
    1eea:	1f 92       	push	r1
    1eec:	0f 92       	push	r0
    1eee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ef2:	0f 92       	push	r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	2f 93       	push	r18
    1ef8:	3f 93       	push	r19
    1efa:	4f 93       	push	r20
    1efc:	5f 93       	push	r21
    1efe:	6f 93       	push	r22
    1f00:	7f 93       	push	r23
    1f02:	8f 93       	push	r24
    1f04:	9f 93       	push	r25
    1f06:	af 93       	push	r26
    1f08:	bf 93       	push	r27
    1f0a:	ef 93       	push	r30
    1f0c:	ff 93       	push	r31
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1f1a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1f1e:	09 2e       	mov	r0, r25
    1f20:	00 0c       	add	r0, r0
    1f22:	aa 0b       	sbc	r26, r26
    1f24:	bb 0b       	sbc	r27, r27
    1f26:	ac 01       	movw	r20, r24
    1f28:	33 27       	eor	r19, r19
    1f2a:	22 27       	eor	r18, r18
    1f2c:	84 e8       	ldi	r24, 0x84	; 132
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	fc 01       	movw	r30, r24
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	cc 01       	movw	r24, r24
    1f38:	a0 e0       	ldi	r26, 0x00	; 0
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	82 2b       	or	r24, r18
    1f3e:	93 2b       	or	r25, r19
    1f40:	a4 2b       	or	r26, r20
    1f42:	b5 2b       	or	r27, r21
    1f44:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1f48:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1f4c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1f50:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1f54:	86 e3       	ldi	r24, 0x36	; 54
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	fc 01       	movw	r30, r24
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	81 70       	andi	r24, 0x01	; 1
    1f62:	99 27       	eor	r25, r25
    1f64:	89 2b       	or	r24, r25
    1f66:	01 f1       	breq	.+64     	; 0x1fa8 <__vector_16+0xbe>
    1f68:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    1f6c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	09 2e       	mov	r0, r25
    1f74:	00 0c       	add	r0, r0
    1f76:	aa 0b       	sbc	r26, r26
    1f78:	bb 0b       	sbc	r27, r27
    1f7a:	ac 01       	movw	r20, r24
    1f7c:	33 27       	eor	r19, r19
    1f7e:	22 27       	eor	r18, r18
    1f80:	84 e8       	ldi	r24, 0x84	; 132
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	fc 01       	movw	r30, r24
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	cc 01       	movw	r24, r24
    1f8c:	a0 e0       	ldi	r26, 0x00	; 0
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	82 2b       	or	r24, r18
    1f92:	93 2b       	or	r25, r19
    1f94:	a4 2b       	or	r26, r20
    1f96:	b5 2b       	or	r27, r21
    1f98:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1f9c:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1fa0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1fa4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1fa8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <mtable+0x16>
    1fac:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <mtable+0x17>
    1fb0:	89 2b       	or	r24, r25
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <__vector_16+0xe2>
    1fb4:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <mtable+0x16>
    1fb8:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <mtable+0x17>
    1fbc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x16>
    1fc0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x17>
    1fc4:	6b e0       	ldi	r22, 0x0B	; 11
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	f9 01       	movw	r30, r18
    1fca:	09 95       	icall
    1fcc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    1fd0:	00 00       	nop
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	ff 91       	pop	r31
    1fd8:	ef 91       	pop	r30
    1fda:	bf 91       	pop	r27
    1fdc:	af 91       	pop	r26
    1fde:	9f 91       	pop	r25
    1fe0:	8f 91       	pop	r24
    1fe2:	7f 91       	pop	r23
    1fe4:	6f 91       	pop	r22
    1fe6:	5f 91       	pop	r21
    1fe8:	4f 91       	pop	r20
    1fea:	3f 91       	pop	r19
    1fec:	2f 91       	pop	r18
    1fee:	0f 90       	pop	r0
    1ff0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    1ff4:	0f 90       	pop	r0
    1ff6:	1f 90       	pop	r1
    1ff8:	18 95       	reti

00001ffa <__vector_17>:
    1ffa:	1f 92       	push	r1
    1ffc:	0f 92       	push	r0
    1ffe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2002:	0f 92       	push	r0
    2004:	11 24       	eor	r1, r1
    2006:	2f 93       	push	r18
    2008:	3f 93       	push	r19
    200a:	4f 93       	push	r20
    200c:	5f 93       	push	r21
    200e:	6f 93       	push	r22
    2010:	7f 93       	push	r23
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    202a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    202e:	09 2e       	mov	r0, r25
    2030:	00 0c       	add	r0, r0
    2032:	aa 0b       	sbc	r26, r26
    2034:	bb 0b       	sbc	r27, r27
    2036:	ac 01       	movw	r20, r24
    2038:	33 27       	eor	r19, r19
    203a:	22 27       	eor	r18, r18
    203c:	84 e8       	ldi	r24, 0x84	; 132
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	cc 01       	movw	r24, r24
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	82 2b       	or	r24, r18
    204e:	93 2b       	or	r25, r19
    2050:	a4 2b       	or	r26, r20
    2052:	b5 2b       	or	r27, r21
    2054:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    2058:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    205c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    2060:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    2064:	86 e3       	ldi	r24, 0x36	; 54
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	fc 01       	movw	r30, r24
    206a:	80 81       	ld	r24, Z
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	81 70       	andi	r24, 0x01	; 1
    2072:	99 27       	eor	r25, r25
    2074:	89 2b       	or	r24, r25
    2076:	01 f1       	breq	.+64     	; 0x20b8 <__vector_17+0xbe>
    2078:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    207c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	09 2e       	mov	r0, r25
    2084:	00 0c       	add	r0, r0
    2086:	aa 0b       	sbc	r26, r26
    2088:	bb 0b       	sbc	r27, r27
    208a:	ac 01       	movw	r20, r24
    208c:	33 27       	eor	r19, r19
    208e:	22 27       	eor	r18, r18
    2090:	84 e8       	ldi	r24, 0x84	; 132
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	fc 01       	movw	r30, r24
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	cc 01       	movw	r24, r24
    209c:	a0 e0       	ldi	r26, 0x00	; 0
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	82 2b       	or	r24, r18
    20a2:	93 2b       	or	r25, r19
    20a4:	a4 2b       	or	r26, r20
    20a6:	b5 2b       	or	r27, r21
    20a8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    20ac:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    20b0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    20b4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    20b8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <mtable+0x18>
    20bc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <mtable+0x19>
    20c0:	89 2b       	or	r24, r25
    20c2:	61 f0       	breq	.+24     	; 0x20dc <__vector_17+0xe2>
    20c4:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <mtable+0x18>
    20c8:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <mtable+0x19>
    20cc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x18>
    20d0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x19>
    20d4:	6c e0       	ldi	r22, 0x0C	; 12
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	f9 01       	movw	r30, r18
    20da:	09 95       	icall
    20dc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    20e0:	00 00       	nop
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2104:	0f 90       	pop	r0
    2106:	1f 90       	pop	r1
    2108:	18 95       	reti

0000210a <__vector_18>:
    210a:	1f 92       	push	r1
    210c:	0f 92       	push	r0
    210e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2112:	0f 92       	push	r0
    2114:	11 24       	eor	r1, r1
    2116:	2f 93       	push	r18
    2118:	3f 93       	push	r19
    211a:	4f 93       	push	r20
    211c:	5f 93       	push	r21
    211e:	6f 93       	push	r22
    2120:	7f 93       	push	r23
    2122:	8f 93       	push	r24
    2124:	9f 93       	push	r25
    2126:	af 93       	push	r26
    2128:	bf 93       	push	r27
    212a:	ef 93       	push	r30
    212c:	ff 93       	push	r31
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    213a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    213e:	09 2e       	mov	r0, r25
    2140:	00 0c       	add	r0, r0
    2142:	aa 0b       	sbc	r26, r26
    2144:	bb 0b       	sbc	r27, r27
    2146:	ac 01       	movw	r20, r24
    2148:	33 27       	eor	r19, r19
    214a:	22 27       	eor	r18, r18
    214c:	84 e8       	ldi	r24, 0x84	; 132
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	fc 01       	movw	r30, r24
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	cc 01       	movw	r24, r24
    2158:	a0 e0       	ldi	r26, 0x00	; 0
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	82 2b       	or	r24, r18
    215e:	93 2b       	or	r25, r19
    2160:	a4 2b       	or	r26, r20
    2162:	b5 2b       	or	r27, r21
    2164:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    2168:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    216c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    2170:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    2174:	86 e3       	ldi	r24, 0x36	; 54
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	fc 01       	movw	r30, r24
    217a:	80 81       	ld	r24, Z
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	81 70       	andi	r24, 0x01	; 1
    2182:	99 27       	eor	r25, r25
    2184:	89 2b       	or	r24, r25
    2186:	01 f1       	breq	.+64     	; 0x21c8 <__vector_18+0xbe>
    2188:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    218c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	09 2e       	mov	r0, r25
    2194:	00 0c       	add	r0, r0
    2196:	aa 0b       	sbc	r26, r26
    2198:	bb 0b       	sbc	r27, r27
    219a:	ac 01       	movw	r20, r24
    219c:	33 27       	eor	r19, r19
    219e:	22 27       	eor	r18, r18
    21a0:	84 e8       	ldi	r24, 0x84	; 132
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	fc 01       	movw	r30, r24
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	cc 01       	movw	r24, r24
    21ac:	a0 e0       	ldi	r26, 0x00	; 0
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	82 2b       	or	r24, r18
    21b2:	93 2b       	or	r25, r19
    21b4:	a4 2b       	or	r26, r20
    21b6:	b5 2b       	or	r27, r21
    21b8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    21bc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    21c0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    21c4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    21c8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <mtable+0x1a>
    21cc:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <mtable+0x1b>
    21d0:	89 2b       	or	r24, r25
    21d2:	61 f0       	breq	.+24     	; 0x21ec <__vector_18+0xe2>
    21d4:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <mtable+0x1a>
    21d8:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <mtable+0x1b>
    21dc:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1a>
    21e0:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1b>
    21e4:	6d e0       	ldi	r22, 0x0D	; 13
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	f9 01       	movw	r30, r18
    21ea:	09 95       	icall
    21ec:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    21f0:	00 00       	nop
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	ff 91       	pop	r31
    21f8:	ef 91       	pop	r30
    21fa:	bf 91       	pop	r27
    21fc:	af 91       	pop	r26
    21fe:	9f 91       	pop	r25
    2200:	8f 91       	pop	r24
    2202:	7f 91       	pop	r23
    2204:	6f 91       	pop	r22
    2206:	5f 91       	pop	r21
    2208:	4f 91       	pop	r20
    220a:	3f 91       	pop	r19
    220c:	2f 91       	pop	r18
    220e:	0f 90       	pop	r0
    2210:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2214:	0f 90       	pop	r0
    2216:	1f 90       	pop	r1
    2218:	18 95       	reti

0000221a <__vector_19>:
    221a:	1f 92       	push	r1
    221c:	0f 92       	push	r0
    221e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2222:	0f 92       	push	r0
    2224:	11 24       	eor	r1, r1
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	4f 93       	push	r20
    222c:	5f 93       	push	r21
    222e:	6f 93       	push	r22
    2230:	7f 93       	push	r23
    2232:	8f 93       	push	r24
    2234:	9f 93       	push	r25
    2236:	af 93       	push	r26
    2238:	bf 93       	push	r27
    223a:	ef 93       	push	r30
    223c:	ff 93       	push	r31
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    224a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    224e:	09 2e       	mov	r0, r25
    2250:	00 0c       	add	r0, r0
    2252:	aa 0b       	sbc	r26, r26
    2254:	bb 0b       	sbc	r27, r27
    2256:	ac 01       	movw	r20, r24
    2258:	33 27       	eor	r19, r19
    225a:	22 27       	eor	r18, r18
    225c:	84 e8       	ldi	r24, 0x84	; 132
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	fc 01       	movw	r30, r24
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	cc 01       	movw	r24, r24
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	82 2b       	or	r24, r18
    226e:	93 2b       	or	r25, r19
    2270:	a4 2b       	or	r26, r20
    2272:	b5 2b       	or	r27, r21
    2274:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    2278:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    227c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    2280:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    2284:	86 e3       	ldi	r24, 0x36	; 54
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	fc 01       	movw	r30, r24
    228a:	80 81       	ld	r24, Z
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	81 70       	andi	r24, 0x01	; 1
    2292:	99 27       	eor	r25, r25
    2294:	89 2b       	or	r24, r25
    2296:	01 f1       	breq	.+64     	; 0x22d8 <__vector_19+0xbe>
    2298:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    229c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	09 2e       	mov	r0, r25
    22a4:	00 0c       	add	r0, r0
    22a6:	aa 0b       	sbc	r26, r26
    22a8:	bb 0b       	sbc	r27, r27
    22aa:	ac 01       	movw	r20, r24
    22ac:	33 27       	eor	r19, r19
    22ae:	22 27       	eor	r18, r18
    22b0:	84 e8       	ldi	r24, 0x84	; 132
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	fc 01       	movw	r30, r24
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	cc 01       	movw	r24, r24
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	82 2b       	or	r24, r18
    22c2:	93 2b       	or	r25, r19
    22c4:	a4 2b       	or	r26, r20
    22c6:	b5 2b       	or	r27, r21
    22c8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    22cc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    22d0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    22d4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    22d8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <mtable+0x1c>
    22dc:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <mtable+0x1d>
    22e0:	89 2b       	or	r24, r25
    22e2:	61 f0       	breq	.+24     	; 0x22fc <__vector_19+0xe2>
    22e4:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <mtable+0x1c>
    22e8:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <mtable+0x1d>
    22ec:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1c>
    22f0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1d>
    22f4:	6e e0       	ldi	r22, 0x0E	; 14
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	f9 01       	movw	r30, r18
    22fa:	09 95       	icall
    22fc:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    2300:	00 00       	nop
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	ff 91       	pop	r31
    2308:	ef 91       	pop	r30
    230a:	bf 91       	pop	r27
    230c:	af 91       	pop	r26
    230e:	9f 91       	pop	r25
    2310:	8f 91       	pop	r24
    2312:	7f 91       	pop	r23
    2314:	6f 91       	pop	r22
    2316:	5f 91       	pop	r21
    2318:	4f 91       	pop	r20
    231a:	3f 91       	pop	r19
    231c:	2f 91       	pop	r18
    231e:	0f 90       	pop	r0
    2320:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2324:	0f 90       	pop	r0
    2326:	1f 90       	pop	r1
    2328:	18 95       	reti

0000232a <__vector_20>:
    232a:	1f 92       	push	r1
    232c:	0f 92       	push	r0
    232e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2332:	0f 92       	push	r0
    2334:	11 24       	eor	r1, r1
    2336:	2f 93       	push	r18
    2338:	3f 93       	push	r19
    233a:	4f 93       	push	r20
    233c:	5f 93       	push	r21
    233e:	6f 93       	push	r22
    2340:	7f 93       	push	r23
    2342:	8f 93       	push	r24
    2344:	9f 93       	push	r25
    2346:	af 93       	push	r26
    2348:	bf 93       	push	r27
    234a:	ef 93       	push	r30
    234c:	ff 93       	push	r31
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    235a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    235e:	09 2e       	mov	r0, r25
    2360:	00 0c       	add	r0, r0
    2362:	aa 0b       	sbc	r26, r26
    2364:	bb 0b       	sbc	r27, r27
    2366:	ac 01       	movw	r20, r24
    2368:	33 27       	eor	r19, r19
    236a:	22 27       	eor	r18, r18
    236c:	84 e8       	ldi	r24, 0x84	; 132
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	fc 01       	movw	r30, r24
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	cc 01       	movw	r24, r24
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	82 2b       	or	r24, r18
    237e:	93 2b       	or	r25, r19
    2380:	a4 2b       	or	r26, r20
    2382:	b5 2b       	or	r27, r21
    2384:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    2388:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    238c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    2390:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    2394:	86 e3       	ldi	r24, 0x36	; 54
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	fc 01       	movw	r30, r24
    239a:	80 81       	ld	r24, Z
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	81 70       	andi	r24, 0x01	; 1
    23a2:	99 27       	eor	r25, r25
    23a4:	89 2b       	or	r24, r25
    23a6:	01 f1       	breq	.+64     	; 0x23e8 <__vector_20+0xbe>
    23a8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    23ac:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	09 2e       	mov	r0, r25
    23b4:	00 0c       	add	r0, r0
    23b6:	aa 0b       	sbc	r26, r26
    23b8:	bb 0b       	sbc	r27, r27
    23ba:	ac 01       	movw	r20, r24
    23bc:	33 27       	eor	r19, r19
    23be:	22 27       	eor	r18, r18
    23c0:	84 e8       	ldi	r24, 0x84	; 132
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	fc 01       	movw	r30, r24
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	cc 01       	movw	r24, r24
    23cc:	a0 e0       	ldi	r26, 0x00	; 0
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	82 2b       	or	r24, r18
    23d2:	93 2b       	or	r25, r19
    23d4:	a4 2b       	or	r26, r20
    23d6:	b5 2b       	or	r27, r21
    23d8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    23dc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    23e0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    23e4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    23e8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <mtable+0x1e>
    23ec:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <mtable+0x1f>
    23f0:	89 2b       	or	r24, r25
    23f2:	61 f0       	breq	.+24     	; 0x240c <__vector_20+0xe2>
    23f4:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <mtable+0x1e>
    23f8:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <mtable+0x1f>
    23fc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1e>
    2400:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1f>
    2404:	6f e0       	ldi	r22, 0x0F	; 15
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	f9 01       	movw	r30, r18
    240a:	09 95       	icall
    240c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    2410:	00 00       	nop
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	ff 91       	pop	r31
    2418:	ef 91       	pop	r30
    241a:	bf 91       	pop	r27
    241c:	af 91       	pop	r26
    241e:	9f 91       	pop	r25
    2420:	8f 91       	pop	r24
    2422:	7f 91       	pop	r23
    2424:	6f 91       	pop	r22
    2426:	5f 91       	pop	r21
    2428:	4f 91       	pop	r20
    242a:	3f 91       	pop	r19
    242c:	2f 91       	pop	r18
    242e:	0f 90       	pop	r0
    2430:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <__vector_21>:
    243a:	1f 92       	push	r1
    243c:	0f 92       	push	r0
    243e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	2f 93       	push	r18
    2448:	3f 93       	push	r19
    244a:	4f 93       	push	r20
    244c:	5f 93       	push	r21
    244e:	6f 93       	push	r22
    2450:	7f 93       	push	r23
    2452:	8f 93       	push	r24
    2454:	9f 93       	push	r25
    2456:	af 93       	push	r26
    2458:	bf 93       	push	r27
    245a:	ef 93       	push	r30
    245c:	ff 93       	push	r31
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    246a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    246e:	09 2e       	mov	r0, r25
    2470:	00 0c       	add	r0, r0
    2472:	aa 0b       	sbc	r26, r26
    2474:	bb 0b       	sbc	r27, r27
    2476:	ac 01       	movw	r20, r24
    2478:	33 27       	eor	r19, r19
    247a:	22 27       	eor	r18, r18
    247c:	84 e8       	ldi	r24, 0x84	; 132
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	fc 01       	movw	r30, r24
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	cc 01       	movw	r24, r24
    2488:	a0 e0       	ldi	r26, 0x00	; 0
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	82 2b       	or	r24, r18
    248e:	93 2b       	or	r25, r19
    2490:	a4 2b       	or	r26, r20
    2492:	b5 2b       	or	r27, r21
    2494:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    2498:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    249c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    24a0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    24a4:	86 e3       	ldi	r24, 0x36	; 54
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	fc 01       	movw	r30, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	81 70       	andi	r24, 0x01	; 1
    24b2:	99 27       	eor	r25, r25
    24b4:	89 2b       	or	r24, r25
    24b6:	01 f1       	breq	.+64     	; 0x24f8 <__vector_21+0xbe>
    24b8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    24bc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	09 2e       	mov	r0, r25
    24c4:	00 0c       	add	r0, r0
    24c6:	aa 0b       	sbc	r26, r26
    24c8:	bb 0b       	sbc	r27, r27
    24ca:	ac 01       	movw	r20, r24
    24cc:	33 27       	eor	r19, r19
    24ce:	22 27       	eor	r18, r18
    24d0:	84 e8       	ldi	r24, 0x84	; 132
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	fc 01       	movw	r30, r24
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	cc 01       	movw	r24, r24
    24dc:	a0 e0       	ldi	r26, 0x00	; 0
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	82 2b       	or	r24, r18
    24e2:	93 2b       	or	r25, r19
    24e4:	a4 2b       	or	r26, r20
    24e6:	b5 2b       	or	r27, r21
    24e8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    24ec:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    24f0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    24f4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    24f8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <mtable+0x20>
    24fc:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <mtable+0x21>
    2500:	89 2b       	or	r24, r25
    2502:	61 f0       	breq	.+24     	; 0x251c <__vector_21+0xe2>
    2504:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <mtable+0x20>
    2508:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <mtable+0x21>
    250c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x20>
    2510:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x21>
    2514:	60 e1       	ldi	r22, 0x10	; 16
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	f9 01       	movw	r30, r18
    251a:	09 95       	icall
    251c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    2520:	00 00       	nop
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2544:	0f 90       	pop	r0
    2546:	1f 90       	pop	r1
    2548:	18 95       	reti

0000254a <__vector_22>:
    254a:	1f 92       	push	r1
    254c:	0f 92       	push	r0
    254e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2552:	0f 92       	push	r0
    2554:	11 24       	eor	r1, r1
    2556:	2f 93       	push	r18
    2558:	3f 93       	push	r19
    255a:	4f 93       	push	r20
    255c:	5f 93       	push	r21
    255e:	6f 93       	push	r22
    2560:	7f 93       	push	r23
    2562:	8f 93       	push	r24
    2564:	9f 93       	push	r25
    2566:	af 93       	push	r26
    2568:	bf 93       	push	r27
    256a:	ef 93       	push	r30
    256c:	ff 93       	push	r31
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    257a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    257e:	09 2e       	mov	r0, r25
    2580:	00 0c       	add	r0, r0
    2582:	aa 0b       	sbc	r26, r26
    2584:	bb 0b       	sbc	r27, r27
    2586:	ac 01       	movw	r20, r24
    2588:	33 27       	eor	r19, r19
    258a:	22 27       	eor	r18, r18
    258c:	84 e8       	ldi	r24, 0x84	; 132
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	fc 01       	movw	r30, r24
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	cc 01       	movw	r24, r24
    2598:	a0 e0       	ldi	r26, 0x00	; 0
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	82 2b       	or	r24, r18
    259e:	93 2b       	or	r25, r19
    25a0:	a4 2b       	or	r26, r20
    25a2:	b5 2b       	or	r27, r21
    25a4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    25a8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    25ac:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    25b0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    25b4:	86 e3       	ldi	r24, 0x36	; 54
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	fc 01       	movw	r30, r24
    25ba:	80 81       	ld	r24, Z
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	81 70       	andi	r24, 0x01	; 1
    25c2:	99 27       	eor	r25, r25
    25c4:	89 2b       	or	r24, r25
    25c6:	01 f1       	breq	.+64     	; 0x2608 <__vector_22+0xbe>
    25c8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    25cc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    25d0:	01 96       	adiw	r24, 0x01	; 1
    25d2:	09 2e       	mov	r0, r25
    25d4:	00 0c       	add	r0, r0
    25d6:	aa 0b       	sbc	r26, r26
    25d8:	bb 0b       	sbc	r27, r27
    25da:	ac 01       	movw	r20, r24
    25dc:	33 27       	eor	r19, r19
    25de:	22 27       	eor	r18, r18
    25e0:	84 e8       	ldi	r24, 0x84	; 132
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	fc 01       	movw	r30, r24
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	cc 01       	movw	r24, r24
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	82 2b       	or	r24, r18
    25f2:	93 2b       	or	r25, r19
    25f4:	a4 2b       	or	r26, r20
    25f6:	b5 2b       	or	r27, r21
    25f8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    25fc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    2600:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    2604:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    2608:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <mtable+0x22>
    260c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <mtable+0x23>
    2610:	89 2b       	or	r24, r25
    2612:	61 f0       	breq	.+24     	; 0x262c <__vector_22+0xe2>
    2614:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <mtable+0x22>
    2618:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <mtable+0x23>
    261c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x22>
    2620:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x23>
    2624:	61 e1       	ldi	r22, 0x11	; 17
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	f9 01       	movw	r30, r18
    262a:	09 95       	icall
    262c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    2630:	00 00       	nop
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <enqueueByDeadline>:
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	28 97       	sbiw	r28, 0x08	; 8
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
    2672:	78 87       	std	Y+8, r23	; 0x08
    2674:	6f 83       	std	Y+7, r22	; 0x07
    2676:	1a 82       	std	Y+2, r1	; 0x02
    2678:	19 82       	std	Y+1, r1	; 0x01
    267a:	8f 81       	ldd	r24, Y+7	; 0x07
    267c:	98 85       	ldd	r25, Y+8	; 0x08
    267e:	fc 01       	movw	r30, r24
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	9c 83       	std	Y+4, r25	; 0x04
    2686:	8b 83       	std	Y+3, r24	; 0x03
    2688:	0b c0       	rjmp	.+22     	; 0x26a0 <enqueueByDeadline+0x46>
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	fc 01       	movw	r30, r24
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	89 2b       	or	r24, r25
    26a6:	99 f0       	breq	.+38     	; 0x26ce <enqueueByDeadline+0x74>
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	fc 01       	movw	r30, r24
    26ae:	26 81       	ldd	r18, Z+6	; 0x06
    26b0:	37 81       	ldd	r19, Z+7	; 0x07
    26b2:	40 85       	ldd	r20, Z+8	; 0x08
    26b4:	51 85       	ldd	r21, Z+9	; 0x09
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	fc 01       	movw	r30, r24
    26bc:	86 81       	ldd	r24, Z+6	; 0x06
    26be:	97 81       	ldd	r25, Z+7	; 0x07
    26c0:	a0 85       	ldd	r26, Z+8	; 0x08
    26c2:	b1 85       	ldd	r27, Z+9	; 0x09
    26c4:	82 17       	cp	r24, r18
    26c6:	93 07       	cpc	r25, r19
    26c8:	a4 07       	cpc	r26, r20
    26ca:	b5 07       	cpc	r27, r21
    26cc:	f4 f6       	brge	.-68     	; 0x268a <enqueueByDeadline+0x30>
    26ce:	8d 81       	ldd	r24, Y+5	; 0x05
    26d0:	9e 81       	ldd	r25, Y+6	; 0x06
    26d2:	2b 81       	ldd	r18, Y+3	; 0x03
    26d4:	3c 81       	ldd	r19, Y+4	; 0x04
    26d6:	fc 01       	movw	r30, r24
    26d8:	31 83       	std	Z+1, r19	; 0x01
    26da:	20 83       	st	Z, r18
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	9a 81       	ldd	r25, Y+2	; 0x02
    26e0:	89 2b       	or	r24, r25
    26e2:	41 f4       	brne	.+16     	; 0x26f4 <enqueueByDeadline+0x9a>
    26e4:	8f 81       	ldd	r24, Y+7	; 0x07
    26e6:	98 85       	ldd	r25, Y+8	; 0x08
    26e8:	2d 81       	ldd	r18, Y+5	; 0x05
    26ea:	3e 81       	ldd	r19, Y+6	; 0x06
    26ec:	fc 01       	movw	r30, r24
    26ee:	31 83       	std	Z+1, r19	; 0x01
    26f0:	20 83       	st	Z, r18
    26f2:	07 c0       	rjmp	.+14     	; 0x2702 <enqueueByDeadline+0xa8>
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	2d 81       	ldd	r18, Y+5	; 0x05
    26fa:	3e 81       	ldd	r19, Y+6	; 0x06
    26fc:	fc 01       	movw	r30, r24
    26fe:	31 83       	std	Z+1, r19	; 0x01
    2700:	20 83       	st	Z, r18
    2702:	00 00       	nop
    2704:	28 96       	adiw	r28, 0x08	; 8
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	08 95       	ret

00002716 <enqueueByBaseline>:
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	28 97       	sbiw	r28, 0x08	; 8
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	78 87       	std	Y+8, r23	; 0x08
    2730:	6f 83       	std	Y+7, r22	; 0x07
    2732:	1a 82       	std	Y+2, r1	; 0x02
    2734:	19 82       	std	Y+1, r1	; 0x01
    2736:	8f 81       	ldd	r24, Y+7	; 0x07
    2738:	98 85       	ldd	r25, Y+8	; 0x08
    273a:	fc 01       	movw	r30, r24
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	8b 83       	std	Y+3, r24	; 0x03
    2744:	0b c0       	rjmp	.+22     	; 0x275c <enqueueByBaseline+0x46>
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	fc 01       	movw	r30, r24
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	89 2b       	or	r24, r25
    2762:	99 f0       	breq	.+38     	; 0x278a <enqueueByBaseline+0x74>
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	9c 81       	ldd	r25, Y+4	; 0x04
    2768:	fc 01       	movw	r30, r24
    276a:	22 81       	ldd	r18, Z+2	; 0x02
    276c:	33 81       	ldd	r19, Z+3	; 0x03
    276e:	44 81       	ldd	r20, Z+4	; 0x04
    2770:	55 81       	ldd	r21, Z+5	; 0x05
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	fc 01       	movw	r30, r24
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	a4 81       	ldd	r26, Z+4	; 0x04
    277e:	b5 81       	ldd	r27, Z+5	; 0x05
    2780:	82 17       	cp	r24, r18
    2782:	93 07       	cpc	r25, r19
    2784:	a4 07       	cpc	r26, r20
    2786:	b5 07       	cpc	r27, r21
    2788:	f4 f6       	brge	.-68     	; 0x2746 <enqueueByBaseline+0x30>
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	2b 81       	ldd	r18, Y+3	; 0x03
    2790:	3c 81       	ldd	r19, Y+4	; 0x04
    2792:	fc 01       	movw	r30, r24
    2794:	31 83       	std	Z+1, r19	; 0x01
    2796:	20 83       	st	Z, r18
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	89 2b       	or	r24, r25
    279e:	41 f4       	brne	.+16     	; 0x27b0 <enqueueByBaseline+0x9a>
    27a0:	8f 81       	ldd	r24, Y+7	; 0x07
    27a2:	98 85       	ldd	r25, Y+8	; 0x08
    27a4:	2d 81       	ldd	r18, Y+5	; 0x05
    27a6:	3e 81       	ldd	r19, Y+6	; 0x06
    27a8:	fc 01       	movw	r30, r24
    27aa:	31 83       	std	Z+1, r19	; 0x01
    27ac:	20 83       	st	Z, r18
    27ae:	07 c0       	rjmp	.+14     	; 0x27be <enqueueByBaseline+0xa8>
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	2d 81       	ldd	r18, Y+5	; 0x05
    27b6:	3e 81       	ldd	r19, Y+6	; 0x06
    27b8:	fc 01       	movw	r30, r24
    27ba:	31 83       	std	Z+1, r19	; 0x01
    27bc:	20 83       	st	Z, r18
    27be:	00 00       	nop
    27c0:	28 96       	adiw	r28, 0x08	; 8
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <dequeue>:
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <dequeue+0x6>
    27d8:	00 d0       	rcall	.+0      	; 0x27da <dequeue+0x8>
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	fc 01       	movw	r30, r24
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	89 2b       	or	r24, r25
    27f6:	59 f0       	breq	.+22     	; 0x280e <dequeue+0x3c>
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	fc 01       	movw	r30, r24
    27fe:	20 81       	ld	r18, Z
    2800:	31 81       	ldd	r19, Z+1	; 0x01
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	fc 01       	movw	r30, r24
    2808:	31 83       	std	Z+1, r19	; 0x01
    280a:	20 83       	st	Z, r18
    280c:	16 c0       	rjmp	.+44     	; 0x283a <dequeue+0x68>
    280e:	8c ee       	ldi	r24, 0xEC	; 236
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	2f ef       	ldi	r18, 0xFF	; 255
    2814:	fc 01       	movw	r30, r24
    2816:	20 83       	st	Z, r18
    2818:	8d ee       	ldi	r24, 0xED	; 237
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	2f ef       	ldi	r18, 0xFF	; 255
    281e:	fc 01       	movw	r30, r24
    2820:	20 83       	st	Z, r18
    2822:	8e ee       	ldi	r24, 0xEE	; 238
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	2f ef       	ldi	r18, 0xFF	; 255
    2828:	fc 01       	movw	r30, r24
    282a:	20 83       	st	Z, r18
    282c:	83 e5       	ldi	r24, 0x53	; 83
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	21 e0       	ldi	r18, 0x01	; 1
    2832:	fc 01       	movw	r30, r24
    2834:	20 83       	st	Z, r18
    2836:	88 95       	sleep
    2838:	f9 cf       	rjmp	.-14     	; 0x282c <dequeue+0x5a>
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <insert>:
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	00 d0       	rcall	.+0      	; 0x2852 <insert+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <insert+0x8>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	7c 83       	std	Y+4, r23	; 0x04
    285e:	6b 83       	std	Y+3, r22	; 0x03
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	fc 01       	movw	r30, r24
    2866:	20 81       	ld	r18, Z
    2868:	31 81       	ldd	r19, Z+1	; 0x01
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	fc 01       	movw	r30, r24
    2870:	31 83       	std	Z+1, r19	; 0x01
    2872:	20 83       	st	Z, r18
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	29 81       	ldd	r18, Y+1	; 0x01
    287a:	3a 81       	ldd	r19, Y+2	; 0x02
    287c:	fc 01       	movw	r30, r24
    287e:	31 83       	std	Z+1, r19	; 0x01
    2880:	20 83       	st	Z, r18
    2882:	00 00       	nop
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <push>:
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	00 d0       	rcall	.+0      	; 0x2898 <push+0x6>
    2898:	00 d0       	rcall	.+0      	; 0x289a <push+0x8>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	7c 83       	std	Y+4, r23	; 0x04
    28a4:	6b 83       	std	Y+3, r22	; 0x03
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	9c 81       	ldd	r25, Y+4	; 0x04
    28aa:	fc 01       	movw	r30, r24
    28ac:	20 81       	ld	r18, Z
    28ae:	31 81       	ldd	r19, Z+1	; 0x01
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	fc 01       	movw	r30, r24
    28b6:	31 83       	std	Z+1, r19	; 0x01
    28b8:	20 83       	st	Z, r18
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	29 81       	ldd	r18, Y+1	; 0x01
    28c0:	3a 81       	ldd	r19, Y+2	; 0x02
    28c2:	fc 01       	movw	r30, r24
    28c4:	31 83       	std	Z+1, r19	; 0x01
    28c6:	20 83       	st	Z, r18
    28c8:	00 00       	nop
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	08 95       	ret

000028d8 <pop>:
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	00 d0       	rcall	.+0      	; 0x28de <pop+0x6>
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <pop+0x8>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	fc 01       	movw	r30, r24
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	9a 81       	ldd	r25, Y+2	; 0x02
    28fa:	fc 01       	movw	r30, r24
    28fc:	20 81       	ld	r18, Z
    28fe:	31 81       	ldd	r19, Z+1	; 0x01
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	9c 81       	ldd	r25, Y+4	; 0x04
    2904:	fc 01       	movw	r30, r24
    2906:	31 83       	std	Z+1, r19	; 0x01
    2908:	20 83       	st	Z, r18
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	df 91       	pop	r29
    2918:	cf 91       	pop	r28
    291a:	08 95       	ret

0000291c <__vector_9>:
    291c:	1f 92       	push	r1
    291e:	0f 92       	push	r0
    2920:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2924:	0f 92       	push	r0
    2926:	11 24       	eor	r1, r1
    2928:	2f 93       	push	r18
    292a:	3f 93       	push	r19
    292c:	4f 93       	push	r20
    292e:	5f 93       	push	r21
    2930:	6f 93       	push	r22
    2932:	7f 93       	push	r23
    2934:	8f 93       	push	r24
    2936:	9f 93       	push	r25
    2938:	af 93       	push	r26
    293a:	bf 93       	push	r27
    293c:	ef 93       	push	r30
    293e:	ff 93       	push	r31
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    294c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <overflows+0x1>
    2956:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <overflows>
    295a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    295e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2962:	89 2b       	or	r24, r25
    2964:	09 f4       	brne	.+2      	; 0x2968 <__vector_9+0x4c>
    2966:	4a c0       	rjmp	.+148    	; 0x29fc <__vector_9+0xe0>
    2968:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    296c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2970:	fc 01       	movw	r30, r24
    2972:	82 81       	ldd	r24, Z+2	; 0x02
    2974:	93 81       	ldd	r25, Z+3	; 0x03
    2976:	a4 81       	ldd	r26, Z+4	; 0x04
    2978:	b5 81       	ldd	r27, Z+5	; 0x05
    297a:	cd 01       	movw	r24, r26
    297c:	bb 27       	eor	r27, r27
    297e:	97 fd       	sbrc	r25, 7
    2980:	b0 95       	com	r27
    2982:	ab 2f       	mov	r26, r27
    2984:	9c 01       	movw	r18, r24
    2986:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    298a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    298e:	28 17       	cp	r18, r24
    2990:	39 07       	cpc	r19, r25
    2992:	a1 f5       	brne	.+104    	; 0x29fc <__vector_9+0xe0>
    2994:	28 e8       	ldi	r18, 0x88	; 136
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    299c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    29a0:	fc 01       	movw	r30, r24
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	a4 81       	ldd	r26, Z+4	; 0x04
    29a8:	b5 81       	ldd	r27, Z+5	; 0x05
    29aa:	ac 01       	movw	r20, r24
    29ac:	84 e8       	ldi	r24, 0x84	; 132
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	fc 01       	movw	r30, r24
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	ba 01       	movw	r22, r20
    29b8:	68 1b       	sub	r22, r24
    29ba:	79 0b       	sbc	r23, r25
    29bc:	cb 01       	movw	r24, r22
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	39 f4       	brne	.+14     	; 0x29d0 <__vector_9+0xb4>
    29c2:	84 e8       	ldi	r24, 0x84	; 132
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	fc 01       	movw	r30, r24
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	01 96       	adiw	r24, 0x01	; 1
    29ce:	09 c0       	rjmp	.+18     	; 0x29e2 <__vector_9+0xc6>
    29d0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    29d4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    29d8:	fc 01       	movw	r30, r24
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	a4 81       	ldd	r26, Z+4	; 0x04
    29e0:	b5 81       	ldd	r27, Z+5	; 0x05
    29e2:	f9 01       	movw	r30, r18
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
    29e8:	8f e6       	ldi	r24, 0x6F	; 111
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	2f e6       	ldi	r18, 0x6F	; 111
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	f9 01       	movw	r30, r18
    29f2:	20 81       	ld	r18, Z
    29f4:	22 60       	ori	r18, 0x02	; 2
    29f6:	fc 01       	movw	r30, r24
    29f8:	20 83       	st	Z, r18
    29fa:	09 c0       	rjmp	.+18     	; 0x2a0e <__vector_9+0xf2>
    29fc:	8f e6       	ldi	r24, 0x6F	; 111
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	2f e6       	ldi	r18, 0x6F	; 111
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	f9 01       	movw	r30, r18
    2a06:	20 81       	ld	r18, Z
    2a08:	2d 7f       	andi	r18, 0xFD	; 253
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18
    2a0e:	00 00       	nop
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2a32:	0f 90       	pop	r0
    2a34:	1f 90       	pop	r1
    2a36:	18 95       	reti

00002a38 <__vector_7>:
    2a38:	1f 92       	push	r1
    2a3a:	0f 92       	push	r0
    2a3c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2a40:	0f 92       	push	r0
    2a42:	11 24       	eor	r1, r1
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	2f 93       	push	r18
    2a4e:	3f 93       	push	r19
    2a50:	4f 93       	push	r20
    2a52:	5f 93       	push	r21
    2a54:	6f 93       	push	r22
    2a56:	7f 93       	push	r23
    2a58:	8f 93       	push	r24
    2a5a:	9f 93       	push	r25
    2a5c:	af 93       	push	r26
    2a5e:	bf 93       	push	r27
    2a60:	ef 93       	push	r30
    2a62:	ff 93       	push	r31
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <__vector_7+0x32>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <__vector_7+0x34>
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    2a74:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2a78:	09 2e       	mov	r0, r25
    2a7a:	00 0c       	add	r0, r0
    2a7c:	aa 0b       	sbc	r26, r26
    2a7e:	bb 0b       	sbc	r27, r27
    2a80:	ac 01       	movw	r20, r24
    2a82:	33 27       	eor	r19, r19
    2a84:	22 27       	eor	r18, r18
    2a86:	84 e8       	ldi	r24, 0x84	; 132
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	cc 01       	movw	r24, r24
    2a92:	a0 e0       	ldi	r26, 0x00	; 0
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	82 2b       	or	r24, r18
    2a98:	93 2b       	or	r25, r19
    2a9a:	a4 2b       	or	r26, r20
    2a9c:	b5 2b       	or	r27, r21
    2a9e:	89 83       	std	Y+1, r24	; 0x01
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	ab 83       	std	Y+3, r26	; 0x03
    2aa4:	bc 83       	std	Y+4, r27	; 0x04
    2aa6:	86 e3       	ldi	r24, 0x36	; 54
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	fc 01       	movw	r30, r24
    2aac:	80 81       	ld	r24, Z
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	81 70       	andi	r24, 0x01	; 1
    2ab4:	99 27       	eor	r25, r25
    2ab6:	89 2b       	or	r24, r25
    2ab8:	29 f1       	breq	.+74     	; 0x2b04 <__vector_7+0xcc>
    2aba:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    2abe:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2ac2:	01 96       	adiw	r24, 0x01	; 1
    2ac4:	09 2e       	mov	r0, r25
    2ac6:	00 0c       	add	r0, r0
    2ac8:	aa 0b       	sbc	r26, r26
    2aca:	bb 0b       	sbc	r27, r27
    2acc:	ac 01       	movw	r20, r24
    2ace:	33 27       	eor	r19, r19
    2ad0:	22 27       	eor	r18, r18
    2ad2:	84 e8       	ldi	r24, 0x84	; 132
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	cc 01       	movw	r24, r24
    2ade:	a0 e0       	ldi	r26, 0x00	; 0
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	82 2b       	or	r24, r18
    2ae4:	93 2b       	or	r25, r19
    2ae6:	a4 2b       	or	r26, r20
    2ae8:	b5 2b       	or	r27, r21
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	ab 83       	std	Y+3, r26	; 0x03
    2af0:	bc 83       	std	Y+4, r27	; 0x04
    2af2:	08 c0       	rjmp	.+16     	; 0x2b04 <__vector_7+0xcc>
    2af4:	86 e5       	ldi	r24, 0x56	; 86
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <dequeue>
    2afc:	64 e5       	ldi	r22, 0x54	; 84
    2afe:	71 e0       	ldi	r23, 0x01	; 1
    2b00:	0e 94 2d 13 	call	0x265a	; 0x265a <enqueueByDeadline>
    2b04:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    2b08:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2b0c:	89 2b       	or	r24, r25
    2b0e:	d1 f0       	breq	.+52     	; 0x2b44 <__vector_7+0x10c>
    2b10:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    2b14:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2b18:	fc 01       	movw	r30, r24
    2b1a:	22 81       	ldd	r18, Z+2	; 0x02
    2b1c:	33 81       	ldd	r19, Z+3	; 0x03
    2b1e:	44 81       	ldd	r20, Z+4	; 0x04
    2b20:	55 81       	ldd	r21, Z+5	; 0x05
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	ab 81       	ldd	r26, Y+3	; 0x03
    2b28:	bc 81       	ldd	r27, Y+4	; 0x04
    2b2a:	79 01       	movw	r14, r18
    2b2c:	8a 01       	movw	r16, r20
    2b2e:	e8 1a       	sub	r14, r24
    2b30:	f9 0a       	sbc	r15, r25
    2b32:	0a 0b       	sbc	r16, r26
    2b34:	1b 0b       	sbc	r17, r27
    2b36:	d8 01       	movw	r26, r16
    2b38:	c7 01       	movw	r24, r14
    2b3a:	18 16       	cp	r1, r24
    2b3c:	19 06       	cpc	r1, r25
    2b3e:	1a 06       	cpc	r1, r26
    2b40:	1b 06       	cpc	r1, r27
    2b42:	c4 f6       	brge	.-80     	; 0x2af4 <__vector_7+0xbc>
    2b44:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    2b48:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2b4c:	89 2b       	or	r24, r25
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <__vector_7+0x11a>
    2b50:	4a c0       	rjmp	.+148    	; 0x2be6 <__vector_7+0x1ae>
    2b52:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    2b56:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	a4 81       	ldd	r26, Z+4	; 0x04
    2b62:	b5 81       	ldd	r27, Z+5	; 0x05
    2b64:	cd 01       	movw	r24, r26
    2b66:	bb 27       	eor	r27, r27
    2b68:	97 fd       	sbrc	r25, 7
    2b6a:	b0 95       	com	r27
    2b6c:	ab 2f       	mov	r26, r27
    2b6e:	9c 01       	movw	r18, r24
    2b70:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    2b74:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2b78:	28 17       	cp	r18, r24
    2b7a:	39 07       	cpc	r19, r25
    2b7c:	a1 f5       	brne	.+104    	; 0x2be6 <__vector_7+0x1ae>
    2b7e:	28 e8       	ldi	r18, 0x88	; 136
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    2b86:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	93 81       	ldd	r25, Z+3	; 0x03
    2b90:	a4 81       	ldd	r26, Z+4	; 0x04
    2b92:	b5 81       	ldd	r27, Z+5	; 0x05
    2b94:	ac 01       	movw	r20, r24
    2b96:	84 e8       	ldi	r24, 0x84	; 132
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	7a 01       	movw	r14, r20
    2ba2:	e8 1a       	sub	r14, r24
    2ba4:	f9 0a       	sbc	r15, r25
    2ba6:	c7 01       	movw	r24, r14
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	39 f4       	brne	.+14     	; 0x2bba <__vector_7+0x182>
    2bac:	84 e8       	ldi	r24, 0x84	; 132
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	09 c0       	rjmp	.+18     	; 0x2bcc <__vector_7+0x194>
    2bba:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    2bbe:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	a4 81       	ldd	r26, Z+4	; 0x04
    2bca:	b5 81       	ldd	r27, Z+5	; 0x05
    2bcc:	f9 01       	movw	r30, r18
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	8f e6       	ldi	r24, 0x6F	; 111
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	2f e6       	ldi	r18, 0x6F	; 111
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	f9 01       	movw	r30, r18
    2bdc:	20 81       	ld	r18, Z
    2bde:	22 60       	ori	r18, 0x02	; 2
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18
    2be4:	09 c0       	rjmp	.+18     	; 0x2bf8 <__vector_7+0x1c0>
    2be6:	8f e6       	ldi	r24, 0x6F	; 111
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	2f e6       	ldi	r18, 0x6F	; 111
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	f9 01       	movw	r30, r18
    2bf0:	20 81       	ld	r18, Z
    2bf2:	2d 7f       	andi	r18, 0xFD	; 253
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	20 83       	st	Z, r18
    2bf8:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    2bfc:	00 00       	nop
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	ff 91       	pop	r31
    2c0c:	ef 91       	pop	r30
    2c0e:	bf 91       	pop	r27
    2c10:	af 91       	pop	r26
    2c12:	9f 91       	pop	r25
    2c14:	8f 91       	pop	r24
    2c16:	7f 91       	pop	r23
    2c18:	6f 91       	pop	r22
    2c1a:	5f 91       	pop	r21
    2c1c:	4f 91       	pop	r20
    2c1e:	3f 91       	pop	r19
    2c20:	2f 91       	pop	r18
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	0f 90       	pop	r0
    2c2c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <dispatch>:
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <dispatch+0x6>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
    2c48:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
    2c4c:	06 96       	adiw	r24, 0x06	; 6
    2c4e:	0e 94 1f 1c 	call	0x383e	; 0x383e <setjmp>
    2c52:	89 2b       	or	r24, r25
    2c54:	69 f4       	brne	.+26     	; 0x2c70 <dispatch+0x3a>
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <current+0x1>
    2c5e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <current>
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	06 96       	adiw	r24, 0x06	; 6
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	0e 94 3f 1c 	call	0x387e	; 0x387e <longjmp>
    2c70:	00 00       	nop
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	08 95       	ret

00002c7c <run>:
    2c7c:	ef 92       	push	r14
    2c7e:	ff 92       	push	r15
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	27 97       	sbiw	r28, 0x07	; 7
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	f8 94       	cli
    2c92:	de bf       	out	0x3e, r29	; 62
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	cd bf       	out	0x3d, r28	; 61
    2c98:	00 91 3d 01 	lds	r16, 0x013D	; 0x80013d <current>
    2c9c:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <current+0x1>
    2ca0:	84 e5       	ldi	r24, 0x54	; 84
    2ca2:	91 e0       	ldi	r25, 0x01	; 1
    2ca4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <dequeue>
    2ca8:	f8 01       	movw	r30, r16
    2caa:	93 83       	std	Z+3, r25	; 0x03
    2cac:	82 83       	std	Z+2, r24	; 0x02
    2cae:	f8 01       	movw	r30, r16
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	88 23       	and	r24, r24
    2cc0:	09 f0       	breq	.+2      	; 0x2cc4 <run+0x48>
    2cc2:	78 94       	sei
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	fc 01       	movw	r30, r24
    2cca:	46 85       	ldd	r20, Z+14	; 0x0e
    2ccc:	57 85       	ldd	r21, Z+15	; 0x0f
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	24 85       	ldd	r18, Z+12	; 0x0c
    2cd6:	35 85       	ldd	r19, Z+13	; 0x0d
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	9c 81       	ldd	r25, Y+4	; 0x04
    2cdc:	fc 01       	movw	r30, r24
    2cde:	82 85       	ldd	r24, Z+10	; 0x0a
    2ce0:	93 85       	ldd	r25, Z+11	; 0x0b
    2ce2:	b9 01       	movw	r22, r18
    2ce4:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <sync>
    2ce8:	8f e5       	ldi	r24, 0x5F	; 95
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	fc 01       	movw	r30, r24
    2cee:	80 81       	ld	r24, Z
    2cf0:	80 78       	andi	r24, 0x80	; 128
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	f8 94       	cli
    2cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfa:	67 e3       	ldi	r22, 0x37	; 55
    2cfc:	71 e0       	ldi	r23, 0x01	; 1
    2cfe:	0e 94 26 14 	call	0x284c	; 0x284c <insert>
    2d02:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <activeStack>
    2d06:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <activeStack+0x1>
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	80 81       	ld	r24, Z
    2d0e:	91 81       	ldd	r25, Z+1	; 0x01
    2d10:	fc 01       	movw	r30, r24
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	9f 83       	std	Y+7, r25	; 0x07
    2d18:	8e 83       	std	Y+6, r24	; 0x06
    2d1a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    2d1e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    2d22:	89 2b       	or	r24, r25
    2d24:	19 f1       	breq	.+70     	; 0x2d6c <run+0xf0>
    2d26:	8e 81       	ldd	r24, Y+6	; 0x06
    2d28:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2a:	89 2b       	or	r24, r25
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <run+0xb4>
    2d2e:	b4 cf       	rjmp	.-152    	; 0x2c98 <run+0x1c>
    2d30:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    2d34:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    2d38:	fc 01       	movw	r30, r24
    2d3a:	26 81       	ldd	r18, Z+6	; 0x06
    2d3c:	37 81       	ldd	r19, Z+7	; 0x07
    2d3e:	40 85       	ldd	r20, Z+8	; 0x08
    2d40:	51 85       	ldd	r21, Z+9	; 0x09
    2d42:	8e 81       	ldd	r24, Y+6	; 0x06
    2d44:	9f 81       	ldd	r25, Y+7	; 0x07
    2d46:	fc 01       	movw	r30, r24
    2d48:	86 81       	ldd	r24, Z+6	; 0x06
    2d4a:	97 81       	ldd	r25, Z+7	; 0x07
    2d4c:	a0 85       	ldd	r26, Z+8	; 0x08
    2d4e:	b1 85       	ldd	r27, Z+9	; 0x09
    2d50:	79 01       	movw	r14, r18
    2d52:	8a 01       	movw	r16, r20
    2d54:	e8 1a       	sub	r14, r24
    2d56:	f9 0a       	sbc	r15, r25
    2d58:	0a 0b       	sbc	r16, r26
    2d5a:	1b 0b       	sbc	r17, r27
    2d5c:	d8 01       	movw	r26, r16
    2d5e:	c7 01       	movw	r24, r14
    2d60:	18 16       	cp	r1, r24
    2d62:	19 06       	cpc	r1, r25
    2d64:	1a 06       	cpc	r1, r26
    2d66:	1b 06       	cpc	r1, r27
    2d68:	0c f0       	brlt	.+2      	; 0x2d6c <run+0xf0>
    2d6a:	96 cf       	rjmp	.-212    	; 0x2c98 <run+0x1c>
    2d6c:	8b e3       	ldi	r24, 0x3B	; 59
    2d6e:	91 e0       	ldi	r25, 0x01	; 1
    2d70:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <pop>
    2d74:	69 e3       	ldi	r22, 0x39	; 57
    2d76:	71 e0       	ldi	r23, 0x01	; 1
    2d78:	0e 94 49 14 	call	0x2892	; 0x2892 <push>
    2d7c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <activeStack>
    2d80:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <activeStack+0x1>
    2d84:	9a 83       	std	Y+2, r25	; 0x02
    2d86:	89 83       	std	Y+1, r24	; 0x01
    2d88:	0a c0       	rjmp	.+20     	; 0x2d9e <run+0x122>
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	fc 01       	movw	r30, r24
    2d90:	84 81       	ldd	r24, Z+4	; 0x04
    2d92:	95 81       	ldd	r25, Z+5	; 0x05
    2d94:	fc 01       	movw	r30, r24
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	fc 01       	movw	r30, r24
    2da4:	84 81       	ldd	r24, Z+4	; 0x04
    2da6:	95 81       	ldd	r25, Z+5	; 0x05
    2da8:	89 2b       	or	r24, r25
    2daa:	79 f7       	brne	.-34     	; 0x2d8a <run+0x10e>
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <dispatch>
    2db4:	71 cf       	rjmp	.-286    	; 0x2c98 <run+0x1c>

00002db6 <idle>:
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <schedule>
    2dc2:	78 94       	sei
    2dc4:	83 e5       	ldi	r24, 0x53	; 83
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	21 e0       	ldi	r18, 0x01	; 1
    2dca:	fc 01       	movw	r30, r24
    2dcc:	20 83       	st	Z, r18
    2dce:	88 95       	sleep
    2dd0:	f9 cf       	rjmp	.-14     	; 0x2dc4 <idle+0xe>

00002dd2 <schedule>:
    2dd2:	ef 92       	push	r14
    2dd4:	ff 92       	push	r15
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <schedule+0xe>
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <activeStack>
    2de8:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <activeStack+0x1>
    2dec:	fc 01       	movw	r30, r24
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    2dfa:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    2dfe:	89 2b       	or	r24, r25
    2e00:	91 f1       	breq	.+100    	; 0x2e66 <schedule+0x94>
    2e02:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <threadPool>
    2e06:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <threadPool+0x1>
    2e0a:	89 2b       	or	r24, r25
    2e0c:	61 f1       	breq	.+88     	; 0x2e66 <schedule+0x94>
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	9a 81       	ldd	r25, Y+2	; 0x02
    2e12:	89 2b       	or	r24, r25
    2e14:	d1 f0       	breq	.+52     	; 0x2e4a <schedule+0x78>
    2e16:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    2e1a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    2e1e:	fc 01       	movw	r30, r24
    2e20:	26 81       	ldd	r18, Z+6	; 0x06
    2e22:	37 81       	ldd	r19, Z+7	; 0x07
    2e24:	40 85       	ldd	r20, Z+8	; 0x08
    2e26:	51 85       	ldd	r21, Z+9	; 0x09
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	86 81       	ldd	r24, Z+6	; 0x06
    2e30:	97 81       	ldd	r25, Z+7	; 0x07
    2e32:	a0 85       	ldd	r26, Z+8	; 0x08
    2e34:	b1 85       	ldd	r27, Z+9	; 0x09
    2e36:	79 01       	movw	r14, r18
    2e38:	8a 01       	movw	r16, r20
    2e3a:	e8 1a       	sub	r14, r24
    2e3c:	f9 0a       	sbc	r15, r25
    2e3e:	0a 0b       	sbc	r16, r26
    2e40:	1b 0b       	sbc	r17, r27
    2e42:	d8 01       	movw	r26, r16
    2e44:	c7 01       	movw	r24, r14
    2e46:	bb 23       	and	r27, r27
    2e48:	74 f4       	brge	.+28     	; 0x2e66 <schedule+0x94>
    2e4a:	89 e3       	ldi	r24, 0x39	; 57
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <pop>
    2e52:	6b e3       	ldi	r22, 0x3B	; 59
    2e54:	71 e0       	ldi	r23, 0x01	; 1
    2e56:	0e 94 49 14 	call	0x2892	; 0x2892 <push>
    2e5a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <activeStack>
    2e5e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <activeStack+0x1>
    2e62:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <dispatch>
    2e66:	00 00       	nop
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	08 95       	ret

00002e7a <async>:
    2e7a:	cf 92       	push	r12
    2e7c:	df 92       	push	r13
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	65 97       	sbiw	r28, 0x15	; 21
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	68 87       	std	Y+8, r22	; 0x08
    2e9c:	79 87       	std	Y+9, r23	; 0x09
    2e9e:	8a 87       	std	Y+10, r24	; 0x0a
    2ea0:	9b 87       	std	Y+11, r25	; 0x0b
    2ea2:	2c 87       	std	Y+12, r18	; 0x0c
    2ea4:	3d 87       	std	Y+13, r19	; 0x0d
    2ea6:	4e 87       	std	Y+14, r20	; 0x0e
    2ea8:	5f 87       	std	Y+15, r21	; 0x0f
    2eaa:	19 8b       	std	Y+17, r17	; 0x11
    2eac:	08 8b       	std	Y+16, r16	; 0x10
    2eae:	fb 8a       	std	Y+19, r15	; 0x13
    2eb0:	ea 8a       	std	Y+18, r14	; 0x12
    2eb2:	dd 8a       	std	Y+21, r13	; 0x15
    2eb4:	cc 8a       	std	Y+20, r12	; 0x14
    2eb6:	8f e5       	ldi	r24, 0x5F	; 95
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	fc 01       	movw	r30, r24
    2ebc:	80 81       	ld	r24, Z
    2ebe:	80 78       	andi	r24, 0x80	; 128
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	f8 94       	cli
    2ec4:	87 e3       	ldi	r24, 0x37	; 55
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <dequeue>
    2ecc:	9f 83       	std	Y+7, r25	; 0x07
    2ece:	8e 83       	std	Y+6, r24	; 0x06
    2ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ed4:	28 89       	ldd	r18, Y+16	; 0x10
    2ed6:	39 89       	ldd	r19, Y+17	; 0x11
    2ed8:	fc 01       	movw	r30, r24
    2eda:	33 87       	std	Z+11, r19	; 0x0b
    2edc:	22 87       	std	Z+10, r18	; 0x0a
    2ede:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee2:	2a 89       	ldd	r18, Y+18	; 0x12
    2ee4:	3b 89       	ldd	r19, Y+19	; 0x13
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	35 87       	std	Z+13, r19	; 0x0d
    2eea:	24 87       	std	Z+12, r18	; 0x0c
    2eec:	8e 81       	ldd	r24, Y+6	; 0x06
    2eee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef0:	2c 89       	ldd	r18, Y+20	; 0x14
    2ef2:	3d 89       	ldd	r19, Y+21	; 0x15
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	37 87       	std	Z+15, r19	; 0x0f
    2ef8:	26 87       	std	Z+14, r18	; 0x0e
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	88 23       	and	r24, r24
    2efe:	69 f0       	breq	.+26     	; 0x2f1a <async+0xa0>
    2f00:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
    2f04:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
    2f08:	fc 01       	movw	r30, r24
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	fc 01       	movw	r30, r24
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	a4 81       	ldd	r26, Z+4	; 0x04
    2f16:	b5 81       	ldd	r27, Z+5	; 0x05
    2f18:	08 c0       	rjmp	.+16     	; 0x2f2a <async+0xb0>
    2f1a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <timestamp>
    2f1e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <timestamp+0x1>
    2f22:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <timestamp+0x2>
    2f26:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <timestamp+0x3>
    2f2a:	28 85       	ldd	r18, Y+8	; 0x08
    2f2c:	39 85       	ldd	r19, Y+9	; 0x09
    2f2e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2f30:	5b 85       	ldd	r21, Y+11	; 0x0b
    2f32:	82 0f       	add	r24, r18
    2f34:	93 1f       	adc	r25, r19
    2f36:	a4 1f       	adc	r26, r20
    2f38:	b5 1f       	adc	r27, r21
    2f3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2f3e:	f9 01       	movw	r30, r18
    2f40:	82 83       	std	Z+2, r24	; 0x02
    2f42:	93 83       	std	Z+3, r25	; 0x03
    2f44:	a4 83       	std	Z+4, r26	; 0x04
    2f46:	b5 83       	std	Z+5, r27	; 0x05
    2f48:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	22 81       	ldd	r18, Z+2	; 0x02
    2f50:	33 81       	ldd	r19, Z+3	; 0x03
    2f52:	44 81       	ldd	r20, Z+4	; 0x04
    2f54:	55 81       	ldd	r21, Z+5	; 0x05
    2f56:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f58:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f5a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f5c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f5e:	18 16       	cp	r1, r24
    2f60:	19 06       	cpc	r1, r25
    2f62:	1a 06       	cpc	r1, r26
    2f64:	1b 06       	cpc	r1, r27
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <async+0xf8>
    2f68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f6c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f6e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f70:	04 c0       	rjmp	.+8      	; 0x2f7a <async+0x100>
    2f72:	8f ef       	ldi	r24, 0xFF	; 255
    2f74:	9f ef       	ldi	r25, 0xFF	; 255
    2f76:	af ef       	ldi	r26, 0xFF	; 255
    2f78:	bf e7       	ldi	r27, 0x7F	; 127
    2f7a:	82 0f       	add	r24, r18
    2f7c:	93 1f       	adc	r25, r19
    2f7e:	a4 1f       	adc	r26, r20
    2f80:	b5 1f       	adc	r27, r21
    2f82:	2e 81       	ldd	r18, Y+6	; 0x06
    2f84:	3f 81       	ldd	r19, Y+7	; 0x07
    2f86:	f9 01       	movw	r30, r18
    2f88:	86 83       	std	Z+6, r24	; 0x06
    2f8a:	97 83       	std	Z+7, r25	; 0x07
    2f8c:	a0 87       	std	Z+8, r26	; 0x08
    2f8e:	b1 87       	std	Z+9, r27	; 0x09
    2f90:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    2f94:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2f98:	09 2e       	mov	r0, r25
    2f9a:	00 0c       	add	r0, r0
    2f9c:	aa 0b       	sbc	r26, r26
    2f9e:	bb 0b       	sbc	r27, r27
    2fa0:	ac 01       	movw	r20, r24
    2fa2:	33 27       	eor	r19, r19
    2fa4:	22 27       	eor	r18, r18
    2fa6:	84 e8       	ldi	r24, 0x84	; 132
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	fc 01       	movw	r30, r24
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	cc 01       	movw	r24, r24
    2fb2:	a0 e0       	ldi	r26, 0x00	; 0
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	82 2b       	or	r24, r18
    2fb8:	93 2b       	or	r25, r19
    2fba:	a4 2b       	or	r26, r20
    2fbc:	b5 2b       	or	r27, r21
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	9a 83       	std	Y+2, r25	; 0x02
    2fc2:	ab 83       	std	Y+3, r26	; 0x03
    2fc4:	bc 83       	std	Y+4, r27	; 0x04
    2fc6:	86 e3       	ldi	r24, 0x36	; 54
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	fc 01       	movw	r30, r24
    2fcc:	80 81       	ld	r24, Z
    2fce:	88 2f       	mov	r24, r24
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	99 27       	eor	r25, r25
    2fd6:	89 2b       	or	r24, r25
    2fd8:	e1 f0       	breq	.+56     	; 0x3012 <async+0x198>
    2fda:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    2fde:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	09 2e       	mov	r0, r25
    2fe6:	00 0c       	add	r0, r0
    2fe8:	aa 0b       	sbc	r26, r26
    2fea:	bb 0b       	sbc	r27, r27
    2fec:	ac 01       	movw	r20, r24
    2fee:	33 27       	eor	r19, r19
    2ff0:	22 27       	eor	r18, r18
    2ff2:	84 e8       	ldi	r24, 0x84	; 132
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	cc 01       	movw	r24, r24
    2ffe:	a0 e0       	ldi	r26, 0x00	; 0
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	82 2b       	or	r24, r18
    3004:	93 2b       	or	r25, r19
    3006:	a4 2b       	or	r26, r20
    3008:	b5 2b       	or	r27, r21
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	ab 83       	std	Y+3, r26	; 0x03
    3010:	bc 83       	std	Y+4, r27	; 0x04
    3012:	8e 81       	ldd	r24, Y+6	; 0x06
    3014:	9f 81       	ldd	r25, Y+7	; 0x07
    3016:	fc 01       	movw	r30, r24
    3018:	22 81       	ldd	r18, Z+2	; 0x02
    301a:	33 81       	ldd	r19, Z+3	; 0x03
    301c:	44 81       	ldd	r20, Z+4	; 0x04
    301e:	55 81       	ldd	r21, Z+5	; 0x05
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	ab 81       	ldd	r26, Y+3	; 0x03
    3026:	bc 81       	ldd	r27, Y+4	; 0x04
    3028:	79 01       	movw	r14, r18
    302a:	8a 01       	movw	r16, r20
    302c:	e8 1a       	sub	r14, r24
    302e:	f9 0a       	sbc	r15, r25
    3030:	0a 0b       	sbc	r16, r26
    3032:	1b 0b       	sbc	r17, r27
    3034:	d8 01       	movw	r26, r16
    3036:	c7 01       	movw	r24, r14
    3038:	18 16       	cp	r1, r24
    303a:	19 06       	cpc	r1, r25
    303c:	1a 06       	cpc	r1, r26
    303e:	1b 06       	cpc	r1, r27
    3040:	0c f0       	brlt	.+2      	; 0x3044 <async+0x1ca>
    3042:	61 c0       	rjmp	.+194    	; 0x3106 <async+0x28c>
    3044:	8e 81       	ldd	r24, Y+6	; 0x06
    3046:	9f 81       	ldd	r25, Y+7	; 0x07
    3048:	66 e5       	ldi	r22, 0x56	; 86
    304a:	71 e0       	ldi	r23, 0x01	; 1
    304c:	0e 94 8b 13 	call	0x2716	; 0x2716 <enqueueByBaseline>
    3050:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    3054:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    3058:	89 2b       	or	r24, r25
    305a:	09 f4       	brne	.+2      	; 0x305e <async+0x1e4>
    305c:	4a c0       	rjmp	.+148    	; 0x30f2 <async+0x278>
    305e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    3062:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    3066:	fc 01       	movw	r30, r24
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	93 81       	ldd	r25, Z+3	; 0x03
    306c:	a4 81       	ldd	r26, Z+4	; 0x04
    306e:	b5 81       	ldd	r27, Z+5	; 0x05
    3070:	cd 01       	movw	r24, r26
    3072:	bb 27       	eor	r27, r27
    3074:	97 fd       	sbrc	r25, 7
    3076:	b0 95       	com	r27
    3078:	ab 2f       	mov	r26, r27
    307a:	9c 01       	movw	r18, r24
    307c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <overflows>
    3080:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <overflows+0x1>
    3084:	28 17       	cp	r18, r24
    3086:	39 07       	cpc	r19, r25
    3088:	a1 f5       	brne	.+104    	; 0x30f2 <async+0x278>
    308a:	28 e8       	ldi	r18, 0x88	; 136
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    3092:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    3096:	fc 01       	movw	r30, r24
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	a4 81       	ldd	r26, Z+4	; 0x04
    309e:	b5 81       	ldd	r27, Z+5	; 0x05
    30a0:	ac 01       	movw	r20, r24
    30a2:	84 e8       	ldi	r24, 0x84	; 132
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	fc 01       	movw	r30, r24
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	7a 01       	movw	r14, r20
    30ae:	e8 1a       	sub	r14, r24
    30b0:	f9 0a       	sbc	r15, r25
    30b2:	c7 01       	movw	r24, r14
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	39 f4       	brne	.+14     	; 0x30c6 <async+0x24c>
    30b8:	84 e8       	ldi	r24, 0x84	; 132
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	fc 01       	movw	r30, r24
    30be:	80 81       	ld	r24, Z
    30c0:	91 81       	ldd	r25, Z+1	; 0x01
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	09 c0       	rjmp	.+18     	; 0x30d8 <async+0x25e>
    30c6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timerQ>
    30ca:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timerQ+0x1>
    30ce:	fc 01       	movw	r30, r24
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	a4 81       	ldd	r26, Z+4	; 0x04
    30d6:	b5 81       	ldd	r27, Z+5	; 0x05
    30d8:	f9 01       	movw	r30, r18
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	80 83       	st	Z, r24
    30de:	8f e6       	ldi	r24, 0x6F	; 111
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	2f e6       	ldi	r18, 0x6F	; 111
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	f9 01       	movw	r30, r18
    30e8:	20 81       	ld	r18, Z
    30ea:	22 60       	ori	r18, 0x02	; 2
    30ec:	fc 01       	movw	r30, r24
    30ee:	20 83       	st	Z, r18
    30f0:	46 c0       	rjmp	.+140    	; 0x317e <async+0x304>
    30f2:	8f e6       	ldi	r24, 0x6F	; 111
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	2f e6       	ldi	r18, 0x6F	; 111
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	f9 01       	movw	r30, r18
    30fc:	20 81       	ld	r18, Z
    30fe:	2d 7f       	andi	r18, 0xFD	; 253
    3100:	fc 01       	movw	r30, r24
    3102:	20 83       	st	Z, r18
    3104:	3c c0       	rjmp	.+120    	; 0x317e <async+0x304>
    3106:	8e 81       	ldd	r24, Y+6	; 0x06
    3108:	9f 81       	ldd	r25, Y+7	; 0x07
    310a:	64 e5       	ldi	r22, 0x54	; 84
    310c:	71 e0       	ldi	r23, 0x01	; 1
    310e:	0e 94 2d 13 	call	0x265a	; 0x265a <enqueueByDeadline>
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	88 23       	and	r24, r24
    3116:	99 f1       	breq	.+102    	; 0x317e <async+0x304>
    3118:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <threadPool>
    311c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <threadPool+0x1>
    3120:	89 2b       	or	r24, r25
    3122:	69 f1       	breq	.+90     	; 0x317e <async+0x304>
    3124:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    3128:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    312c:	fc 01       	movw	r30, r24
    312e:	26 81       	ldd	r18, Z+6	; 0x06
    3130:	37 81       	ldd	r19, Z+7	; 0x07
    3132:	40 85       	ldd	r20, Z+8	; 0x08
    3134:	51 85       	ldd	r21, Z+9	; 0x09
    3136:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <activeStack>
    313a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <activeStack+0x1>
    313e:	fc 01       	movw	r30, r24
    3140:	82 81       	ldd	r24, Z+2	; 0x02
    3142:	93 81       	ldd	r25, Z+3	; 0x03
    3144:	fc 01       	movw	r30, r24
    3146:	86 81       	ldd	r24, Z+6	; 0x06
    3148:	97 81       	ldd	r25, Z+7	; 0x07
    314a:	a0 85       	ldd	r26, Z+8	; 0x08
    314c:	b1 85       	ldd	r27, Z+9	; 0x09
    314e:	79 01       	movw	r14, r18
    3150:	8a 01       	movw	r16, r20
    3152:	e8 1a       	sub	r14, r24
    3154:	f9 0a       	sbc	r15, r25
    3156:	0a 0b       	sbc	r16, r26
    3158:	1b 0b       	sbc	r17, r27
    315a:	d8 01       	movw	r26, r16
    315c:	c7 01       	movw	r24, r14
    315e:	bb 23       	and	r27, r27
    3160:	74 f4       	brge	.+28     	; 0x317e <async+0x304>
    3162:	89 e3       	ldi	r24, 0x39	; 57
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <pop>
    316a:	6b e3       	ldi	r22, 0x3B	; 59
    316c:	71 e0       	ldi	r23, 0x01	; 1
    316e:	0e 94 49 14 	call	0x2892	; 0x2892 <push>
    3172:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <activeStack>
    3176:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <activeStack+0x1>
    317a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <dispatch>
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	88 23       	and	r24, r24
    3182:	09 f0       	breq	.+2      	; 0x3186 <async+0x30c>
    3184:	78 94       	sei
    3186:	8e 81       	ldd	r24, Y+6	; 0x06
    3188:	9f 81       	ldd	r25, Y+7	; 0x07
    318a:	65 96       	adiw	r28, 0x15	; 21
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ff 90       	pop	r15
    31a0:	ef 90       	pop	r14
    31a2:	df 90       	pop	r13
    31a4:	cf 90       	pop	r12
    31a6:	08 95       	ret

000031a8 <sync>:
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	2c 97       	sbiw	r28, 0x0c	; 12
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	98 87       	std	Y+8, r25	; 0x08
    31be:	8f 83       	std	Y+7, r24	; 0x07
    31c0:	7a 87       	std	Y+10, r23	; 0x0a
    31c2:	69 87       	std	Y+9, r22	; 0x09
    31c4:	5c 87       	std	Y+12, r21	; 0x0c
    31c6:	4b 87       	std	Y+11, r20	; 0x0b
    31c8:	8f e5       	ldi	r24, 0x5F	; 95
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	fc 01       	movw	r30, r24
    31ce:	80 81       	ld	r24, Z
    31d0:	80 78       	andi	r24, 0x80	; 128
    31d2:	8b 83       	std	Y+3, r24	; 0x03
    31d4:	f8 94       	cli
    31d6:	8f 81       	ldd	r24, Y+7	; 0x07
    31d8:	98 85       	ldd	r25, Y+8	; 0x08
    31da:	fc 01       	movw	r30, r24
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	9a 83       	std	Y+2, r25	; 0x02
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	9a 81       	ldd	r25, Y+2	; 0x02
    31e8:	89 2b       	or	r24, r25
    31ea:	09 f4       	brne	.+2      	; 0x31ee <sync+0x46>
    31ec:	5a c0       	rjmp	.+180    	; 0x32a2 <sync+0xfa>
    31ee:	0a c0       	rjmp	.+20     	; 0x3204 <sync+0x5c>
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	9a 81       	ldd	r25, Y+2	; 0x02
    31f4:	fc 01       	movw	r30, r24
    31f6:	84 81       	ldd	r24, Z+4	; 0x04
    31f8:	95 81       	ldd	r25, Z+5	; 0x05
    31fa:	fc 01       	movw	r30, r24
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	9a 83       	std	Y+2, r25	; 0x02
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	fc 01       	movw	r30, r24
    320a:	84 81       	ldd	r24, Z+4	; 0x04
    320c:	95 81       	ldd	r25, Z+5	; 0x05
    320e:	89 2b       	or	r24, r25
    3210:	79 f7       	brne	.-34     	; 0x31f0 <sync+0x48>
    3212:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
    3216:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
    321a:	29 81       	ldd	r18, Y+1	; 0x01
    321c:	3a 81       	ldd	r19, Y+2	; 0x02
    321e:	28 17       	cp	r18, r24
    3220:	39 07       	cpc	r19, r25
    3222:	19 f0       	breq	.+6      	; 0x322a <sync+0x82>
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	88 23       	and	r24, r24
    3228:	39 f4       	brne	.+14     	; 0x3238 <sync+0x90>
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	88 23       	and	r24, r24
    322e:	09 f0       	breq	.+2      	; 0x3232 <sync+0x8a>
    3230:	78 94       	sei
    3232:	8f ef       	ldi	r24, 0xFF	; 255
    3234:	9f ef       	ldi	r25, 0xFF	; 255
    3236:	83 c0       	rjmp	.+262    	; 0x333e <sync+0x196>
    3238:	8f 81       	ldd	r24, Y+7	; 0x07
    323a:	98 85       	ldd	r25, Y+8	; 0x08
    323c:	fc 01       	movw	r30, r24
    323e:	82 81       	ldd	r24, Z+2	; 0x02
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	89 2b       	or	r24, r25
    3244:	41 f0       	breq	.+16     	; 0x3256 <sync+0xae>
    3246:	8f 81       	ldd	r24, Y+7	; 0x07
    3248:	98 85       	ldd	r25, Y+8	; 0x08
    324a:	fc 01       	movw	r30, r24
    324c:	82 81       	ldd	r24, Z+2	; 0x02
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	fc 01       	movw	r30, r24
    3252:	15 82       	std	Z+5, r1	; 0x05
    3254:	14 82       	std	Z+4, r1	; 0x04
    3256:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <current>
    325a:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <current+0x1>
    325e:	8f 81       	ldd	r24, Y+7	; 0x07
    3260:	98 85       	ldd	r25, Y+8	; 0x08
    3262:	fc 01       	movw	r30, r24
    3264:	33 83       	std	Z+3, r19	; 0x03
    3266:	22 83       	std	Z+2, r18	; 0x02
    3268:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
    326c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
    3270:	2f 81       	ldd	r18, Y+7	; 0x07
    3272:	38 85       	ldd	r19, Y+8	; 0x08
    3274:	fc 01       	movw	r30, r24
    3276:	35 83       	std	Z+5, r19	; 0x05
    3278:	24 83       	std	Z+4, r18	; 0x04
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <dispatch>
    3282:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <current>
    3286:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <current+0x1>
    328a:	fc 01       	movw	r30, r24
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	93 81       	ldd	r25, Z+3	; 0x03
    3290:	89 2b       	or	r24, r25
    3292:	39 f4       	brne	.+14     	; 0x32a2 <sync+0xfa>
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	88 23       	and	r24, r24
    3298:	09 f0       	breq	.+2      	; 0x329c <sync+0xf4>
    329a:	78 94       	sei
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	4e c0       	rjmp	.+156    	; 0x333e <sync+0x196>
    32a2:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <current>
    32a6:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <current+0x1>
    32aa:	8f 81       	ldd	r24, Y+7	; 0x07
    32ac:	98 85       	ldd	r25, Y+8	; 0x08
    32ae:	fc 01       	movw	r30, r24
    32b0:	31 83       	std	Z+1, r19	; 0x01
    32b2:	20 83       	st	Z, r18
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	88 23       	and	r24, r24
    32b8:	41 f0       	breq	.+16     	; 0x32ca <sync+0x122>
    32ba:	8f 81       	ldd	r24, Y+7	; 0x07
    32bc:	98 85       	ldd	r25, Y+8	; 0x08
    32be:	fc 01       	movw	r30, r24
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	93 81       	ldd	r25, Z+3	; 0x03
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	09 f0       	breq	.+2      	; 0x32ca <sync+0x122>
    32c8:	78 94       	sei
    32ca:	4b 85       	ldd	r20, Y+11	; 0x0b
    32cc:	5c 85       	ldd	r21, Y+12	; 0x0c
    32ce:	8f 81       	ldd	r24, Y+7	; 0x07
    32d0:	98 85       	ldd	r25, Y+8	; 0x08
    32d2:	29 85       	ldd	r18, Y+9	; 0x09
    32d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    32d6:	ba 01       	movw	r22, r20
    32d8:	f9 01       	movw	r30, r18
    32da:	09 95       	icall
    32dc:	9d 83       	std	Y+5, r25	; 0x05
    32de:	8c 83       	std	Y+4, r24	; 0x04
    32e0:	8f e5       	ldi	r24, 0x5F	; 95
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	fc 01       	movw	r30, r24
    32e6:	80 81       	ld	r24, Z
    32e8:	80 78       	andi	r24, 0x80	; 128
    32ea:	8e 83       	std	Y+6, r24	; 0x06
    32ec:	f8 94       	cli
    32ee:	8f 81       	ldd	r24, Y+7	; 0x07
    32f0:	98 85       	ldd	r25, Y+8	; 0x08
    32f2:	fc 01       	movw	r30, r24
    32f4:	11 82       	std	Z+1, r1	; 0x01
    32f6:	10 82       	st	Z, r1
    32f8:	8f 81       	ldd	r24, Y+7	; 0x07
    32fa:	98 85       	ldd	r25, Y+8	; 0x08
    32fc:	fc 01       	movw	r30, r24
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	9a 81       	ldd	r25, Y+2	; 0x02
    330a:	89 2b       	or	r24, r25
    330c:	91 f0       	breq	.+36     	; 0x3332 <sync+0x18a>
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	71 f0       	breq	.+28     	; 0x3332 <sync+0x18a>
    3316:	8f 81       	ldd	r24, Y+7	; 0x07
    3318:	98 85       	ldd	r25, Y+8	; 0x08
    331a:	fc 01       	movw	r30, r24
    331c:	13 82       	std	Z+3, r1	; 0x03
    331e:	12 82       	std	Z+2, r1	; 0x02
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	9a 81       	ldd	r25, Y+2	; 0x02
    3324:	fc 01       	movw	r30, r24
    3326:	15 82       	std	Z+5, r1	; 0x05
    3328:	14 82       	std	Z+4, r1	; 0x04
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	9a 81       	ldd	r25, Y+2	; 0x02
    332e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <dispatch>
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	88 23       	and	r24, r24
    3336:	09 f0       	breq	.+2      	; 0x333a <sync+0x192>
    3338:	78 94       	sei
    333a:	8c 81       	ldd	r24, Y+4	; 0x04
    333c:	9d 81       	ldd	r25, Y+5	; 0x05
    333e:	2c 96       	adiw	r28, 0x0c	; 12
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	08 95       	ret

00003350 <initialize>:

    
/* initialization */
static void initialize(void) {
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	00 d0       	rcall	.+0      	; 0x3356 <initialize+0x6>
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    int i;

    for (i=0; i<NMSGS-1; i++)
    335a:	1a 82       	std	Y+2, r1	; 0x02
    335c:	19 82       	std	Y+1, r1	; 0x01
    335e:	1e c0       	rjmp	.+60     	; 0x339c <initialize+0x4c>
        messages[i].next = &messages[i+1];
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	01 96       	adiw	r24, 0x01	; 1
    3366:	82 95       	swap	r24
    3368:	92 95       	swap	r25
    336a:	90 7f       	andi	r25, 0xF0	; 240
    336c:	98 27       	eor	r25, r24
    336e:	80 7f       	andi	r24, 0xF0	; 240
    3370:	98 27       	eor	r25, r24
    3372:	9c 01       	movw	r18, r24
    3374:	29 5c       	subi	r18, 0xC9	; 201
    3376:	3d 4f       	sbci	r19, 0xFD	; 253
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	82 95       	swap	r24
    337e:	92 95       	swap	r25
    3380:	90 7f       	andi	r25, 0xF0	; 240
    3382:	98 27       	eor	r25, r24
    3384:	80 7f       	andi	r24, 0xF0	; 240
    3386:	98 27       	eor	r25, r24
    3388:	89 5c       	subi	r24, 0xC9	; 201
    338a:	9d 4f       	sbci	r25, 0xFD	; 253
    338c:	fc 01       	movw	r30, r24
    338e:	31 83       	std	Z+1, r19	; 0x01
    3390:	20 83       	st	Z, r18
    
/* initialization */
static void initialize(void) {
    int i;

    for (i=0; i<NMSGS-1; i++)
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	9a 81       	ldd	r25, Y+2	; 0x02
    3396:	01 96       	adiw	r24, 0x01	; 1
    3398:	9a 83       	std	Y+2, r25	; 0x02
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	0e 97       	sbiw	r24, 0x0e	; 14
    33a2:	f4 f2       	brlt	.-68     	; 0x3360 <initialize+0x10>
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
    33a4:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <messages+0xe1>
    33a8:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <messages+0xe0>
    
    for (i=0; i<NTHREADS-1; i++)
    33ac:	1a 82       	std	Y+2, r1	; 0x02
    33ae:	19 82       	std	Y+1, r1	; 0x01
    33b0:	20 c0       	rjmp	.+64     	; 0x33f2 <initialize+0xa2>
        threads[i].next = &threads[i+1];
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	9c 01       	movw	r18, r24
    33b8:	2f 5f       	subi	r18, 0xFF	; 255
    33ba:	3f 4f       	sbci	r19, 0xFF	; 255
    33bc:	4d e1       	ldi	r20, 0x1D	; 29
    33be:	42 9f       	mul	r20, r18
    33c0:	c0 01       	movw	r24, r0
    33c2:	43 9f       	mul	r20, r19
    33c4:	90 0d       	add	r25, r0
    33c6:	11 24       	eor	r1, r1
    33c8:	9c 01       	movw	r18, r24
    33ca:	2e 57       	subi	r18, 0x7E	; 126
    33cc:	3e 4f       	sbci	r19, 0xFE	; 254
    33ce:	49 81       	ldd	r20, Y+1	; 0x01
    33d0:	5a 81       	ldd	r21, Y+2	; 0x02
    33d2:	6d e1       	ldi	r22, 0x1D	; 29
    33d4:	64 9f       	mul	r22, r20
    33d6:	c0 01       	movw	r24, r0
    33d8:	65 9f       	mul	r22, r21
    33da:	90 0d       	add	r25, r0
    33dc:	11 24       	eor	r1, r1
    33de:	8e 57       	subi	r24, 0x7E	; 126
    33e0:	9e 4f       	sbci	r25, 0xFE	; 254
    33e2:	fc 01       	movw	r30, r24
    33e4:	31 83       	std	Z+1, r19	; 0x01
    33e6:	20 83       	st	Z, r18

    for (i=0; i<NMSGS-1; i++)
        messages[i].next = &messages[i+1];
    messages[NMSGS-1].next = NULL;
    
    for (i=0; i<NTHREADS-1; i++)
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	89 81       	ldd	r24, Y+1	; 0x01
    33f4:	9a 81       	ldd	r25, Y+2	; 0x02
    33f6:	03 97       	sbiw	r24, 0x03	; 3
    33f8:	e4 f2       	brlt	.-72     	; 0x33b2 <initialize+0x62>
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    33fa:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <threads+0x58>
    33fe:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <threads+0x57>
    
    for (i=0; i<NTHREADS; i++) {
    3402:	1a 82       	std	Y+2, r1	; 0x02
    3404:	19 82       	std	Y+1, r1	; 0x01
    3406:	66 c0       	rjmp	.+204    	; 0x34d4 <initialize+0x184>
        setjmp( threads[i].context );
    3408:	29 81       	ldd	r18, Y+1	; 0x01
    340a:	3a 81       	ldd	r19, Y+2	; 0x02
    340c:	4d e1       	ldi	r20, 0x1D	; 29
    340e:	42 9f       	mul	r20, r18
    3410:	c0 01       	movw	r24, r0
    3412:	43 9f       	mul	r20, r19
    3414:	90 0d       	add	r25, r0
    3416:	11 24       	eor	r1, r1
    3418:	06 96       	adiw	r24, 0x06	; 6
    341a:	8e 57       	subi	r24, 0x7E	; 126
    341c:	9e 4f       	sbci	r25, 0xFE	; 254
    341e:	0e 94 1f 1c 	call	0x383e	; 0x383e <setjmp>
        SETSTACK( &threads[i].context, &stacks[i] );
    3422:	29 81       	ldd	r18, Y+1	; 0x01
    3424:	3a 81       	ldd	r19, Y+2	; 0x02
    3426:	4d e1       	ldi	r20, 0x1D	; 29
    3428:	42 9f       	mul	r20, r18
    342a:	c0 01       	movw	r24, r0
    342c:	43 9f       	mul	r20, r19
    342e:	90 0d       	add	r25, r0
    3430:	11 24       	eor	r1, r1
    3432:	06 96       	adiw	r24, 0x06	; 6
    3434:	8e 57       	subi	r24, 0x7E	; 126
    3436:	9e 4f       	sbci	r25, 0xFE	; 254
    3438:	40 96       	adiw	r24, 0x10	; 16
    343a:	49 81       	ldd	r20, Y+1	; 0x01
    343c:	5a 81       	ldd	r21, Y+2	; 0x02
    343e:	60 e6       	ldi	r22, 0x60	; 96
    3440:	64 9f       	mul	r22, r20
    3442:	90 01       	movw	r18, r0
    3444:	65 9f       	mul	r22, r21
    3446:	30 0d       	add	r19, r0
    3448:	11 24       	eor	r1, r1
    344a:	29 5d       	subi	r18, 0xD9	; 217
    344c:	3c 4f       	sbci	r19, 0xFC	; 252
    344e:	24 5a       	subi	r18, 0xA4	; 164
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	fc 01       	movw	r30, r24
    3454:	31 83       	std	Z+1, r19	; 0x01
    3456:	20 83       	st	Z, r18
    3458:	29 81       	ldd	r18, Y+1	; 0x01
    345a:	3a 81       	ldd	r19, Y+2	; 0x02
    345c:	4d e1       	ldi	r20, 0x1D	; 29
    345e:	42 9f       	mul	r20, r18
    3460:	c0 01       	movw	r24, r0
    3462:	43 9f       	mul	r20, r19
    3464:	90 0d       	add	r25, r0
    3466:	11 24       	eor	r1, r1
    3468:	06 96       	adiw	r24, 0x06	; 6
    346a:	8e 57       	subi	r24, 0x7E	; 126
    346c:	9e 4f       	sbci	r25, 0xFE	; 254
    346e:	42 96       	adiw	r24, 0x12	; 18
    3470:	49 81       	ldd	r20, Y+1	; 0x01
    3472:	5a 81       	ldd	r21, Y+2	; 0x02
    3474:	60 e6       	ldi	r22, 0x60	; 96
    3476:	64 9f       	mul	r22, r20
    3478:	90 01       	movw	r18, r0
    347a:	65 9f       	mul	r22, r21
    347c:	30 0d       	add	r19, r0
    347e:	11 24       	eor	r1, r1
    3480:	29 5d       	subi	r18, 0xD9	; 217
    3482:	3c 4f       	sbci	r19, 0xFC	; 252
    3484:	24 5a       	subi	r18, 0xA4	; 164
    3486:	3f 4f       	sbci	r19, 0xFF	; 255
    3488:	fc 01       	movw	r30, r24
    348a:	31 83       	std	Z+1, r19	; 0x01
    348c:	20 83       	st	Z, r18
        SETPC( &threads[i].context, run );
    348e:	29 81       	ldd	r18, Y+1	; 0x01
    3490:	3a 81       	ldd	r19, Y+2	; 0x02
    3492:	4d e1       	ldi	r20, 0x1D	; 29
    3494:	42 9f       	mul	r20, r18
    3496:	c0 01       	movw	r24, r0
    3498:	43 9f       	mul	r20, r19
    349a:	90 0d       	add	r25, r0
    349c:	11 24       	eor	r1, r1
    349e:	06 96       	adiw	r24, 0x06	; 6
    34a0:	8e 57       	subi	r24, 0x7E	; 126
    34a2:	9e 4f       	sbci	r25, 0xFE	; 254
    34a4:	45 96       	adiw	r24, 0x15	; 21
    34a6:	2e e3       	ldi	r18, 0x3E	; 62
    34a8:	36 e1       	ldi	r19, 0x16	; 22
    34aa:	fc 01       	movw	r30, r24
    34ac:	31 83       	std	Z+1, r19	; 0x01
    34ae:	20 83       	st	Z, r18
        threads[i].waitsFor = NULL;
    34b0:	29 81       	ldd	r18, Y+1	; 0x01
    34b2:	3a 81       	ldd	r19, Y+2	; 0x02
    34b4:	4d e1       	ldi	r20, 0x1D	; 29
    34b6:	42 9f       	mul	r20, r18
    34b8:	c0 01       	movw	r24, r0
    34ba:	43 9f       	mul	r20, r19
    34bc:	90 0d       	add	r25, r0
    34be:	11 24       	eor	r1, r1
    34c0:	8a 57       	subi	r24, 0x7A	; 122
    34c2:	9e 4f       	sbci	r25, 0xFE	; 254
    34c4:	fc 01       	movw	r30, r24
    34c6:	11 82       	std	Z+1, r1	; 0x01
    34c8:	10 82       	st	Z, r1
    
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
    
    for (i=0; i<NTHREADS; i++) {
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	9a 81       	ldd	r25, Y+2	; 0x02
    34d8:	04 97       	sbiw	r24, 0x04	; 4
    34da:	0c f4       	brge	.+2      	; 0x34de <initialize+0x18e>
    34dc:	95 cf       	rjmp	.-214    	; 0x3408 <initialize+0xb8>
        SETSTACK( &threads[i].context, &stacks[i] );
        SETPC( &threads[i].context, run );
        threads[i].waitsFor = NULL;
    }

    thread0.next = NULL;
    34de:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <thread0+0x1>
    34e2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <thread0>
    thread0.waitsFor = NULL;
    34e6:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <thread0+0x5>
    34ea:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <thread0+0x4>
    thread0.msg = NULL;
    34ee:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <thread0+0x3>
    34f2:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <thread0+0x2>
    
    TIMER_INIT();
    34f6:	81 e6       	ldi	r24, 0x61	; 97
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	20 e8       	ldi	r18, 0x80	; 128
    34fc:	fc 01       	movw	r30, r24
    34fe:	20 83       	st	Z, r18
    3500:	81 e6       	ldi	r24, 0x61	; 97
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	fc 01       	movw	r30, r24
    3506:	10 82       	st	Z, r1
    3508:	84 e8       	ldi	r24, 0x84	; 132
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	fc 01       	movw	r30, r24
    350e:	11 82       	std	Z+1, r1	; 0x01
    3510:	10 82       	st	Z, r1
    3512:	81 e8       	ldi	r24, 0x81	; 129
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	24 e0       	ldi	r18, 0x04	; 4
    3518:	fc 01       	movw	r30, r24
    351a:	20 83       	st	Z, r18
    351c:	8f e6       	ldi	r24, 0x6F	; 111
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	21 e0       	ldi	r18, 0x01	; 1
    3522:	fc 01       	movw	r30, r24
    3524:	20 83       	st	Z, r18
}
    3526:	00 00       	nop
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	08 95       	ret

00003532 <install>:

void install(Object *obj, Method m, enum Vector i) {
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	00 d0       	rcall	.+0      	; 0x3538 <install+0x6>
    3538:	00 d0       	rcall	.+0      	; 0x353a <install+0x8>
    353a:	00 d0       	rcall	.+0      	; 0x353c <install+0xa>
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	9b 83       	std	Y+3, r25	; 0x03
    3542:	8a 83       	std	Y+2, r24	; 0x02
    3544:	7d 83       	std	Y+5, r23	; 0x05
    3546:	6c 83       	std	Y+4, r22	; 0x04
    3548:	4e 83       	std	Y+6, r20	; 0x06
    if (i >= 0 && i < N_VECTORS) {
    354a:	8e 81       	ldd	r24, Y+6	; 0x06
    354c:	82 31       	cpi	r24, 0x12	; 18
    354e:	50 f5       	brcc	.+84     	; 0x35a4 <install+0x72>
        char status;
        DISABLE(status);
    3550:	8f e5       	ldi	r24, 0x5F	; 95
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	fc 01       	movw	r30, r24
    3556:	80 81       	ld	r24, Z
    3558:	80 78       	andi	r24, 0x80	; 128
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	f8 94       	cli
        otable[i] = obj;
    355e:	8e 81       	ldd	r24, Y+6	; 0x06
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	82 5a       	subi	r24, 0xA2	; 162
    356a:	9e 4f       	sbci	r25, 0xFE	; 254
    356c:	2a 81       	ldd	r18, Y+2	; 0x02
    356e:	3b 81       	ldd	r19, Y+3	; 0x03
    3570:	fc 01       	movw	r30, r24
    3572:	31 83       	std	Z+1, r19	; 0x01
    3574:	20 83       	st	Z, r18
        mtable[i] = m;
    3576:	8e 81       	ldd	r24, Y+6	; 0x06
    3578:	88 2f       	mov	r24, r24
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	8a 50       	subi	r24, 0x0A	; 10
    3582:	9e 4f       	sbci	r25, 0xFE	; 254
    3584:	2c 81       	ldd	r18, Y+4	; 0x04
    3586:	3d 81       	ldd	r19, Y+5	; 0x05
    3588:	fc 01       	movw	r30, r24
    358a:	31 83       	std	Z+1, r19	; 0x01
    358c:	20 83       	st	Z, r18
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	9b 81       	ldd	r25, Y+3	; 0x03
    3592:	21 e0       	ldi	r18, 0x01	; 1
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	fc 01       	movw	r30, r24
    3598:	33 83       	std	Z+3, r19	; 0x03
    359a:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	88 23       	and	r24, r24
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <install+0x72>
    35a2:	78 94       	sei
    }
}
    35a4:	00 00       	nop
    35a6:	26 96       	adiw	r28, 0x06	; 6
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	08 95       	ret

000035b8 <tinytimber>:

int tinytimber(Object *obj, Method m, int arg) {
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	27 97       	sbiw	r28, 0x07	; 7
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	9b 83       	std	Y+3, r25	; 0x03
    35da:	8a 83       	std	Y+2, r24	; 0x02
    35dc:	7d 83       	std	Y+5, r23	; 0x05
    35de:	6c 83       	std	Y+4, r22	; 0x04
    35e0:	5f 83       	std	Y+7, r21	; 0x07
    35e2:	4e 83       	std	Y+6, r20	; 0x06
    char status;
    DISABLE(status);
    35e4:	8f e5       	ldi	r24, 0x5F	; 95
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	fc 01       	movw	r30, r24
    35ea:	80 81       	ld	r24, Z
    35ec:	80 78       	andi	r24, 0x80	; 128
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	f8 94       	cli
    initialize();
    35f2:	0e 94 a8 19 	call	0x3350	; 0x3350 <initialize>
    ENABLE(1);
    35f6:	78 94       	sei
    if (m != NULL)
    35f8:	8c 81       	ldd	r24, Y+4	; 0x04
    35fa:	9d 81       	ldd	r25, Y+5	; 0x05
    35fc:	89 2b       	or	r24, r25
    35fe:	89 f0       	breq	.+34     	; 0x3622 <tinytimber+0x6a>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    3600:	4e 81       	ldd	r20, Y+6	; 0x06
    3602:	5f 81       	ldd	r21, Y+7	; 0x07
    3604:	2c 81       	ldd	r18, Y+4	; 0x04
    3606:	3d 81       	ldd	r19, Y+5	; 0x05
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	9b 81       	ldd	r25, Y+3	; 0x03
    360c:	6a 01       	movw	r12, r20
    360e:	79 01       	movw	r14, r18
    3610:	8c 01       	movw	r16, r24
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	a9 01       	movw	r20, r18
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	cb 01       	movw	r24, r22
    361e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <async>
    DISABLE(status);
    3622:	8f e5       	ldi	r24, 0x5F	; 95
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	fc 01       	movw	r30, r24
    3628:	80 81       	ld	r24, Z
    362a:	80 78       	andi	r24, 0x80	; 128
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	f8 94       	cli
    idle();
    3630:	0e 94 db 16 	call	0x2db6	; 0x2db6 <idle>
    return 0;
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
}
    3638:	27 96       	adiw	r28, 0x07	; 7
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	df 91       	pop	r29
    3646:	cf 91       	pop	r28
    3648:	1f 91       	pop	r17
    364a:	0f 91       	pop	r16
    364c:	ff 90       	pop	r15
    364e:	ef 90       	pop	r14
    3650:	df 90       	pop	r13
    3652:	cf 90       	pop	r12
    3654:	08 95       	ret

00003656 <writeBit>:
#include "writeBit.h"
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	00 d0       	rcall	.+0      	; 0x365c <writeBit+0x6>
    365c:	00 d0       	rcall	.+0      	; 0x365e <writeBit+0x8>
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	89 83       	std	Y+1, r24	; 0x01
    3666:	7c 83       	std	Y+4, r23	; 0x04
    3668:	6b 83       	std	Y+3, r22	; 0x03
	if (arg)
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	9c 81       	ldd	r25, Y+4	; 0x04
    366e:	89 2b       	or	r24, r25
    3670:	c1 f0       	breq	.+48     	; 0x36a2 <writeBit+0x4c>
	PORTE |= (1 << self->portBit);
    3672:	8e e2       	ldi	r24, 0x2E	; 46
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	2e e2       	ldi	r18, 0x2E	; 46
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	f9 01       	movw	r30, r18
    367c:	20 81       	ld	r18, Z
    367e:	62 2f       	mov	r22, r18
    3680:	29 81       	ldd	r18, Y+1	; 0x01
    3682:	3a 81       	ldd	r19, Y+2	; 0x02
    3684:	f9 01       	movw	r30, r18
    3686:	24 81       	ldd	r18, Z+4	; 0x04
    3688:	42 2f       	mov	r20, r18
    368a:	50 e0       	ldi	r21, 0x00	; 0
    368c:	21 e0       	ldi	r18, 0x01	; 1
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <writeBit+0x40>
    3692:	22 0f       	add	r18, r18
    3694:	33 1f       	adc	r19, r19
    3696:	4a 95       	dec	r20
    3698:	e2 f7       	brpl	.-8      	; 0x3692 <writeBit+0x3c>
    369a:	26 2b       	or	r18, r22
    369c:	fc 01       	movw	r30, r24
    369e:	20 83       	st	Z, r18
    36a0:	18 c0       	rjmp	.+48     	; 0x36d2 <writeBit+0x7c>
	else
	PORTE &= ~(1 << self->portBit);
    36a2:	8e e2       	ldi	r24, 0x2E	; 46
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	2e e2       	ldi	r18, 0x2E	; 46
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	f9 01       	movw	r30, r18
    36ac:	20 81       	ld	r18, Z
    36ae:	62 2f       	mov	r22, r18
    36b0:	29 81       	ldd	r18, Y+1	; 0x01
    36b2:	3a 81       	ldd	r19, Y+2	; 0x02
    36b4:	f9 01       	movw	r30, r18
    36b6:	24 81       	ldd	r18, Z+4	; 0x04
    36b8:	42 2f       	mov	r20, r18
    36ba:	50 e0       	ldi	r21, 0x00	; 0
    36bc:	21 e0       	ldi	r18, 0x01	; 1
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <writeBit+0x70>
    36c2:	22 0f       	add	r18, r18
    36c4:	33 1f       	adc	r19, r19
    36c6:	4a 95       	dec	r20
    36c8:	e2 f7       	brpl	.-8      	; 0x36c2 <writeBit+0x6c>
    36ca:	20 95       	com	r18
    36cc:	26 23       	and	r18, r22
    36ce:	fc 01       	movw	r30, r24
    36d0:	20 83       	st	Z, r18
	return 0;
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	90 e0       	ldi	r25, 0x00	; 0
}
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	08 95       	ret

000036e4 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <toggleBit+0x6>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <toggleBit+0x8>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	7c 83       	std	Y+4, r23	; 0x04
    36f6:	6b 83       	std	Y+3, r22	; 0x03
	PORTE ^= (1 << self->portBit);
    36f8:	8e e2       	ldi	r24, 0x2E	; 46
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	2e e2       	ldi	r18, 0x2E	; 46
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	f9 01       	movw	r30, r18
    3702:	20 81       	ld	r18, Z
    3704:	62 2f       	mov	r22, r18
    3706:	29 81       	ldd	r18, Y+1	; 0x01
    3708:	3a 81       	ldd	r19, Y+2	; 0x02
    370a:	f9 01       	movw	r30, r18
    370c:	24 81       	ldd	r18, Z+4	; 0x04
    370e:	42 2f       	mov	r20, r18
    3710:	50 e0       	ldi	r21, 0x00	; 0
    3712:	21 e0       	ldi	r18, 0x01	; 1
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	02 c0       	rjmp	.+4      	; 0x371c <toggleBit+0x38>
    3718:	22 0f       	add	r18, r18
    371a:	33 1f       	adc	r19, r19
    371c:	4a 95       	dec	r20
    371e:	e2 f7       	brpl	.-8      	; 0x3718 <toggleBit+0x34>
    3720:	26 27       	eor	r18, r22
    3722:	fc 01       	movw	r30, r24
    3724:	20 83       	st	Z, r18
	return 0;
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
}
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	df 91       	pop	r29
    3734:	cf 91       	pop	r28
    3736:	08 95       	ret

00003738 <__divmodhi4>:
    3738:	97 fb       	bst	r25, 7
    373a:	07 2e       	mov	r0, r23
    373c:	16 f4       	brtc	.+4      	; 0x3742 <__divmodhi4+0xa>
    373e:	00 94       	com	r0
    3740:	07 d0       	rcall	.+14     	; 0x3750 <__divmodhi4_neg1>
    3742:	77 fd       	sbrc	r23, 7
    3744:	09 d0       	rcall	.+18     	; 0x3758 <__divmodhi4_neg2>
    3746:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <__udivmodhi4>
    374a:	07 fc       	sbrc	r0, 7
    374c:	05 d0       	rcall	.+10     	; 0x3758 <__divmodhi4_neg2>
    374e:	3e f4       	brtc	.+14     	; 0x375e <__divmodhi4_exit>

00003750 <__divmodhi4_neg1>:
    3750:	90 95       	com	r25
    3752:	81 95       	neg	r24
    3754:	9f 4f       	sbci	r25, 0xFF	; 255
    3756:	08 95       	ret

00003758 <__divmodhi4_neg2>:
    3758:	70 95       	com	r23
    375a:	61 95       	neg	r22
    375c:	7f 4f       	sbci	r23, 0xFF	; 255

0000375e <__divmodhi4_exit>:
    375e:	08 95       	ret

00003760 <__divmodsi4>:
    3760:	05 2e       	mov	r0, r21
    3762:	97 fb       	bst	r25, 7
    3764:	1e f4       	brtc	.+6      	; 0x376c <__divmodsi4+0xc>
    3766:	00 94       	com	r0
    3768:	0e 94 c7 1b 	call	0x378e	; 0x378e <__negsi2>
    376c:	57 fd       	sbrc	r21, 7
    376e:	07 d0       	rcall	.+14     	; 0x377e <__divmodsi4_neg2>
    3770:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__udivmodsi4>
    3774:	07 fc       	sbrc	r0, 7
    3776:	03 d0       	rcall	.+6      	; 0x377e <__divmodsi4_neg2>
    3778:	4e f4       	brtc	.+18     	; 0x378c <__divmodsi4_exit>
    377a:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__negsi2>

0000377e <__divmodsi4_neg2>:
    377e:	50 95       	com	r21
    3780:	40 95       	com	r20
    3782:	30 95       	com	r19
    3784:	21 95       	neg	r18
    3786:	3f 4f       	sbci	r19, 0xFF	; 255
    3788:	4f 4f       	sbci	r20, 0xFF	; 255
    378a:	5f 4f       	sbci	r21, 0xFF	; 255

0000378c <__divmodsi4_exit>:
    378c:	08 95       	ret

0000378e <__negsi2>:
    378e:	90 95       	com	r25
    3790:	80 95       	com	r24
    3792:	70 95       	com	r23
    3794:	61 95       	neg	r22
    3796:	7f 4f       	sbci	r23, 0xFF	; 255
    3798:	8f 4f       	sbci	r24, 0xFF	; 255
    379a:	9f 4f       	sbci	r25, 0xFF	; 255
    379c:	08 95       	ret

0000379e <__muluhisi3>:
    379e:	0e 94 10 1c 	call	0x3820	; 0x3820 <__umulhisi3>
    37a2:	a5 9f       	mul	r26, r21
    37a4:	90 0d       	add	r25, r0
    37a6:	b4 9f       	mul	r27, r20
    37a8:	90 0d       	add	r25, r0
    37aa:	a4 9f       	mul	r26, r20
    37ac:	80 0d       	add	r24, r0
    37ae:	91 1d       	adc	r25, r1
    37b0:	11 24       	eor	r1, r1
    37b2:	08 95       	ret

000037b4 <__udivmodhi4>:
    37b4:	aa 1b       	sub	r26, r26
    37b6:	bb 1b       	sub	r27, r27
    37b8:	51 e1       	ldi	r21, 0x11	; 17
    37ba:	07 c0       	rjmp	.+14     	; 0x37ca <__udivmodhi4_ep>

000037bc <__udivmodhi4_loop>:
    37bc:	aa 1f       	adc	r26, r26
    37be:	bb 1f       	adc	r27, r27
    37c0:	a6 17       	cp	r26, r22
    37c2:	b7 07       	cpc	r27, r23
    37c4:	10 f0       	brcs	.+4      	; 0x37ca <__udivmodhi4_ep>
    37c6:	a6 1b       	sub	r26, r22
    37c8:	b7 0b       	sbc	r27, r23

000037ca <__udivmodhi4_ep>:
    37ca:	88 1f       	adc	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	5a 95       	dec	r21
    37d0:	a9 f7       	brne	.-22     	; 0x37bc <__udivmodhi4_loop>
    37d2:	80 95       	com	r24
    37d4:	90 95       	com	r25
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	08 95       	ret

000037dc <__udivmodsi4>:
    37dc:	a1 e2       	ldi	r26, 0x21	; 33
    37de:	1a 2e       	mov	r1, r26
    37e0:	aa 1b       	sub	r26, r26
    37e2:	bb 1b       	sub	r27, r27
    37e4:	fd 01       	movw	r30, r26
    37e6:	0d c0       	rjmp	.+26     	; 0x3802 <__udivmodsi4_ep>

000037e8 <__udivmodsi4_loop>:
    37e8:	aa 1f       	adc	r26, r26
    37ea:	bb 1f       	adc	r27, r27
    37ec:	ee 1f       	adc	r30, r30
    37ee:	ff 1f       	adc	r31, r31
    37f0:	a2 17       	cp	r26, r18
    37f2:	b3 07       	cpc	r27, r19
    37f4:	e4 07       	cpc	r30, r20
    37f6:	f5 07       	cpc	r31, r21
    37f8:	20 f0       	brcs	.+8      	; 0x3802 <__udivmodsi4_ep>
    37fa:	a2 1b       	sub	r26, r18
    37fc:	b3 0b       	sbc	r27, r19
    37fe:	e4 0b       	sbc	r30, r20
    3800:	f5 0b       	sbc	r31, r21

00003802 <__udivmodsi4_ep>:
    3802:	66 1f       	adc	r22, r22
    3804:	77 1f       	adc	r23, r23
    3806:	88 1f       	adc	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	1a 94       	dec	r1
    380c:	69 f7       	brne	.-38     	; 0x37e8 <__udivmodsi4_loop>
    380e:	60 95       	com	r22
    3810:	70 95       	com	r23
    3812:	80 95       	com	r24
    3814:	90 95       	com	r25
    3816:	9b 01       	movw	r18, r22
    3818:	ac 01       	movw	r20, r24
    381a:	bd 01       	movw	r22, r26
    381c:	cf 01       	movw	r24, r30
    381e:	08 95       	ret

00003820 <__umulhisi3>:
    3820:	a2 9f       	mul	r26, r18
    3822:	b0 01       	movw	r22, r0
    3824:	b3 9f       	mul	r27, r19
    3826:	c0 01       	movw	r24, r0
    3828:	a3 9f       	mul	r26, r19
    382a:	70 0d       	add	r23, r0
    382c:	81 1d       	adc	r24, r1
    382e:	11 24       	eor	r1, r1
    3830:	91 1d       	adc	r25, r1
    3832:	b2 9f       	mul	r27, r18
    3834:	70 0d       	add	r23, r0
    3836:	81 1d       	adc	r24, r1
    3838:	11 24       	eor	r1, r1
    383a:	91 1d       	adc	r25, r1
    383c:	08 95       	ret

0000383e <setjmp>:
    383e:	dc 01       	movw	r26, r24
    3840:	2d 92       	st	X+, r2
    3842:	3d 92       	st	X+, r3
    3844:	4d 92       	st	X+, r4
    3846:	5d 92       	st	X+, r5
    3848:	6d 92       	st	X+, r6
    384a:	7d 92       	st	X+, r7
    384c:	8d 92       	st	X+, r8
    384e:	9d 92       	st	X+, r9
    3850:	ad 92       	st	X+, r10
    3852:	bd 92       	st	X+, r11
    3854:	cd 92       	st	X+, r12
    3856:	dd 92       	st	X+, r13
    3858:	ed 92       	st	X+, r14
    385a:	fd 92       	st	X+, r15
    385c:	0d 93       	st	X+, r16
    385e:	1d 93       	st	X+, r17
    3860:	cd 93       	st	X+, r28
    3862:	dd 93       	st	X+, r29
    3864:	ff 91       	pop	r31
    3866:	ef 91       	pop	r30
    3868:	8d b7       	in	r24, 0x3d	; 61
    386a:	8d 93       	st	X+, r24
    386c:	8e b7       	in	r24, 0x3e	; 62
    386e:	8d 93       	st	X+, r24
    3870:	8f b7       	in	r24, 0x3f	; 63
    3872:	8d 93       	st	X+, r24
    3874:	ed 93       	st	X+, r30
    3876:	fd 93       	st	X+, r31
    3878:	88 27       	eor	r24, r24
    387a:	99 27       	eor	r25, r25
    387c:	09 94       	ijmp

0000387e <longjmp>:
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	91 05       	cpc	r25, r1
    3886:	81 1d       	adc	r24, r1
    3888:	2d 90       	ld	r2, X+
    388a:	3d 90       	ld	r3, X+
    388c:	4d 90       	ld	r4, X+
    388e:	5d 90       	ld	r5, X+
    3890:	6d 90       	ld	r6, X+
    3892:	7d 90       	ld	r7, X+
    3894:	8d 90       	ld	r8, X+
    3896:	9d 90       	ld	r9, X+
    3898:	ad 90       	ld	r10, X+
    389a:	bd 90       	ld	r11, X+
    389c:	cd 90       	ld	r12, X+
    389e:	dd 90       	ld	r13, X+
    38a0:	ed 90       	ld	r14, X+
    38a2:	fd 90       	ld	r15, X+
    38a4:	0d 91       	ld	r16, X+
    38a6:	1d 91       	ld	r17, X+
    38a8:	cd 91       	ld	r28, X+
    38aa:	dd 91       	ld	r29, X+
    38ac:	ed 91       	ld	r30, X+
    38ae:	fd 91       	ld	r31, X+
    38b0:	0d 90       	ld	r0, X+
    38b2:	f8 94       	cli
    38b4:	fe bf       	out	0x3e, r31	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	ed bf       	out	0x3d, r30	; 61
    38ba:	ed 91       	ld	r30, X+
    38bc:	fd 91       	ld	r31, X+
    38be:	09 94       	ijmp

000038c0 <_exit>:
    38c0:	f8 94       	cli

000038c2 <__stop_program>:
    38c2:	ff cf       	rjmp	.-2      	; 0x38c2 <__stop_program>
