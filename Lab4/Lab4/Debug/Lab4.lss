
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00002498  0000252c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a3  00800156  00800156  00002582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000025f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cec  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146e  00000000  00000000  000065d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ab6  00000000  00000000  00007a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e14  00000000  00000000  000094f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6d  00000000  00000000  0000a308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cdc  00000000  00000000  0000ad75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000ea51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_1>
       8:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_2>
       c:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__vector_3>
      10:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__vector_4>
      14:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__vector_9>
      28:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__vector_10>
      2c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_11>
      30:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_12>
      34:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_13>
      38:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_14>
      3c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_15>
      40:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_16>
      44:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_17>
      48:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_18>
      4c:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_19>
      50:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_20>
      54:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_21>
      58:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e9       	ldi	r30, 0x98	; 152
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 35       	cpi	r26, 0x56	; 86
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e5       	ldi	r26, 0x56	; 86
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3f       	cpi	r26, 0xF9	; 249
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 30 04 	call	0x860	; 0x860 <main>
      92:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      a6:	fc 01       	movw	r30, r24
      a8:	22 85       	ldd	r18, Z+10	; 0x0a
      aa:	22 23       	and	r18, r18
      ac:	21 f0       	breq	.+8      	; 0xb6 <holdCheckerUp+0x1c>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      ae:	1e 9b       	sbis	0x03, 6	; 3
      b0:	0b c0       	rjmp	.+22     	; 0xc8 <holdCheckerUp+0x2e>
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      b2:	fc 01       	movw	r30, r24
      b4:	12 86       	std	Z+10, r1	; 0x0a
	}
	return 0;
}
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	1f 91       	pop	r17
      bc:	0f 91       	pop	r16
      be:	ff 90       	pop	r15
      c0:	ef 90       	pop	r14
      c2:	df 90       	pop	r13
      c4:	cf 90       	pop	r12
      c6:	08 95       	ret
      c8:	8c 01       	movw	r16, r24
int holdCheckerUp(Button *self, int arg) {
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	6a e0       	ldi	r22, 0x0A	; 10
      d0:	73 e0       	ldi	r23, 0x03	; 3
      d2:	84 81       	ldd	r24, Z+4	; 0x04
      d4:	95 81       	ldd	r25, Z+5	; 0x05
      d6:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      da:	c1 2c       	mov	r12, r1
      dc:	d1 2c       	mov	r13, r1
      de:	8d e4       	ldi	r24, 0x4D	; 77
      e0:	e8 2e       	mov	r14, r24
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	f8 2e       	mov	r15, r24
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	a9 01       	movw	r20, r18
      ec:	65 e3       	ldi	r22, 0x35	; 53
      ee:	7c e0       	ldi	r23, 0x0C	; 12
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
      f8:	de cf       	rjmp	.-68     	; 0xb6 <holdCheckerUp+0x1c>

000000fa <holdCheckerDown>:
	}
	return 0;
}

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     106:	fc 01       	movw	r30, r24
     108:	23 85       	ldd	r18, Z+11	; 0x0b
     10a:	22 23       	and	r18, r18
     10c:	21 f0       	breq	.+8      	; 0x116 <holdCheckerDown+0x1c>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     10e:	1f 9b       	sbis	0x03, 7	; 3
     110:	0b c0       	rjmp	.+22     	; 0x128 <holdCheckerDown+0x2e>
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     112:	fc 01       	movw	r30, r24
     114:	13 86       	std	Z+11, r1	; 0x0b
	}
	return 0;
}
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret
     128:	8c 01       	movw	r16, r24
int holdCheckerDown(Button *self, int arg) {
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	63 e4       	ldi	r22, 0x43	; 67
     130:	73 e0       	ldi	r23, 0x03	; 3
     132:	84 81       	ldd	r24, Z+4	; 0x04
     134:	95 81       	ldd	r25, Z+5	; 0x05
     136:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	8d e7       	ldi	r24, 0x7D	; 125
     140:	e8 2e       	mov	r14, r24
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	f8 2e       	mov	r15, r24
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	65 e3       	ldi	r22, 0x35	; 53
     14e:	7c e0       	ldi	r23, 0x0C	; 12
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
     158:	de cf       	rjmp	.-68     	; 0x116 <holdCheckerDown+0x1c>

0000015a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     15a:	85 b1       	in	r24, 0x05	; 5
     15c:	80 6d       	ori	r24, 0xD0	; 208
     15e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     160:	8e b1       	in	r24, 0x0e	; 14
     162:	8c 60       	ori	r24, 0x0C	; 12
     164:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     166:	8d b3       	in	r24, 0x1d	; 29
     168:	80 6c       	ori	r24, 0xC0	; 192
     16a:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     16c:	eb e6       	ldi	r30, 0x6B	; 107
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8c 60       	ori	r24, 0x0C	; 12
     174:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     176:	ec e6       	ldi	r30, 0x6C	; 108
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	80 6d       	ori	r24, 0xD0	; 208
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <leftdir>:
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
     182:	62 99       	sbic	0x0c, 2	; 12
     184:	04 c0       	rjmp	.+8      	; 0x18e <leftdir+0xc>
     186:	fc 01       	movw	r30, r24
     188:	20 85       	ldd	r18, Z+8	; 0x08
     18a:	22 23       	and	r18, r18
     18c:	39 f0       	breq	.+14     	; 0x19c <leftdir+0x1a>
		self->heldLeft = true;
		SYNC(self->gui, switchGen, 0);
	}
	
	else if (!PRESSEDLT) {
     18e:	62 9b       	sbis	0x0c, 2	; 12
     190:	02 c0       	rjmp	.+4      	; 0x196 <leftdir+0x14>
		self->heldLeft = false;
     192:	fc 01       	movw	r30, r24
     194:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	08 95       	ret
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		self->heldLeft = true;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 87       	std	Z+8, r24	; 0x08
		SYNC(self->gui, switchGen, 0);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	66 ee       	ldi	r22, 0xE6	; 230
     1a6:	72 e0       	ldi	r23, 0x02	; 2
     1a8:	84 81       	ldd	r24, Z+4	; 0x04
     1aa:	95 81       	ldd	r25, Z+5	; 0x05
     1ac:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
	
	else if (!PRESSEDLT) {
		self->heldLeft = false;
	}
	return 0;
}
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
     1b6:	63 99       	sbic	0x0c, 3	; 12
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <rightdir+0xc>
     1ba:	fc 01       	movw	r30, r24
     1bc:	21 85       	ldd	r18, Z+9	; 0x09
     1be:	22 23       	and	r18, r18
     1c0:	39 f0       	breq	.+14     	; 0x1d0 <rightdir+0x1a>
		self->heldRight = true;
		SYNC(self->gui, switchGen, 1);
	}
	else if (!PRESSEDRT) {
     1c2:	63 9b       	sbis	0x0c, 3	; 12
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <rightdir+0x14>
		self->heldRight = false;
     1c6:	fc 01       	movw	r30, r24
     1c8:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret
}

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
		self->heldRight = true;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	81 87       	std	Z+9, r24	; 0x09
		SYNC(self->gui, switchGen, 1);
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	66 ee       	ldi	r22, 0xE6	; 230
     1da:	72 e0       	ldi	r23, 0x02	; 2
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
	}
	else if (!PRESSEDRT) {
		self->heldRight = false;
	}
	return 0;
}
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	08 95       	ret

000001ea <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	ec 01       	movw	r28, r24
	if (PRESSEDLT && !self->heldLeft) {
     1f0:	62 99       	sbic	0x0c, 2	; 12
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <buttonCheckerLR+0x10>
     1f4:	88 85       	ldd	r24, Y+8	; 0x08
     1f6:	88 23       	and	r24, r24
     1f8:	61 f0       	breq	.+24     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		leftdir(self, 0);
	}
	else {
		self->heldLeft = false;
     1fa:	18 86       	std	Y+8, r1	; 0x08
	}
	if (PRESSEDRT && !self->heldRight) {
     1fc:	63 99       	sbic	0x0c, 3	; 12
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     200:	89 85       	ldd	r24, Y+9	; 0x09
     202:	88 23       	and	r24, r24
     204:	61 f0       	breq	.+24     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		rightdir(self, 0);
	}
	else {
		self->heldRight = false;
     206:	19 86       	std	Y+9, r1	; 0x09
	}
	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		leftdir(self, 0);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	ce 01       	movw	r24, r28
     218:	0e 94 c1 00 	call	0x182	; 0x182 <leftdir>
     21c:	ef cf       	rjmp	.-34     	; 0x1fc <buttonCheckerLR+0x12>
	}
	else {
		self->heldLeft = false;
	}
	if (PRESSEDRT && !self->heldRight) {
		rightdir(self, 0);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	ce 01       	movw	r24, r28
     224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <rightdir>
	}
	else {
		self->heldRight = false;
	}
	return 0;
}
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     242:	1e 99       	sbic	0x03, 6	; 3
     244:	04 c0       	rjmp	.+8      	; 0x24e <updir+0x1c>
     246:	fc 01       	movw	r30, r24
     248:	26 81       	ldd	r18, Z+6	; 0x06
     24a:	22 23       	and	r18, r18
     24c:	79 f0       	breq	.+30     	; 0x26c <updir+0x3a>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
			self->holdUpRunning = true;
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     24e:	1e 9b       	sbis	0x03, 6	; 3
     250:	02 c0       	rjmp	.+4      	; 0x256 <updir+0x24>
		self->heldUp = false;
     252:	fc 01       	movw	r30, r24
     254:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	df 90       	pop	r13
     268:	cf 90       	pop	r12
     26a:	08 95       	ret
     26c:	ec 01       	movw	r28, r24

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
		self->heldUp = true; // Markera att knappen hålls nere
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	16 83       	std	Z+6, r17	; 0x06
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	73 e0       	ldi	r23, 0x03	; 3
     27a:	84 81       	ldd	r24, Z+4	; 0x04
     27c:	95 81       	ldd	r25, Z+5	; 0x05
     27e:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     282:	8a 85       	ldd	r24, Y+10	; 0x0a
     284:	81 11       	cpse	r24, r1
     286:	e7 cf       	rjmp	.-50     	; 0x256 <updir+0x24>
			self->holdUpRunning = true;
     288:	1a 87       	std	Y+10, r17	; 0x0a
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	8d e4       	ldi	r24, 0x4D	; 77
     290:	e8 2e       	mov	r14, r24
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	f8 2e       	mov	r15, r24
     296:	8e 01       	movw	r16, r28
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	a9 01       	movw	r20, r18
     29e:	69 e0       	ldi	r22, 0x09	; 9
     2a0:	7d e3       	ldi	r23, 0x3D	; 61
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
     2aa:	d5 cf       	rjmp	.-86     	; 0x256 <updir+0x24>

000002ac <downdir>:
	}
	return 0;
}

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     2bc:	1f 99       	sbic	0x03, 7	; 3
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <downdir+0x1c>
     2c0:	fc 01       	movw	r30, r24
     2c2:	27 81       	ldd	r18, Z+7	; 0x07
     2c4:	22 23       	and	r18, r18
     2c6:	79 f0       	breq	.+30     	; 0x2e6 <downdir+0x3a>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
			self->holdDownRunning = true;
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     2c8:	1f 9b       	sbis	0x03, 7	; 3
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <downdir+0x24>
		self->heldDown = false;
     2cc:	fc 01       	movw	r30, r24
     2ce:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	08 95       	ret
     2e6:	ec 01       	movw	r28, r24

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
		self->heldDown = true; // Markera att knappen hålls nere
     2e8:	11 e0       	ldi	r17, 0x01	; 1
     2ea:	17 83       	std	Z+7, r17	; 0x07
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	63 e4       	ldi	r22, 0x43	; 67
     2f2:	73 e0       	ldi	r23, 0x03	; 3
     2f4:	84 81       	ldd	r24, Z+4	; 0x04
     2f6:	95 81       	ldd	r25, Z+5	; 0x05
     2f8:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     2fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     2fe:	81 11       	cpse	r24, r1
     300:	e7 cf       	rjmp	.-50     	; 0x2d0 <downdir+0x24>
			self->holdDownRunning = true;
     302:	1b 87       	std	Y+11, r17	; 0x0b
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     304:	c1 2c       	mov	r12, r1
     306:	d1 2c       	mov	r13, r1
     308:	8d e7       	ldi	r24, 0x7D	; 125
     30a:	e8 2e       	mov	r14, r24
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	f8 2e       	mov	r15, r24
     310:	8e 01       	movw	r16, r28
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	69 e0       	ldi	r22, 0x09	; 9
     31a:	7d e3       	ldi	r23, 0x3D	; 61
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
     324:	d5 cf       	rjmp	.-86     	; 0x2d0 <downdir+0x24>

00000326 <centerdir>:
	}
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
     326:	1c 99       	sbic	0x03, 4	; 3
     328:	04 c0       	rjmp	.+8      	; 0x332 <centerdir+0xc>
     32a:	fc 01       	movw	r30, r24
     32c:	24 85       	ldd	r18, Z+12	; 0x0c
     32e:	22 23       	and	r18, r18
     330:	39 f0       	breq	.+14     	; 0x340 <centerdir+0x1a>
		self->heldCenter = true;
		SYNC(self->gui, guiFrecReset, 0);
	}
	else if (!PRESSEDCN) {
     332:	1c 9b       	sbis	0x03, 4	; 3
     334:	02 c0       	rjmp	.+4      	; 0x33a <centerdir+0x14>
		self->heldCenter = false;
     336:	fc 01       	movw	r30, r24
     338:	14 86       	std	Z+12, r1	; 0x0c
	}
	return 0;
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	08 95       	ret
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
		self->heldCenter = true;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	84 87       	std	Z+12, r24	; 0x0c
		SYNC(self->gui, guiFrecReset, 0);
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	6c e7       	ldi	r22, 0x7C	; 124
     34a:	73 e0       	ldi	r23, 0x03	; 3
     34c:	84 81       	ldd	r24, Z+4	; 0x04
     34e:	95 81       	ldd	r25, Z+5	; 0x05
     350:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
	}
	else if (!PRESSEDCN) {
		self->heldCenter = false;
	}
	return 0;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret

0000035a <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
	if (PRESSEDUP && !self->heldUp) {
     360:	1e 99       	sbic	0x03, 6	; 3
     362:	03 c0       	rjmp	.+6      	; 0x36a <buttonCheckerUDC+0x10>
     364:	8e 81       	ldd	r24, Y+6	; 0x06
     366:	88 23       	and	r24, r24
     368:	c1 f0       	breq	.+48     	; 0x39a <buttonCheckerUDC+0x40>
		updir(self, 0);
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     36a:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN && !self->heldDown) {
     36c:	1f 99       	sbic	0x03, 7	; 3
     36e:	03 c0       	rjmp	.+6      	; 0x376 <buttonCheckerUDC+0x1c>
     370:	8f 81       	ldd	r24, Y+7	; 0x07
     372:	88 23       	and	r24, r24
     374:	61 f0       	breq	.+24     	; 0x38e <buttonCheckerUDC+0x34>
		downdir(self, 0); // Hantera ner-knappen
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     376:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN && !self->heldCenter) {
     378:	1c 99       	sbic	0x03, 4	; 3
     37a:	03 c0       	rjmp	.+6      	; 0x382 <buttonCheckerUDC+0x28>
     37c:	8c 85       	ldd	r24, Y+12	; 0x0c
     37e:	88 23       	and	r24, r24
     380:	91 f0       	breq	.+36     	; 0x3a6 <buttonCheckerUDC+0x4c>
		centerdir(self, 0);
	}
	else {
		self->heldCenter = false;
     382:	1c 86       	std	Y+12, r1	; 0x0c
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
	}
	if (PRESSEDDN && !self->heldDown) {
		downdir(self, 0); // Hantera ner-knappen
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 56 01 	call	0x2ac	; 0x2ac <downdir>
     398:	ef cf       	rjmp	.-34     	; 0x378 <buttonCheckerUDC+0x1e>


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
	if (PRESSEDUP && !self->heldUp) {
		updir(self, 0);
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 19 01 	call	0x232	; 0x232 <updir>
     3a4:	e3 cf       	rjmp	.-58     	; 0x36c <buttonCheckerUDC+0x12>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
	}
	if (PRESSEDCN && !self->heldCenter) {
		centerdir(self, 0);
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	ce 01       	movw	r24, r28
     3ac:	0e 94 93 01 	call	0x326	; 0x326 <centerdir>
	}
	else {
		self->heldCenter = false;
	}
	return 0;
}
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <writeChar.part.0>:
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     3ba:	90 ed       	ldi	r25, 0xD0	; 208
     3bc:	98 0f       	add	r25, r24
     3be:	9a 30       	cpi	r25, 0x0A	; 10
     3c0:	60 f1       	brcs	.+88     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     3c2:	9b 01       	movw	r18, r22
     3c4:	21 70       	andi	r18, 0x01	; 1
     3c6:	30 78       	andi	r19, 0x80	; 128
     3c8:	37 fd       	sbrc	r19, 7
     3ca:	71 c0       	rjmp	.+226    	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	22 0f       	add	r18, r18
     3d2:	33 1f       	adc	r19, r19
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	77 fd       	sbrc	r23, 7
     3de:	5d c0       	rjmp	.+186    	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
     3e0:	75 95       	asr	r23
     3e2:	67 95       	ror	r22
     3e4:	fb 01       	movw	r30, r22
     3e6:	e4 51       	subi	r30, 0x14	; 20
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	8f e0       	ldi	r24, 0x0F	; 15
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <writeChar.part.0+0x38>
     3f0:	88 0f       	add	r24, r24
     3f2:	2a 95       	dec	r18
     3f4:	ea f7       	brpl	.-6      	; 0x3f0 <writeChar.part.0+0x36>
     3f6:	80 95       	com	r24
     3f8:	90 81       	ld	r25, Z
     3fa:	98 23       	and	r25, r24
     3fc:	9b 2b       	or	r25, r27
     3fe:	90 83       	st	Z, r25
     400:	95 81       	ldd	r25, Z+5	; 0x05
     402:	98 23       	and	r25, r24
     404:	9a 2b       	or	r25, r26
     406:	95 83       	std	Z+5, r25	; 0x05
     408:	92 85       	ldd	r25, Z+10	; 0x0a
     40a:	98 23       	and	r25, r24
     40c:	94 2b       	or	r25, r20
     40e:	92 87       	std	Z+10, r25	; 0x0a
     410:	97 85       	ldd	r25, Z+15	; 0x0f
     412:	89 23       	and	r24, r25
     414:	85 2b       	or	r24, r21
     416:	87 87       	std	Z+15, r24	; 0x0f
     418:	08 95       	ret
     41a:	e8 2f       	mov	r30, r24
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 51       	subi	r30, 0x1E	; 30
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	40 81       	ld	r20, Z
     428:	51 81       	ldd	r21, Z+1	; 0x01
     42a:	9b 01       	movw	r18, r22
     42c:	21 70       	andi	r18, 0x01	; 1
     42e:	30 78       	andi	r19, 0x80	; 128
     430:	37 fd       	sbrc	r19, 7
     432:	36 c0       	rjmp	.+108    	; 0x4a0 <__DATA_REGION_LENGTH__+0xa0>
     434:	22 0f       	add	r18, r18
     436:	33 1f       	adc	r19, r19
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	ca 01       	movw	r24, r20
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	99 27       	eor	r25, r25
     442:	98 2f       	mov	r25, r24
     444:	02 2e       	mov	r0, r18
     446:	01 c0       	rjmp	.+2      	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
     448:	99 0f       	add	r25, r25
     44a:	0a 94       	dec	r0
     44c:	ea f7       	brpl	.-6      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
     44e:	b9 2f       	mov	r27, r25
     450:	ca 01       	movw	r24, r20
     452:	92 95       	swap	r25
     454:	82 95       	swap	r24
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	89 27       	eor	r24, r25
     45a:	9f 70       	andi	r25, 0x0F	; 15
     45c:	89 27       	eor	r24, r25
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	99 27       	eor	r25, r25
     462:	98 2f       	mov	r25, r24
     464:	02 2e       	mov	r0, r18
     466:	01 c0       	rjmp	.+2      	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
     468:	99 0f       	add	r25, r25
     46a:	0a 94       	dec	r0
     46c:	ea f7       	brpl	.-6      	; 0x468 <__DATA_REGION_LENGTH__+0x68>
     46e:	a9 2f       	mov	r26, r25
     470:	85 2f       	mov	r24, r21
     472:	99 27       	eor	r25, r25
     474:	8f 70       	andi	r24, 0x0F	; 15
     476:	99 27       	eor	r25, r25
     478:	02 2e       	mov	r0, r18
     47a:	01 c0       	rjmp	.+2      	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
     47c:	88 0f       	add	r24, r24
     47e:	0a 94       	dec	r0
     480:	ea f7       	brpl	.-6      	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
     482:	48 2f       	mov	r20, r24
     484:	85 2f       	mov	r24, r21
     486:	82 95       	swap	r24
     488:	8f 70       	andi	r24, 0x0F	; 15
     48a:	02 2e       	mov	r0, r18
     48c:	01 c0       	rjmp	.+2      	; 0x490 <__DATA_REGION_LENGTH__+0x90>
     48e:	88 0f       	add	r24, r24
     490:	0a 94       	dec	r0
     492:	ea f7       	brpl	.-6      	; 0x48e <__DATA_REGION_LENGTH__+0x8e>
     494:	58 2f       	mov	r21, r24
     496:	77 ff       	sbrs	r23, 7
     498:	a3 cf       	rjmp	.-186    	; 0x3e0 <writeChar.part.0+0x26>
     49a:	6f 5f       	subi	r22, 0xFF	; 255
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	a0 cf       	rjmp	.-192    	; 0x3e0 <writeChar.part.0+0x26>
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	31 09       	sbc	r19, r1
     4a4:	2e 6f       	ori	r18, 0xFE	; 254
     4a6:	3f 6f       	ori	r19, 0xFF	; 255
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	c3 cf       	rjmp	.-122    	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     4ae:	21 50       	subi	r18, 0x01	; 1
     4b0:	31 09       	sbc	r19, r1
     4b2:	2e 6f       	ori	r18, 0xFE	; 254
     4b4:	3f 6f       	ori	r19, 0xFF	; 255
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	88 cf       	rjmp	.-240    	; 0x3cc <writeChar.part.0+0x12>

000004bc <lcd_init>:
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     4c2:	87 eb       	ldi	r24, 0xB7	; 183
     4c4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     4c8:	8f e0       	ldi	r24, 0x0F	; 15
     4ca:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     4ce:	08 95       	ret

000004d0 <printAt>:
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
}

void printAt(long num, int pos) {
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	6b 01       	movw	r12, r22
     4de:	7c 01       	movw	r14, r24
     4e0:	ea 01       	movw	r28, r20
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4e2:	46 30       	cpi	r20, 0x06	; 6
     4e4:	51 05       	cpc	r21, r1
     4e6:	f0 f0       	brcs	.+60     	; 0x524 <__stack+0x25>
}

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
     4e8:	21 96       	adiw	r28, 0x01	; 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4ea:	c6 30       	cpi	r28, 0x06	; 6
     4ec:	d1 05       	cpc	r29, r1
     4ee:	38 f0       	brcs	.+14     	; 0x4fe <printAt+0x2e>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
	
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret
     4fe:	c7 01       	movw	r24, r14
     500:	b6 01       	movw	r22, r12
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 9e 11 	call	0x233c	; 0x233c <__divmodsi4>
     50e:	86 2f       	mov	r24, r22
     510:	be 01       	movw	r22, r28
     512:	80 5d       	subi	r24, 0xD0	; 208
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <writeChar.part.0>
     524:	24 e6       	ldi	r18, 0x64	; 100
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 9e 11 	call	0x233c	; 0x233c <__divmodsi4>
     530:	2a e0       	ldi	r18, 0x0A	; 10
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	0e 94 9e 11 	call	0x233c	; 0x233c <__divmodsi4>
     53c:	be 01       	movw	r22, r28
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	82 0f       	add	r24, r18
     542:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     546:	d0 cf       	rjmp	.-96     	; 0x4e8 <printAt+0x18>

00000548 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	6b ea       	ldi	r22, 0xAB	; 171
     554:	74 e0       	ldi	r23, 0x04	; 4
     556:	8c 81       	ldd	r24, Y+4	; 0x04
     558:	9d 81       	ldd	r25, Y+5	; 0x05
     55a:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
     55e:	bc 01       	movw	r22, r24
     560:	99 0f       	add	r25, r25
     562:	88 0b       	sbc	r24, r24
     564:	99 0b       	sbc	r25, r25
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	6b ea       	ldi	r22, 0xAB	; 171
     574:	74 e0       	ldi	r23, 0x04	; 4
     576:	8e 81       	ldd	r24, Y+6	; 0x06
     578:	9f 81       	ldd	r25, Y+7	; 0x07
     57a:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
     57e:	bc 01       	movw	r22, r24
     580:	99 0f       	add	r25, r25
     582:	88 0b       	sbc	r24, r24
     584:	99 0b       	sbc	r25, r25
     586:	44 e0       	ldi	r20, 0x04	; 4
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     58e:	88 85       	ldd	r24, Y+8	; 0x08
     590:	62 e0       	ldi	r22, 0x02	; 2
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	88 23       	and	r24, r24
     596:	69 f0       	breq	.+26     	; 0x5b2 <updateDisplay+0x6a>
     598:	80 e3       	ldi	r24, 0x30	; 48
     59a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     59e:	63 e0       	ldi	r22, 0x03	; 3
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	81 e3       	ldi	r24, 0x31	; 49
     5a4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
		printAt(10, 2);
		} else {
		printAt(1, 2);
	}
	return 0;
}
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret
     5b2:	81 e3       	ldi	r24, 0x31	; 49
     5b4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     5b8:	63 e0       	ldi	r22, 0x03	; 3
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 e3       	ldi	r24, 0x30	; 48
     5be:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeChar.part.0>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     5d8:	21 e0       	ldi	r18, 0x01	; 1
     5da:	67 2b       	or	r22, r23
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <switchGen+0x14>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     5e4:	c1 2c       	mov	r12, r1
     5e6:	d1 2c       	mov	r13, r1
     5e8:	24 ea       	ldi	r18, 0xA4	; 164
     5ea:	e2 2e       	mov	r14, r18
     5ec:	22 e0       	ldi	r18, 0x02	; 2
     5ee:	f2 2e       	mov	r15, r18
     5f0:	8c 01       	movw	r16, r24
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	a9 01       	movw	r20, r18
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	cb 01       	movw	r24, r22
     5fe:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	return 0;
}
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	08 95       	ret

00000614 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     626:	88 85       	ldd	r24, Y+8	; 0x08
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <guiFrecInc+0x6c>
		ASYNC(self->gen1, FrecInc, 0);
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     62c:	0e 81       	ldd	r16, Y+6	; 0x06
     62e:	1f 81       	ldd	r17, Y+7	; 0x07
     630:	c1 2c       	mov	r12, r1
     632:	d1 2c       	mov	r13, r1
     634:	8f ea       	ldi	r24, 0xAF	; 175
     636:	e8 2e       	mov	r14, r24
     638:	84 e0       	ldi	r24, 0x04	; 4
     63a:	f8 2e       	mov	r15, r24
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	a9 01       	movw	r20, r18
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	cb 01       	movw	r24, r22
     648:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	}
	ASYNC(self, updateDisplay, 0);
     64c:	c1 2c       	mov	r12, r1
     64e:	d1 2c       	mov	r13, r1
     650:	94 ea       	ldi	r25, 0xA4	; 164
     652:	e9 2e       	mov	r14, r25
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	f9 2e       	mov	r15, r25
     658:	8e 01       	movw	r16, r28
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	a9 01       	movw	r20, r18
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	cb 01       	movw	r24, r22
     666:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	return 0;

}
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	08 95       	ret

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecInc, 0);
     680:	0c 81       	ldd	r16, Y+4	; 0x04
     682:	1d 81       	ldd	r17, Y+5	; 0x05
     684:	d5 cf       	rjmp	.-86     	; 0x630 <guiFrecInc+0x1c>

00000686 <guiFrecDec>:

}

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     698:	88 85       	ldd	r24, Y+8	; 0x08
     69a:	88 23       	and	r24, r24
     69c:	51 f1       	breq	.+84     	; 0x6f2 <guiFrecDec+0x6c>
		ASYNC(self->gen1, FrecDec, 0);
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     69e:	0e 81       	ldd	r16, Y+6	; 0x06
     6a0:	1f 81       	ldd	r17, Y+7	; 0x07
     6a2:	c1 2c       	mov	r12, r1
     6a4:	d1 2c       	mov	r13, r1
     6a6:	88 eb       	ldi	r24, 0xB8	; 184
     6a8:	e8 2e       	mov	r14, r24
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	f8 2e       	mov	r15, r24
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	cb 01       	movw	r24, r22
     6ba:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	}
	ASYNC(self, updateDisplay, 0);
     6be:	c1 2c       	mov	r12, r1
     6c0:	d1 2c       	mov	r13, r1
     6c2:	94 ea       	ldi	r25, 0xA4	; 164
     6c4:	e9 2e       	mov	r14, r25
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	f9 2e       	mov	r15, r25
     6ca:	8e 01       	movw	r16, r28
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	cb 01       	movw	r24, r22
     6d8:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	return 0;
}
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	08 95       	ret

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecDec, 0);
     6f2:	0c 81       	ldd	r16, Y+4	; 0x04
     6f4:	1d 81       	ldd	r17, Y+5	; 0x05
     6f6:	d5 cf       	rjmp	.-86     	; 0x6a2 <guiFrecDec+0x1c>

000006f8 <guiFrecReset>:
	return 0;
}

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     70a:	88 85       	ldd	r24, Y+8	; 0x08
     70c:	88 23       	and	r24, r24
     70e:	51 f1       	breq	.+84     	; 0x764 <guiFrecReset+0x6c>
		ASYNC(self->gen1, FrecReset, 0);
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     710:	0e 81       	ldd	r16, Y+6	; 0x06
     712:	1f 81       	ldd	r17, Y+7	; 0x07
     714:	c1 2c       	mov	r12, r1
     716:	d1 2c       	mov	r13, r1
     718:	81 ec       	ldi	r24, 0xC1	; 193
     71a:	e8 2e       	mov	r14, r24
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	f8 2e       	mov	r15, r24
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	a9 01       	movw	r20, r18
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	cb 01       	movw	r24, r22
     72c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	}
	ASYNC(self, updateDisplay, 0);
     730:	c1 2c       	mov	r12, r1
     732:	d1 2c       	mov	r13, r1
     734:	94 ea       	ldi	r25, 0xA4	; 164
     736:	e9 2e       	mov	r14, r25
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	f9 2e       	mov	r15, r25
     73c:	8e 01       	movw	r16, r28
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	cb 01       	movw	r24, r22
     74a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	return 0;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecReset, 0);
     764:	0c 81       	ldd	r16, Y+4	; 0x04
     766:	1d 81       	ldd	r17, Y+5	; 0x05
     768:	d5 cf       	rjmp	.-86     	; 0x714 <guiFrecReset+0x1c>

0000076a <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
	ASYNC(self->button, buttonCheckerLR, 0);
     776:	fc 01       	movw	r30, r24
     778:	04 81       	ldd	r16, Z+4	; 0x04
     77a:	15 81       	ldd	r17, Z+5	; 0x05
     77c:	c1 2c       	mov	r12, r1
     77e:	d1 2c       	mov	r13, r1
     780:	85 ef       	ldi	r24, 0xF5	; 245
     782:	e8 2e       	mov	r14, r24
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	f8 2e       	mov	r15, r24
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	a9 01       	movw	r20, r18
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	cb 01       	movw	r24, r22
     794:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	return 0;
}
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
	ASYNC(self->button, buttonCheckerUDC, 0);
     7b6:	fc 01       	movw	r30, r24
     7b8:	04 81       	ldd	r16, Z+4	; 0x04
     7ba:	15 81       	ldd	r17, Z+5	; 0x05
     7bc:	c1 2c       	mov	r12, r1
     7be:	d1 2c       	mov	r13, r1
     7c0:	8d ea       	ldi	r24, 0xAD	; 173
     7c2:	e8 2e       	mov	r14, r24
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	f8 2e       	mov	r15, r24
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	a9 01       	movw	r20, r18
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	cb 01       	movw	r24, r22
     7d4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	return 0;
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	08 95       	ret

000007ea <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	8c e4       	ldi	r24, 0x4C	; 76
     802:	e8 2e       	mov	r14, r24
     804:	84 e0       	ldi	r24, 0x04	; 4
     806:	f8 2e       	mov	r15, r24
     808:	06 e2       	ldi	r16, 0x26	; 38
     80a:	11 e0       	ldi	r17, 0x01	; 1
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	a9 01       	movw	r20, r18
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	cb 01       	movw	r24, r22
     818:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	ASYNC(&pulseGen2, setPulse, 0);
     81c:	0c e1       	ldi	r16, 0x1C	; 28
     81e:	11 e0       	ldi	r17, 0x01	; 1
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	a9 01       	movw	r20, r18
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	cb 01       	movw	r24, r22
     82c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     830:	94 ea       	ldi	r25, 0xA4	; 164
     832:	e9 2e       	mov	r14, r25
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	f9 2e       	mov	r15, r25
     838:	8e 01       	movw	r16, r28
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	a9 01       	movw	r20, r18
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	cb 01       	movw	r24, r22
     846:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	
	return 0;
}
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     860:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     864:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     868:	0e 94 ad 00 	call	0x15a	; 0x15a <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	65 eb       	ldi	r22, 0xB5	; 181
     870:	73 e0       	ldi	r23, 0x03	; 3
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 23 11 	call	0x2246	; 0x2246 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     87a:	42 e0       	ldi	r20, 0x02	; 2
     87c:	65 ed       	ldi	r22, 0xD5	; 213
     87e:	73 e0       	ldi	r23, 0x03	; 3
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 23 11 	call	0x2246	; 0x2246 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	65 ef       	ldi	r22, 0xF5	; 245
     88e:	73 e0       	ldi	r23, 0x03	; 3
     890:	83 e1       	ldi	r24, 0x13	; 19
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0c 94 3d 11 	jmp	0x227a	; 0x227a <tinytimber>

00000898 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     8aa:	8c 81       	ldd	r24, Y+4	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     8ac:	0f 81       	ldd	r16, Y+7	; 0x07
     8ae:	18 85       	ldd	r17, Y+8	; 0x08
     8b0:	c1 2c       	mov	r12, r1
     8b2:	d1 2c       	mov	r13, r1
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     8b4:	88 23       	and	r24, r24
     8b6:	a1 f1       	breq	.+104    	; 0x920 <setPulse+0x88>
	    ASYNC(self->wbit, writeBit, 0);
		AFTER(MSEC(1000), self, setPulse, 0);
    }
	else {
		// Annars toggla outputHigh.
		ASYNC(self->wbit, toggleBit, 0);
     8b8:	8b e7       	ldi	r24, 0x7B	; 123
     8ba:	e8 2e       	mov	r14, r24
     8bc:	81 e1       	ldi	r24, 0x11	; 17
     8be:	f8 2e       	mov	r15, r24
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	a9 01       	movw	r20, r18
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	cb 01       	movw	r24, r22
     8cc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
		
		// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
		int delay = 1000 / self->frec;
     8d0:	6c 81       	ldd	r22, Y+4	; 0x04
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	88 ee       	ldi	r24, 0xE8	; 232
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 8a 11 	call	0x2314	; 0x2314 <__divmodhi4>
		AFTER(MSEC(delay), self, setPulse, 0);
     8dc:	2d e7       	ldi	r18, 0x7D	; 125
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	db 01       	movw	r26, r22
     8e2:	0e 94 bd 11 	call	0x237a	; 0x237a <__usmulhisi3>
     8e6:	95 95       	asr	r25
     8e8:	87 95       	ror	r24
     8ea:	77 95       	ror	r23
     8ec:	67 95       	ror	r22
     8ee:	95 95       	asr	r25
     8f0:	87 95       	ror	r24
     8f2:	77 95       	ror	r23
     8f4:	67 95       	ror	r22
     8f6:	3c e4       	ldi	r19, 0x4C	; 76
     8f8:	e3 2e       	mov	r14, r19
     8fa:	34 e0       	ldi	r19, 0x04	; 4
     8fc:	f3 2e       	mov	r15, r19
     8fe:	8e 01       	movw	r16, r28
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	a9 01       	movw	r20, r18
     906:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
	}
	return 0;
}
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
	    ASYNC(self->wbit, writeBit, 0);
     920:	49 e5       	ldi	r20, 0x59	; 89
     922:	e4 2e       	mov	r14, r20
     924:	41 e1       	ldi	r20, 0x11	; 17
     926:	f4 2e       	mov	r15, r20
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	a9 01       	movw	r20, r18
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	cb 01       	movw	r24, r22
     934:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
		AFTER(MSEC(1000), self, setPulse, 0);
     938:	5c e4       	ldi	r21, 0x4C	; 76
     93a:	e5 2e       	mov	r14, r21
     93c:	54 e0       	ldi	r21, 0x04	; 4
     93e:	f5 2e       	mov	r15, r21
     940:	8e 01       	movw	r16, r28
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	a9 01       	movw	r20, r18
     948:	62 e1       	ldi	r22, 0x12	; 18
     94a:	7a e7       	ldi	r23, 0x7A	; 122
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
     954:	da cf       	rjmp	.-76     	; 0x90a <setPulse+0x72>

00000956 <getFrec>:
	return 0;
}

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     956:	fc 01       	movw	r30, r24
     958:	84 81       	ldd	r24, Z+4	; 0x04
}
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 95       	ret

0000095e <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     95e:	fc 01       	movw	r30, r24
    unsigned char old = self->frec;
    if (self->frec < 99) {
     960:	94 81       	ldd	r25, Z+4	; 0x04
     962:	93 36       	cpi	r25, 0x63	; 99
     964:	10 f4       	brcc	.+4      	; 0x96a <FrecInc+0xc>
	    self->frec++;
     966:	9f 5f       	subi	r25, 0xFF	; 255
     968:	94 83       	std	Z+4, r25	; 0x04
    }
    return 0;
}
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	08 95       	ret

00000970 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     970:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     972:	94 81       	ldd	r25, Z+4	; 0x04
     974:	99 23       	and	r25, r25
     976:	11 f0       	breq	.+4      	; 0x97c <FrecDec+0xc>
		self->frec--;
     978:	91 50       	subi	r25, 0x01	; 1
     97a:	94 83       	std	Z+4, r25	; 0x04
	}
	return 0;
}
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	08 95       	ret

00000982 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     990:	84 81       	ldd	r24, Z+4	; 0x04
     992:	81 11       	cpse	r24, r1
     994:	0b c0       	rjmp	.+22     	; 0x9ac <FrecReset+0x2a>
	    self->frec = self->frec_old;
     996:	85 81       	ldd	r24, Z+5	; 0x05
     998:	84 83       	std	Z+4, r24	; 0x04
	    self->frec_old = self->frec;
	    self->frec = 0;
	    ASYNC(self->wbit, writeBit, 0);
    }
    return 0;
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	df 90       	pop	r13
     9a8:	cf 90       	pop	r12
     9aa:	08 95       	ret
int FrecReset(Pulsegenerator *self, int arg) {
    if (self->frec == 0) {
	    self->frec = self->frec_old;
	    } 
	else {
	    self->frec_old = self->frec;
     9ac:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     9ae:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     9b0:	07 81       	ldd	r16, Z+7	; 0x07
     9b2:	10 85       	ldd	r17, Z+8	; 0x08
     9b4:	c1 2c       	mov	r12, r1
     9b6:	d1 2c       	mov	r13, r1
     9b8:	89 e5       	ldi	r24, 0x59	; 89
     9ba:	e8 2e       	mov	r14, r24
     9bc:	81 e1       	ldi	r24, 0x11	; 17
     9be:	f8 2e       	mov	r15, r24
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	a9 01       	movw	r20, r18
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	cb 01       	movw	r24, r22
     9cc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
     9d0:	e4 cf       	rjmp	.-56     	; 0x99a <FrecReset+0x18>

000009d2 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     9d2:	e1 e6       	ldi	r30, 0x61	; 97
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     9da:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     9dc:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     9de:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     9e0:	e1 e8       	ldi	r30, 0x81	; 129
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	8d 60       	ori	r24, 0x0D	; 13
     9e8:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     9ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     9f2:	ef e6       	ldi	r30, 0x6F	; 111
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	82 60       	ori	r24, 0x02	; 2
     9fa:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     9fc:	82 ec       	ldi	r24, 0xC2	; 194
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     a04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     a08:	08 95       	ret

00000a0a <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <initialize+0x6>
     a10:	00 d0       	rcall	.+0      	; 0xa12 <initialize+0x8>
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	89 e4       	ldi	r24, 0x49	; 73
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	29 e7       	ldi	r18, 0x79	; 121
     a1c:	33 e0       	ldi	r19, 0x03	; 3
     a1e:	fc 01       	movw	r30, r24
     a20:	70 97       	sbiw	r30, 0x10	; 16
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
     a26:	40 96       	adiw	r24, 0x10	; 16
     a28:	82 17       	cp	r24, r18
     a2a:	93 07       	cpc	r25, r19
     a2c:	c1 f7       	brne	.-16     	; 0xa1e <initialize+0x14>
     a2e:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <messages+0x131>
     a32:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <messages+0x130>
     a36:	e4 e8       	ldi	r30, 0x84	; 132
     a38:	f1 e0       	ldi	r31, 0x01	; 1
     a3a:	81 ea       	ldi	r24, 0xA1	; 161
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
     a42:	8e eb       	ldi	r24, 0xBE	; 190
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	96 8f       	std	Z+30, r25	; 0x1e
     a48:	85 8f       	std	Z+29, r24	; 0x1d
     a4a:	ab ed       	ldi	r26, 0xDB	; 219
     a4c:	b1 e0       	ldi	r27, 0x01	; 1
     a4e:	b3 af       	std	Z+59, r27	; 0x3b
     a50:	a2 af       	std	Z+58, r26	; 0x3a
     a52:	1d 92       	st	X+, r1
     a54:	1c 92       	st	X, r1
     a56:	fa 83       	std	Y+2, r31	; 0x02
     a58:	e9 83       	std	Y+1, r30	; 0x01
     a5a:	e5 ed       	ldi	r30, 0xD5	; 213
     a5c:	f3 e0       	ldi	r31, 0x03	; 3
     a5e:	fc 83       	std	Y+4, r31	; 0x04
     a60:	eb 83       	std	Y+3, r30	; 0x03
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	06 96       	adiw	r24, 0x06	; 6
     a68:	0e 94 09 12 	call	0x2412	; 0x2412 <setjmp>
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	e9 81       	ldd	r30, Y+1	; 0x01
     a72:	fa 81       	ldd	r31, Y+2	; 0x02
     a74:	97 8b       	std	Z+23, r25	; 0x17
     a76:	86 8b       	std	Z+22, r24	; 0x16
     a78:	91 8f       	std	Z+25, r25	; 0x19
     a7a:	80 8f       	std	Z+24, r24	; 0x18
     a7c:	88 ea       	ldi	r24, 0xA8	; 168
     a7e:	90 e1       	ldi	r25, 0x10	; 16
     a80:	94 8f       	std	Z+28, r25	; 0x1c
     a82:	83 8f       	std	Z+27, r24	; 0x1b
     a84:	15 82       	std	Z+5, r1	; 0x05
     a86:	14 82       	std	Z+4, r1	; 0x04
     a88:	7d 96       	adiw	r30, 0x1d	; 29
     a8a:	fa 83       	std	Y+2, r31	; 0x02
     a8c:	e9 83       	std	Y+1, r30	; 0x01
     a8e:	eb 81       	ldd	r30, Y+3	; 0x03
     a90:	fc 81       	ldd	r31, Y+4	; 0x04
     a92:	e0 5a       	subi	r30, 0xA0	; 160
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	fc 83       	std	Y+4, r31	; 0x04
     a98:	eb 83       	std	Y+3, r30	; 0x03
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	88 5f       	subi	r24, 0xF8	; 248
     aa0:	91 40       	sbci	r25, 0x01	; 1
     aa2:	f9 f6       	brne	.-66     	; 0xa62 <initialize+0x58>
     aa4:	ec e1       	ldi	r30, 0x1C	; 28
     aa6:	f2 e0       	ldi	r31, 0x02	; 2
     aa8:	11 82       	std	Z+1, r1	; 0x01
     aaa:	10 82       	st	Z, r1
     aac:	15 82       	std	Z+5, r1	; 0x05
     aae:	14 82       	std	Z+4, r1	; 0x04
     ab0:	13 82       	std	Z+3, r1	; 0x03
     ab2:	12 82       	std	Z+2, r1	; 0x02
     ab4:	e1 e6       	ldi	r30, 0x61	; 97
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	80 83       	st	Z, r24
     abc:	10 82       	st	Z, r1
     abe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ac2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <dispatch>:
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <dispatch+0x6>
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
     af2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
     af6:	06 96       	adiw	r24, 0x06	; 6
     af8:	0e 94 09 12 	call	0x2412	; 0x2412 <setjmp>
     afc:	89 2b       	or	r24, r25
     afe:	29 f0       	breq	.+10     	; 0xb0a <dispatch+0x2a>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	9a 81       	ldd	r25, Y+2	; 0x02
     b0e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <current+0x1>
     b12:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current>
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	06 96       	adiw	r24, 0x06	; 6
     b1c:	0e 94 29 12 	call	0x2452	; 0x2452 <longjmp>

00000b20 <schedule>:
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
     b2c:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
     b30:	30 97       	sbiw	r30, 0x00	; 0
     b32:	f1 f0       	breq	.+60     	; 0xb70 <schedule+0x50>
     b34:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
     b38:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	c1 f0       	breq	.+48     	; 0xb70 <schedule+0x50>
     b40:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <activeStack>
     b44:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <activeStack+0x1>
     b48:	aa 81       	ldd	r26, Y+2	; 0x02
     b4a:	bb 81       	ldd	r27, Y+3	; 0x03
     b4c:	10 97       	sbiw	r26, 0x00	; 0
     b4e:	a9 f0       	breq	.+42     	; 0xb7a <schedule+0x5a>
     b50:	46 81       	ldd	r20, Z+6	; 0x06
     b52:	57 81       	ldd	r21, Z+7	; 0x07
     b54:	60 85       	ldd	r22, Z+8	; 0x08
     b56:	71 85       	ldd	r23, Z+9	; 0x09
     b58:	16 96       	adiw	r26, 0x06	; 6
     b5a:	0d 91       	ld	r16, X+
     b5c:	1d 91       	ld	r17, X+
     b5e:	2d 91       	ld	r18, X+
     b60:	3c 91       	ld	r19, X
     b62:	19 97       	sbiw	r26, 0x09	; 9
     b64:	40 1b       	sub	r20, r16
     b66:	51 0b       	sbc	r21, r17
     b68:	62 0b       	sbc	r22, r18
     b6a:	73 0b       	sbc	r23, r19
     b6c:	77 fd       	sbrc	r23, 7
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <schedule+0x5a>
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 81       	ld	r18, Z
     b7e:	31 81       	ldd	r19, Z+1	; 0x01
     b80:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
     b84:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
     b88:	d1 83       	std	Z+1, r29	; 0x01
     b8a:	c0 83       	st	Z, r28
     b8c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
     b90:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	0c 94 70 05 	jmp	0xae0	; 0xae0 <dispatch>

00000ba0 <dequeue.part.0>:
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     ba6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     baa:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	83 bf       	out	0x33, r24	; 51
     bb2:	88 95       	sleep
     bb4:	fd cf       	rjmp	.-6      	; 0xbb0 <dequeue.part.0+0x10>

00000bb6 <__vector_1>:
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
     bd8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     bdc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     be0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     be4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be8:	c9 01       	movw	r24, r18
     bea:	03 2e       	mov	r0, r19
     bec:	00 0c       	add	r0, r0
     bee:	aa 0b       	sbc	r26, r26
     bf0:	bb 0b       	sbc	r27, r27
     bf2:	dc 01       	movw	r26, r24
     bf4:	99 27       	eor	r25, r25
     bf6:	88 27       	eor	r24, r24
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	84 2b       	or	r24, r20
     bfe:	95 2b       	or	r25, r21
     c00:	a6 2b       	or	r26, r22
     c02:	b7 2b       	or	r27, r23
     c04:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     c08:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     c0c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     c10:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     c14:	b0 9b       	sbis	0x16, 0	; 22
     c16:	1b c0       	rjmp	.+54     	; 0xc4e <__vector_1+0x98>
     c18:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c1c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c20:	c9 01       	movw	r24, r18
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	09 2e       	mov	r0, r25
     c26:	00 0c       	add	r0, r0
     c28:	aa 0b       	sbc	r26, r26
     c2a:	bb 0b       	sbc	r27, r27
     c2c:	dc 01       	movw	r26, r24
     c2e:	99 27       	eor	r25, r25
     c30:	88 27       	eor	r24, r24
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	84 2b       	or	r24, r20
     c38:	95 2b       	or	r25, r21
     c3a:	a6 2b       	or	r26, r22
     c3c:	b7 2b       	or	r27, r23
     c3e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     c42:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     c46:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     c4a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     c4e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable>
     c52:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1>
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	39 f0       	breq	.+14     	; 0xc68 <__vector_1+0xb2>
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable>
     c62:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1>
     c66:	09 95       	icall
     c68:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_2>:
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
     cb0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     cb4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     cb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cc0:	c9 01       	movw	r24, r18
     cc2:	03 2e       	mov	r0, r19
     cc4:	00 0c       	add	r0, r0
     cc6:	aa 0b       	sbc	r26, r26
     cc8:	bb 0b       	sbc	r27, r27
     cca:	dc 01       	movw	r26, r24
     ccc:	99 27       	eor	r25, r25
     cce:	88 27       	eor	r24, r24
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	84 2b       	or	r24, r20
     cd6:	95 2b       	or	r25, r21
     cd8:	a6 2b       	or	r26, r22
     cda:	b7 2b       	or	r27, r23
     cdc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     ce0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     ce4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     ce8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     cec:	b0 9b       	sbis	0x16, 0	; 22
     cee:	1b c0       	rjmp	.+54     	; 0xd26 <__vector_2+0x98>
     cf0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cf4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf8:	c9 01       	movw	r24, r18
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	09 2e       	mov	r0, r25
     cfe:	00 0c       	add	r0, r0
     d00:	aa 0b       	sbc	r26, r26
     d02:	bb 0b       	sbc	r27, r27
     d04:	dc 01       	movw	r26, r24
     d06:	99 27       	eor	r25, r25
     d08:	88 27       	eor	r24, r24
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	84 2b       	or	r24, r20
     d10:	95 2b       	or	r25, r21
     d12:	a6 2b       	or	r26, r22
     d14:	b7 2b       	or	r27, r23
     d16:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     d1a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     d1e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     d22:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     d26:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x2>
     d2a:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x3>
     d2e:	30 97       	sbiw	r30, 0x00	; 0
     d30:	39 f0       	breq	.+14     	; 0xd40 <__vector_2+0xb2>
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x2>
     d3a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x3>
     d3e:	09 95       	icall
     d40:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_3>:
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
     d88:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     d8c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     d90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d98:	c9 01       	movw	r24, r18
     d9a:	03 2e       	mov	r0, r19
     d9c:	00 0c       	add	r0, r0
     d9e:	aa 0b       	sbc	r26, r26
     da0:	bb 0b       	sbc	r27, r27
     da2:	dc 01       	movw	r26, r24
     da4:	99 27       	eor	r25, r25
     da6:	88 27       	eor	r24, r24
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	84 2b       	or	r24, r20
     dae:	95 2b       	or	r25, r21
     db0:	a6 2b       	or	r26, r22
     db2:	b7 2b       	or	r27, r23
     db4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     db8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     dbc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     dc0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     dc4:	b0 9b       	sbis	0x16, 0	; 22
     dc6:	1b c0       	rjmp	.+54     	; 0xdfe <__vector_3+0x98>
     dc8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dcc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd0:	c9 01       	movw	r24, r18
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	09 2e       	mov	r0, r25
     dd6:	00 0c       	add	r0, r0
     dd8:	aa 0b       	sbc	r26, r26
     dda:	bb 0b       	sbc	r27, r27
     ddc:	dc 01       	movw	r26, r24
     dde:	99 27       	eor	r25, r25
     de0:	88 27       	eor	r24, r24
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	84 2b       	or	r24, r20
     de8:	95 2b       	or	r25, r21
     dea:	a6 2b       	or	r26, r22
     dec:	b7 2b       	or	r27, r23
     dee:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     df2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     df6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     dfa:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     dfe:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x4>
     e02:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x5>
     e06:	30 97       	sbiw	r30, 0x00	; 0
     e08:	39 f0       	breq	.+14     	; 0xe18 <__vector_3+0xb2>
     e0a:	62 e0       	ldi	r22, 0x02	; 2
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x4>
     e12:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x5>
     e16:	09 95       	icall
     e18:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_4>:
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	ef 93       	push	r30
     e5e:	ff 93       	push	r31
     e60:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     e64:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     e68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e70:	c9 01       	movw	r24, r18
     e72:	03 2e       	mov	r0, r19
     e74:	00 0c       	add	r0, r0
     e76:	aa 0b       	sbc	r26, r26
     e78:	bb 0b       	sbc	r27, r27
     e7a:	dc 01       	movw	r26, r24
     e7c:	99 27       	eor	r25, r25
     e7e:	88 27       	eor	r24, r24
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	84 2b       	or	r24, r20
     e86:	95 2b       	or	r25, r21
     e88:	a6 2b       	or	r26, r22
     e8a:	b7 2b       	or	r27, r23
     e8c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e90:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e94:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e98:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e9c:	b0 9b       	sbis	0x16, 0	; 22
     e9e:	1b c0       	rjmp	.+54     	; 0xed6 <__vector_4+0x98>
     ea0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ea4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ea8:	c9 01       	movw	r24, r18
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	09 2e       	mov	r0, r25
     eae:	00 0c       	add	r0, r0
     eb0:	aa 0b       	sbc	r26, r26
     eb2:	bb 0b       	sbc	r27, r27
     eb4:	dc 01       	movw	r26, r24
     eb6:	99 27       	eor	r25, r25
     eb8:	88 27       	eor	r24, r24
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	84 2b       	or	r24, r20
     ec0:	95 2b       	or	r25, r21
     ec2:	a6 2b       	or	r26, r22
     ec4:	b7 2b       	or	r27, r23
     ec6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     eca:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     ece:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     ed2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     ed6:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x6>
     eda:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x7>
     ede:	30 97       	sbiw	r30, 0x00	; 0
     ee0:	39 f0       	breq	.+14     	; 0xef0 <__vector_4+0xb2>
     ee2:	63 e0       	ldi	r22, 0x03	; 3
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x6>
     eea:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x7>
     eee:	09 95       	icall
     ef0:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <__vector_5>:
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     f3c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     f40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f48:	c9 01       	movw	r24, r18
     f4a:	03 2e       	mov	r0, r19
     f4c:	00 0c       	add	r0, r0
     f4e:	aa 0b       	sbc	r26, r26
     f50:	bb 0b       	sbc	r27, r27
     f52:	dc 01       	movw	r26, r24
     f54:	99 27       	eor	r25, r25
     f56:	88 27       	eor	r24, r24
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	84 2b       	or	r24, r20
     f5e:	95 2b       	or	r25, r21
     f60:	a6 2b       	or	r26, r22
     f62:	b7 2b       	or	r27, r23
     f64:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f68:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f6c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f70:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f74:	b0 9b       	sbis	0x16, 0	; 22
     f76:	1b c0       	rjmp	.+54     	; 0xfae <__vector_5+0x98>
     f78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f80:	c9 01       	movw	r24, r18
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	09 2e       	mov	r0, r25
     f86:	00 0c       	add	r0, r0
     f88:	aa 0b       	sbc	r26, r26
     f8a:	bb 0b       	sbc	r27, r27
     f8c:	dc 01       	movw	r26, r24
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	84 2b       	or	r24, r20
     f98:	95 2b       	or	r25, r21
     f9a:	a6 2b       	or	r26, r22
     f9c:	b7 2b       	or	r27, r23
     f9e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     fa2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     fa6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     faa:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     fae:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x8>
     fb2:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x9>
     fb6:	30 97       	sbiw	r30, 0x00	; 0
     fb8:	39 f0       	breq	.+14     	; 0xfc8 <__vector_5+0xb2>
     fba:	64 e0       	ldi	r22, 0x04	; 4
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x8>
     fc2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x9>
     fc6:	09 95       	icall
     fc8:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	0f 90       	pop	r0
     fea:	1f 90       	pop	r1
     fec:	18 95       	reti

00000fee <__vector_10>:
     fee:	1f 92       	push	r1
     ff0:	0f 92       	push	r0
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	0f 92       	push	r0
     ff6:	11 24       	eor	r1, r1
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
    1010:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1014:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1018:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    101c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1020:	c9 01       	movw	r24, r18
    1022:	03 2e       	mov	r0, r19
    1024:	00 0c       	add	r0, r0
    1026:	aa 0b       	sbc	r26, r26
    1028:	bb 0b       	sbc	r27, r27
    102a:	dc 01       	movw	r26, r24
    102c:	99 27       	eor	r25, r25
    102e:	88 27       	eor	r24, r24
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	84 2b       	or	r24, r20
    1036:	95 2b       	or	r25, r21
    1038:	a6 2b       	or	r26, r22
    103a:	b7 2b       	or	r27, r23
    103c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1040:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1044:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1048:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    104c:	b0 9b       	sbis	0x16, 0	; 22
    104e:	1b c0       	rjmp	.+54     	; 0x1086 <__vector_10+0x98>
    1050:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1054:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1058:	c9 01       	movw	r24, r18
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	09 2e       	mov	r0, r25
    105e:	00 0c       	add	r0, r0
    1060:	aa 0b       	sbc	r26, r26
    1062:	bb 0b       	sbc	r27, r27
    1064:	dc 01       	movw	r26, r24
    1066:	99 27       	eor	r25, r25
    1068:	88 27       	eor	r24, r24
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	84 2b       	or	r24, r20
    1070:	95 2b       	or	r25, r21
    1072:	a6 2b       	or	r26, r22
    1074:	b7 2b       	or	r27, r23
    1076:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    107a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    107e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1082:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1086:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xa>
    108a:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xb>
    108e:	30 97       	sbiw	r30, 0x00	; 0
    1090:	39 f0       	breq	.+14     	; 0x10a0 <__vector_10+0xb2>
    1092:	65 e0       	ldi	r22, 0x05	; 5
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xa>
    109a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xb>
    109e:	09 95       	icall
    10a0:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    10a4:	ff 91       	pop	r31
    10a6:	ef 91       	pop	r30
    10a8:	bf 91       	pop	r27
    10aa:	af 91       	pop	r26
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	7f 91       	pop	r23
    10b2:	6f 91       	pop	r22
    10b4:	5f 91       	pop	r21
    10b6:	4f 91       	pop	r20
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_11>:
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	2f 93       	push	r18
    10d2:	3f 93       	push	r19
    10d4:	4f 93       	push	r20
    10d6:	5f 93       	push	r21
    10d8:	6f 93       	push	r22
    10da:	7f 93       	push	r23
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
    10e4:	ef 93       	push	r30
    10e6:	ff 93       	push	r31
    10e8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    10ec:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    10f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10f8:	c9 01       	movw	r24, r18
    10fa:	03 2e       	mov	r0, r19
    10fc:	00 0c       	add	r0, r0
    10fe:	aa 0b       	sbc	r26, r26
    1100:	bb 0b       	sbc	r27, r27
    1102:	dc 01       	movw	r26, r24
    1104:	99 27       	eor	r25, r25
    1106:	88 27       	eor	r24, r24
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	84 2b       	or	r24, r20
    110e:	95 2b       	or	r25, r21
    1110:	a6 2b       	or	r26, r22
    1112:	b7 2b       	or	r27, r23
    1114:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1118:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    111c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1120:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1124:	b0 9b       	sbis	0x16, 0	; 22
    1126:	1b c0       	rjmp	.+54     	; 0x115e <__vector_11+0x98>
    1128:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    112c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1130:	c9 01       	movw	r24, r18
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	09 2e       	mov	r0, r25
    1136:	00 0c       	add	r0, r0
    1138:	aa 0b       	sbc	r26, r26
    113a:	bb 0b       	sbc	r27, r27
    113c:	dc 01       	movw	r26, r24
    113e:	99 27       	eor	r25, r25
    1140:	88 27       	eor	r24, r24
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	84 2b       	or	r24, r20
    1148:	95 2b       	or	r25, r21
    114a:	a6 2b       	or	r26, r22
    114c:	b7 2b       	or	r27, r23
    114e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1152:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1156:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    115a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    115e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xc>
    1162:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xd>
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	39 f0       	breq	.+14     	; 0x1178 <__vector_11+0xb2>
    116a:	66 e0       	ldi	r22, 0x06	; 6
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xc>
    1172:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xd>
    1176:	09 95       	icall
    1178:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_12>:
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    11c4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    11c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d0:	c9 01       	movw	r24, r18
    11d2:	03 2e       	mov	r0, r19
    11d4:	00 0c       	add	r0, r0
    11d6:	aa 0b       	sbc	r26, r26
    11d8:	bb 0b       	sbc	r27, r27
    11da:	dc 01       	movw	r26, r24
    11dc:	99 27       	eor	r25, r25
    11de:	88 27       	eor	r24, r24
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	84 2b       	or	r24, r20
    11e6:	95 2b       	or	r25, r21
    11e8:	a6 2b       	or	r26, r22
    11ea:	b7 2b       	or	r27, r23
    11ec:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    11f0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    11f4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    11f8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    11fc:	b0 9b       	sbis	0x16, 0	; 22
    11fe:	1b c0       	rjmp	.+54     	; 0x1236 <__vector_12+0x98>
    1200:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1204:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1208:	c9 01       	movw	r24, r18
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	09 2e       	mov	r0, r25
    120e:	00 0c       	add	r0, r0
    1210:	aa 0b       	sbc	r26, r26
    1212:	bb 0b       	sbc	r27, r27
    1214:	dc 01       	movw	r26, r24
    1216:	99 27       	eor	r25, r25
    1218:	88 27       	eor	r24, r24
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	84 2b       	or	r24, r20
    1220:	95 2b       	or	r25, r21
    1222:	a6 2b       	or	r26, r22
    1224:	b7 2b       	or	r27, r23
    1226:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    122a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    122e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1232:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1236:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0xe>
    123a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0xf>
    123e:	30 97       	sbiw	r30, 0x00	; 0
    1240:	39 f0       	breq	.+14     	; 0x1250 <__vector_12+0xb2>
    1242:	67 e0       	ldi	r22, 0x07	; 7
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0xe>
    124a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0xf>
    124e:	09 95       	icall
    1250:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	bf 91       	pop	r27
    125a:	af 91       	pop	r26
    125c:	9f 91       	pop	r25
    125e:	8f 91       	pop	r24
    1260:	7f 91       	pop	r23
    1262:	6f 91       	pop	r22
    1264:	5f 91       	pop	r21
    1266:	4f 91       	pop	r20
    1268:	3f 91       	pop	r19
    126a:	2f 91       	pop	r18
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_13>:
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
    1298:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    129c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    12a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a8:	c9 01       	movw	r24, r18
    12aa:	03 2e       	mov	r0, r19
    12ac:	00 0c       	add	r0, r0
    12ae:	aa 0b       	sbc	r26, r26
    12b0:	bb 0b       	sbc	r27, r27
    12b2:	dc 01       	movw	r26, r24
    12b4:	99 27       	eor	r25, r25
    12b6:	88 27       	eor	r24, r24
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	84 2b       	or	r24, r20
    12be:	95 2b       	or	r25, r21
    12c0:	a6 2b       	or	r26, r22
    12c2:	b7 2b       	or	r27, r23
    12c4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    12c8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    12cc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    12d0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    12d4:	b0 9b       	sbis	0x16, 0	; 22
    12d6:	1b c0       	rjmp	.+54     	; 0x130e <__vector_13+0x98>
    12d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12e0:	c9 01       	movw	r24, r18
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	09 2e       	mov	r0, r25
    12e6:	00 0c       	add	r0, r0
    12e8:	aa 0b       	sbc	r26, r26
    12ea:	bb 0b       	sbc	r27, r27
    12ec:	dc 01       	movw	r26, r24
    12ee:	99 27       	eor	r25, r25
    12f0:	88 27       	eor	r24, r24
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	84 2b       	or	r24, r20
    12f8:	95 2b       	or	r25, r21
    12fa:	a6 2b       	or	r26, r22
    12fc:	b7 2b       	or	r27, r23
    12fe:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1302:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1306:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    130a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    130e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x10>
    1312:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x11>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	39 f0       	breq	.+14     	; 0x1328 <__vector_13+0xb2>
    131a:	68 e0       	ldi	r22, 0x08	; 8
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x10>
    1322:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x11>
    1326:	09 95       	icall
    1328:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_14>:
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1374:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1378:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    137c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1380:	c9 01       	movw	r24, r18
    1382:	03 2e       	mov	r0, r19
    1384:	00 0c       	add	r0, r0
    1386:	aa 0b       	sbc	r26, r26
    1388:	bb 0b       	sbc	r27, r27
    138a:	dc 01       	movw	r26, r24
    138c:	99 27       	eor	r25, r25
    138e:	88 27       	eor	r24, r24
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	84 2b       	or	r24, r20
    1396:	95 2b       	or	r25, r21
    1398:	a6 2b       	or	r26, r22
    139a:	b7 2b       	or	r27, r23
    139c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    13a0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    13a4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    13a8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    13ac:	b0 9b       	sbis	0x16, 0	; 22
    13ae:	1b c0       	rjmp	.+54     	; 0x13e6 <__vector_14+0x98>
    13b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13b8:	c9 01       	movw	r24, r18
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	09 2e       	mov	r0, r25
    13be:	00 0c       	add	r0, r0
    13c0:	aa 0b       	sbc	r26, r26
    13c2:	bb 0b       	sbc	r27, r27
    13c4:	dc 01       	movw	r26, r24
    13c6:	99 27       	eor	r25, r25
    13c8:	88 27       	eor	r24, r24
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	84 2b       	or	r24, r20
    13d0:	95 2b       	or	r25, r21
    13d2:	a6 2b       	or	r26, r22
    13d4:	b7 2b       	or	r27, r23
    13d6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    13da:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    13de:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    13e2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    13e6:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x12>
    13ea:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x13>
    13ee:	30 97       	sbiw	r30, 0x00	; 0
    13f0:	39 f0       	breq	.+14     	; 0x1400 <__vector_14+0xb2>
    13f2:	69 e0       	ldi	r22, 0x09	; 9
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x12>
    13fa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x13>
    13fe:	09 95       	icall
    1400:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <__vector_15>:
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    144c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1450:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1454:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1458:	c9 01       	movw	r24, r18
    145a:	03 2e       	mov	r0, r19
    145c:	00 0c       	add	r0, r0
    145e:	aa 0b       	sbc	r26, r26
    1460:	bb 0b       	sbc	r27, r27
    1462:	dc 01       	movw	r26, r24
    1464:	99 27       	eor	r25, r25
    1466:	88 27       	eor	r24, r24
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	84 2b       	or	r24, r20
    146e:	95 2b       	or	r25, r21
    1470:	a6 2b       	or	r26, r22
    1472:	b7 2b       	or	r27, r23
    1474:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1478:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    147c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1480:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1484:	b0 9b       	sbis	0x16, 0	; 22
    1486:	1b c0       	rjmp	.+54     	; 0x14be <__vector_15+0x98>
    1488:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    148c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1490:	c9 01       	movw	r24, r18
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	09 2e       	mov	r0, r25
    1496:	00 0c       	add	r0, r0
    1498:	aa 0b       	sbc	r26, r26
    149a:	bb 0b       	sbc	r27, r27
    149c:	dc 01       	movw	r26, r24
    149e:	99 27       	eor	r25, r25
    14a0:	88 27       	eor	r24, r24
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	84 2b       	or	r24, r20
    14a8:	95 2b       	or	r25, r21
    14aa:	a6 2b       	or	r26, r22
    14ac:	b7 2b       	or	r27, r23
    14ae:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    14b2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    14b6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    14ba:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    14be:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x14>
    14c2:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x15>
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <__vector_15+0xb2>
    14ca:	6a e0       	ldi	r22, 0x0A	; 10
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x14>
    14d2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x15>
    14d6:	09 95       	icall
    14d8:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    14dc:	ff 91       	pop	r31
    14de:	ef 91       	pop	r30
    14e0:	bf 91       	pop	r27
    14e2:	af 91       	pop	r26
    14e4:	9f 91       	pop	r25
    14e6:	8f 91       	pop	r24
    14e8:	7f 91       	pop	r23
    14ea:	6f 91       	pop	r22
    14ec:	5f 91       	pop	r21
    14ee:	4f 91       	pop	r20
    14f0:	3f 91       	pop	r19
    14f2:	2f 91       	pop	r18
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_16>:
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	2f 93       	push	r18
    150a:	3f 93       	push	r19
    150c:	4f 93       	push	r20
    150e:	5f 93       	push	r21
    1510:	6f 93       	push	r22
    1512:	7f 93       	push	r23
    1514:	8f 93       	push	r24
    1516:	9f 93       	push	r25
    1518:	af 93       	push	r26
    151a:	bf 93       	push	r27
    151c:	ef 93       	push	r30
    151e:	ff 93       	push	r31
    1520:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1524:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1528:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    152c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1530:	c9 01       	movw	r24, r18
    1532:	03 2e       	mov	r0, r19
    1534:	00 0c       	add	r0, r0
    1536:	aa 0b       	sbc	r26, r26
    1538:	bb 0b       	sbc	r27, r27
    153a:	dc 01       	movw	r26, r24
    153c:	99 27       	eor	r25, r25
    153e:	88 27       	eor	r24, r24
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	84 2b       	or	r24, r20
    1546:	95 2b       	or	r25, r21
    1548:	a6 2b       	or	r26, r22
    154a:	b7 2b       	or	r27, r23
    154c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1550:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1554:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1558:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    155c:	b0 9b       	sbis	0x16, 0	; 22
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <__vector_16+0x98>
    1560:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1564:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1568:	c9 01       	movw	r24, r18
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	09 2e       	mov	r0, r25
    156e:	00 0c       	add	r0, r0
    1570:	aa 0b       	sbc	r26, r26
    1572:	bb 0b       	sbc	r27, r27
    1574:	dc 01       	movw	r26, r24
    1576:	99 27       	eor	r25, r25
    1578:	88 27       	eor	r24, r24
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	84 2b       	or	r24, r20
    1580:	95 2b       	or	r25, r21
    1582:	a6 2b       	or	r26, r22
    1584:	b7 2b       	or	r27, r23
    1586:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    158a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    158e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1592:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1596:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x16>
    159a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x17>
    159e:	30 97       	sbiw	r30, 0x00	; 0
    15a0:	39 f0       	breq	.+14     	; 0x15b0 <__vector_16+0xb2>
    15a2:	6b e0       	ldi	r22, 0x0B	; 11
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x16>
    15aa:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x17>
    15ae:	09 95       	icall
    15b0:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_17>:
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    15fc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1600:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1604:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1608:	c9 01       	movw	r24, r18
    160a:	03 2e       	mov	r0, r19
    160c:	00 0c       	add	r0, r0
    160e:	aa 0b       	sbc	r26, r26
    1610:	bb 0b       	sbc	r27, r27
    1612:	dc 01       	movw	r26, r24
    1614:	99 27       	eor	r25, r25
    1616:	88 27       	eor	r24, r24
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	84 2b       	or	r24, r20
    161e:	95 2b       	or	r25, r21
    1620:	a6 2b       	or	r26, r22
    1622:	b7 2b       	or	r27, r23
    1624:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1628:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    162c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1630:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1634:	b0 9b       	sbis	0x16, 0	; 22
    1636:	1b c0       	rjmp	.+54     	; 0x166e <__vector_17+0x98>
    1638:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    163c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1640:	c9 01       	movw	r24, r18
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	09 2e       	mov	r0, r25
    1646:	00 0c       	add	r0, r0
    1648:	aa 0b       	sbc	r26, r26
    164a:	bb 0b       	sbc	r27, r27
    164c:	dc 01       	movw	r26, r24
    164e:	99 27       	eor	r25, r25
    1650:	88 27       	eor	r24, r24
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	84 2b       	or	r24, r20
    1658:	95 2b       	or	r25, r21
    165a:	a6 2b       	or	r26, r22
    165c:	b7 2b       	or	r27, r23
    165e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1662:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1666:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    166a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    166e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x18>
    1672:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x19>
    1676:	30 97       	sbiw	r30, 0x00	; 0
    1678:	39 f0       	breq	.+14     	; 0x1688 <__vector_17+0xb2>
    167a:	6c e0       	ldi	r22, 0x0C	; 12
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x18>
    1682:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x19>
    1686:	09 95       	icall
    1688:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_18>:
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    16d4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    16d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e0:	c9 01       	movw	r24, r18
    16e2:	03 2e       	mov	r0, r19
    16e4:	00 0c       	add	r0, r0
    16e6:	aa 0b       	sbc	r26, r26
    16e8:	bb 0b       	sbc	r27, r27
    16ea:	dc 01       	movw	r26, r24
    16ec:	99 27       	eor	r25, r25
    16ee:	88 27       	eor	r24, r24
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	84 2b       	or	r24, r20
    16f6:	95 2b       	or	r25, r21
    16f8:	a6 2b       	or	r26, r22
    16fa:	b7 2b       	or	r27, r23
    16fc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1700:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1704:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1708:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    170c:	b0 9b       	sbis	0x16, 0	; 22
    170e:	1b c0       	rjmp	.+54     	; 0x1746 <__vector_18+0x98>
    1710:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1714:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1718:	c9 01       	movw	r24, r18
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	09 2e       	mov	r0, r25
    171e:	00 0c       	add	r0, r0
    1720:	aa 0b       	sbc	r26, r26
    1722:	bb 0b       	sbc	r27, r27
    1724:	dc 01       	movw	r26, r24
    1726:	99 27       	eor	r25, r25
    1728:	88 27       	eor	r24, r24
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	84 2b       	or	r24, r20
    1730:	95 2b       	or	r25, r21
    1732:	a6 2b       	or	r26, r22
    1734:	b7 2b       	or	r27, r23
    1736:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    173a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    173e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1742:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1746:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1a>
    174a:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1b>
    174e:	30 97       	sbiw	r30, 0x00	; 0
    1750:	39 f0       	breq	.+14     	; 0x1760 <__vector_18+0xb2>
    1752:	6d e0       	ldi	r22, 0x0D	; 13
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1a>
    175a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1b>
    175e:	09 95       	icall
    1760:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <__vector_19>:
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    17ac:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    17b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17b8:	c9 01       	movw	r24, r18
    17ba:	03 2e       	mov	r0, r19
    17bc:	00 0c       	add	r0, r0
    17be:	aa 0b       	sbc	r26, r26
    17c0:	bb 0b       	sbc	r27, r27
    17c2:	dc 01       	movw	r26, r24
    17c4:	99 27       	eor	r25, r25
    17c6:	88 27       	eor	r24, r24
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	84 2b       	or	r24, r20
    17ce:	95 2b       	or	r25, r21
    17d0:	a6 2b       	or	r26, r22
    17d2:	b7 2b       	or	r27, r23
    17d4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    17d8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    17dc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    17e0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    17e4:	b0 9b       	sbis	0x16, 0	; 22
    17e6:	1b c0       	rjmp	.+54     	; 0x181e <__vector_19+0x98>
    17e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17f0:	c9 01       	movw	r24, r18
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	09 2e       	mov	r0, r25
    17f6:	00 0c       	add	r0, r0
    17f8:	aa 0b       	sbc	r26, r26
    17fa:	bb 0b       	sbc	r27, r27
    17fc:	dc 01       	movw	r26, r24
    17fe:	99 27       	eor	r25, r25
    1800:	88 27       	eor	r24, r24
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	84 2b       	or	r24, r20
    1808:	95 2b       	or	r25, r21
    180a:	a6 2b       	or	r26, r22
    180c:	b7 2b       	or	r27, r23
    180e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1812:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1816:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    181a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    181e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1c>
    1822:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1d>
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	39 f0       	breq	.+14     	; 0x1838 <__vector_19+0xb2>
    182a:	6e e0       	ldi	r22, 0x0E	; 14
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1c>
    1832:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1d>
    1836:	09 95       	icall
    1838:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_20>:
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
    1880:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1884:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1888:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    188c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1890:	c9 01       	movw	r24, r18
    1892:	03 2e       	mov	r0, r19
    1894:	00 0c       	add	r0, r0
    1896:	aa 0b       	sbc	r26, r26
    1898:	bb 0b       	sbc	r27, r27
    189a:	dc 01       	movw	r26, r24
    189c:	99 27       	eor	r25, r25
    189e:	88 27       	eor	r24, r24
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	84 2b       	or	r24, r20
    18a6:	95 2b       	or	r25, r21
    18a8:	a6 2b       	or	r26, r22
    18aa:	b7 2b       	or	r27, r23
    18ac:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    18b0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    18b4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    18b8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    18bc:	b0 9b       	sbis	0x16, 0	; 22
    18be:	1b c0       	rjmp	.+54     	; 0x18f6 <__vector_20+0x98>
    18c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18c8:	c9 01       	movw	r24, r18
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	09 2e       	mov	r0, r25
    18ce:	00 0c       	add	r0, r0
    18d0:	aa 0b       	sbc	r26, r26
    18d2:	bb 0b       	sbc	r27, r27
    18d4:	dc 01       	movw	r26, r24
    18d6:	99 27       	eor	r25, r25
    18d8:	88 27       	eor	r24, r24
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	84 2b       	or	r24, r20
    18e0:	95 2b       	or	r25, r21
    18e2:	a6 2b       	or	r26, r22
    18e4:	b7 2b       	or	r27, r23
    18e6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    18ea:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    18ee:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    18f2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    18f6:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x1e>
    18fa:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x1f>
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	39 f0       	breq	.+14     	; 0x1910 <__vector_20+0xb2>
    1902:	6f e0       	ldi	r22, 0x0F	; 15
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x1e>
    190a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x1f>
    190e:	09 95       	icall
    1910:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	0f 90       	pop	r0
    1932:	1f 90       	pop	r1
    1934:	18 95       	reti

00001936 <__vector_21>:
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	2f 93       	push	r18
    1942:	3f 93       	push	r19
    1944:	4f 93       	push	r20
    1946:	5f 93       	push	r21
    1948:	6f 93       	push	r22
    194a:	7f 93       	push	r23
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	af 93       	push	r26
    1952:	bf 93       	push	r27
    1954:	ef 93       	push	r30
    1956:	ff 93       	push	r31
    1958:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    195c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1960:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1964:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1968:	c9 01       	movw	r24, r18
    196a:	03 2e       	mov	r0, r19
    196c:	00 0c       	add	r0, r0
    196e:	aa 0b       	sbc	r26, r26
    1970:	bb 0b       	sbc	r27, r27
    1972:	dc 01       	movw	r26, r24
    1974:	99 27       	eor	r25, r25
    1976:	88 27       	eor	r24, r24
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	84 2b       	or	r24, r20
    197e:	95 2b       	or	r25, r21
    1980:	a6 2b       	or	r26, r22
    1982:	b7 2b       	or	r27, r23
    1984:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1988:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    198c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1990:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1994:	b0 9b       	sbis	0x16, 0	; 22
    1996:	1b c0       	rjmp	.+54     	; 0x19ce <__vector_21+0x98>
    1998:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    199c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19a0:	c9 01       	movw	r24, r18
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	09 2e       	mov	r0, r25
    19a6:	00 0c       	add	r0, r0
    19a8:	aa 0b       	sbc	r26, r26
    19aa:	bb 0b       	sbc	r27, r27
    19ac:	dc 01       	movw	r26, r24
    19ae:	99 27       	eor	r25, r25
    19b0:	88 27       	eor	r24, r24
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	84 2b       	or	r24, r20
    19b8:	95 2b       	or	r25, r21
    19ba:	a6 2b       	or	r26, r22
    19bc:	b7 2b       	or	r27, r23
    19be:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    19c2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    19c6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    19ca:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    19ce:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x20>
    19d2:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x21>
    19d6:	30 97       	sbiw	r30, 0x00	; 0
    19d8:	39 f0       	breq	.+14     	; 0x19e8 <__vector_21+0xb2>
    19da:	60 e1       	ldi	r22, 0x10	; 16
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x20>
    19e2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x21>
    19e6:	09 95       	icall
    19e8:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    19ec:	ff 91       	pop	r31
    19ee:	ef 91       	pop	r30
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	9f 91       	pop	r25
    19f6:	8f 91       	pop	r24
    19f8:	7f 91       	pop	r23
    19fa:	6f 91       	pop	r22
    19fc:	5f 91       	pop	r21
    19fe:	4f 91       	pop	r20
    1a00:	3f 91       	pop	r19
    1a02:	2f 91       	pop	r18
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_22>:
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1a34:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1a38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a40:	c9 01       	movw	r24, r18
    1a42:	03 2e       	mov	r0, r19
    1a44:	00 0c       	add	r0, r0
    1a46:	aa 0b       	sbc	r26, r26
    1a48:	bb 0b       	sbc	r27, r27
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	99 27       	eor	r25, r25
    1a4e:	88 27       	eor	r24, r24
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	84 2b       	or	r24, r20
    1a56:	95 2b       	or	r25, r21
    1a58:	a6 2b       	or	r26, r22
    1a5a:	b7 2b       	or	r27, r23
    1a5c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a60:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a64:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a68:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a6c:	b0 9b       	sbis	0x16, 0	; 22
    1a6e:	1b c0       	rjmp	.+54     	; 0x1aa6 <__vector_22+0x98>
    1a70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a78:	c9 01       	movw	r24, r18
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	09 2e       	mov	r0, r25
    1a7e:	00 0c       	add	r0, r0
    1a80:	aa 0b       	sbc	r26, r26
    1a82:	bb 0b       	sbc	r27, r27
    1a84:	dc 01       	movw	r26, r24
    1a86:	99 27       	eor	r25, r25
    1a88:	88 27       	eor	r24, r24
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	84 2b       	or	r24, r20
    1a90:	95 2b       	or	r25, r21
    1a92:	a6 2b       	or	r26, r22
    1a94:	b7 2b       	or	r27, r23
    1a96:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a9a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a9e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1aa2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1aa6:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x22>
    1aaa:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x23>
    1aae:	30 97       	sbiw	r30, 0x00	; 0
    1ab0:	39 f0       	breq	.+14     	; 0x1ac0 <__vector_22+0xb2>
    1ab2:	61 e1       	ldi	r22, 0x11	; 17
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x22>
    1aba:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x23>
    1abe:	09 95       	icall
    1ac0:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    1ac4:	ff 91       	pop	r31
    1ac6:	ef 91       	pop	r30
    1ac8:	bf 91       	pop	r27
    1aca:	af 91       	pop	r26
    1acc:	9f 91       	pop	r25
    1ace:	8f 91       	pop	r24
    1ad0:	7f 91       	pop	r23
    1ad2:	6f 91       	pop	r22
    1ad4:	5f 91       	pop	r21
    1ad6:	4f 91       	pop	r20
    1ad8:	3f 91       	pop	r19
    1ada:	2f 91       	pop	r18
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	0f 90       	pop	r0
    1ae2:	1f 90       	pop	r1
    1ae4:	18 95       	reti

00001ae6 <__vector_9>:
    1ae6:	1f 92       	push	r1
    1ae8:	0f 92       	push	r0
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	0f 92       	push	r0
    1aee:	11 24       	eor	r1, r1
    1af0:	2f 93       	push	r18
    1af2:	3f 93       	push	r19
    1af4:	4f 93       	push	r20
    1af6:	5f 93       	push	r21
    1af8:	6f 93       	push	r22
    1afa:	7f 93       	push	r23
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    1b04:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1b08:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
    1b12:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
    1b16:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1b1a:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1b1e:	30 97       	sbiw	r30, 0x00	; 0
    1b20:	39 f0       	breq	.+14     	; 0x1b30 <__vector_9+0x4a>
    1b22:	42 81       	ldd	r20, Z+2	; 0x02
    1b24:	53 81       	ldd	r21, Z+3	; 0x03
    1b26:	64 81       	ldd	r22, Z+4	; 0x04
    1b28:	75 81       	ldd	r23, Z+5	; 0x05
    1b2a:	86 17       	cp	r24, r22
    1b2c:	97 07       	cpc	r25, r23
    1b2e:	a1 f0       	breq	.+40     	; 0x1b58 <__vector_9+0x72>
    1b30:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b34:	8d 7f       	andi	r24, 0xFD	; 253
    1b36:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b3a:	ff 91       	pop	r31
    1b3c:	ef 91       	pop	r30
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti
    1b58:	ca 01       	movw	r24, r20
    1b5a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b5e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b62:	42 1b       	sub	r20, r18
    1b64:	53 0b       	sbc	r21, r19
    1b66:	41 30       	cpi	r20, 0x01	; 1
    1b68:	51 05       	cpc	r21, r1
    1b6a:	51 f0       	breq	.+20     	; 0x1b80 <__vector_9+0x9a>
    1b6c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b70:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b74:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b78:	82 60       	ori	r24, 0x02	; 2
    1b7a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b7e:	dd cf       	rjmp	.-70     	; 0x1b3a <__vector_9+0x54>
    1b80:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b84:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	f0 cf       	rjmp	.-32     	; 0x1b6c <__vector_9+0x86>

00001b8c <__vector_7>:
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	2f 93       	push	r18
    1bac:	3f 93       	push	r19
    1bae:	4f 93       	push	r20
    1bb0:	5f 93       	push	r21
    1bb2:	6f 93       	push	r22
    1bb4:	7f 93       	push	r23
    1bb6:	8f 93       	push	r24
    1bb8:	9f 93       	push	r25
    1bba:	af 93       	push	r26
    1bbc:	bf 93       	push	r27
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	ef 93       	push	r30
    1bc4:	ff 93       	push	r31
    1bc6:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <__data_end>
    1bca:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <__data_end+0x1>
    1bce:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bd2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bd6:	b0 99       	sbic	0x16, 0	; 22
    1bd8:	98 c0       	rjmp	.+304    	; 0x1d0a <__vector_7+0x17e>
    1bda:	47 01       	movw	r8, r14
    1bdc:	0f 2c       	mov	r0, r15
    1bde:	00 0c       	add	r0, r0
    1be0:	aa 08       	sbc	r10, r10
    1be2:	bb 08       	sbc	r11, r11
    1be4:	54 01       	movw	r10, r8
    1be6:	99 24       	eor	r9, r9
    1be8:	88 24       	eor	r8, r8
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	88 2a       	or	r8, r24
    1bf0:	99 2a       	or	r9, r25
    1bf2:	aa 2a       	or	r10, r26
    1bf4:	bb 2a       	or	r11, r27
    1bf6:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <timerQ>
    1bfa:	d0 91 5d 01 	lds	r29, 0x015D	; 0x80015d <timerQ+0x1>
    1bfe:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgQ>
    1c02:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <msgQ+0x1>
    1c06:	20 97       	sbiw	r28, 0x00	; 0
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <__vector_7+0x80>
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <__vector_7+0xfe>
    1c0c:	4a 81       	ldd	r20, Y+2	; 0x02
    1c0e:	5b 81       	ldd	r21, Y+3	; 0x03
    1c10:	6c 81       	ldd	r22, Y+4	; 0x04
    1c12:	7d 81       	ldd	r23, Y+5	; 0x05
    1c14:	8a 01       	movw	r16, r20
    1c16:	9b 01       	movw	r18, r22
    1c18:	08 19       	sub	r16, r8
    1c1a:	19 09       	sbc	r17, r9
    1c1c:	2a 09       	sbc	r18, r10
    1c1e:	3b 09       	sbc	r19, r11
    1c20:	10 16       	cp	r1, r16
    1c22:	11 06       	cpc	r1, r17
    1c24:	12 06       	cpc	r1, r18
    1c26:	13 06       	cpc	r1, r19
    1c28:	0c f4       	brge	.+2      	; 0x1c2c <__vector_7+0xa0>
    1c2a:	40 c0       	rjmp	.+128    	; 0x1cac <__vector_7+0x120>
    1c2c:	d8 80       	ld	r13, Y
    1c2e:	c9 80       	ldd	r12, Y+1	; 0x01
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	b9 f1       	breq	.+110    	; 0x1ca2 <__vector_7+0x116>
    1c34:	0e 81       	ldd	r16, Y+6	; 0x06
    1c36:	1f 81       	ldd	r17, Y+7	; 0x07
    1c38:	28 85       	ldd	r18, Y+8	; 0x08
    1c3a:	39 85       	ldd	r19, Y+9	; 0x09
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	46 81       	ldd	r20, Z+6	; 0x06
    1c40:	57 81       	ldd	r21, Z+7	; 0x07
    1c42:	60 85       	ldd	r22, Z+8	; 0x08
    1c44:	71 85       	ldd	r23, Z+9	; 0x09
    1c46:	04 17       	cp	r16, r20
    1c48:	15 07       	cpc	r17, r21
    1c4a:	26 07       	cpc	r18, r22
    1c4c:	37 07       	cpc	r19, r23
    1c4e:	4c f1       	brlt	.+82     	; 0x1ca2 <__vector_7+0x116>
    1c50:	dc 01       	movw	r26, r24
    1c52:	0a c0       	rjmp	.+20     	; 0x1c68 <__vector_7+0xdc>
    1c54:	46 81       	ldd	r20, Z+6	; 0x06
    1c56:	57 81       	ldd	r21, Z+7	; 0x07
    1c58:	60 85       	ldd	r22, Z+8	; 0x08
    1c5a:	71 85       	ldd	r23, Z+9	; 0x09
    1c5c:	04 17       	cp	r16, r20
    1c5e:	15 07       	cpc	r17, r21
    1c60:	26 07       	cpc	r18, r22
    1c62:	37 07       	cpc	r19, r23
    1c64:	dc f0       	brlt	.+54     	; 0x1c9c <__vector_7+0x110>
    1c66:	df 01       	movw	r26, r30
    1c68:	ed 91       	ld	r30, X+
    1c6a:	fc 91       	ld	r31, X
    1c6c:	11 97       	sbiw	r26, 0x01	; 1
    1c6e:	30 97       	sbiw	r30, 0x00	; 0
    1c70:	89 f7       	brne	.-30     	; 0x1c54 <__vector_7+0xc8>
    1c72:	19 82       	std	Y+1, r1	; 0x01
    1c74:	18 82       	st	Y, r1
    1c76:	cd 93       	st	X+, r28
    1c78:	dc 93       	st	X, r29
    1c7a:	38 2f       	mov	r19, r24
    1c7c:	29 2f       	mov	r18, r25
    1c7e:	cd 2d       	mov	r28, r13
    1c80:	dc 2d       	mov	r29, r12
    1c82:	83 2f       	mov	r24, r19
    1c84:	92 2f       	mov	r25, r18
    1c86:	20 97       	sbiw	r28, 0x00	; 0
    1c88:	09 f6       	brne	.-126    	; 0x1c0c <__vector_7+0x80>
    1c8a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <timerQ+0x1>
    1c8e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <timerQ>
    1c92:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    1c96:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    1c9a:	13 c0       	rjmp	.+38     	; 0x1cc2 <__vector_7+0x136>
    1c9c:	f9 83       	std	Y+1, r31	; 0x01
    1c9e:	e8 83       	st	Y, r30
    1ca0:	ea cf       	rjmp	.-44     	; 0x1c76 <__vector_7+0xea>
    1ca2:	99 83       	std	Y+1, r25	; 0x01
    1ca4:	88 83       	st	Y, r24
    1ca6:	3c 2f       	mov	r19, r28
    1ca8:	2d 2f       	mov	r18, r29
    1caa:	e9 cf       	rjmp	.-46     	; 0x1c7e <__vector_7+0xf2>
    1cac:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <timerQ+0x1>
    1cb0:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <timerQ>
    1cb4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    1cb8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    1cbc:	e6 16       	cp	r14, r22
    1cbe:	f7 06       	cpc	r15, r23
    1cc0:	d9 f1       	breq	.+118    	; 0x1d38 <__vector_7+0x1ac>
    1cc2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1cc6:	8d 7f       	andi	r24, 0xFD	; 253
    1cc8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ccc:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	bf 91       	pop	r27
    1cda:	af 91       	pop	r26
    1cdc:	9f 91       	pop	r25
    1cde:	8f 91       	pop	r24
    1ce0:	7f 91       	pop	r23
    1ce2:	6f 91       	pop	r22
    1ce4:	5f 91       	pop	r21
    1ce6:	4f 91       	pop	r20
    1ce8:	3f 91       	pop	r19
    1cea:	2f 91       	pop	r18
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	cf 90       	pop	r12
    1cf8:	bf 90       	pop	r11
    1cfa:	af 90       	pop	r10
    1cfc:	9f 90       	pop	r9
    1cfe:	8f 90       	pop	r8
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti
    1d0a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d0e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d12:	47 01       	movw	r8, r14
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	88 1a       	sub	r8, r24
    1d18:	98 0a       	sbc	r9, r24
    1d1a:	09 2c       	mov	r0, r9
    1d1c:	00 0c       	add	r0, r0
    1d1e:	aa 08       	sbc	r10, r10
    1d20:	bb 08       	sbc	r11, r11
    1d22:	d4 01       	movw	r26, r8
    1d24:	99 27       	eor	r25, r25
    1d26:	88 27       	eor	r24, r24
    1d28:	49 01       	movw	r8, r18
    1d2a:	a1 2c       	mov	r10, r1
    1d2c:	b1 2c       	mov	r11, r1
    1d2e:	88 2a       	or	r8, r24
    1d30:	99 2a       	or	r9, r25
    1d32:	aa 2a       	or	r10, r26
    1d34:	bb 2a       	or	r11, r27
    1d36:	5f cf       	rjmp	.-322    	; 0x1bf6 <__vector_7+0x6a>
    1d38:	ca 01       	movw	r24, r20
    1d3a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d3e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d42:	42 1b       	sub	r20, r18
    1d44:	53 0b       	sbc	r21, r19
    1d46:	41 30       	cpi	r20, 0x01	; 1
    1d48:	51 05       	cpc	r21, r1
    1d4a:	51 f0       	breq	.+20     	; 0x1d60 <__vector_7+0x1d4>
    1d4c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d50:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d54:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d58:	82 60       	ori	r24, 0x02	; 2
    1d5a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d5e:	b6 cf       	rjmp	.-148    	; 0x1ccc <__vector_7+0x140>
    1d60:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d64:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	f0 cf       	rjmp	.-32     	; 0x1d4c <__vector_7+0x1c0>

00001d6c <async>:
    1d6c:	3f 92       	push	r3
    1d6e:	4f 92       	push	r4
    1d70:	5f 92       	push	r5
    1d72:	6f 92       	push	r6
    1d74:	7f 92       	push	r7
    1d76:	8f 92       	push	r8
    1d78:	9f 92       	push	r9
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	ef b7       	in	r30, 0x3f	; 63
    1d90:	e0 78       	andi	r30, 0x80	; 128
    1d92:	3e 2e       	mov	r3, r30
    1d94:	f8 94       	cli
    1d96:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <msgPool>
    1d9a:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <msgPool+0x1>
    1d9e:	20 97       	sbiw	r28, 0x00	; 0
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <async+0x38>
    1da2:	52 c1       	rjmp	.+676    	; 0x2048 <async+0x2dc>
    1da4:	e8 81       	ld	r30, Y
    1da6:	f9 81       	ldd	r31, Y+1	; 0x01
    1da8:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <msgPool+0x1>
    1dac:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <msgPool>
    1db0:	1b 87       	std	Y+11, r17	; 0x0b
    1db2:	0a 87       	std	Y+10, r16	; 0x0a
    1db4:	fd 86       	std	Y+13, r15	; 0x0d
    1db6:	ec 86       	std	Y+12, r14	; 0x0c
    1db8:	df 86       	std	Y+15, r13	; 0x0f
    1dba:	ce 86       	std	Y+14, r12	; 0x0e
    1dbc:	33 20       	and	r3, r3
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <async+0x56>
    1dc0:	6f c0       	rjmp	.+222    	; 0x1ea0 <async+0x134>
    1dc2:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    1dc6:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    1dca:	02 80       	ldd	r0, Z+2	; 0x02
    1dcc:	f3 81       	ldd	r31, Z+3	; 0x03
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	c2 80       	ldd	r12, Z+2	; 0x02
    1dd2:	d3 80       	ldd	r13, Z+3	; 0x03
    1dd4:	e4 80       	ldd	r14, Z+4	; 0x04
    1dd6:	f5 80       	ldd	r15, Z+5	; 0x05
    1dd8:	c6 0e       	add	r12, r22
    1dda:	d7 1e       	adc	r13, r23
    1ddc:	e8 1e       	adc	r14, r24
    1dde:	f9 1e       	adc	r15, r25
    1de0:	ca 82       	std	Y+2, r12	; 0x02
    1de2:	db 82       	std	Y+3, r13	; 0x03
    1de4:	ec 82       	std	Y+4, r14	; 0x04
    1de6:	fd 82       	std	Y+5, r15	; 0x05
    1de8:	12 16       	cp	r1, r18
    1dea:	13 06       	cpc	r1, r19
    1dec:	14 06       	cpc	r1, r20
    1dee:	15 06       	cpc	r1, r21
    1df0:	0c f0       	brlt	.+2      	; 0x1df4 <async+0x88>
    1df2:	f8 c0       	rjmp	.+496    	; 0x1fe4 <async+0x278>
    1df4:	da 01       	movw	r26, r20
    1df6:	c9 01       	movw	r24, r18
    1df8:	8c 01       	movw	r16, r24
    1dfa:	9d 01       	movw	r18, r26
    1dfc:	0c 0d       	add	r16, r12
    1dfe:	1d 1d       	adc	r17, r13
    1e00:	2e 1d       	adc	r18, r14
    1e02:	3f 1d       	adc	r19, r15
    1e04:	0e 83       	std	Y+6, r16	; 0x06
    1e06:	1f 83       	std	Y+7, r17	; 0x07
    1e08:	28 87       	std	Y+8, r18	; 0x08
    1e0a:	39 87       	std	Y+9, r19	; 0x09
    1e0c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1e10:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1e14:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e18:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e1c:	b0 99       	sbic	0x16, 0	; 22
    1e1e:	49 c0       	rjmp	.+146    	; 0x1eb2 <async+0x146>
    1e20:	2c 01       	movw	r4, r24
    1e22:	09 2e       	mov	r0, r25
    1e24:	00 0c       	add	r0, r0
    1e26:	66 08       	sbc	r6, r6
    1e28:	77 08       	sbc	r7, r7
    1e2a:	52 01       	movw	r10, r4
    1e2c:	99 24       	eor	r9, r9
    1e2e:	88 24       	eor	r8, r8
    1e30:	2b 01       	movw	r4, r22
    1e32:	61 2c       	mov	r6, r1
    1e34:	71 2c       	mov	r7, r1
    1e36:	48 28       	or	r4, r8
    1e38:	59 28       	or	r5, r9
    1e3a:	6a 28       	or	r6, r10
    1e3c:	7b 28       	or	r7, r11
    1e3e:	b7 01       	movw	r22, r14
    1e40:	a6 01       	movw	r20, r12
    1e42:	44 19       	sub	r20, r4
    1e44:	55 09       	sbc	r21, r5
    1e46:	66 09       	sbc	r22, r6
    1e48:	77 09       	sbc	r23, r7
    1e4a:	14 16       	cp	r1, r20
    1e4c:	15 06       	cpc	r1, r21
    1e4e:	16 06       	cpc	r1, r22
    1e50:	17 06       	cpc	r1, r23
    1e52:	0c f0       	brlt	.+2      	; 0x1e56 <async+0xea>
    1e54:	68 c0       	rjmp	.+208    	; 0x1f26 <async+0x1ba>
    1e56:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <timerQ>
    1e5a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <timerQ+0x1>
    1e5e:	10 97       	sbiw	r26, 0x00	; 0
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <async+0xf8>
    1e62:	dc c0       	rjmp	.+440    	; 0x201c <async+0x2b0>
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	0d 91       	ld	r16, X+
    1e68:	1d 91       	ld	r17, X+
    1e6a:	2d 91       	ld	r18, X+
    1e6c:	3c 91       	ld	r19, X
    1e6e:	15 97       	sbiw	r26, 0x05	; 5
    1e70:	c0 16       	cp	r12, r16
    1e72:	d1 06       	cpc	r13, r17
    1e74:	e2 06       	cpc	r14, r18
    1e76:	f3 06       	cpc	r15, r19
    1e78:	5c f4       	brge	.+22     	; 0x1e90 <async+0x124>
    1e7a:	d0 c0       	rjmp	.+416    	; 0x201c <async+0x2b0>
    1e7c:	42 81       	ldd	r20, Z+2	; 0x02
    1e7e:	53 81       	ldd	r21, Z+3	; 0x03
    1e80:	64 81       	ldd	r22, Z+4	; 0x04
    1e82:	75 81       	ldd	r23, Z+5	; 0x05
    1e84:	c4 16       	cp	r12, r20
    1e86:	d5 06       	cpc	r13, r21
    1e88:	e6 06       	cpc	r14, r22
    1e8a:	f7 06       	cpc	r15, r23
    1e8c:	4c f1       	brlt	.+82     	; 0x1ee0 <async+0x174>
    1e8e:	df 01       	movw	r26, r30
    1e90:	ed 91       	ld	r30, X+
    1e92:	fc 91       	ld	r31, X
    1e94:	11 97       	sbiw	r26, 0x01	; 1
    1e96:	30 97       	sbiw	r30, 0x00	; 0
    1e98:	89 f7       	brne	.-30     	; 0x1e7c <async+0x110>
    1e9a:	19 82       	std	Y+1, r1	; 0x01
    1e9c:	18 82       	st	Y, r1
    1e9e:	22 c0       	rjmp	.+68     	; 0x1ee4 <async+0x178>
    1ea0:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <timestamp>
    1ea4:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <timestamp+0x1>
    1ea8:	e0 90 5a 01 	lds	r14, 0x015A	; 0x80015a <timestamp+0x2>
    1eac:	f0 90 5b 01 	lds	r15, 0x015B	; 0x80015b <timestamp+0x3>
    1eb0:	93 cf       	rjmp	.-218    	; 0x1dd8 <async+0x6c>
    1eb2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eb6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eba:	2c 01       	movw	r4, r24
    1ebc:	4f ef       	ldi	r20, 0xFF	; 255
    1ebe:	44 1a       	sub	r4, r20
    1ec0:	54 0a       	sbc	r5, r20
    1ec2:	05 2c       	mov	r0, r5
    1ec4:	00 0c       	add	r0, r0
    1ec6:	66 08       	sbc	r6, r6
    1ec8:	77 08       	sbc	r7, r7
    1eca:	b2 01       	movw	r22, r4
    1ecc:	55 27       	eor	r21, r21
    1ece:	44 27       	eor	r20, r20
    1ed0:	2f 01       	movw	r4, r30
    1ed2:	61 2c       	mov	r6, r1
    1ed4:	71 2c       	mov	r7, r1
    1ed6:	44 2a       	or	r4, r20
    1ed8:	55 2a       	or	r5, r21
    1eda:	66 2a       	or	r6, r22
    1edc:	77 2a       	or	r7, r23
    1ede:	af cf       	rjmp	.-162    	; 0x1e3e <async+0xd2>
    1ee0:	f9 83       	std	Y+1, r31	; 0x01
    1ee2:	e8 83       	st	Y, r30
    1ee4:	cd 93       	st	X+, r28
    1ee6:	dc 93       	st	X, r29
    1ee8:	82 17       	cp	r24, r18
    1eea:	93 07       	cpc	r25, r19
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <async+0x184>
    1eee:	7f c0       	rjmp	.+254    	; 0x1fee <async+0x282>
    1ef0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ef4:	8d 7f       	andi	r24, 0xFD	; 253
    1ef6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1efa:	33 20       	and	r3, r3
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <async+0x194>
    1efe:	78 94       	sei
    1f00:	ce 01       	movw	r24, r28
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	8f 90       	pop	r8
    1f1a:	7f 90       	pop	r7
    1f1c:	6f 90       	pop	r6
    1f1e:	5f 90       	pop	r5
    1f20:	4f 90       	pop	r4
    1f22:	3f 90       	pop	r3
    1f24:	08 95       	ret
    1f26:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <msgQ>
    1f2a:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <msgQ+0x1>
    1f2e:	10 97       	sbiw	r26, 0x00	; 0
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <async+0x1c8>
    1f32:	83 c0       	rjmp	.+262    	; 0x203a <async+0x2ce>
    1f34:	16 96       	adiw	r26, 0x06	; 6
    1f36:	cd 90       	ld	r12, X+
    1f38:	dd 90       	ld	r13, X+
    1f3a:	ed 90       	ld	r14, X+
    1f3c:	fc 90       	ld	r15, X
    1f3e:	19 97       	sbiw	r26, 0x09	; 9
    1f40:	0c 15       	cp	r16, r12
    1f42:	1d 05       	cpc	r17, r13
    1f44:	2e 05       	cpc	r18, r14
    1f46:	3f 05       	cpc	r19, r15
    1f48:	64 f4       	brge	.+24     	; 0x1f62 <async+0x1f6>
    1f4a:	77 c0       	rjmp	.+238    	; 0x203a <async+0x2ce>
    1f4c:	c6 80       	ldd	r12, Z+6	; 0x06
    1f4e:	d7 80       	ldd	r13, Z+7	; 0x07
    1f50:	e0 84       	ldd	r14, Z+8	; 0x08
    1f52:	f1 84       	ldd	r15, Z+9	; 0x09
    1f54:	0c 15       	cp	r16, r12
    1f56:	1d 05       	cpc	r17, r13
    1f58:	2e 05       	cpc	r18, r14
    1f5a:	3f 05       	cpc	r19, r15
    1f5c:	0c f4       	brge	.+2      	; 0x1f60 <async+0x1f4>
    1f5e:	5b c0       	rjmp	.+182    	; 0x2016 <async+0x2aa>
    1f60:	df 01       	movw	r26, r30
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	11 97       	sbiw	r26, 0x01	; 1
    1f68:	30 97       	sbiw	r30, 0x00	; 0
    1f6a:	81 f7       	brne	.-32     	; 0x1f4c <async+0x1e0>
    1f6c:	19 82       	std	Y+1, r1	; 0x01
    1f6e:	18 82       	st	Y, r1
    1f70:	cd 93       	st	X+, r28
    1f72:	dc 93       	st	X, r29
    1f74:	33 20       	and	r3, r3
    1f76:	21 f2       	breq	.-120    	; 0x1f00 <async+0x194>
    1f78:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    1f7c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <async+0x21a>
    1f84:	bc cf       	rjmp	.-136    	; 0x1efe <async+0x192>
    1f86:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <activeStack>
    1f8a:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <activeStack+0x1>
    1f8e:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <msgQ>
    1f92:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <msgQ+0x1>
    1f96:	02 81       	ldd	r16, Z+2	; 0x02
    1f98:	13 81       	ldd	r17, Z+3	; 0x03
    1f9a:	d9 01       	movw	r26, r18
    1f9c:	16 96       	adiw	r26, 0x06	; 6
    1f9e:	4d 91       	ld	r20, X+
    1fa0:	5d 91       	ld	r21, X+
    1fa2:	6d 91       	ld	r22, X+
    1fa4:	7c 91       	ld	r23, X
    1fa6:	19 97       	sbiw	r26, 0x09	; 9
    1fa8:	d8 01       	movw	r26, r16
    1faa:	16 96       	adiw	r26, 0x06	; 6
    1fac:	0d 91       	ld	r16, X+
    1fae:	1d 91       	ld	r17, X+
    1fb0:	2d 91       	ld	r18, X+
    1fb2:	3c 91       	ld	r19, X
    1fb4:	19 97       	sbiw	r26, 0x09	; 9
    1fb6:	40 1b       	sub	r20, r16
    1fb8:	51 0b       	sbc	r21, r17
    1fba:	62 0b       	sbc	r22, r18
    1fbc:	73 0b       	sbc	r23, r19
    1fbe:	77 ff       	sbrs	r23, 7
    1fc0:	9e cf       	rjmp	.-196    	; 0x1efe <async+0x192>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	2d 91       	ld	r18, X+
    1fc6:	3c 91       	ld	r19, X
    1fc8:	11 97       	sbiw	r26, 0x01	; 1
    1fca:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
    1fce:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
    1fd2:	ed 93       	st	X+, r30
    1fd4:	fc 93       	st	X, r31
    1fd6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
    1fda:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
    1fde:	0e 94 70 05 	call	0xae0	; 0xae0 <dispatch>
    1fe2:	8d cf       	rjmp	.-230    	; 0x1efe <async+0x192>
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	9f ef       	ldi	r25, 0xFF	; 255
    1fe8:	af ef       	ldi	r26, 0xFF	; 255
    1fea:	bf e7       	ldi	r27, 0x7F	; 127
    1fec:	05 cf       	rjmp	.-502    	; 0x1df8 <async+0x8c>
    1fee:	c8 01       	movw	r24, r16
    1ff0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ff4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ff8:	04 1b       	sub	r16, r20
    1ffa:	15 0b       	sbc	r17, r21
    1ffc:	01 30       	cpi	r16, 0x01	; 1
    1ffe:	11 05       	cpc	r17, r1
    2000:	b1 f0       	breq	.+44     	; 0x202e <async+0x2c2>
    2002:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2006:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    200a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    200e:	82 60       	ori	r24, 0x02	; 2
    2010:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    2014:	72 cf       	rjmp	.-284    	; 0x1efa <async+0x18e>
    2016:	f9 83       	std	Y+1, r31	; 0x01
    2018:	e8 83       	st	Y, r30
    201a:	aa cf       	rjmp	.-172    	; 0x1f70 <async+0x204>
    201c:	b9 83       	std	Y+1, r27	; 0x01
    201e:	a8 83       	st	Y, r26
    2020:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <timerQ+0x1>
    2024:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <timerQ>
    2028:	97 01       	movw	r18, r14
    202a:	86 01       	movw	r16, r12
    202c:	5d cf       	rjmp	.-326    	; 0x1ee8 <async+0x17c>
    202e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2032:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	e4 cf       	rjmp	.-56     	; 0x2002 <async+0x296>
    203a:	b9 83       	std	Y+1, r27	; 0x01
    203c:	a8 83       	st	Y, r26
    203e:	d0 93 5f 01 	sts	0x015F, r29	; 0x80015f <msgQ+0x1>
    2042:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <msgQ>
    2046:	96 cf       	rjmp	.-212    	; 0x1f74 <async+0x208>
    2048:	0e 94 d0 05 	call	0xba0	; 0xba0 <dequeue.part.0>

0000204c <sync>:
    204c:	cf 92       	push	r12
    204e:	df 92       	push	r13
    2050:	ef 92       	push	r14
    2052:	ff 92       	push	r15
    2054:	0f 93       	push	r16
    2056:	1f 93       	push	r17
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ec 01       	movw	r28, r24
    205e:	7b 01       	movw	r14, r22
    2060:	6a 01       	movw	r12, r20
    2062:	1f b7       	in	r17, 0x3f	; 63
    2064:	10 78       	andi	r17, 0x80	; 128
    2066:	f8 94       	cli
    2068:	a8 81       	ld	r26, Y
    206a:	b9 81       	ldd	r27, Y+1	; 0x01
    206c:	10 97       	sbiw	r26, 0x00	; 0
    206e:	19 f4       	brne	.+6      	; 0x2076 <sync+0x2a>
    2070:	62 c0       	rjmp	.+196    	; 0x2136 <sync+0xea>
    2072:	a0 81       	ld	r26, Z
    2074:	b1 81       	ldd	r27, Z+1	; 0x01
    2076:	14 96       	adiw	r26, 0x04	; 4
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	15 97       	sbiw	r26, 0x05	; 5
    207e:	30 97       	sbiw	r30, 0x00	; 0
    2080:	c1 f7       	brne	.-16     	; 0x2072 <sync+0x26>
    2082:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <current>
    2086:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <current+0x1>
    208a:	2a 17       	cp	r18, r26
    208c:	3b 07       	cpc	r19, r27
    208e:	09 f4       	brne	.+2      	; 0x2092 <sync+0x46>
    2090:	4c c0       	rjmp	.+152    	; 0x212a <sync+0xde>
    2092:	11 23       	and	r17, r17
    2094:	a1 f1       	breq	.+104    	; 0x20fe <sync+0xb2>
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	19 f0       	breq	.+6      	; 0x20a4 <sync+0x58>
    209e:	fc 01       	movw	r30, r24
    20a0:	15 82       	std	Z+5, r1	; 0x05
    20a2:	14 82       	std	Z+4, r1	; 0x04
    20a4:	3b 83       	std	Y+3, r19	; 0x03
    20a6:	2a 83       	std	Y+2, r18	; 0x02
    20a8:	f9 01       	movw	r30, r18
    20aa:	d5 83       	std	Z+5, r29	; 0x05
    20ac:	c4 83       	std	Z+4, r28	; 0x04
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 70 05 	call	0xae0	; 0xae0 <dispatch>
    20b4:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    20b8:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	89 2b       	or	r24, r25
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <sync+0x7a>
    20c4:	41 c0       	rjmp	.+130    	; 0x2148 <sync+0xfc>
    20c6:	f9 83       	std	Y+1, r31	; 0x01
    20c8:	e8 83       	st	Y, r30
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	9b 81       	ldd	r25, Y+3	; 0x03
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <sync+0x88>
    20d2:	78 94       	sei
    20d4:	b6 01       	movw	r22, r12
    20d6:	ce 01       	movw	r24, r28
    20d8:	f7 01       	movw	r30, r14
    20da:	09 95       	icall
    20dc:	f8 2e       	mov	r15, r24
    20de:	09 2f       	mov	r16, r25
    20e0:	8f b7       	in	r24, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	19 82       	std	Y+1, r1	; 0x01
    20e6:	18 82       	st	Y, r1
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	91 05       	cpc	r25, r1
    20f0:	a0 f4       	brcc	.+40     	; 0x211a <sync+0xce>
    20f2:	11 23       	and	r17, r17
    20f4:	79 f0       	breq	.+30     	; 0x2114 <sync+0xc8>
    20f6:	78 94       	sei
    20f8:	8f 2d       	mov	r24, r15
    20fa:	90 2f       	mov	r25, r16
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <sync+0xb6>
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	9f ef       	ldi	r25, 0xFF	; 255
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	df 90       	pop	r13
    2110:	cf 90       	pop	r12
    2112:	08 95       	ret
    2114:	8f 2d       	mov	r24, r15
    2116:	90 2f       	mov	r25, r16
    2118:	f4 cf       	rjmp	.-24     	; 0x2102 <sync+0xb6>
    211a:	1b 82       	std	Y+3, r1	; 0x03
    211c:	1a 82       	std	Y+2, r1	; 0x02
    211e:	fc 01       	movw	r30, r24
    2120:	15 82       	std	Z+5, r1	; 0x05
    2122:	14 82       	std	Z+4, r1	; 0x04
    2124:	0e 94 70 05 	call	0xae0	; 0xae0 <dispatch>
    2128:	e4 cf       	rjmp	.-56     	; 0x20f2 <sync+0xa6>
    212a:	11 23       	and	r17, r17
    212c:	41 f3       	breq	.-48     	; 0x20fe <sync+0xb2>
    212e:	78 94       	sei
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	9f ef       	ldi	r25, 0xFF	; 255
    2134:	e6 cf       	rjmp	.-52     	; 0x2102 <sync+0xb6>
    2136:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
    213a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
    213e:	99 83       	std	Y+1, r25	; 0x01
    2140:	88 83       	st	Y, r24
    2142:	11 23       	and	r17, r17
    2144:	39 f2       	breq	.-114    	; 0x20d4 <sync+0x88>
    2146:	c1 cf       	rjmp	.-126    	; 0x20ca <sync+0x7e>
    2148:	78 94       	sei
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	d9 cf       	rjmp	.-78     	; 0x2102 <sync+0xb6>

00002150 <run>:
    2150:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    2154:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    2158:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    215c:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    2160:	20 97       	sbiw	r28, 0x00	; 0
    2162:	09 f4       	brne	.+2      	; 0x2166 <run+0x16>
    2164:	6e c0       	rjmp	.+220    	; 0x2242 <run+0xf2>
    2166:	88 81       	ld	r24, Y
    2168:	99 81       	ldd	r25, Y+1	; 0x01
    216a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    216e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    2172:	d3 83       	std	Z+3, r29	; 0x03
    2174:	c2 83       	std	Z+2, r28	; 0x02
    2176:	78 94       	sei
    2178:	4e 85       	ldd	r20, Y+14	; 0x0e
    217a:	5f 85       	ldd	r21, Y+15	; 0x0f
    217c:	6c 85       	ldd	r22, Y+12	; 0x0c
    217e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2180:	8a 85       	ldd	r24, Y+10	; 0x0a
    2182:	9b 85       	ldd	r25, Y+11	; 0x0b
    2184:	0e 94 26 10 	call	0x204c	; 0x204c <sync>
    2188:	8f b7       	in	r24, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <msgPool>
    2190:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <msgPool+0x1>
    2194:	99 83       	std	Y+1, r25	; 0x01
    2196:	88 83       	st	Y, r24
    2198:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <msgPool+0x1>
    219c:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <msgPool>
    21a0:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <activeStack>
    21a4:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <activeStack+0x1>
    21a8:	f7 01       	movw	r30, r14
    21aa:	a0 81       	ld	r26, Z
    21ac:	b1 81       	ldd	r27, Z+1	; 0x01
    21ae:	12 96       	adiw	r26, 0x02	; 2
    21b0:	8d 91       	ld	r24, X+
    21b2:	9c 91       	ld	r25, X
    21b4:	13 97       	sbiw	r26, 0x03	; 3
    21b6:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    21ba:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    21be:	20 97       	sbiw	r28, 0x00	; 0
    21c0:	a9 f0       	breq	.+42     	; 0x21ec <run+0x9c>
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	49 f2       	breq	.-110    	; 0x2158 <run+0x8>
    21c6:	4e 81       	ldd	r20, Y+6	; 0x06
    21c8:	5f 81       	ldd	r21, Y+7	; 0x07
    21ca:	68 85       	ldd	r22, Y+8	; 0x08
    21cc:	79 85       	ldd	r23, Y+9	; 0x09
    21ce:	fc 01       	movw	r30, r24
    21d0:	06 81       	ldd	r16, Z+6	; 0x06
    21d2:	17 81       	ldd	r17, Z+7	; 0x07
    21d4:	20 85       	ldd	r18, Z+8	; 0x08
    21d6:	31 85       	ldd	r19, Z+9	; 0x09
    21d8:	40 1b       	sub	r20, r16
    21da:	51 0b       	sbc	r21, r17
    21dc:	62 0b       	sbc	r22, r18
    21de:	73 0b       	sbc	r23, r19
    21e0:	14 16       	cp	r1, r20
    21e2:	15 06       	cpc	r1, r21
    21e4:	16 06       	cpc	r1, r22
    21e6:	17 06       	cpc	r1, r23
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <run+0x9c>
    21ea:	b6 cf       	rjmp	.-148    	; 0x2158 <run+0x8>
    21ec:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <activeStack+0x1>
    21f0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <activeStack>
    21f4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    21f8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    21fc:	f7 01       	movw	r30, r14
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
    2202:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <threadPool+0x1>
    2206:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <threadPool>
    220a:	14 96       	adiw	r26, 0x04	; 4
    220c:	ed 91       	ld	r30, X+
    220e:	fc 91       	ld	r31, X
    2210:	15 97       	sbiw	r26, 0x05	; 5
    2212:	30 97       	sbiw	r30, 0x00	; 0
    2214:	41 f0       	breq	.+16     	; 0x2226 <run+0xd6>
    2216:	a0 81       	ld	r26, Z
    2218:	b1 81       	ldd	r27, Z+1	; 0x01
    221a:	14 96       	adiw	r26, 0x04	; 4
    221c:	ed 91       	ld	r30, X+
    221e:	fc 91       	ld	r31, X
    2220:	15 97       	sbiw	r26, 0x05	; 5
    2222:	30 97       	sbiw	r30, 0x00	; 0
    2224:	c1 f7       	brne	.-16     	; 0x2216 <run+0xc6>
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 70 05 	call	0xae0	; 0xae0 <dispatch>
    222c:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    2230:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    2234:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    2238:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    223c:	20 97       	sbiw	r28, 0x00	; 0
    223e:	09 f0       	breq	.+2      	; 0x2242 <run+0xf2>
    2240:	92 cf       	rjmp	.-220    	; 0x2166 <run+0x16>
    2242:	0e 94 d0 05 	call	0xba0	; 0xba0 <dequeue.part.0>

00002246 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2246:	42 31       	cpi	r20, 0x12	; 18
    2248:	b8 f4       	brcc	.+46     	; 0x2278 <install+0x32>
        char status;
        DISABLE(status);
    224a:	2f b7       	in	r18, 0x3f	; 63
    224c:	f8 94       	cli
        otable[i] = obj;
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	44 0f       	add	r20, r20
    2252:	55 1f       	adc	r21, r21
    2254:	fa 01       	movw	r30, r20
    2256:	e0 5a       	subi	r30, 0xA0	; 160
    2258:	fe 4f       	sbci	r31, 0xFE	; 254
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
        mtable[i] = m;
    225e:	fa 01       	movw	r30, r20
    2260:	e8 50       	subi	r30, 0x08	; 8
    2262:	fe 4f       	sbci	r31, 0xFE	; 254
    2264:	71 83       	std	Z+1, r23	; 0x01
    2266:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	fc 01       	movw	r30, r24
    226e:	53 83       	std	Z+3, r21	; 0x03
    2270:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2272:	27 ff       	sbrs	r18, 7
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <install+0x32>
    2276:	78 94       	sei
    2278:	08 95       	ret

0000227a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    227a:	8c 01       	movw	r16, r24
    227c:	7b 01       	movw	r14, r22
    227e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2280:	8f b7       	in	r24, 0x3f	; 63
    2282:	f8 94       	cli
    initialize();
    2284:	0e 94 05 05 	call	0xa0a	; 0xa0a <initialize>
    ENABLE(1);
    2288:	78 94       	sei
    if (m != NULL)
    228a:	e1 14       	cp	r14, r1
    228c:	f1 04       	cpc	r15, r1
    228e:	41 f0       	breq	.+16     	; 0x22a0 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	a9 01       	movw	r20, r18
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	cb 01       	movw	r24, r22
    229c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <async>
    DISABLE(status);
    22a0:	8f b7       	in	r24, 0x3f	; 63
    22a2:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    22a4:	0e 94 90 05 	call	0xb20	; 0xb20 <schedule>
    ENABLE(1);
    22a8:	78 94       	sei
    while (1) {
        SLEEP();
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	83 bf       	out	0x33, r24	; 51
    22ae:	88 95       	sleep
    22b0:	fd cf       	rjmp	.-6      	; 0x22ac <tinytimber+0x32>

000022b2 <writeBit>:
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
	PORTE |= (1 << self->portBit);
    22b2:	4e b1       	in	r20, 0x0e	; 14
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	30 e0       	ldi	r19, 0x00	; 0
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    22b8:	67 2b       	or	r22, r23
    22ba:	79 f4       	brne	.+30     	; 0x22da <writeBit+0x28>
	PORTE |= (1 << self->portBit);
	else
	PORTE &= ~(1 << self->portBit);
    22bc:	b9 01       	movw	r22, r18
    22be:	fc 01       	movw	r30, r24
    22c0:	04 80       	ldd	r0, Z+4	; 0x04
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <writeBit+0x16>
    22c4:	66 0f       	add	r22, r22
    22c6:	77 1f       	adc	r23, r23
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <writeBit+0x12>
    22cc:	cb 01       	movw	r24, r22
    22ce:	80 95       	com	r24
    22d0:	84 23       	and	r24, r20
    22d2:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	08 95       	ret
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
	PORTE |= (1 << self->portBit);
    22da:	b9 01       	movw	r22, r18
    22dc:	fc 01       	movw	r30, r24
    22de:	04 80       	ldd	r0, Z+4	; 0x04
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <writeBit+0x34>
    22e2:	66 0f       	add	r22, r22
    22e4:	77 1f       	adc	r23, r23
    22e6:	0a 94       	dec	r0
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <writeBit+0x30>
    22ea:	cb 01       	movw	r24, r22
    22ec:	84 2b       	or	r24, r20
    22ee:	8e b9       	out	0x0e, r24	; 14
	else
	PORTE &= ~(1 << self->portBit);
	return 0;
}
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	08 95       	ret

000022f6 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    22f6:	4e b1       	in	r20, 0x0e	; 14
    22f8:	21 e0       	ldi	r18, 0x01	; 1
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	fc 01       	movw	r30, r24
    22fe:	04 80       	ldd	r0, Z+4	; 0x04
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <toggleBit+0x10>
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	0a 94       	dec	r0
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <toggleBit+0xc>
    230a:	24 27       	eor	r18, r20
    230c:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	08 95       	ret

00002314 <__divmodhi4>:
    2314:	97 fb       	bst	r25, 7
    2316:	07 2e       	mov	r0, r23
    2318:	16 f4       	brtc	.+4      	; 0x231e <__divmodhi4+0xa>
    231a:	00 94       	com	r0
    231c:	07 d0       	rcall	.+14     	; 0x232c <__divmodhi4_neg1>
    231e:	77 fd       	sbrc	r23, 7
    2320:	09 d0       	rcall	.+18     	; 0x2334 <__divmodhi4_neg2>
    2322:	0e 94 c4 11 	call	0x2388	; 0x2388 <__udivmodhi4>
    2326:	07 fc       	sbrc	r0, 7
    2328:	05 d0       	rcall	.+10     	; 0x2334 <__divmodhi4_neg2>
    232a:	3e f4       	brtc	.+14     	; 0x233a <__divmodhi4_exit>

0000232c <__divmodhi4_neg1>:
    232c:	90 95       	com	r25
    232e:	81 95       	neg	r24
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	08 95       	ret

00002334 <__divmodhi4_neg2>:
    2334:	70 95       	com	r23
    2336:	61 95       	neg	r22
    2338:	7f 4f       	sbci	r23, 0xFF	; 255

0000233a <__divmodhi4_exit>:
    233a:	08 95       	ret

0000233c <__divmodsi4>:
    233c:	05 2e       	mov	r0, r21
    233e:	97 fb       	bst	r25, 7
    2340:	1e f4       	brtc	.+6      	; 0x2348 <__divmodsi4+0xc>
    2342:	00 94       	com	r0
    2344:	0e 94 b5 11 	call	0x236a	; 0x236a <__negsi2>
    2348:	57 fd       	sbrc	r21, 7
    234a:	07 d0       	rcall	.+14     	; 0x235a <__divmodsi4_neg2>
    234c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__udivmodsi4>
    2350:	07 fc       	sbrc	r0, 7
    2352:	03 d0       	rcall	.+6      	; 0x235a <__divmodsi4_neg2>
    2354:	4e f4       	brtc	.+18     	; 0x2368 <__divmodsi4_exit>
    2356:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__negsi2>

0000235a <__divmodsi4_neg2>:
    235a:	50 95       	com	r21
    235c:	40 95       	com	r20
    235e:	30 95       	com	r19
    2360:	21 95       	neg	r18
    2362:	3f 4f       	sbci	r19, 0xFF	; 255
    2364:	4f 4f       	sbci	r20, 0xFF	; 255
    2366:	5f 4f       	sbci	r21, 0xFF	; 255

00002368 <__divmodsi4_exit>:
    2368:	08 95       	ret

0000236a <__negsi2>:
    236a:	90 95       	com	r25
    236c:	80 95       	com	r24
    236e:	70 95       	com	r23
    2370:	61 95       	neg	r22
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	8f 4f       	sbci	r24, 0xFF	; 255
    2376:	9f 4f       	sbci	r25, 0xFF	; 255
    2378:	08 95       	ret

0000237a <__usmulhisi3>:
    237a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__umulhisi3>

0000237e <__usmulhisi3_tail>:
    237e:	b7 ff       	sbrs	r27, 7
    2380:	08 95       	ret
    2382:	82 1b       	sub	r24, r18
    2384:	93 0b       	sbc	r25, r19
    2386:	08 95       	ret

00002388 <__udivmodhi4>:
    2388:	aa 1b       	sub	r26, r26
    238a:	bb 1b       	sub	r27, r27
    238c:	51 e1       	ldi	r21, 0x11	; 17
    238e:	07 c0       	rjmp	.+14     	; 0x239e <__udivmodhi4_ep>

00002390 <__udivmodhi4_loop>:
    2390:	aa 1f       	adc	r26, r26
    2392:	bb 1f       	adc	r27, r27
    2394:	a6 17       	cp	r26, r22
    2396:	b7 07       	cpc	r27, r23
    2398:	10 f0       	brcs	.+4      	; 0x239e <__udivmodhi4_ep>
    239a:	a6 1b       	sub	r26, r22
    239c:	b7 0b       	sbc	r27, r23

0000239e <__udivmodhi4_ep>:
    239e:	88 1f       	adc	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	5a 95       	dec	r21
    23a4:	a9 f7       	brne	.-22     	; 0x2390 <__udivmodhi4_loop>
    23a6:	80 95       	com	r24
    23a8:	90 95       	com	r25
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	08 95       	ret

000023b0 <__udivmodsi4>:
    23b0:	a1 e2       	ldi	r26, 0x21	; 33
    23b2:	1a 2e       	mov	r1, r26
    23b4:	aa 1b       	sub	r26, r26
    23b6:	bb 1b       	sub	r27, r27
    23b8:	fd 01       	movw	r30, r26
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <__udivmodsi4_ep>

000023bc <__udivmodsi4_loop>:
    23bc:	aa 1f       	adc	r26, r26
    23be:	bb 1f       	adc	r27, r27
    23c0:	ee 1f       	adc	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	a2 17       	cp	r26, r18
    23c6:	b3 07       	cpc	r27, r19
    23c8:	e4 07       	cpc	r30, r20
    23ca:	f5 07       	cpc	r31, r21
    23cc:	20 f0       	brcs	.+8      	; 0x23d6 <__udivmodsi4_ep>
    23ce:	a2 1b       	sub	r26, r18
    23d0:	b3 0b       	sbc	r27, r19
    23d2:	e4 0b       	sbc	r30, r20
    23d4:	f5 0b       	sbc	r31, r21

000023d6 <__udivmodsi4_ep>:
    23d6:	66 1f       	adc	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	88 1f       	adc	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	1a 94       	dec	r1
    23e0:	69 f7       	brne	.-38     	; 0x23bc <__udivmodsi4_loop>
    23e2:	60 95       	com	r22
    23e4:	70 95       	com	r23
    23e6:	80 95       	com	r24
    23e8:	90 95       	com	r25
    23ea:	9b 01       	movw	r18, r22
    23ec:	ac 01       	movw	r20, r24
    23ee:	bd 01       	movw	r22, r26
    23f0:	cf 01       	movw	r24, r30
    23f2:	08 95       	ret

000023f4 <__umulhisi3>:
    23f4:	a2 9f       	mul	r26, r18
    23f6:	b0 01       	movw	r22, r0
    23f8:	b3 9f       	mul	r27, r19
    23fa:	c0 01       	movw	r24, r0
    23fc:	a3 9f       	mul	r26, r19
    23fe:	70 0d       	add	r23, r0
    2400:	81 1d       	adc	r24, r1
    2402:	11 24       	eor	r1, r1
    2404:	91 1d       	adc	r25, r1
    2406:	b2 9f       	mul	r27, r18
    2408:	70 0d       	add	r23, r0
    240a:	81 1d       	adc	r24, r1
    240c:	11 24       	eor	r1, r1
    240e:	91 1d       	adc	r25, r1
    2410:	08 95       	ret

00002412 <setjmp>:
    2412:	dc 01       	movw	r26, r24
    2414:	2d 92       	st	X+, r2
    2416:	3d 92       	st	X+, r3
    2418:	4d 92       	st	X+, r4
    241a:	5d 92       	st	X+, r5
    241c:	6d 92       	st	X+, r6
    241e:	7d 92       	st	X+, r7
    2420:	8d 92       	st	X+, r8
    2422:	9d 92       	st	X+, r9
    2424:	ad 92       	st	X+, r10
    2426:	bd 92       	st	X+, r11
    2428:	cd 92       	st	X+, r12
    242a:	dd 92       	st	X+, r13
    242c:	ed 92       	st	X+, r14
    242e:	fd 92       	st	X+, r15
    2430:	0d 93       	st	X+, r16
    2432:	1d 93       	st	X+, r17
    2434:	cd 93       	st	X+, r28
    2436:	dd 93       	st	X+, r29
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	8d b7       	in	r24, 0x3d	; 61
    243e:	8d 93       	st	X+, r24
    2440:	8e b7       	in	r24, 0x3e	; 62
    2442:	8d 93       	st	X+, r24
    2444:	8f b7       	in	r24, 0x3f	; 63
    2446:	8d 93       	st	X+, r24
    2448:	ed 93       	st	X+, r30
    244a:	fd 93       	st	X+, r31
    244c:	88 27       	eor	r24, r24
    244e:	99 27       	eor	r25, r25
    2450:	09 94       	ijmp

00002452 <longjmp>:
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	91 05       	cpc	r25, r1
    245a:	81 1d       	adc	r24, r1
    245c:	2d 90       	ld	r2, X+
    245e:	3d 90       	ld	r3, X+
    2460:	4d 90       	ld	r4, X+
    2462:	5d 90       	ld	r5, X+
    2464:	6d 90       	ld	r6, X+
    2466:	7d 90       	ld	r7, X+
    2468:	8d 90       	ld	r8, X+
    246a:	9d 90       	ld	r9, X+
    246c:	ad 90       	ld	r10, X+
    246e:	bd 90       	ld	r11, X+
    2470:	cd 90       	ld	r12, X+
    2472:	dd 90       	ld	r13, X+
    2474:	ed 90       	ld	r14, X+
    2476:	fd 90       	ld	r15, X+
    2478:	0d 91       	ld	r16, X+
    247a:	1d 91       	ld	r17, X+
    247c:	cd 91       	ld	r28, X+
    247e:	dd 91       	ld	r29, X+
    2480:	ed 91       	ld	r30, X+
    2482:	fd 91       	ld	r31, X+
    2484:	0d 90       	ld	r0, X+
    2486:	f8 94       	cli
    2488:	fe bf       	out	0x3e, r31	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	ed bf       	out	0x3d, r30	; 61
    248e:	ed 91       	ld	r30, X+
    2490:	fd 91       	ld	r31, X+
    2492:	09 94       	ijmp

00002494 <_exit>:
    2494:	f8 94       	cli

00002496 <__stop_program>:
    2496:	ff cf       	rjmp	.-2      	; 0x2496 <__stop_program>
