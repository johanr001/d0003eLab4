
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000025a6  0000263a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800150  00800150  0000268a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003925  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a4  00000000  00000000  00006309  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001970  00000000  00000000  000075ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e7c  00000000  00000000  00008f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1a  00000000  00000000  00009d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032fe  00000000  00000000  0000a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000dab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_1>
       8:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__vector_2>
       c:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_3>
      10:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_4>
      14:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_9>
      28:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_10>
      2c:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_11>
      30:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_12>
      34:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_13>
      38:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_14>
      3c:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_15>
      40:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_16>
      44:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__vector_17>
      48:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_18>
      4c:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_19>
      50:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__vector_20>
      54:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__vector_21>
      58:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 ea       	ldi	r30, 0xA6	; 166
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a0 35       	cpi	r26, 0x50	; 80
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a0 e5       	ldi	r26, 0x50	; 80
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a3 3a       	cpi	r26, 0xA3	; 163
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 81 04 	call	0x902	; 0x902 <main>
      92:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() checkar om den håller.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
	if (self->held == +1 && PRESSEDUP) {
      aa:	fc 01       	movw	r30, r24
      ac:	26 81       	ldd	r18, Z+6	; 0x06
      ae:	37 81       	ldd	r19, Z+7	; 0x07
      b0:	21 30       	cpi	r18, 0x01	; 1
      b2:	31 05       	cpc	r19, r1
      b4:	29 f5       	brne	.+74     	; 0x100 <holdCheckerUp+0x66>
      b6:	1e 99       	sbic	0x03, 6	; 3
      b8:	23 c0       	rjmp	.+70     	; 0x100 <holdCheckerUp+0x66>
      ba:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecInc, 0);
      bc:	04 81       	ldd	r16, Z+4	; 0x04
      be:	15 81       	ldd	r17, Z+5	; 0x05
      c0:	c1 2c       	mov	r12, r1
      c2:	d1 2c       	mov	r13, r1
      c4:	0f 2e       	mov	r0, r31
      c6:	f7 e1       	ldi	r31, 0x17	; 23
      c8:	ef 2e       	mov	r14, r31
      ca:	f3 e0       	ldi	r31, 0x03	; 3
      cc:	ff 2e       	mov	r15, r31
      ce:	f0 2d       	mov	r31, r0
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	a9 01       	movw	r20, r18
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	cb 01       	movw	r24, r22
      dc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
		AFTER(MSEC(100), self, holdCheckerUp, 0);
      e0:	0f 2e       	mov	r0, r31
      e2:	fd e4       	ldi	r31, 0x4D	; 77
      e4:	ef 2e       	mov	r14, r31
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	ff 2e       	mov	r15, r31
      ea:	f0 2d       	mov	r31, r0
      ec:	8e 01       	movw	r16, r28
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	a9 01       	movw	r20, r18
      f4:	65 e3       	ldi	r22, 0x35	; 53
      f6:	7c e0       	ldi	r23, 0x0C	; 12
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>

	}
	return 0;
}
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	1f 91       	pop	r17
     10a:	0f 91       	pop	r16
     10c:	ff 90       	pop	r15
     10e:	ef 90       	pop	r14
     110:	df 90       	pop	r13
     112:	cf 90       	pop	r12
     114:	08 95       	ret

00000116 <holdCheckerDown>:

int holdCheckerDown(Button *self, int arg) {
     116:	cf 92       	push	r12
     118:	df 92       	push	r13
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
	if (self->held == -1 && PRESSEDDN) {
     126:	fc 01       	movw	r30, r24
     128:	26 81       	ldd	r18, Z+6	; 0x06
     12a:	37 81       	ldd	r19, Z+7	; 0x07
     12c:	2f 3f       	cpi	r18, 0xFF	; 255
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	29 f5       	brne	.+74     	; 0x17c <holdCheckerDown+0x66>
     132:	1f 99       	sbic	0x03, 7	; 3
     134:	23 c0       	rjmp	.+70     	; 0x17c <holdCheckerDown+0x66>
     136:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecDec, 0);
     138:	0c 81       	ldd	r16, Y+4	; 0x04
     13a:	1d 81       	ldd	r17, Y+5	; 0x05
     13c:	c1 2c       	mov	r12, r1
     13e:	d1 2c       	mov	r13, r1
     140:	0f 2e       	mov	r0, r31
     142:	f4 e6       	ldi	r31, 0x64	; 100
     144:	ef 2e       	mov	r14, r31
     146:	f3 e0       	ldi	r31, 0x03	; 3
     148:	ff 2e       	mov	r15, r31
     14a:	f0 2d       	mov	r31, r0
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	a9 01       	movw	r20, r18
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	cb 01       	movw	r24, r22
     158:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
		AFTER(MSEC(100), self, holdCheckerDown, 0);
     15c:	0f 2e       	mov	r0, r31
     15e:	fb e8       	ldi	r31, 0x8B	; 139
     160:	ef 2e       	mov	r14, r31
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	ff 2e       	mov	r15, r31
     166:	f0 2d       	mov	r31, r0
     168:	8e 01       	movw	r16, r28
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	a9 01       	movw	r20, r18
     170:	65 e3       	ldi	r22, 0x35	; 53
     172:	7c e0       	ldi	r23, 0x0C	; 12
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>

	}
	return 0;
}
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	cf 90       	pop	r12
     190:	08 95       	ret

00000192 <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     192:	85 b1       	in	r24, 0x05	; 5
     194:	80 6d       	ori	r24, 0xD0	; 208
     196:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     198:	8e b1       	in	r24, 0x0e	; 14
     19a:	8c 60       	ori	r24, 0x0C	; 12
     19c:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     19e:	8d b3       	in	r24, 0x1d	; 29
     1a0:	80 6c       	ori	r24, 0xC0	; 192
     1a2:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a4:	eb e6       	ldi	r30, 0x6B	; 107
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8c 60       	ori	r24, 0x0C	; 12
     1ac:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1ae:	ec e6       	ldi	r30, 0x6C	; 108
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	80 6d       	ori	r24, 0xD0	; 208
     1b6:	80 83       	st	Z, r24
     1b8:	08 95       	ret

000001ba <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja "vänster" generator.
int leftdir(Button *self, int arg) {
     1ba:	cf 92       	push	r12
     1bc:	df 92       	push	r13
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	0f 93       	push	r16
     1c4:	1f 93       	push	r17
	if (PRESSEDLT) {
     1c6:	62 99       	sbic	0x0c, 2	; 12
     1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <leftdir+0x36>
     1ca:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     1cc:	04 81       	ldd	r16, Z+4	; 0x04
     1ce:	15 81       	ldd	r17, Z+5	; 0x05
     1d0:	c1 2c       	mov	r12, r1
     1d2:	d1 2c       	mov	r13, r1
     1d4:	0f 2e       	mov	r0, r31
     1d6:	f1 ef       	ldi	r31, 0xF1	; 241
     1d8:	ef 2e       	mov	r14, r31
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	ff 2e       	mov	r15, r31
     1de:	f0 2d       	mov	r31, r0
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	a9 01       	movw	r20, r18
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	cb 01       	movw	r24, r22
     1ec:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	return 0;
}
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <rightdir>:

// rightdir() => anropar switchGen(1) för "höger" generator.
int rightdir(Button *self, int arg) {
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
	if (PRESSEDRT) {
     20e:	63 99       	sbic	0x0c, 3	; 12
     210:	14 c0       	rjmp	.+40     	; 0x23a <rightdir+0x38>
     212:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     214:	04 81       	ldd	r16, Z+4	; 0x04
     216:	15 81       	ldd	r17, Z+5	; 0x05
     218:	cc 24       	eor	r12, r12
     21a:	c3 94       	inc	r12
     21c:	d1 2c       	mov	r13, r1
     21e:	0f 2e       	mov	r0, r31
     220:	f1 ef       	ldi	r31, 0xF1	; 241
     222:	ef 2e       	mov	r14, r31
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	ff 2e       	mov	r15, r31
     228:	f0 2d       	mov	r31, r0
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	a9 01       	movw	r20, r18
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	cb 01       	movw	r24, r22
     236:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	return 0;
}
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	08 95       	ret

0000024c <buttonCheckerLR>:

	}
	return 0;
}
	
int buttonCheckerLR(Button *self, int arg) {
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     252:	62 99       	sbic	0x0c, 2	; 12
     254:	04 c0       	rjmp	.+8      	; 0x25e <buttonCheckerLR+0x12>
		leftdir(self,0);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <leftdir>
	}
	if (PRESSEDRT) {
     25e:	63 99       	sbic	0x0c, 3	; 12
     260:	05 c0       	rjmp	.+10     	; 0x26c <buttonCheckerLR+0x20>
		rightdir(self,0);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	ce 01       	movw	r24, r28
     268:	0e 94 01 01 	call	0x202	; 0x202 <rightdir>
	}
	return 0;
}
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     276:	cf 92       	push	r12
     278:	df 92       	push	r13
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
	if (PRESSEDUP && self->held == 0) { // Checka om knappen är nerclickad och inte held. Annars spamclick gör snabbare scroll.
     286:	1e 99       	sbic	0x03, 6	; 3
     288:	2c c0       	rjmp	.+88     	; 0x2e2 <updir+0x6c>
     28a:	fc 01       	movw	r30, r24
     28c:	26 81       	ldd	r18, Z+6	; 0x06
     28e:	37 81       	ldd	r19, Z+7	; 0x07
     290:	23 2b       	or	r18, r19
     292:	39 f5       	brne	.+78     	; 0x2e2 <updir+0x6c>
     294:	ec 01       	movw	r28, r24
		self->held = +1; // Sätt held till +1
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	97 83       	std	Z+7, r25	; 0x07
     29c:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
     29e:	04 81       	ldd	r16, Z+4	; 0x04
     2a0:	15 81       	ldd	r17, Z+5	; 0x05
     2a2:	c1 2c       	mov	r12, r1
     2a4:	d1 2c       	mov	r13, r1
     2a6:	0f 2e       	mov	r0, r31
     2a8:	f7 e1       	ldi	r31, 0x17	; 23
     2aa:	ef 2e       	mov	r14, r31
     2ac:	f3 e0       	ldi	r31, 0x03	; 3
     2ae:	ff 2e       	mov	r15, r31
     2b0:	f0 2d       	mov	r31, r0
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	a9 01       	movw	r20, r18
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	cb 01       	movw	r24, r22
     2be:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
		AFTER(MSEC(500),self, holdCheckerUp, 0); // Starta holdCheckerUp() funktionen för att repetera
     2c2:	0f 2e       	mov	r0, r31
     2c4:	fd e4       	ldi	r31, 0x4D	; 77
     2c6:	ef 2e       	mov	r14, r31
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	ff 2e       	mov	r15, r31
     2cc:	f0 2d       	mov	r31, r0
     2ce:	8e 01       	movw	r16, r28
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	a9 01       	movw	r20, r18
     2d6:	69 e0       	ldi	r22, 0x09	; 9
     2d8:	7d e3       	ldi	r23, 0x3D	; 61
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	return 0;
}
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	cf 90       	pop	r12
     2f6:	08 95       	ret

000002f8 <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
    if (PRESSEDDN && self->held == 0) { // Checka om knappen är nerclickad och inte held. Annars spamclick gör snabbare scroll.
     308:	1f 99       	sbic	0x03, 7	; 3
     30a:	2c c0       	rjmp	.+88     	; 0x364 <downdir+0x6c>
     30c:	fc 01       	movw	r30, r24
     30e:	26 81       	ldd	r18, Z+6	; 0x06
     310:	37 81       	ldd	r19, Z+7	; 0x07
     312:	23 2b       	or	r18, r19
     314:	39 f5       	brne	.+78     	; 0x364 <downdir+0x6c>
     316:	ec 01       	movw	r28, r24
	    self->held = -1; // Sätt held till true
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	9f ef       	ldi	r25, 0xFF	; 255
     31c:	97 83       	std	Z+7, r25	; 0x07
     31e:	86 83       	std	Z+6, r24	; 0x06
	    ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     320:	04 81       	ldd	r16, Z+4	; 0x04
     322:	15 81       	ldd	r17, Z+5	; 0x05
     324:	c1 2c       	mov	r12, r1
     326:	d1 2c       	mov	r13, r1
     328:	0f 2e       	mov	r0, r31
     32a:	f4 e6       	ldi	r31, 0x64	; 100
     32c:	ef 2e       	mov	r14, r31
     32e:	f3 e0       	ldi	r31, 0x03	; 3
     330:	ff 2e       	mov	r15, r31
     332:	f0 2d       	mov	r31, r0
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	a9 01       	movw	r20, r18
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	cb 01       	movw	r24, r22
     340:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	    AFTER(MSEC(500),self, holdCheckerDown, 0); // Starta holdCheckerDown() funktionen för att repetera
     344:	0f 2e       	mov	r0, r31
     346:	fb e8       	ldi	r31, 0x8B	; 139
     348:	ef 2e       	mov	r14, r31
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	ff 2e       	mov	r15, r31
     34e:	f0 2d       	mov	r31, r0
     350:	8e 01       	movw	r16, r28
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	a9 01       	movw	r20, r18
     358:	69 e0       	ldi	r22, 0x09	; 9
     35a:	7d e3       	ldi	r23, 0x3D	; 61
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
    }
	return 0;
}
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	cf 90       	pop	r12
     378:	08 95       	ret

0000037a <centerdir>:

// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
	if (PRESSEDCN) {
     386:	1c 99       	sbic	0x03, 4	; 3
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <centerdir+0x38>
     38a:	fc 01       	movw	r30, r24
		AFTER(MSEC(100),self->gui, guiFrecReset, 0);
     38c:	04 81       	ldd	r16, Z+4	; 0x04
     38e:	15 81       	ldd	r17, Z+5	; 0x05
     390:	c1 2c       	mov	r12, r1
     392:	d1 2c       	mov	r13, r1
     394:	0f 2e       	mov	r0, r31
     396:	f1 eb       	ldi	r31, 0xB1	; 177
     398:	ef 2e       	mov	r14, r31
     39a:	f3 e0       	ldi	r31, 0x03	; 3
     39c:	ff 2e       	mov	r15, r31
     39e:	f0 2d       	mov	r31, r0
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	a9 01       	movw	r20, r18
     3a6:	65 e3       	ldi	r22, 0x35	; 53
     3a8:	7c e0       	ldi	r23, 0x0C	; 12
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	return 0;
}
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	08 95       	ret

000003c4 <buttonCheckerUDC>:
	}
	return 0;
}

// buttonChecker() checkar vilken knapp som blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     3ca:	1e 99       	sbic	0x03, 6	; 3
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <buttonCheckerUDC+0x14>
		updir(self, 0);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	0e 94 3b 01 	call	0x276	; 0x276 <updir>
     3d6:	09 c0       	rjmp	.+18     	; 0x3ea <buttonCheckerUDC+0x26>
	} 
	else if (PRESSEDDN) {
     3d8:	1f 99       	sbic	0x03, 7	; 3
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <buttonCheckerUDC+0x22>
		downdir(self, 0);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <downdir>
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <buttonCheckerUDC+0x26>
	} 
	else {
		self->held = 0;  // Reset när inte upp eller ner
     3e6:	1f 82       	std	Y+7, r1	; 0x07
     3e8:	1e 82       	std	Y+6, r1	; 0x06
	}
	
	if (PRESSEDCN) {
     3ea:	1c 99       	sbic	0x03, 4	; 3
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <buttonCheckerUDC+0x34>
		centerdir(self, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 bd 01 	call	0x37a	; 0x37a <centerdir>
	}
	return 0;
}
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     402:	80 ec       	ldi	r24, 0xC0	; 192
     404:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     408:	87 eb       	ldi	r24, 0xB7	; 183
     40a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     414:	08 95       	ret

00000416 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     416:	66 30       	cpi	r22, 0x06	; 6
     418:	71 05       	cpc	r23, r1
     41a:	08 f0       	brcs	.+2      	; 0x41e <writeChar+0x8>
     41c:	6b c0       	rjmp	.+214    	; 0x4f4 <writeChar+0xde>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     41e:	90 ed       	ldi	r25, 0xD0	; 208
     420:	98 0f       	add	r25, r24
     422:	9a 30       	cpi	r25, 0x0A	; 10
     424:	48 f4       	brcc	.+18     	; 0x438 <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     426:	e8 2f       	mov	r30, r24
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	ee 0f       	add	r30, r30
     42c:	ff 1f       	adc	r31, r31
     42e:	e5 52       	subi	r30, 0x25	; 37
     430:	ff 4f       	sbci	r31, 0xFF	; 255
     432:	20 81       	ld	r18, Z
     434:	31 81       	ldd	r19, Z+1	; 0x01
     436:	02 c0       	rjmp	.+4      	; 0x43c <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     43c:	fb 01       	movw	r30, r22
     43e:	77 23       	and	r23, r23
     440:	0c f4       	brge	.+2      	; 0x444 <writeChar+0x2e>
     442:	31 96       	adiw	r30, 0x01	; 1
     444:	f5 95       	asr	r31
     446:	e7 95       	ror	r30
     448:	e4 51       	subi	r30, 0x14	; 20
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     44c:	61 70       	andi	r22, 0x01	; 1
     44e:	70 78       	andi	r23, 0x80	; 128
     450:	77 23       	and	r23, r23
     452:	34 f4       	brge	.+12     	; 0x460 <writeChar+0x4a>
     454:	61 50       	subi	r22, 0x01	; 1
     456:	71 09       	sbc	r23, r1
     458:	6e 6f       	ori	r22, 0xFE	; 254
     45a:	7f 6f       	ori	r23, 0xFF	; 255
     45c:	6f 5f       	subi	r22, 0xFF	; 255
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	66 0f       	add	r22, r22
     462:	77 1f       	adc	r23, r23
     464:	66 0f       	add	r22, r22
     466:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     468:	8f e0       	ldi	r24, 0x0F	; 15
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	06 2e       	mov	r0, r22
     46e:	02 c0       	rjmp	.+4      	; 0x474 <writeChar+0x5e>
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	0a 94       	dec	r0
     476:	e2 f7       	brpl	.-8      	; 0x470 <writeChar+0x5a>
     478:	80 95       	com	r24
     47a:	40 81       	ld	r20, Z
     47c:	98 2f       	mov	r25, r24
     47e:	94 23       	and	r25, r20
     480:	a9 01       	movw	r20, r18
     482:	4f 70       	andi	r20, 0x0F	; 15
     484:	55 27       	eor	r21, r21
     486:	06 2e       	mov	r0, r22
     488:	02 c0       	rjmp	.+4      	; 0x48e <writeChar+0x78>
     48a:	44 0f       	add	r20, r20
     48c:	55 1f       	adc	r21, r21
     48e:	0a 94       	dec	r0
     490:	e2 f7       	brpl	.-8      	; 0x48a <writeChar+0x74>
     492:	49 2b       	or	r20, r25
     494:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     496:	a9 01       	movw	r20, r18
     498:	52 95       	swap	r21
     49a:	42 95       	swap	r20
     49c:	4f 70       	andi	r20, 0x0F	; 15
     49e:	45 27       	eor	r20, r21
     4a0:	5f 70       	andi	r21, 0x0F	; 15
     4a2:	45 27       	eor	r20, r21
     4a4:	4f 70       	andi	r20, 0x0F	; 15
     4a6:	55 27       	eor	r21, r21
     4a8:	06 2e       	mov	r0, r22
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <writeChar+0x9a>
     4ac:	44 0f       	add	r20, r20
     4ae:	55 1f       	adc	r21, r21
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <writeChar+0x96>
     4b4:	95 81       	ldd	r25, Z+5	; 0x05
     4b6:	98 23       	and	r25, r24
     4b8:	49 2b       	or	r20, r25
     4ba:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     4bc:	43 2f       	mov	r20, r19
     4be:	55 27       	eor	r21, r21
     4c0:	4f 70       	andi	r20, 0x0F	; 15
     4c2:	55 27       	eor	r21, r21
     4c4:	06 2e       	mov	r0, r22
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <writeChar+0xb6>
     4c8:	44 0f       	add	r20, r20
     4ca:	55 1f       	adc	r21, r21
     4cc:	0a 94       	dec	r0
     4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <writeChar+0xb2>
     4d0:	92 85       	ldd	r25, Z+10	; 0x0a
     4d2:	98 23       	and	r25, r24
     4d4:	49 2b       	or	r20, r25
     4d6:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     4d8:	47 85       	ldd	r20, Z+15	; 0x0f
     4da:	48 23       	and	r20, r24
     4dc:	c9 01       	movw	r24, r18
     4de:	89 2f       	mov	r24, r25
     4e0:	99 27       	eor	r25, r25
     4e2:	82 95       	swap	r24
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <writeChar+0xd6>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <writeChar+0xd2>
     4f0:	84 2b       	or	r24, r20
     4f2:	87 87       	std	Z+15, r24	; 0x0f
     4f4:	08 95       	ret

000004f6 <printAt>:
}

void printAt(long num, int pos) {
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	4b 01       	movw	r8, r22
     50c:	5c 01       	movw	r10, r24
     50e:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     510:	24 e6       	ldi	r18, 0x64	; 100
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	0e 94 25 12 	call	0x244a	; 0x244a <__divmodsi4>
     51c:	0f 2e       	mov	r0, r31
     51e:	fa e0       	ldi	r31, 0x0A	; 10
     520:	cf 2e       	mov	r12, r31
     522:	d1 2c       	mov	r13, r1
     524:	e1 2c       	mov	r14, r1
     526:	f1 2c       	mov	r15, r1
     528:	f0 2d       	mov	r31, r0
     52a:	a7 01       	movw	r20, r14
     52c:	96 01       	movw	r18, r12
     52e:	0e 94 25 12 	call	0x244a	; 0x244a <__divmodsi4>
     532:	be 01       	movw	r22, r28
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	82 0f       	add	r24, r18
     538:	0e 94 0b 02 	call	0x416	; 0x416 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     53c:	21 96       	adiw	r28, 0x01	; 1
     53e:	c5 01       	movw	r24, r10
     540:	b4 01       	movw	r22, r8
     542:	a7 01       	movw	r20, r14
     544:	96 01       	movw	r18, r12
     546:	0e 94 25 12 	call	0x244a	; 0x244a <__divmodsi4>
     54a:	86 2f       	mov	r24, r22
     54c:	be 01       	movw	r22, r28
     54e:	80 5d       	subi	r24, 0xD0	; 208
     550:	0e 94 0b 02 	call	0x416	; 0x416 <writeChar>
	
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	bf 90       	pop	r11
     562:	af 90       	pop	r10
     564:	9f 90       	pop	r9
     566:	8f 90       	pop	r8
     568:	08 95       	ret

0000056a <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	65 e0       	ldi	r22, 0x05	; 5
     576:	75 e0       	ldi	r23, 0x05	; 5
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	9d 81       	ldd	r25, Y+5	; 0x05
     57c:	0e 94 ae 10 	call	0x215c	; 0x215c <sync>
     580:	bc 01       	movw	r22, r24
     582:	99 0f       	add	r25, r25
     584:	88 0b       	sbc	r24, r24
     586:	99 0b       	sbc	r25, r25
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	65 e0       	ldi	r22, 0x05	; 5
     596:	75 e0       	ldi	r23, 0x05	; 5
     598:	8e 81       	ldd	r24, Y+6	; 0x06
     59a:	9f 81       	ldd	r25, Y+7	; 0x07
     59c:	0e 94 ae 10 	call	0x215c	; 0x215c <sync>
     5a0:	bc 01       	movw	r22, r24
     5a2:	99 0f       	add	r25, r25
     5a4:	88 0b       	sbc	r24, r24
     5a6:	99 0b       	sbc	r25, r25
     5a8:	44 e0       	ldi	r20, 0x04	; 4
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     5b0:	88 85       	ldd	r24, Y+8	; 0x08
     5b2:	81 11       	cpse	r24, r1
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <updateDisplay+0x5e>
		printAt(10, 2);
     5b6:	42 e0       	ldi	r20, 0x02	; 2
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	6a e0       	ldi	r22, 0x0A	; 10
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <printAt>
     5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     5c8:	42 e0       	ldi	r20, 0x02	; 2
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <printAt>
	}
	return 0;
}
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	67 2b       	or	r22, r23
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <switchGen+0x14>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay,
	// så att vi inte blockeras, men ändå uppdaterar displayen direkt.
	ASYNC(self, updateDisplay, 0);
     5fa:	c1 2c       	mov	r12, r1
     5fc:	d1 2c       	mov	r13, r1
     5fe:	0f 2e       	mov	r0, r31
     600:	f5 eb       	ldi	r31, 0xB5	; 181
     602:	ef 2e       	mov	r14, r31
     604:	f2 e0       	ldi	r31, 0x02	; 2
     606:	ff 2e       	mov	r15, r31
     608:	f0 2d       	mov	r31, r0
     60a:	8c 01       	movw	r16, r24
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	cb 01       	movw	r24, r22
     618:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	return 0;
}
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	08 95       	ret

0000062e <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     640:	88 85       	ldd	r24, Y+8	; 0x08
     642:	81 11       	cpse	r24, r1
     644:	13 c0       	rjmp	.+38     	; 0x66c <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     646:	0c 81       	ldd	r16, Y+4	; 0x04
     648:	1d 81       	ldd	r17, Y+5	; 0x05
     64a:	c1 2c       	mov	r12, r1
     64c:	d1 2c       	mov	r13, r1
     64e:	0f 2e       	mov	r0, r31
     650:	f9 e0       	ldi	r31, 0x09	; 9
     652:	ef 2e       	mov	r14, r31
     654:	f5 e0       	ldi	r31, 0x05	; 5
     656:	ff 2e       	mov	r15, r31
     658:	f0 2d       	mov	r31, r0
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	a9 01       	movw	r20, r18
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	cb 01       	movw	r24, r22
     666:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
     66a:	12 c0       	rjmp	.+36     	; 0x690 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     66c:	0e 81       	ldd	r16, Y+6	; 0x06
     66e:	1f 81       	ldd	r17, Y+7	; 0x07
     670:	c1 2c       	mov	r12, r1
     672:	d1 2c       	mov	r13, r1
     674:	0f 2e       	mov	r0, r31
     676:	f9 e0       	ldi	r31, 0x09	; 9
     678:	ef 2e       	mov	r14, r31
     67a:	f5 e0       	ldi	r31, 0x05	; 5
     67c:	ff 2e       	mov	r15, r31
     67e:	f0 2d       	mov	r31, r0
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	a9 01       	movw	r20, r18
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	cb 01       	movw	r24, r22
     68c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	ASYNC(self, updateDisplay, 0);
     690:	c1 2c       	mov	r12, r1
     692:	d1 2c       	mov	r13, r1
     694:	0f 2e       	mov	r0, r31
     696:	f5 eb       	ldi	r31, 0xB5	; 181
     698:	ef 2e       	mov	r14, r31
     69a:	f2 e0       	ldi	r31, 0x02	; 2
     69c:	ff 2e       	mov	r15, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	8e 01       	movw	r16, r28
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	return 0;

}
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	08 95       	ret

000006c8 <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6da:	88 85       	ldd	r24, Y+8	; 0x08
     6dc:	81 11       	cpse	r24, r1
     6de:	13 c0       	rjmp	.+38     	; 0x706 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     6e0:	0c 81       	ldd	r16, Y+4	; 0x04
     6e2:	1d 81       	ldd	r17, Y+5	; 0x05
     6e4:	c1 2c       	mov	r12, r1
     6e6:	d1 2c       	mov	r13, r1
     6e8:	0f 2e       	mov	r0, r31
     6ea:	f9 e3       	ldi	r31, 0x39	; 57
     6ec:	ef 2e       	mov	r14, r31
     6ee:	f5 e0       	ldi	r31, 0x05	; 5
     6f0:	ff 2e       	mov	r15, r31
     6f2:	f0 2d       	mov	r31, r0
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	a9 01       	movw	r20, r18
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	cb 01       	movw	r24, r22
     700:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
     704:	12 c0       	rjmp	.+36     	; 0x72a <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     706:	0e 81       	ldd	r16, Y+6	; 0x06
     708:	1f 81       	ldd	r17, Y+7	; 0x07
     70a:	c1 2c       	mov	r12, r1
     70c:	d1 2c       	mov	r13, r1
     70e:	0f 2e       	mov	r0, r31
     710:	f9 e3       	ldi	r31, 0x39	; 57
     712:	ef 2e       	mov	r14, r31
     714:	f5 e0       	ldi	r31, 0x05	; 5
     716:	ff 2e       	mov	r15, r31
     718:	f0 2d       	mov	r31, r0
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	a9 01       	movw	r20, r18
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	cb 01       	movw	r24, r22
     726:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	ASYNC(self, updateDisplay, 0);
     72a:	c1 2c       	mov	r12, r1
     72c:	d1 2c       	mov	r13, r1
     72e:	0f 2e       	mov	r0, r31
     730:	f5 eb       	ldi	r31, 0xB5	; 181
     732:	ef 2e       	mov	r14, r31
     734:	f2 e0       	ldi	r31, 0x02	; 2
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	8e 01       	movw	r16, r28
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	a9 01       	movw	r20, r18
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	cb 01       	movw	r24, r22
     748:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	return 0;
}
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	08 95       	ret

00000762 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     774:	88 85       	ldd	r24, Y+8	; 0x08
     776:	81 11       	cpse	r24, r1
     778:	13 c0       	rjmp	.+38     	; 0x7a0 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     77a:	0c 81       	ldd	r16, Y+4	; 0x04
     77c:	1d 81       	ldd	r17, Y+5	; 0x05
     77e:	c1 2c       	mov	r12, r1
     780:	d1 2c       	mov	r13, r1
     782:	0f 2e       	mov	r0, r31
     784:	f2 e4       	ldi	r31, 0x42	; 66
     786:	ef 2e       	mov	r14, r31
     788:	f5 e0       	ldi	r31, 0x05	; 5
     78a:	ff 2e       	mov	r15, r31
     78c:	f0 2d       	mov	r31, r0
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	a9 01       	movw	r20, r18
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	cb 01       	movw	r24, r22
     79a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
     79e:	12 c0       	rjmp	.+36     	; 0x7c4 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     7a0:	0e 81       	ldd	r16, Y+6	; 0x06
     7a2:	1f 81       	ldd	r17, Y+7	; 0x07
     7a4:	c1 2c       	mov	r12, r1
     7a6:	d1 2c       	mov	r13, r1
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f2 e4       	ldi	r31, 0x42	; 66
     7ac:	ef 2e       	mov	r14, r31
     7ae:	f5 e0       	ldi	r31, 0x05	; 5
     7b0:	ff 2e       	mov	r15, r31
     7b2:	f0 2d       	mov	r31, r0
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	a9 01       	movw	r20, r18
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	cb 01       	movw	r24, r22
     7c0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	}
	ASYNC(self, updateDisplay, 0);
     7c4:	c1 2c       	mov	r12, r1
     7c6:	d1 2c       	mov	r13, r1
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f5 eb       	ldi	r31, 0xB5	; 181
     7cc:	ef 2e       	mov	r14, r31
     7ce:	f2 e0       	ldi	r31, 0x02	; 2
     7d0:	ff 2e       	mov	r15, r31
     7d2:	f0 2d       	mov	r31, r0
     7d4:	8e 01       	movw	r16, r28
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	a9 01       	movw	r20, r18
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	cb 01       	movw	r24, r22
     7e2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	08 95       	ret

000007fc <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     808:	fc 01       	movw	r30, r24
     80a:	04 81       	ldd	r16, Z+4	; 0x04
     80c:	15 81       	ldd	r17, Z+5	; 0x05
     80e:	c1 2c       	mov	r12, r1
     810:	d1 2c       	mov	r13, r1
     812:	0f 2e       	mov	r0, r31
     814:	f6 e2       	ldi	r31, 0x26	; 38
     816:	ef 2e       	mov	r14, r31
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	ff 2e       	mov	r15, r31
     81c:	f0 2d       	mov	r31, r0
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	a9 01       	movw	r20, r18
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	cb 01       	movw	r24, r22
     82a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	return 0;
}
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	cf 90       	pop	r12
     83e:	08 95       	ret

00000840 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     84c:	fc 01       	movw	r30, r24
     84e:	04 81       	ldd	r16, Z+4	; 0x04
     850:	15 81       	ldd	r17, Z+5	; 0x05
     852:	c1 2c       	mov	r12, r1
     854:	d1 2c       	mov	r13, r1
     856:	0f 2e       	mov	r0, r31
     858:	f2 ee       	ldi	r31, 0xE2	; 226
     85a:	ef 2e       	mov	r14, r31
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	ff 2e       	mov	r15, r31
     860:	f0 2d       	mov	r31, r0
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	a9 01       	movw	r20, r18
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	cb 01       	movw	r24, r22
     86e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	return 0;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	08 95       	ret

00000884 <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     896:	c1 2c       	mov	r12, r1
     898:	d1 2c       	mov	r13, r1
     89a:	0f 2e       	mov	r0, r31
     89c:	fe e9       	ldi	r31, 0x9E	; 158
     89e:	ef 2e       	mov	r14, r31
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	ff 2e       	mov	r15, r31
     8a4:	f0 2d       	mov	r31, r0
     8a6:	00 e2       	ldi	r16, 0x20	; 32
     8a8:	11 e0       	ldi	r17, 0x01	; 1
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	a9 01       	movw	r20, r18
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	cb 01       	movw	r24, r22
     8b6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	ASYNC(&pulseGen2, setPulse, 0);
     8ba:	07 e1       	ldi	r16, 0x17	; 23
     8bc:	11 e0       	ldi	r17, 0x01	; 1
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	a9 01       	movw	r20, r18
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	cb 01       	movw	r24, r22
     8ca:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     8ce:	0f 2e       	mov	r0, r31
     8d0:	f5 eb       	ldi	r31, 0xB5	; 181
     8d2:	ef 2e       	mov	r14, r31
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
     8d6:	ff 2e       	mov	r15, r31
     8d8:	f0 2d       	mov	r31, r0
     8da:	8e 01       	movw	r16, r28
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	cb 01       	movw	r24, r22
     8e8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>

	return 0;
}
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     902:	0e 94 7f 05 	call	0xafe	; 0xafe <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     906:	0e 94 01 02 	call	0x402	; 0x402 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     90a:	0e 94 c9 00 	call	0x192	; 0x192 <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	6e ef       	ldi	r22, 0xFE	; 254
     912:	73 e0       	ldi	r23, 0x03	; 3
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 a9 11 	call	0x2352	; 0x2352 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     91c:	42 e0       	ldi	r20, 0x02	; 2
     91e:	60 e2       	ldi	r22, 0x20	; 32
     920:	74 e0       	ldi	r23, 0x04	; 4
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 a9 11 	call	0x2352	; 0x2352 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	62 e4       	ldi	r22, 0x42	; 66
     930:	74 e0       	ldi	r23, 0x04	; 4
     932:	8e e0       	ldi	r24, 0x0E	; 14
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 c3 11 	call	0x2386	; 0x2386 <tinytimber>
}
     93a:	08 95       	ret

0000093c <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     94e:	8c 81       	ldd	r24, Y+4	; 0x04
     950:	81 11       	cpse	r24, r1
     952:	13 c0       	rjmp	.+38     	; 0x97a <setPulse+0x3e>
	    ASYNC(self->wbit, writeBit, 0);
     954:	0f 81       	ldd	r16, Y+7	; 0x07
     956:	18 85       	ldd	r17, Y+8	; 0x08
     958:	c1 2c       	mov	r12, r1
     95a:	d1 2c       	mov	r13, r1
     95c:	0f 2e       	mov	r0, r31
     95e:	ff ed       	ldi	r31, 0xDF	; 223
     960:	ef 2e       	mov	r14, r31
     962:	f1 e1       	ldi	r31, 0x11	; 17
     964:	ff 2e       	mov	r15, r31
     966:	f0 2d       	mov	r31, r0
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	a9 01       	movw	r20, r18
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	cb 01       	movw	r24, r22
     974:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	    return 0;
     978:	3d c0       	rjmp	.+122    	; 0x9f4 <setPulse+0xb8>
    }
	// Annars toggla outputHigh (true/false => bit=1/0).
    ASYNC(self->wbit, toggleBit, 0);
     97a:	0f 81       	ldd	r16, Y+7	; 0x07
     97c:	18 85       	ldd	r17, Y+8	; 0x08
     97e:	c1 2c       	mov	r12, r1
     980:	d1 2c       	mov	r13, r1
     982:	0f 2e       	mov	r0, r31
     984:	f2 e0       	ldi	r31, 0x02	; 2
     986:	ef 2e       	mov	r14, r31
     988:	f2 e1       	ldi	r31, 0x12	; 18
     98a:	ff 2e       	mov	r15, r31
     98c:	f0 2d       	mov	r31, r0
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	a9 01       	movw	r20, r18
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	cb 01       	movw	r24, r22
     99a:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
	
	// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
    int delay = 1000 / self->frec;
    AFTER(MSEC(delay), self, setPulse, 0);
     99e:	6c 81       	ldd	r22, Y+4	; 0x04
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	88 ee       	ldi	r24, 0xE8	; 232
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	0e 94 11 12 	call	0x2422	; 0x2422 <__divmodhi4>
     9aa:	2d e7       	ldi	r18, 0x7D	; 125
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	db 01       	movw	r26, r22
     9b0:	0e 94 44 12 	call	0x2488	; 0x2488 <__usmulhisi3>
     9b4:	8b 01       	movw	r16, r22
     9b6:	9c 01       	movw	r18, r24
     9b8:	99 23       	and	r25, r25
     9ba:	24 f4       	brge	.+8      	; 0x9c4 <setPulse+0x88>
     9bc:	0d 5f       	subi	r16, 0xFD	; 253
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	2f 4f       	sbci	r18, 0xFF	; 255
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	c9 01       	movw	r24, r18
     9c6:	b8 01       	movw	r22, r16
     9c8:	95 95       	asr	r25
     9ca:	87 95       	ror	r24
     9cc:	77 95       	ror	r23
     9ce:	67 95       	ror	r22
     9d0:	95 95       	asr	r25
     9d2:	87 95       	ror	r24
     9d4:	77 95       	ror	r23
     9d6:	67 95       	ror	r22
     9d8:	c1 2c       	mov	r12, r1
     9da:	d1 2c       	mov	r13, r1
     9dc:	0f 2e       	mov	r0, r31
     9de:	fe e9       	ldi	r31, 0x9E	; 158
     9e0:	ef 2e       	mov	r14, r31
     9e2:	f4 e0       	ldi	r31, 0x04	; 4
     9e4:	ff 2e       	mov	r15, r31
     9e6:	f0 2d       	mov	r31, r0
     9e8:	8e 01       	movw	r16, r28
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	a9 01       	movw	r20, r18
     9f0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
    return 0;
}
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret

00000a0a <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     a0a:	fc 01       	movw	r30, r24
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
}
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	08 95       	ret

00000a12 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ec 01       	movw	r28, r24
    unsigned char old = self->frec;
     a24:	8c 81       	ldd	r24, Y+4	; 0x04
    if (self->frec < 99) {
     a26:	83 36       	cpi	r24, 0x63	; 99
     a28:	18 f4       	brcc	.+6      	; 0xa30 <FrecInc+0x1e>
	    self->frec++;
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	98 0f       	add	r25, r24
     a2e:	9c 83       	std	Y+4, r25	; 0x04
    }
    // Om går från 0 till mer än 0 starta.
    if (old == 0 && self->frec > 0) {
     a30:	81 11       	cpse	r24, r1
     a32:	14 c0       	rjmp	.+40     	; 0xa5c <FrecInc+0x4a>
     a34:	8c 81       	ldd	r24, Y+4	; 0x04
     a36:	88 23       	and	r24, r24
     a38:	89 f0       	breq	.+34     	; 0xa5c <FrecInc+0x4a>
	    ASYNC(self, setPulse, 0);
     a3a:	c1 2c       	mov	r12, r1
     a3c:	d1 2c       	mov	r13, r1
     a3e:	0f 2e       	mov	r0, r31
     a40:	fe e9       	ldi	r31, 0x9E	; 158
     a42:	ef 2e       	mov	r14, r31
     a44:	f4 e0       	ldi	r31, 0x04	; 4
     a46:	ff 2e       	mov	r15, r31
     a48:	f0 2d       	mov	r31, r0
     a4a:	8e 01       	movw	r16, r28
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	a9 01       	movw	r20, r18
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	cb 01       	movw	r24, r22
     a58:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
    }
    return self->frec;
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    }
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	08 95       	ret

00000a72 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     a72:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     a74:	94 81       	ldd	r25, Z+4	; 0x04
     a76:	99 23       	and	r25, r25
     a78:	11 f0       	breq	.+4      	; 0xa7e <FrecDec+0xc>
		self->frec--;
     a7a:	91 50       	subi	r25, 0x01	; 1
     a7c:	94 83       	std	Z+4, r25	; 0x04
	}
	return self->frec;
     a7e:	84 81       	ldd	r24, Z+4	; 0x04
}
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	08 95       	ret

00000a84 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	81 11       	cpse	r24, r1
     a96:	16 c0       	rjmp	.+44     	; 0xac4 <FrecReset+0x40>
	    self->frec = self->frec_old;
     a98:	85 81       	ldd	r24, Z+5	; 0x05
     a9a:	84 83       	std	Z+4, r24	; 0x04
	    if (self->frec > 0) {
     a9c:	88 23       	and	r24, r24
     a9e:	31 f1       	breq	.+76     	; 0xaec <FrecReset+0x68>
		    ASYNC(self, setPulse, 0);
     aa0:	c1 2c       	mov	r12, r1
     aa2:	d1 2c       	mov	r13, r1
     aa4:	0f 2e       	mov	r0, r31
     aa6:	fe e9       	ldi	r31, 0x9E	; 158
     aa8:	ef 2e       	mov	r14, r31
     aaa:	f4 e0       	ldi	r31, 0x04	; 4
     aac:	ff 2e       	mov	r15, r31
     aae:	f0 2d       	mov	r31, r0
     ab0:	8f 01       	movw	r16, r30
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	a9 01       	movw	r20, r18
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	cb 01       	movw	r24, r22
     abe:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
     ac2:	14 c0       	rjmp	.+40     	; 0xaec <FrecReset+0x68>
	    }
	    } else {
	    self->frec_old = self->frec;
     ac4:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     ac6:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     ac8:	07 81       	ldd	r16, Z+7	; 0x07
     aca:	10 85       	ldd	r17, Z+8	; 0x08
     acc:	c1 2c       	mov	r12, r1
     ace:	d1 2c       	mov	r13, r1
     ad0:	0f 2e       	mov	r0, r31
     ad2:	ff ed       	ldi	r31, 0xDF	; 223
     ad4:	ef 2e       	mov	r14, r31
     ad6:	f1 e1       	ldi	r31, 0x11	; 17
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	a9 01       	movw	r20, r18
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	cb 01       	movw	r24, r22
     ae8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
    }
    return 0;
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	08 95       	ret

00000afe <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     afe:	e1 e6       	ldi	r30, 0x61	; 97
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	80 e8       	ldi	r24, 0x80	; 128
     b04:	80 83       	st	Z, r24
	CLKPR = 0x00;
     b06:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     b08:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     b0a:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     b0c:	e1 e8       	ldi	r30, 0x81	; 129
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	8d 60       	ori	r24, 0x0D	; 13
     b14:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     b16:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b1a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     b1e:	ef e6       	ldi	r30, 0x6F	; 111
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	82 60       	ori	r24, 0x02	; 2
     b26:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     b28:	82 ec       	ldi	r24, 0xC2	; 194
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b30:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b34:	08 95       	ret

00000b36 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <initialize+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <initialize+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	83 e4       	ldi	r24, 0x43	; 67
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	23 e2       	ldi	r18, 0x23	; 35
     b48:	33 e0       	ldi	r19, 0x03	; 3
     b4a:	fc 01       	movw	r30, r24
     b4c:	70 97       	sbiw	r30, 0x10	; 16
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	80 83       	st	Z, r24
     b52:	40 96       	adiw	r24, 0x10	; 16
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	c1 f7       	brne	.-16     	; 0xb4a <initialize+0x14>
     b5a:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <messages+0xe1>
     b5e:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <messages+0xe0>
     b62:	ee e7       	ldi	r30, 0x7E	; 126
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	8b e9       	ldi	r24, 0x9B	; 155
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	80 83       	st	Z, r24
     b6e:	88 eb       	ldi	r24, 0xB8	; 184
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	96 8f       	std	Z+30, r25	; 0x1e
     b74:	85 8f       	std	Z+29, r24	; 0x1d
     b76:	a5 ed       	ldi	r26, 0xD5	; 213
     b78:	b1 e0       	ldi	r27, 0x01	; 1
     b7a:	b3 af       	std	Z+59, r27	; 0x3b
     b7c:	a2 af       	std	Z+58, r26	; 0x3a
     b7e:	1d 92       	st	X+, r1
     b80:	1c 92       	st	X, r1
     b82:	fa 83       	std	Y+2, r31	; 0x02
     b84:	e9 83       	std	Y+1, r30	; 0x01
     b86:	ef e7       	ldi	r30, 0x7F	; 127
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	fc 83       	std	Y+4, r31	; 0x04
     b8c:	eb 83       	std	Y+3, r30	; 0x03
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	06 96       	adiw	r24, 0x06	; 6
     b94:	0e 94 90 12 	call	0x2520	; 0x2520 <setjmp>
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	e9 81       	ldd	r30, Y+1	; 0x01
     b9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ba0:	97 8b       	std	Z+23, r25	; 0x17
     ba2:	86 8b       	std	Z+22, r24	; 0x16
     ba4:	91 8f       	std	Z+25, r25	; 0x19
     ba6:	80 8f       	std	Z+24, r24	; 0x18
     ba8:	8b e3       	ldi	r24, 0x3B	; 59
     baa:	91 e1       	ldi	r25, 0x11	; 17
     bac:	94 8f       	std	Z+28, r25	; 0x1c
     bae:	83 8f       	std	Z+27, r24	; 0x1b
     bb0:	15 82       	std	Z+5, r1	; 0x05
     bb2:	14 82       	std	Z+4, r1	; 0x04
     bb4:	7d 96       	adiw	r30, 0x1d	; 29
     bb6:	fa 83       	std	Y+2, r31	; 0x02
     bb8:	e9 83       	std	Y+1, r30	; 0x01
     bba:	eb 81       	ldd	r30, Y+3	; 0x03
     bbc:	fc 81       	ldd	r31, Y+4	; 0x04
     bbe:	e0 5a       	subi	r30, 0xA0	; 160
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	fc 83       	std	Y+4, r31	; 0x04
     bc4:	eb 83       	std	Y+3, r30	; 0x03
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	82 5f       	subi	r24, 0xF2	; 242
     bcc:	91 40       	sbci	r25, 0x01	; 1
     bce:	f9 f6       	brne	.-66     	; 0xb8e <initialize+0x58>
     bd0:	e6 e1       	ldi	r30, 0x16	; 22
     bd2:	f2 e0       	ldi	r31, 0x02	; 2
     bd4:	11 82       	std	Z+1, r1	; 0x01
     bd6:	10 82       	st	Z, r1
     bd8:	15 82       	std	Z+5, r1	; 0x05
     bda:	14 82       	std	Z+4, r1	; 0x04
     bdc:	13 82       	std	Z+3, r1	; 0x03
     bde:	12 82       	std	Z+2, r1	; 0x02
     be0:	e1 e6       	ldi	r30, 0x61	; 97
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 e8       	ldi	r24, 0x80	; 128
     be6:	80 83       	st	Z, r24
     be8:	10 82       	st	Z, r1
     bea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <dispatch>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	00 d0       	rcall	.+0      	; 0xc12 <dispatch+0x6>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <current>
     c1e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <current+0x1>
     c22:	06 96       	adiw	r24, 0x06	; 6
     c24:	0e 94 90 12 	call	0x2520	; 0x2520 <setjmp>
     c28:	89 2b       	or	r24, r25
     c2a:	59 f4       	brne	.+22     	; 0xc42 <dispatch+0x36>
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <current+0x1>
     c34:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <current>
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	06 96       	adiw	r24, 0x06	; 6
     c3e:	0e 94 b0 12 	call	0x2560	; 0x2560 <longjmp>
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <schedule>:
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <msgQ>
     c58:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <msgQ+0x1>
     c5c:	30 97       	sbiw	r30, 0x00	; 0
     c5e:	61 f1       	breq	.+88     	; 0xcb8 <schedule+0x6c>
     c60:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <threadPool>
     c64:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <threadPool+0x1>
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	31 f1       	breq	.+76     	; 0xcb8 <schedule+0x6c>
     c6c:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <activeStack>
     c70:	d0 91 36 01 	lds	r29, 0x0136	; 0x800136 <activeStack+0x1>
     c74:	aa 81       	ldd	r26, Y+2	; 0x02
     c76:	bb 81       	ldd	r27, Y+3	; 0x03
     c78:	10 97       	sbiw	r26, 0x00	; 0
     c7a:	79 f0       	breq	.+30     	; 0xc9a <schedule+0x4e>
     c7c:	46 81       	ldd	r20, Z+6	; 0x06
     c7e:	57 81       	ldd	r21, Z+7	; 0x07
     c80:	60 85       	ldd	r22, Z+8	; 0x08
     c82:	71 85       	ldd	r23, Z+9	; 0x09
     c84:	16 96       	adiw	r26, 0x06	; 6
     c86:	0d 91       	ld	r16, X+
     c88:	1d 91       	ld	r17, X+
     c8a:	2d 91       	ld	r18, X+
     c8c:	3c 91       	ld	r19, X
     c8e:	19 97       	sbiw	r26, 0x09	; 9
     c90:	40 1b       	sub	r20, r16
     c92:	51 0b       	sbc	r21, r17
     c94:	62 0b       	sbc	r22, r18
     c96:	73 0b       	sbc	r23, r19
     c98:	7a f4       	brpl	.+30     	; 0xcb8 <schedule+0x6c>
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 81       	ld	r18, Z
     c9e:	31 81       	ldd	r19, Z+1	; 0x01
     ca0:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <threadPool+0x1>
     ca4:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <threadPool>
     ca8:	d1 83       	std	Z+1, r29	; 0x01
     caa:	c0 83       	st	Z, r28
     cac:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <activeStack+0x1>
     cb0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <activeStack>
     cb4:	0e 94 06 06 	call	0xc0c	; 0xc0c <dispatch>
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <__vector_1>:
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
     ce8:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
     cec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cf0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf4:	c9 01       	movw	r24, r18
     cf6:	03 2e       	mov	r0, r19
     cf8:	00 0c       	add	r0, r0
     cfa:	aa 0b       	sbc	r26, r26
     cfc:	bb 0b       	sbc	r27, r27
     cfe:	dc 01       	movw	r26, r24
     d00:	99 27       	eor	r25, r25
     d02:	88 27       	eor	r24, r24
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	84 2b       	or	r24, r20
     d0a:	95 2b       	or	r25, r21
     d0c:	a6 2b       	or	r26, r22
     d0e:	b7 2b       	or	r27, r23
     d10:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     d14:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     d18:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     d1c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     d20:	b0 9b       	sbis	0x16, 0	; 22
     d22:	1b c0       	rjmp	.+54     	; 0xd5a <__vector_1+0x98>
     d24:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d28:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d2c:	c9 01       	movw	r24, r18
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	09 2e       	mov	r0, r25
     d32:	00 0c       	add	r0, r0
     d34:	aa 0b       	sbc	r26, r26
     d36:	bb 0b       	sbc	r27, r27
     d38:	dc 01       	movw	r26, r24
     d3a:	99 27       	eor	r25, r25
     d3c:	88 27       	eor	r24, r24
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	84 2b       	or	r24, r20
     d44:	95 2b       	or	r25, r21
     d46:	a6 2b       	or	r26, r22
     d48:	b7 2b       	or	r27, r23
     d4a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     d4e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     d52:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     d56:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     d5a:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable>
     d5e:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1>
     d62:	30 97       	sbiw	r30, 0x00	; 0
     d64:	39 f0       	breq	.+14     	; 0xd74 <__vector_1+0xb2>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable>
     d6e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1>
     d72:	09 95       	icall
     d74:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_2>:
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	4f 93       	push	r20
     daa:	5f 93       	push	r21
     dac:	6f 93       	push	r22
     dae:	7f 93       	push	r23
     db0:	8f 93       	push	r24
     db2:	9f 93       	push	r25
     db4:	af 93       	push	r26
     db6:	bf 93       	push	r27
     db8:	ef 93       	push	r30
     dba:	ff 93       	push	r31
     dbc:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
     dc0:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
     dc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dcc:	c9 01       	movw	r24, r18
     dce:	03 2e       	mov	r0, r19
     dd0:	00 0c       	add	r0, r0
     dd2:	aa 0b       	sbc	r26, r26
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	dc 01       	movw	r26, r24
     dd8:	99 27       	eor	r25, r25
     dda:	88 27       	eor	r24, r24
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	84 2b       	or	r24, r20
     de2:	95 2b       	or	r25, r21
     de4:	a6 2b       	or	r26, r22
     de6:	b7 2b       	or	r27, r23
     de8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     dec:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     df0:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     df4:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     df8:	b0 9b       	sbis	0x16, 0	; 22
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <__vector_2+0x98>
     dfc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e04:	c9 01       	movw	r24, r18
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	09 2e       	mov	r0, r25
     e0a:	00 0c       	add	r0, r0
     e0c:	aa 0b       	sbc	r26, r26
     e0e:	bb 0b       	sbc	r27, r27
     e10:	dc 01       	movw	r26, r24
     e12:	99 27       	eor	r25, r25
     e14:	88 27       	eor	r24, r24
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	84 2b       	or	r24, r20
     e1c:	95 2b       	or	r25, r21
     e1e:	a6 2b       	or	r26, r22
     e20:	b7 2b       	or	r27, r23
     e22:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     e26:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     e2a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     e2e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     e32:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x2>
     e36:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x3>
     e3a:	30 97       	sbiw	r30, 0x00	; 0
     e3c:	39 f0       	breq	.+14     	; 0xe4c <__vector_2+0xb2>
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x2>
     e46:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x3>
     e4a:	09 95       	icall
     e4c:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <__vector_3>:
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
     e98:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
     e9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ea0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ea4:	c9 01       	movw	r24, r18
     ea6:	03 2e       	mov	r0, r19
     ea8:	00 0c       	add	r0, r0
     eaa:	aa 0b       	sbc	r26, r26
     eac:	bb 0b       	sbc	r27, r27
     eae:	dc 01       	movw	r26, r24
     eb0:	99 27       	eor	r25, r25
     eb2:	88 27       	eor	r24, r24
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	84 2b       	or	r24, r20
     eba:	95 2b       	or	r25, r21
     ebc:	a6 2b       	or	r26, r22
     ebe:	b7 2b       	or	r27, r23
     ec0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     ec4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     ec8:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     ecc:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     ed0:	b0 9b       	sbis	0x16, 0	; 22
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <__vector_3+0x98>
     ed4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ed8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     edc:	c9 01       	movw	r24, r18
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	09 2e       	mov	r0, r25
     ee2:	00 0c       	add	r0, r0
     ee4:	aa 0b       	sbc	r26, r26
     ee6:	bb 0b       	sbc	r27, r27
     ee8:	dc 01       	movw	r26, r24
     eea:	99 27       	eor	r25, r25
     eec:	88 27       	eor	r24, r24
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	84 2b       	or	r24, r20
     ef4:	95 2b       	or	r25, r21
     ef6:	a6 2b       	or	r26, r22
     ef8:	b7 2b       	or	r27, r23
     efa:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     efe:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     f02:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     f06:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     f0a:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x4>
     f0e:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x5>
     f12:	30 97       	sbiw	r30, 0x00	; 0
     f14:	39 f0       	breq	.+14     	; 0xf24 <__vector_3+0xb2>
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x4>
     f1e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x5>
     f22:	09 95       	icall
     f24:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_4>:
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
     f70:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
     f74:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f78:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f7c:	c9 01       	movw	r24, r18
     f7e:	03 2e       	mov	r0, r19
     f80:	00 0c       	add	r0, r0
     f82:	aa 0b       	sbc	r26, r26
     f84:	bb 0b       	sbc	r27, r27
     f86:	dc 01       	movw	r26, r24
     f88:	99 27       	eor	r25, r25
     f8a:	88 27       	eor	r24, r24
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	84 2b       	or	r24, r20
     f92:	95 2b       	or	r25, r21
     f94:	a6 2b       	or	r26, r22
     f96:	b7 2b       	or	r27, r23
     f98:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     f9c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     fa0:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     fa4:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     fa8:	b0 9b       	sbis	0x16, 0	; 22
     faa:	1b c0       	rjmp	.+54     	; 0xfe2 <__vector_4+0x98>
     fac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fb0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fb4:	c9 01       	movw	r24, r18
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	09 2e       	mov	r0, r25
     fba:	00 0c       	add	r0, r0
     fbc:	aa 0b       	sbc	r26, r26
     fbe:	bb 0b       	sbc	r27, r27
     fc0:	dc 01       	movw	r26, r24
     fc2:	99 27       	eor	r25, r25
     fc4:	88 27       	eor	r24, r24
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	84 2b       	or	r24, r20
     fcc:	95 2b       	or	r25, r21
     fce:	a6 2b       	or	r26, r22
     fd0:	b7 2b       	or	r27, r23
     fd2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
     fd6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
     fda:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
     fde:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
     fe2:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x6>
     fe6:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x7>
     fea:	30 97       	sbiw	r30, 0x00	; 0
     fec:	39 f0       	breq	.+14     	; 0xffc <__vector_4+0xb2>
     fee:	63 e0       	ldi	r22, 0x03	; 3
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x6>
     ff6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x7>
     ffa:	09 95       	icall
     ffc:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_5>:
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
    1044:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1048:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    104c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1050:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1054:	c9 01       	movw	r24, r18
    1056:	03 2e       	mov	r0, r19
    1058:	00 0c       	add	r0, r0
    105a:	aa 0b       	sbc	r26, r26
    105c:	bb 0b       	sbc	r27, r27
    105e:	dc 01       	movw	r26, r24
    1060:	99 27       	eor	r25, r25
    1062:	88 27       	eor	r24, r24
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	84 2b       	or	r24, r20
    106a:	95 2b       	or	r25, r21
    106c:	a6 2b       	or	r26, r22
    106e:	b7 2b       	or	r27, r23
    1070:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1074:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1078:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    107c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1080:	b0 9b       	sbis	0x16, 0	; 22
    1082:	1b c0       	rjmp	.+54     	; 0x10ba <__vector_5+0x98>
    1084:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1088:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    108c:	c9 01       	movw	r24, r18
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	09 2e       	mov	r0, r25
    1092:	00 0c       	add	r0, r0
    1094:	aa 0b       	sbc	r26, r26
    1096:	bb 0b       	sbc	r27, r27
    1098:	dc 01       	movw	r26, r24
    109a:	99 27       	eor	r25, r25
    109c:	88 27       	eor	r24, r24
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	84 2b       	or	r24, r20
    10a4:	95 2b       	or	r25, r21
    10a6:	a6 2b       	or	r26, r22
    10a8:	b7 2b       	or	r27, r23
    10aa:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    10ae:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    10b2:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    10b6:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    10ba:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x8>
    10be:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x9>
    10c2:	30 97       	sbiw	r30, 0x00	; 0
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <__vector_5+0xb2>
    10c6:	64 e0       	ldi	r22, 0x04	; 4
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x8>
    10ce:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x9>
    10d2:	09 95       	icall
    10d4:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_10>:
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	2f 93       	push	r18
    1106:	3f 93       	push	r19
    1108:	4f 93       	push	r20
    110a:	5f 93       	push	r21
    110c:	6f 93       	push	r22
    110e:	7f 93       	push	r23
    1110:	8f 93       	push	r24
    1112:	9f 93       	push	r25
    1114:	af 93       	push	r26
    1116:	bf 93       	push	r27
    1118:	ef 93       	push	r30
    111a:	ff 93       	push	r31
    111c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1120:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1124:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1128:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    112c:	c9 01       	movw	r24, r18
    112e:	03 2e       	mov	r0, r19
    1130:	00 0c       	add	r0, r0
    1132:	aa 0b       	sbc	r26, r26
    1134:	bb 0b       	sbc	r27, r27
    1136:	dc 01       	movw	r26, r24
    1138:	99 27       	eor	r25, r25
    113a:	88 27       	eor	r24, r24
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	84 2b       	or	r24, r20
    1142:	95 2b       	or	r25, r21
    1144:	a6 2b       	or	r26, r22
    1146:	b7 2b       	or	r27, r23
    1148:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    114c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1150:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1154:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1158:	b0 9b       	sbis	0x16, 0	; 22
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <__vector_10+0x98>
    115c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1160:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1164:	c9 01       	movw	r24, r18
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	09 2e       	mov	r0, r25
    116a:	00 0c       	add	r0, r0
    116c:	aa 0b       	sbc	r26, r26
    116e:	bb 0b       	sbc	r27, r27
    1170:	dc 01       	movw	r26, r24
    1172:	99 27       	eor	r25, r25
    1174:	88 27       	eor	r24, r24
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	84 2b       	or	r24, r20
    117c:	95 2b       	or	r25, r21
    117e:	a6 2b       	or	r26, r22
    1180:	b7 2b       	or	r27, r23
    1182:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1186:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    118a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    118e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1192:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xa>
    1196:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xb>
    119a:	30 97       	sbiw	r30, 0x00	; 0
    119c:	39 f0       	breq	.+14     	; 0x11ac <__vector_10+0xb2>
    119e:	65 e0       	ldi	r22, 0x05	; 5
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xa>
    11a6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xb>
    11aa:	09 95       	icall
    11ac:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_11>:
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	2f 93       	push	r18
    11de:	3f 93       	push	r19
    11e0:	4f 93       	push	r20
    11e2:	5f 93       	push	r21
    11e4:	6f 93       	push	r22
    11e6:	7f 93       	push	r23
    11e8:	8f 93       	push	r24
    11ea:	9f 93       	push	r25
    11ec:	af 93       	push	r26
    11ee:	bf 93       	push	r27
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
    11f4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    11f8:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    11fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1200:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1204:	c9 01       	movw	r24, r18
    1206:	03 2e       	mov	r0, r19
    1208:	00 0c       	add	r0, r0
    120a:	aa 0b       	sbc	r26, r26
    120c:	bb 0b       	sbc	r27, r27
    120e:	dc 01       	movw	r26, r24
    1210:	99 27       	eor	r25, r25
    1212:	88 27       	eor	r24, r24
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	84 2b       	or	r24, r20
    121a:	95 2b       	or	r25, r21
    121c:	a6 2b       	or	r26, r22
    121e:	b7 2b       	or	r27, r23
    1220:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1224:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1228:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    122c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1230:	b0 9b       	sbis	0x16, 0	; 22
    1232:	1b c0       	rjmp	.+54     	; 0x126a <__vector_11+0x98>
    1234:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1238:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    123c:	c9 01       	movw	r24, r18
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	09 2e       	mov	r0, r25
    1242:	00 0c       	add	r0, r0
    1244:	aa 0b       	sbc	r26, r26
    1246:	bb 0b       	sbc	r27, r27
    1248:	dc 01       	movw	r26, r24
    124a:	99 27       	eor	r25, r25
    124c:	88 27       	eor	r24, r24
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	84 2b       	or	r24, r20
    1254:	95 2b       	or	r25, r21
    1256:	a6 2b       	or	r26, r22
    1258:	b7 2b       	or	r27, r23
    125a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    125e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1262:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1266:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    126a:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0xc>
    126e:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0xd>
    1272:	30 97       	sbiw	r30, 0x00	; 0
    1274:	39 f0       	breq	.+14     	; 0x1284 <__vector_11+0xb2>
    1276:	66 e0       	ldi	r22, 0x06	; 6
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0xc>
    127e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0xd>
    1282:	09 95       	icall
    1284:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_12>:
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    12d0:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    12d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12dc:	c9 01       	movw	r24, r18
    12de:	03 2e       	mov	r0, r19
    12e0:	00 0c       	add	r0, r0
    12e2:	aa 0b       	sbc	r26, r26
    12e4:	bb 0b       	sbc	r27, r27
    12e6:	dc 01       	movw	r26, r24
    12e8:	99 27       	eor	r25, r25
    12ea:	88 27       	eor	r24, r24
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	84 2b       	or	r24, r20
    12f2:	95 2b       	or	r25, r21
    12f4:	a6 2b       	or	r26, r22
    12f6:	b7 2b       	or	r27, r23
    12f8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    12fc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1300:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1304:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1308:	b0 9b       	sbis	0x16, 0	; 22
    130a:	1b c0       	rjmp	.+54     	; 0x1342 <__vector_12+0x98>
    130c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1310:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1314:	c9 01       	movw	r24, r18
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	09 2e       	mov	r0, r25
    131a:	00 0c       	add	r0, r0
    131c:	aa 0b       	sbc	r26, r26
    131e:	bb 0b       	sbc	r27, r27
    1320:	dc 01       	movw	r26, r24
    1322:	99 27       	eor	r25, r25
    1324:	88 27       	eor	r24, r24
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	84 2b       	or	r24, r20
    132c:	95 2b       	or	r25, r21
    132e:	a6 2b       	or	r26, r22
    1330:	b7 2b       	or	r27, r23
    1332:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1336:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    133a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    133e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1342:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0xe>
    1346:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0xf>
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	39 f0       	breq	.+14     	; 0x135c <__vector_12+0xb2>
    134e:	67 e0       	ldi	r22, 0x07	; 7
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xe>
    1356:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xf>
    135a:	09 95       	icall
    135c:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	0f 90       	pop	r0
    137e:	1f 90       	pop	r1
    1380:	18 95       	reti

00001382 <__vector_13>:
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
    13a4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    13a8:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    13ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13b4:	c9 01       	movw	r24, r18
    13b6:	03 2e       	mov	r0, r19
    13b8:	00 0c       	add	r0, r0
    13ba:	aa 0b       	sbc	r26, r26
    13bc:	bb 0b       	sbc	r27, r27
    13be:	dc 01       	movw	r26, r24
    13c0:	99 27       	eor	r25, r25
    13c2:	88 27       	eor	r24, r24
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	84 2b       	or	r24, r20
    13ca:	95 2b       	or	r25, r21
    13cc:	a6 2b       	or	r26, r22
    13ce:	b7 2b       	or	r27, r23
    13d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    13d4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    13d8:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    13dc:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    13e0:	b0 9b       	sbis	0x16, 0	; 22
    13e2:	1b c0       	rjmp	.+54     	; 0x141a <__vector_13+0x98>
    13e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ec:	c9 01       	movw	r24, r18
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	09 2e       	mov	r0, r25
    13f2:	00 0c       	add	r0, r0
    13f4:	aa 0b       	sbc	r26, r26
    13f6:	bb 0b       	sbc	r27, r27
    13f8:	dc 01       	movw	r26, r24
    13fa:	99 27       	eor	r25, r25
    13fc:	88 27       	eor	r24, r24
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	84 2b       	or	r24, r20
    1404:	95 2b       	or	r25, r21
    1406:	a6 2b       	or	r26, r22
    1408:	b7 2b       	or	r27, r23
    140a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    140e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1412:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1416:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    141a:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x10>
    141e:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x11>
    1422:	30 97       	sbiw	r30, 0x00	; 0
    1424:	39 f0       	breq	.+14     	; 0x1434 <__vector_13+0xb2>
    1426:	68 e0       	ldi	r22, 0x08	; 8
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x10>
    142e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x11>
    1432:	09 95       	icall
    1434:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_14>:
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
    147c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1480:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1484:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1488:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    148c:	c9 01       	movw	r24, r18
    148e:	03 2e       	mov	r0, r19
    1490:	00 0c       	add	r0, r0
    1492:	aa 0b       	sbc	r26, r26
    1494:	bb 0b       	sbc	r27, r27
    1496:	dc 01       	movw	r26, r24
    1498:	99 27       	eor	r25, r25
    149a:	88 27       	eor	r24, r24
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	84 2b       	or	r24, r20
    14a2:	95 2b       	or	r25, r21
    14a4:	a6 2b       	or	r26, r22
    14a6:	b7 2b       	or	r27, r23
    14a8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    14ac:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    14b0:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    14b4:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    14b8:	b0 9b       	sbis	0x16, 0	; 22
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <__vector_14+0x98>
    14bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14c4:	c9 01       	movw	r24, r18
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	09 2e       	mov	r0, r25
    14ca:	00 0c       	add	r0, r0
    14cc:	aa 0b       	sbc	r26, r26
    14ce:	bb 0b       	sbc	r27, r27
    14d0:	dc 01       	movw	r26, r24
    14d2:	99 27       	eor	r25, r25
    14d4:	88 27       	eor	r24, r24
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	84 2b       	or	r24, r20
    14dc:	95 2b       	or	r25, r21
    14de:	a6 2b       	or	r26, r22
    14e0:	b7 2b       	or	r27, r23
    14e2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    14e6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    14ea:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    14ee:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    14f2:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x12>
    14f6:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x13>
    14fa:	30 97       	sbiw	r30, 0x00	; 0
    14fc:	39 f0       	breq	.+14     	; 0x150c <__vector_14+0xb2>
    14fe:	69 e0       	ldi	r22, 0x09	; 9
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x12>
    1506:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x13>
    150a:	09 95       	icall
    150c:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <__vector_15>:
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	2f 93       	push	r18
    153e:	3f 93       	push	r19
    1540:	4f 93       	push	r20
    1542:	5f 93       	push	r21
    1544:	6f 93       	push	r22
    1546:	7f 93       	push	r23
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
    1554:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1558:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    155c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1560:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1564:	c9 01       	movw	r24, r18
    1566:	03 2e       	mov	r0, r19
    1568:	00 0c       	add	r0, r0
    156a:	aa 0b       	sbc	r26, r26
    156c:	bb 0b       	sbc	r27, r27
    156e:	dc 01       	movw	r26, r24
    1570:	99 27       	eor	r25, r25
    1572:	88 27       	eor	r24, r24
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	84 2b       	or	r24, r20
    157a:	95 2b       	or	r25, r21
    157c:	a6 2b       	or	r26, r22
    157e:	b7 2b       	or	r27, r23
    1580:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1584:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1588:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    158c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1590:	b0 9b       	sbis	0x16, 0	; 22
    1592:	1b c0       	rjmp	.+54     	; 0x15ca <__vector_15+0x98>
    1594:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1598:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    159c:	c9 01       	movw	r24, r18
    159e:	01 96       	adiw	r24, 0x01	; 1
    15a0:	09 2e       	mov	r0, r25
    15a2:	00 0c       	add	r0, r0
    15a4:	aa 0b       	sbc	r26, r26
    15a6:	bb 0b       	sbc	r27, r27
    15a8:	dc 01       	movw	r26, r24
    15aa:	99 27       	eor	r25, r25
    15ac:	88 27       	eor	r24, r24
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	84 2b       	or	r24, r20
    15b4:	95 2b       	or	r25, r21
    15b6:	a6 2b       	or	r26, r22
    15b8:	b7 2b       	or	r27, r23
    15ba:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    15be:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    15c2:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    15c6:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    15ca:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x14>
    15ce:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x15>
    15d2:	30 97       	sbiw	r30, 0x00	; 0
    15d4:	39 f0       	breq	.+14     	; 0x15e4 <__vector_15+0xb2>
    15d6:	6a e0       	ldi	r22, 0x0A	; 10
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x14>
    15de:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x15>
    15e2:	09 95       	icall
    15e4:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_16>:
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
    162c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1630:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1634:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1638:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    163c:	c9 01       	movw	r24, r18
    163e:	03 2e       	mov	r0, r19
    1640:	00 0c       	add	r0, r0
    1642:	aa 0b       	sbc	r26, r26
    1644:	bb 0b       	sbc	r27, r27
    1646:	dc 01       	movw	r26, r24
    1648:	99 27       	eor	r25, r25
    164a:	88 27       	eor	r24, r24
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	84 2b       	or	r24, r20
    1652:	95 2b       	or	r25, r21
    1654:	a6 2b       	or	r26, r22
    1656:	b7 2b       	or	r27, r23
    1658:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    165c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1660:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1664:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1668:	b0 9b       	sbis	0x16, 0	; 22
    166a:	1b c0       	rjmp	.+54     	; 0x16a2 <__vector_16+0x98>
    166c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1670:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1674:	c9 01       	movw	r24, r18
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	09 2e       	mov	r0, r25
    167a:	00 0c       	add	r0, r0
    167c:	aa 0b       	sbc	r26, r26
    167e:	bb 0b       	sbc	r27, r27
    1680:	dc 01       	movw	r26, r24
    1682:	99 27       	eor	r25, r25
    1684:	88 27       	eor	r24, r24
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	84 2b       	or	r24, r20
    168c:	95 2b       	or	r25, r21
    168e:	a6 2b       	or	r26, r22
    1690:	b7 2b       	or	r27, r23
    1692:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1696:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    169a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    169e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    16a2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x16>
    16a6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x17>
    16aa:	30 97       	sbiw	r30, 0x00	; 0
    16ac:	39 f0       	breq	.+14     	; 0x16bc <__vector_16+0xb2>
    16ae:	6b e0       	ldi	r22, 0x0B	; 11
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x16>
    16b6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x17>
    16ba:	09 95       	icall
    16bc:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    16c0:	ff 91       	pop	r31
    16c2:	ef 91       	pop	r30
    16c4:	bf 91       	pop	r27
    16c6:	af 91       	pop	r26
    16c8:	9f 91       	pop	r25
    16ca:	8f 91       	pop	r24
    16cc:	7f 91       	pop	r23
    16ce:	6f 91       	pop	r22
    16d0:	5f 91       	pop	r21
    16d2:	4f 91       	pop	r20
    16d4:	3f 91       	pop	r19
    16d6:	2f 91       	pop	r18
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	0f 90       	pop	r0
    16de:	1f 90       	pop	r1
    16e0:	18 95       	reti

000016e2 <__vector_17>:
    16e2:	1f 92       	push	r1
    16e4:	0f 92       	push	r0
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	0f 92       	push	r0
    16ea:	11 24       	eor	r1, r1
    16ec:	2f 93       	push	r18
    16ee:	3f 93       	push	r19
    16f0:	4f 93       	push	r20
    16f2:	5f 93       	push	r21
    16f4:	6f 93       	push	r22
    16f6:	7f 93       	push	r23
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	af 93       	push	r26
    16fe:	bf 93       	push	r27
    1700:	ef 93       	push	r30
    1702:	ff 93       	push	r31
    1704:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1708:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    170c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1710:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1714:	c9 01       	movw	r24, r18
    1716:	03 2e       	mov	r0, r19
    1718:	00 0c       	add	r0, r0
    171a:	aa 0b       	sbc	r26, r26
    171c:	bb 0b       	sbc	r27, r27
    171e:	dc 01       	movw	r26, r24
    1720:	99 27       	eor	r25, r25
    1722:	88 27       	eor	r24, r24
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	84 2b       	or	r24, r20
    172a:	95 2b       	or	r25, r21
    172c:	a6 2b       	or	r26, r22
    172e:	b7 2b       	or	r27, r23
    1730:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1734:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1738:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    173c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1740:	b0 9b       	sbis	0x16, 0	; 22
    1742:	1b c0       	rjmp	.+54     	; 0x177a <__vector_17+0x98>
    1744:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1748:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    174c:	c9 01       	movw	r24, r18
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	09 2e       	mov	r0, r25
    1752:	00 0c       	add	r0, r0
    1754:	aa 0b       	sbc	r26, r26
    1756:	bb 0b       	sbc	r27, r27
    1758:	dc 01       	movw	r26, r24
    175a:	99 27       	eor	r25, r25
    175c:	88 27       	eor	r24, r24
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	84 2b       	or	r24, r20
    1764:	95 2b       	or	r25, r21
    1766:	a6 2b       	or	r26, r22
    1768:	b7 2b       	or	r27, r23
    176a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    176e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1772:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1776:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    177a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x18>
    177e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x19>
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	39 f0       	breq	.+14     	; 0x1794 <__vector_17+0xb2>
    1786:	6c e0       	ldi	r22, 0x0C	; 12
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x18>
    178e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x19>
    1792:	09 95       	icall
    1794:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <__vector_18>:
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
    17dc:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    17e0:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    17e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ec:	c9 01       	movw	r24, r18
    17ee:	03 2e       	mov	r0, r19
    17f0:	00 0c       	add	r0, r0
    17f2:	aa 0b       	sbc	r26, r26
    17f4:	bb 0b       	sbc	r27, r27
    17f6:	dc 01       	movw	r26, r24
    17f8:	99 27       	eor	r25, r25
    17fa:	88 27       	eor	r24, r24
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	84 2b       	or	r24, r20
    1802:	95 2b       	or	r25, r21
    1804:	a6 2b       	or	r26, r22
    1806:	b7 2b       	or	r27, r23
    1808:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    180c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1810:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1814:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1818:	b0 9b       	sbis	0x16, 0	; 22
    181a:	1b c0       	rjmp	.+54     	; 0x1852 <__vector_18+0x98>
    181c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1820:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1824:	c9 01       	movw	r24, r18
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	09 2e       	mov	r0, r25
    182a:	00 0c       	add	r0, r0
    182c:	aa 0b       	sbc	r26, r26
    182e:	bb 0b       	sbc	r27, r27
    1830:	dc 01       	movw	r26, r24
    1832:	99 27       	eor	r25, r25
    1834:	88 27       	eor	r24, r24
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	84 2b       	or	r24, r20
    183c:	95 2b       	or	r25, r21
    183e:	a6 2b       	or	r26, r22
    1840:	b7 2b       	or	r27, r23
    1842:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1846:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    184a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    184e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1852:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1a>
    1856:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1b>
    185a:	30 97       	sbiw	r30, 0x00	; 0
    185c:	39 f0       	breq	.+14     	; 0x186c <__vector_18+0xb2>
    185e:	6d e0       	ldi	r22, 0x0D	; 13
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1a>
    1866:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1b>
    186a:	09 95       	icall
    186c:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	bf 91       	pop	r27
    1876:	af 91       	pop	r26
    1878:	9f 91       	pop	r25
    187a:	8f 91       	pop	r24
    187c:	7f 91       	pop	r23
    187e:	6f 91       	pop	r22
    1880:	5f 91       	pop	r21
    1882:	4f 91       	pop	r20
    1884:	3f 91       	pop	r19
    1886:	2f 91       	pop	r18
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	1f 90       	pop	r1
    1890:	18 95       	reti

00001892 <__vector_19>:
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
    18b4:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    18b8:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    18bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18c4:	c9 01       	movw	r24, r18
    18c6:	03 2e       	mov	r0, r19
    18c8:	00 0c       	add	r0, r0
    18ca:	aa 0b       	sbc	r26, r26
    18cc:	bb 0b       	sbc	r27, r27
    18ce:	dc 01       	movw	r26, r24
    18d0:	99 27       	eor	r25, r25
    18d2:	88 27       	eor	r24, r24
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	84 2b       	or	r24, r20
    18da:	95 2b       	or	r25, r21
    18dc:	a6 2b       	or	r26, r22
    18de:	b7 2b       	or	r27, r23
    18e0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    18e4:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    18e8:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    18ec:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    18f0:	b0 9b       	sbis	0x16, 0	; 22
    18f2:	1b c0       	rjmp	.+54     	; 0x192a <__vector_19+0x98>
    18f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18fc:	c9 01       	movw	r24, r18
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	09 2e       	mov	r0, r25
    1902:	00 0c       	add	r0, r0
    1904:	aa 0b       	sbc	r26, r26
    1906:	bb 0b       	sbc	r27, r27
    1908:	dc 01       	movw	r26, r24
    190a:	99 27       	eor	r25, r25
    190c:	88 27       	eor	r24, r24
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	84 2b       	or	r24, r20
    1914:	95 2b       	or	r25, r21
    1916:	a6 2b       	or	r26, r22
    1918:	b7 2b       	or	r27, r23
    191a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    191e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1922:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1926:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    192a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x1c>
    192e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x1d>
    1932:	30 97       	sbiw	r30, 0x00	; 0
    1934:	39 f0       	breq	.+14     	; 0x1944 <__vector_19+0xb2>
    1936:	6e e0       	ldi	r22, 0x0E	; 14
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x1c>
    193e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x1d>
    1942:	09 95       	icall
    1944:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1948:	ff 91       	pop	r31
    194a:	ef 91       	pop	r30
    194c:	bf 91       	pop	r27
    194e:	af 91       	pop	r26
    1950:	9f 91       	pop	r25
    1952:	8f 91       	pop	r24
    1954:	7f 91       	pop	r23
    1956:	6f 91       	pop	r22
    1958:	5f 91       	pop	r21
    195a:	4f 91       	pop	r20
    195c:	3f 91       	pop	r19
    195e:	2f 91       	pop	r18
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <__vector_20>:
    196a:	1f 92       	push	r1
    196c:	0f 92       	push	r0
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	0f 92       	push	r0
    1972:	11 24       	eor	r1, r1
    1974:	2f 93       	push	r18
    1976:	3f 93       	push	r19
    1978:	4f 93       	push	r20
    197a:	5f 93       	push	r21
    197c:	6f 93       	push	r22
    197e:	7f 93       	push	r23
    1980:	8f 93       	push	r24
    1982:	9f 93       	push	r25
    1984:	af 93       	push	r26
    1986:	bf 93       	push	r27
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1990:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1994:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1998:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    199c:	c9 01       	movw	r24, r18
    199e:	03 2e       	mov	r0, r19
    19a0:	00 0c       	add	r0, r0
    19a2:	aa 0b       	sbc	r26, r26
    19a4:	bb 0b       	sbc	r27, r27
    19a6:	dc 01       	movw	r26, r24
    19a8:	99 27       	eor	r25, r25
    19aa:	88 27       	eor	r24, r24
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	84 2b       	or	r24, r20
    19b2:	95 2b       	or	r25, r21
    19b4:	a6 2b       	or	r26, r22
    19b6:	b7 2b       	or	r27, r23
    19b8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    19bc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    19c0:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    19c4:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    19c8:	b0 9b       	sbis	0x16, 0	; 22
    19ca:	1b c0       	rjmp	.+54     	; 0x1a02 <__vector_20+0x98>
    19cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19d4:	c9 01       	movw	r24, r18
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	09 2e       	mov	r0, r25
    19da:	00 0c       	add	r0, r0
    19dc:	aa 0b       	sbc	r26, r26
    19de:	bb 0b       	sbc	r27, r27
    19e0:	dc 01       	movw	r26, r24
    19e2:	99 27       	eor	r25, r25
    19e4:	88 27       	eor	r24, r24
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	84 2b       	or	r24, r20
    19ec:	95 2b       	or	r25, r21
    19ee:	a6 2b       	or	r26, r22
    19f0:	b7 2b       	or	r27, r23
    19f2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    19f6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    19fa:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    19fe:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1a02:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x1e>
    1a06:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x1f>
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	39 f0       	breq	.+14     	; 0x1a1c <__vector_20+0xb2>
    1a0e:	6f e0       	ldi	r22, 0x0F	; 15
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1e>
    1a16:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1f>
    1a1a:	09 95       	icall
    1a1c:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__vector_21>:
    1a42:	1f 92       	push	r1
    1a44:	0f 92       	push	r0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	0f 92       	push	r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1a68:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1a6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a74:	c9 01       	movw	r24, r18
    1a76:	03 2e       	mov	r0, r19
    1a78:	00 0c       	add	r0, r0
    1a7a:	aa 0b       	sbc	r26, r26
    1a7c:	bb 0b       	sbc	r27, r27
    1a7e:	dc 01       	movw	r26, r24
    1a80:	99 27       	eor	r25, r25
    1a82:	88 27       	eor	r24, r24
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	84 2b       	or	r24, r20
    1a8a:	95 2b       	or	r25, r21
    1a8c:	a6 2b       	or	r26, r22
    1a8e:	b7 2b       	or	r27, r23
    1a90:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1a94:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1a98:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1a9c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1aa0:	b0 9b       	sbis	0x16, 0	; 22
    1aa2:	1b c0       	rjmp	.+54     	; 0x1ada <__vector_21+0x98>
    1aa4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aa8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aac:	c9 01       	movw	r24, r18
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	09 2e       	mov	r0, r25
    1ab2:	00 0c       	add	r0, r0
    1ab4:	aa 0b       	sbc	r26, r26
    1ab6:	bb 0b       	sbc	r27, r27
    1ab8:	dc 01       	movw	r26, r24
    1aba:	99 27       	eor	r25, r25
    1abc:	88 27       	eor	r24, r24
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	84 2b       	or	r24, r20
    1ac4:	95 2b       	or	r25, r21
    1ac6:	a6 2b       	or	r26, r22
    1ac8:	b7 2b       	or	r27, r23
    1aca:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1ace:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1ad2:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1ad6:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1ada:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x20>
    1ade:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x21>
    1ae2:	30 97       	sbiw	r30, 0x00	; 0
    1ae4:	39 f0       	breq	.+14     	; 0x1af4 <__vector_21+0xb2>
    1ae6:	60 e1       	ldi	r22, 0x10	; 16
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x20>
    1aee:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x21>
    1af2:	09 95       	icall
    1af4:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <__vector_22>:
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	0f 92       	push	r0
    1b22:	11 24       	eor	r1, r1
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	9f 93       	push	r25
    1b34:	af 93       	push	r26
    1b36:	bf 93       	push	r27
    1b38:	ef 93       	push	r30
    1b3a:	ff 93       	push	r31
    1b3c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1b40:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1b44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b4c:	c9 01       	movw	r24, r18
    1b4e:	03 2e       	mov	r0, r19
    1b50:	00 0c       	add	r0, r0
    1b52:	aa 0b       	sbc	r26, r26
    1b54:	bb 0b       	sbc	r27, r27
    1b56:	dc 01       	movw	r26, r24
    1b58:	99 27       	eor	r25, r25
    1b5a:	88 27       	eor	r24, r24
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	84 2b       	or	r24, r20
    1b62:	95 2b       	or	r25, r21
    1b64:	a6 2b       	or	r26, r22
    1b66:	b7 2b       	or	r27, r23
    1b68:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1b6c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1b70:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1b74:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1b78:	b0 9b       	sbis	0x16, 0	; 22
    1b7a:	1b c0       	rjmp	.+54     	; 0x1bb2 <__vector_22+0x98>
    1b7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b84:	c9 01       	movw	r24, r18
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	09 2e       	mov	r0, r25
    1b8a:	00 0c       	add	r0, r0
    1b8c:	aa 0b       	sbc	r26, r26
    1b8e:	bb 0b       	sbc	r27, r27
    1b90:	dc 01       	movw	r26, r24
    1b92:	99 27       	eor	r25, r25
    1b94:	88 27       	eor	r24, r24
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	84 2b       	or	r24, r20
    1b9c:	95 2b       	or	r25, r21
    1b9e:	a6 2b       	or	r26, r22
    1ba0:	b7 2b       	or	r27, r23
    1ba2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <timestamp>
    1ba6:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <timestamp+0x1>
    1baa:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <timestamp+0x2>
    1bae:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <timestamp+0x3>
    1bb2:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x22>
    1bb6:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x23>
    1bba:	30 97       	sbiw	r30, 0x00	; 0
    1bbc:	39 f0       	breq	.+14     	; 0x1bcc <__vector_22+0xb2>
    1bbe:	61 e1       	ldi	r22, 0x11	; 17
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x22>
    1bc6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x23>
    1bca:	09 95       	icall
    1bcc:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1bd0:	ff 91       	pop	r31
    1bd2:	ef 91       	pop	r30
    1bd4:	bf 91       	pop	r27
    1bd6:	af 91       	pop	r26
    1bd8:	9f 91       	pop	r25
    1bda:	8f 91       	pop	r24
    1bdc:	7f 91       	pop	r23
    1bde:	6f 91       	pop	r22
    1be0:	5f 91       	pop	r21
    1be2:	4f 91       	pop	r20
    1be4:	3f 91       	pop	r19
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <enqueueByDeadline>:
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	7b 01       	movw	r14, r22
    1c00:	eb 01       	movw	r28, r22
    1c02:	a8 81       	ld	r26, Y
    1c04:	b9 81       	ldd	r27, Y+1	; 0x01
    1c06:	10 97       	sbiw	r26, 0x00	; 0
    1c08:	61 f1       	breq	.+88     	; 0x1c62 <enqueueByDeadline+0x70>
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	06 81       	ldd	r16, Z+6	; 0x06
    1c0e:	17 81       	ldd	r17, Z+7	; 0x07
    1c10:	20 85       	ldd	r18, Z+8	; 0x08
    1c12:	31 85       	ldd	r19, Z+9	; 0x09
    1c14:	16 96       	adiw	r26, 0x06	; 6
    1c16:	4d 91       	ld	r20, X+
    1c18:	5d 91       	ld	r21, X+
    1c1a:	6d 91       	ld	r22, X+
    1c1c:	7c 91       	ld	r23, X
    1c1e:	19 97       	sbiw	r26, 0x09	; 9
    1c20:	04 17       	cp	r16, r20
    1c22:	15 07       	cpc	r17, r21
    1c24:	26 07       	cpc	r18, r22
    1c26:	37 07       	cpc	r19, r23
    1c28:	14 f4       	brge	.+4      	; 0x1c2e <enqueueByDeadline+0x3c>
    1c2a:	1b c0       	rjmp	.+54     	; 0x1c62 <enqueueByDeadline+0x70>
    1c2c:	df 01       	movw	r26, r30
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	11 97       	sbiw	r26, 0x01	; 1
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	49 f0       	breq	.+18     	; 0x1c4a <enqueueByDeadline+0x58>
    1c38:	46 81       	ldd	r20, Z+6	; 0x06
    1c3a:	57 81       	ldd	r21, Z+7	; 0x07
    1c3c:	60 85       	ldd	r22, Z+8	; 0x08
    1c3e:	71 85       	ldd	r23, Z+9	; 0x09
    1c40:	04 17       	cp	r16, r20
    1c42:	15 07       	cpc	r17, r21
    1c44:	26 07       	cpc	r18, r22
    1c46:	37 07       	cpc	r19, r23
    1c48:	8c f7       	brge	.-30     	; 0x1c2c <enqueueByDeadline+0x3a>
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	f9 83       	std	Y+1, r31	; 0x01
    1c4e:	e8 83       	st	Y, r30
    1c50:	10 97       	sbiw	r26, 0x00	; 0
    1c52:	21 f4       	brne	.+8      	; 0x1c5c <enqueueByDeadline+0x6a>
    1c54:	f7 01       	movw	r30, r14
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <enqueueByDeadline+0x78>
    1c5c:	8d 93       	st	X+, r24
    1c5e:	9c 93       	st	X, r25
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <enqueueByDeadline+0x78>
    1c62:	ec 01       	movw	r28, r24
    1c64:	b9 83       	std	Y+1, r27	; 0x01
    1c66:	a8 83       	st	Y, r26
    1c68:	f5 cf       	rjmp	.-22     	; 0x1c54 <enqueueByDeadline+0x62>
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	08 95       	ret

00001c78 <enqueueByBaseline>:
    1c78:	ef 92       	push	r14
    1c7a:	ff 92       	push	r15
    1c7c:	0f 93       	push	r16
    1c7e:	1f 93       	push	r17
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	7b 01       	movw	r14, r22
    1c86:	eb 01       	movw	r28, r22
    1c88:	a8 81       	ld	r26, Y
    1c8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c8c:	10 97       	sbiw	r26, 0x00	; 0
    1c8e:	61 f1       	breq	.+88     	; 0x1ce8 <enqueueByBaseline+0x70>
    1c90:	fc 01       	movw	r30, r24
    1c92:	02 81       	ldd	r16, Z+2	; 0x02
    1c94:	13 81       	ldd	r17, Z+3	; 0x03
    1c96:	24 81       	ldd	r18, Z+4	; 0x04
    1c98:	35 81       	ldd	r19, Z+5	; 0x05
    1c9a:	12 96       	adiw	r26, 0x02	; 2
    1c9c:	4d 91       	ld	r20, X+
    1c9e:	5d 91       	ld	r21, X+
    1ca0:	6d 91       	ld	r22, X+
    1ca2:	7c 91       	ld	r23, X
    1ca4:	15 97       	sbiw	r26, 0x05	; 5
    1ca6:	04 17       	cp	r16, r20
    1ca8:	15 07       	cpc	r17, r21
    1caa:	26 07       	cpc	r18, r22
    1cac:	37 07       	cpc	r19, r23
    1cae:	14 f4       	brge	.+4      	; 0x1cb4 <enqueueByBaseline+0x3c>
    1cb0:	1b c0       	rjmp	.+54     	; 0x1ce8 <enqueueByBaseline+0x70>
    1cb2:	df 01       	movw	r26, r30
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	11 97       	sbiw	r26, 0x01	; 1
    1cba:	30 97       	sbiw	r30, 0x00	; 0
    1cbc:	49 f0       	breq	.+18     	; 0x1cd0 <enqueueByBaseline+0x58>
    1cbe:	42 81       	ldd	r20, Z+2	; 0x02
    1cc0:	53 81       	ldd	r21, Z+3	; 0x03
    1cc2:	64 81       	ldd	r22, Z+4	; 0x04
    1cc4:	75 81       	ldd	r23, Z+5	; 0x05
    1cc6:	04 17       	cp	r16, r20
    1cc8:	15 07       	cpc	r17, r21
    1cca:	26 07       	cpc	r18, r22
    1ccc:	37 07       	cpc	r19, r23
    1cce:	8c f7       	brge	.-30     	; 0x1cb2 <enqueueByBaseline+0x3a>
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	f9 83       	std	Y+1, r31	; 0x01
    1cd4:	e8 83       	st	Y, r30
    1cd6:	10 97       	sbiw	r26, 0x00	; 0
    1cd8:	21 f4       	brne	.+8      	; 0x1ce2 <enqueueByBaseline+0x6a>
    1cda:	f7 01       	movw	r30, r14
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	80 83       	st	Z, r24
    1ce0:	07 c0       	rjmp	.+14     	; 0x1cf0 <enqueueByBaseline+0x78>
    1ce2:	8d 93       	st	X+, r24
    1ce4:	9c 93       	st	X, r25
    1ce6:	04 c0       	rjmp	.+8      	; 0x1cf0 <enqueueByBaseline+0x78>
    1ce8:	ec 01       	movw	r28, r24
    1cea:	b9 83       	std	Y+1, r27	; 0x01
    1cec:	a8 83       	st	Y, r26
    1cee:	f5 cf       	rjmp	.-22     	; 0x1cda <enqueueByBaseline+0x62>
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	ff 90       	pop	r15
    1cfa:	ef 90       	pop	r14
    1cfc:	08 95       	ret

00001cfe <dequeue>:
    1cfe:	dc 01       	movw	r26, r24
    1d00:	ed 91       	ld	r30, X+
    1d02:	fc 91       	ld	r31, X
    1d04:	11 97       	sbiw	r26, 0x01	; 1
    1d06:	30 97       	sbiw	r30, 0x00	; 0
    1d08:	59 f4       	brne	.+22     	; 0x1d20 <dequeue+0x22>
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1d10:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1d14:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	83 bf       	out	0x33, r24	; 51
    1d1c:	88 95       	sleep
    1d1e:	fd cf       	rjmp	.-6      	; 0x1d1a <dequeue+0x1c>
    1d20:	20 81       	ld	r18, Z
    1d22:	31 81       	ldd	r19, Z+1	; 0x01
    1d24:	2d 93       	st	X+, r18
    1d26:	3c 93       	st	X, r19
    1d28:	cf 01       	movw	r24, r30
    1d2a:	08 95       	ret

00001d2c <__vector_9>:
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	2f 93       	push	r18
    1d38:	3f 93       	push	r19
    1d3a:	4f 93       	push	r20
    1d3c:	5f 93       	push	r21
    1d3e:	6f 93       	push	r22
    1d40:	7f 93       	push	r23
    1d42:	8f 93       	push	r24
    1d44:	9f 93       	push	r25
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
    1d4e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
    1d58:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
    1d5c:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    1d60:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    1d64:	30 97       	sbiw	r30, 0x00	; 0
    1d66:	01 f1       	breq	.+64     	; 0x1da8 <__vector_9+0x7c>
    1d68:	42 81       	ldd	r20, Z+2	; 0x02
    1d6a:	53 81       	ldd	r21, Z+3	; 0x03
    1d6c:	64 81       	ldd	r22, Z+4	; 0x04
    1d6e:	75 81       	ldd	r23, Z+5	; 0x05
    1d70:	86 17       	cp	r24, r22
    1d72:	97 07       	cpc	r25, r23
    1d74:	c9 f4       	brne	.+50     	; 0x1da8 <__vector_9+0x7c>
    1d76:	ca 01       	movw	r24, r20
    1d78:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d7c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d80:	42 1b       	sub	r20, r18
    1d82:	53 0b       	sbc	r21, r19
    1d84:	41 30       	cpi	r20, 0x01	; 1
    1d86:	51 05       	cpc	r21, r1
    1d88:	29 f4       	brne	.+10     	; 0x1d94 <__vector_9+0x68>
    1d8a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d8e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d9c:	ef e6       	ldi	r30, 0x6F	; 111
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	82 60       	ori	r24, 0x02	; 2
    1da4:	80 83       	st	Z, r24
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <__vector_9+0x86>
    1da8:	ef e6       	ldi	r30, 0x6F	; 111
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8d 7f       	andi	r24, 0xFD	; 253
    1db0:	80 83       	st	Z, r24
    1db2:	ff 91       	pop	r31
    1db4:	ef 91       	pop	r30
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	7f 91       	pop	r23
    1dbc:	6f 91       	pop	r22
    1dbe:	5f 91       	pop	r21
    1dc0:	4f 91       	pop	r20
    1dc2:	3f 91       	pop	r19
    1dc4:	2f 91       	pop	r18
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	0f 90       	pop	r0
    1dcc:	1f 90       	pop	r1
    1dce:	18 95       	reti

00001dd0 <__vector_7>:
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	2f 93       	push	r18
    1de4:	3f 93       	push	r19
    1de6:	4f 93       	push	r20
    1de8:	5f 93       	push	r21
    1dea:	6f 93       	push	r22
    1dec:	7f 93       	push	r23
    1dee:	8f 93       	push	r24
    1df0:	9f 93       	push	r25
    1df2:	af 93       	push	r26
    1df4:	bf 93       	push	r27
    1df6:	ef 93       	push	r30
    1df8:	ff 93       	push	r31
    1dfa:	c0 90 50 01 	lds	r12, 0x0150	; 0x800150 <__data_end>
    1dfe:	d0 90 51 01 	lds	r13, 0x0151	; 0x800151 <__data_end+0x1>
    1e02:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e06:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e0a:	b0 99       	sbic	0x16, 0	; 22
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <__vector_7+0x5c>
    1e0e:	0d 2c       	mov	r0, r13
    1e10:	00 0c       	add	r0, r0
    1e12:	ee 08       	sbc	r14, r14
    1e14:	ff 08       	sbc	r15, r15
    1e16:	d6 01       	movw	r26, r12
    1e18:	99 27       	eor	r25, r25
    1e1a:	88 27       	eor	r24, r24
    1e1c:	69 01       	movw	r12, r18
    1e1e:	e1 2c       	mov	r14, r1
    1e20:	f1 2c       	mov	r15, r1
    1e22:	c8 2a       	or	r12, r24
    1e24:	d9 2a       	or	r13, r25
    1e26:	ea 2a       	or	r14, r26
    1e28:	fb 2a       	or	r15, r27
    1e2a:	15 c0       	rjmp	.+42     	; 0x1e56 <__vector_7+0x86>
    1e2c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e30:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e34:	8f ef       	ldi	r24, 0xFF	; 255
    1e36:	c8 1a       	sub	r12, r24
    1e38:	d8 0a       	sbc	r13, r24
    1e3a:	0d 2c       	mov	r0, r13
    1e3c:	00 0c       	add	r0, r0
    1e3e:	ee 08       	sbc	r14, r14
    1e40:	ff 08       	sbc	r15, r15
    1e42:	d6 01       	movw	r26, r12
    1e44:	99 27       	eor	r25, r25
    1e46:	88 27       	eor	r24, r24
    1e48:	69 01       	movw	r12, r18
    1e4a:	e1 2c       	mov	r14, r1
    1e4c:	f1 2c       	mov	r15, r1
    1e4e:	c8 2a       	or	r12, r24
    1e50:	d9 2a       	or	r13, r25
    1e52:	ea 2a       	or	r14, r26
    1e54:	fb 2a       	or	r15, r27
    1e56:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    1e5a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    1e5e:	30 97       	sbiw	r30, 0x00	; 0
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <__vector_7+0x94>
    1e62:	42 c0       	rjmp	.+132    	; 0x1ee8 <__vector_7+0x118>
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	a4 81       	ldd	r26, Z+4	; 0x04
    1e6a:	b5 81       	ldd	r27, Z+5	; 0x05
    1e6c:	8c 19       	sub	r24, r12
    1e6e:	9d 09       	sbc	r25, r13
    1e70:	ae 09       	sbc	r26, r14
    1e72:	bf 09       	sbc	r27, r15
    1e74:	18 16       	cp	r1, r24
    1e76:	19 06       	cpc	r1, r25
    1e78:	1a 06       	cpc	r1, r26
    1e7a:	1b 06       	cpc	r1, r27
    1e7c:	ec f1       	brlt	.+122    	; 0x1ef8 <__vector_7+0x128>
    1e7e:	86 e5       	ldi	r24, 0x56	; 86
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dequeue>
    1e86:	68 e5       	ldi	r22, 0x58	; 88
    1e88:	71 e0       	ldi	r23, 0x01	; 1
    1e8a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <enqueueByDeadline>
    1e8e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    1e92:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    1e96:	30 97       	sbiw	r30, 0x00	; 0
    1e98:	39 f1       	breq	.+78     	; 0x1ee8 <__vector_7+0x118>
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	a4 81       	ldd	r26, Z+4	; 0x04
    1ea0:	b5 81       	ldd	r27, Z+5	; 0x05
    1ea2:	8c 19       	sub	r24, r12
    1ea4:	9d 09       	sbc	r25, r13
    1ea6:	ae 09       	sbc	r26, r14
    1ea8:	bf 09       	sbc	r27, r15
    1eaa:	18 16       	cp	r1, r24
    1eac:	19 06       	cpc	r1, r25
    1eae:	1a 06       	cpc	r1, r26
    1eb0:	1b 06       	cpc	r1, r27
    1eb2:	2c f7       	brge	.-54     	; 0x1e7e <__vector_7+0xae>
    1eb4:	21 c0       	rjmp	.+66     	; 0x1ef8 <__vector_7+0x128>
    1eb6:	9c 01       	movw	r18, r24
    1eb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ebc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ec0:	84 1b       	sub	r24, r20
    1ec2:	95 0b       	sbc	r25, r21
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	31 f4       	brne	.+12     	; 0x1ed4 <__vector_7+0x104>
    1ec8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ecc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed0:	2f 5f       	subi	r18, 0xFF	; 255
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ed8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1edc:	ef e6       	ldi	r30, 0x6F	; 111
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	82 60       	ori	r24, 0x02	; 2
    1ee4:	80 83       	st	Z, r24
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <__vector_7+0x122>
    1ee8:	ef e6       	ldi	r30, 0x6F	; 111
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8d 7f       	andi	r24, 0xFD	; 253
    1ef0:	80 83       	st	Z, r24
    1ef2:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    1ef6:	0c c0       	rjmp	.+24     	; 0x1f10 <__vector_7+0x140>
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	a4 81       	ldd	r26, Z+4	; 0x04
    1efe:	b5 81       	ldd	r27, Z+5	; 0x05
    1f00:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    1f04:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    1f08:	2a 17       	cp	r18, r26
    1f0a:	3b 07       	cpc	r19, r27
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <__vector_7+0x118>
    1f0e:	d3 cf       	rjmp	.-90     	; 0x1eb6 <__vector_7+0xe6>
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	0f 90       	pop	r0
    1f36:	1f 90       	pop	r1
    1f38:	18 95       	reti

00001f3a <async>:
    1f3a:	3f 92       	push	r3
    1f3c:	4f 92       	push	r4
    1f3e:	5f 92       	push	r5
    1f40:	6f 92       	push	r6
    1f42:	7f 92       	push	r7
    1f44:	8f 92       	push	r8
    1f46:	9f 92       	push	r9
    1f48:	af 92       	push	r10
    1f4a:	bf 92       	push	r11
    1f4c:	cf 92       	push	r12
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	2b 01       	movw	r4, r22
    1f5e:	3c 01       	movw	r6, r24
    1f60:	49 01       	movw	r8, r18
    1f62:	5a 01       	movw	r10, r20
    1f64:	8f b7       	in	r24, 0x3f	; 63
    1f66:	80 78       	andi	r24, 0x80	; 128
    1f68:	38 2e       	mov	r3, r24
    1f6a:	f8 94       	cli
    1f6c:	89 e3       	ldi	r24, 0x39	; 57
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dequeue>
    1f74:	ec 01       	movw	r28, r24
    1f76:	1b 87       	std	Y+11, r17	; 0x0b
    1f78:	0a 87       	std	Y+10, r16	; 0x0a
    1f7a:	fd 86       	std	Y+13, r15	; 0x0d
    1f7c:	ec 86       	std	Y+12, r14	; 0x0c
    1f7e:	df 86       	std	Y+15, r13	; 0x0f
    1f80:	ce 86       	std	Y+14, r12	; 0x0e
    1f82:	33 20       	and	r3, r3
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <async+0x64>
    1f86:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <current>
    1f8a:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <current+0x1>
    1f8e:	02 80       	ldd	r0, Z+2	; 0x02
    1f90:	f3 81       	ldd	r31, Z+3	; 0x03
    1f92:	e0 2d       	mov	r30, r0
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	a4 81       	ldd	r26, Z+4	; 0x04
    1f9a:	b5 81       	ldd	r27, Z+5	; 0x05
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <async+0x74>
    1f9e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <timestamp>
    1fa2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <timestamp+0x1>
    1fa6:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <timestamp+0x2>
    1faa:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <timestamp+0x3>
    1fae:	48 0e       	add	r4, r24
    1fb0:	59 1e       	adc	r5, r25
    1fb2:	6a 1e       	adc	r6, r26
    1fb4:	7b 1e       	adc	r7, r27
    1fb6:	4a 82       	std	Y+2, r4	; 0x02
    1fb8:	5b 82       	std	Y+3, r5	; 0x03
    1fba:	6c 82       	std	Y+4, r6	; 0x04
    1fbc:	7d 82       	std	Y+5, r7	; 0x05
    1fbe:	18 14       	cp	r1, r8
    1fc0:	19 04       	cpc	r1, r9
    1fc2:	1a 04       	cpc	r1, r10
    1fc4:	1b 04       	cpc	r1, r11
    1fc6:	44 f0       	brlt	.+16     	; 0x1fd8 <async+0x9e>
    1fc8:	0f 2e       	mov	r0, r31
    1fca:	88 24       	eor	r8, r8
    1fcc:	8a 94       	dec	r8
    1fce:	98 2c       	mov	r9, r8
    1fd0:	a8 2c       	mov	r10, r8
    1fd2:	ff e7       	ldi	r31, 0x7F	; 127
    1fd4:	bf 2e       	mov	r11, r31
    1fd6:	f0 2d       	mov	r31, r0
    1fd8:	84 0c       	add	r8, r4
    1fda:	95 1c       	adc	r9, r5
    1fdc:	a6 1c       	adc	r10, r6
    1fde:	b7 1c       	adc	r11, r7
    1fe0:	8e 82       	std	Y+6, r8	; 0x06
    1fe2:	9f 82       	std	Y+7, r9	; 0x07
    1fe4:	a8 86       	std	Y+8, r10	; 0x08
    1fe6:	b9 86       	std	Y+9, r11	; 0x09
    1fe8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
    1fec:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
    1ff0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ff4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ff8:	b0 99       	sbic	0x16, 0	; 22
    1ffa:	0e c0       	rjmp	.+28     	; 0x2018 <async+0xde>
    1ffc:	09 2e       	mov	r0, r25
    1ffe:	00 0c       	add	r0, r0
    2000:	aa 0b       	sbc	r26, r26
    2002:	bb 0b       	sbc	r27, r27
    2004:	dc 01       	movw	r26, r24
    2006:	99 27       	eor	r25, r25
    2008:	88 27       	eor	r24, r24
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	84 2b       	or	r24, r20
    2010:	95 2b       	or	r25, r21
    2012:	a6 2b       	or	r26, r22
    2014:	b7 2b       	or	r27, r23
    2016:	13 c0       	rjmp	.+38     	; 0x203e <async+0x104>
    2018:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    201c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2020:	01 96       	adiw	r24, 0x01	; 1
    2022:	09 2e       	mov	r0, r25
    2024:	00 0c       	add	r0, r0
    2026:	aa 0b       	sbc	r26, r26
    2028:	bb 0b       	sbc	r27, r27
    202a:	dc 01       	movw	r26, r24
    202c:	99 27       	eor	r25, r25
    202e:	88 27       	eor	r24, r24
    2030:	a9 01       	movw	r20, r18
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	84 2b       	or	r24, r20
    2038:	95 2b       	or	r25, r21
    203a:	a6 2b       	or	r26, r22
    203c:	b7 2b       	or	r27, r23
    203e:	48 1a       	sub	r4, r24
    2040:	59 0a       	sbc	r5, r25
    2042:	6a 0a       	sbc	r6, r26
    2044:	7b 0a       	sbc	r7, r27
    2046:	14 14       	cp	r1, r4
    2048:	15 04       	cpc	r1, r5
    204a:	16 04       	cpc	r1, r6
    204c:	17 04       	cpc	r1, r7
    204e:	ac f5       	brge	.+106    	; 0x20ba <async+0x180>
    2050:	66 e5       	ldi	r22, 0x56	; 86
    2052:	71 e0       	ldi	r23, 0x01	; 1
    2054:	ce 01       	movw	r24, r28
    2056:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <enqueueByBaseline>
    205a:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <timerQ>
    205e:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <timerQ+0x1>
    2062:	30 97       	sbiw	r30, 0x00	; 0
    2064:	21 f1       	breq	.+72     	; 0x20ae <async+0x174>
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	a4 81       	ldd	r26, Z+4	; 0x04
    206c:	b5 81       	ldd	r27, Z+5	; 0x05
    206e:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
    2072:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
    2076:	2a 17       	cp	r18, r26
    2078:	3b 07       	cpc	r19, r27
    207a:	c9 f4       	brne	.+50     	; 0x20ae <async+0x174>
    207c:	9c 01       	movw	r18, r24
    207e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2082:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2086:	84 1b       	sub	r24, r20
    2088:	95 0b       	sbc	r25, r21
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	31 f4       	brne	.+12     	; 0x209a <async+0x160>
    208e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2092:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2096:	2f 5f       	subi	r18, 0xFF	; 255
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    209e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    20a2:	ef e6       	ldi	r30, 0x6F	; 111
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	80 83       	st	Z, r24
    20ac:	41 c0       	rjmp	.+130    	; 0x2130 <async+0x1f6>
    20ae:	ef e6       	ldi	r30, 0x6F	; 111
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	8d 7f       	andi	r24, 0xFD	; 253
    20b6:	80 83       	st	Z, r24
    20b8:	3b c0       	rjmp	.+118    	; 0x2130 <async+0x1f6>
    20ba:	68 e5       	ldi	r22, 0x58	; 88
    20bc:	71 e0       	ldi	r23, 0x01	; 1
    20be:	ce 01       	movw	r24, r28
    20c0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <enqueueByDeadline>
    20c4:	33 20       	and	r3, r3
    20c6:	b9 f1       	breq	.+110    	; 0x2136 <async+0x1fc>
    20c8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <threadPool>
    20cc:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <threadPool+0x1>
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	81 f1       	breq	.+96     	; 0x2134 <async+0x1fa>
    20d4:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <activeStack>
    20d8:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <activeStack+0x1>
    20dc:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <msgQ>
    20e0:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <msgQ+0x1>
    20e4:	02 81       	ldd	r16, Z+2	; 0x02
    20e6:	13 81       	ldd	r17, Z+3	; 0x03
    20e8:	d9 01       	movw	r26, r18
    20ea:	16 96       	adiw	r26, 0x06	; 6
    20ec:	4d 91       	ld	r20, X+
    20ee:	5d 91       	ld	r21, X+
    20f0:	6d 91       	ld	r22, X+
    20f2:	7c 91       	ld	r23, X
    20f4:	19 97       	sbiw	r26, 0x09	; 9
    20f6:	d8 01       	movw	r26, r16
    20f8:	16 96       	adiw	r26, 0x06	; 6
    20fa:	0d 91       	ld	r16, X+
    20fc:	1d 91       	ld	r17, X+
    20fe:	2d 91       	ld	r18, X+
    2100:	3c 91       	ld	r19, X
    2102:	19 97       	sbiw	r26, 0x09	; 9
    2104:	40 1b       	sub	r20, r16
    2106:	51 0b       	sbc	r21, r17
    2108:	62 0b       	sbc	r22, r18
    210a:	73 0b       	sbc	r23, r19
    210c:	9a f4       	brpl	.+38     	; 0x2134 <async+0x1fa>
    210e:	dc 01       	movw	r26, r24
    2110:	2d 91       	ld	r18, X+
    2112:	3c 91       	ld	r19, X
    2114:	11 97       	sbiw	r26, 0x01	; 1
    2116:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <threadPool+0x1>
    211a:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <threadPool>
    211e:	ed 93       	st	X+, r30
    2120:	fc 93       	st	X, r31
    2122:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <activeStack+0x1>
    2126:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <activeStack>
    212a:	0e 94 06 06 	call	0xc0c	; 0xc0c <dispatch>
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <async+0x1fa>
    2130:	33 20       	and	r3, r3
    2132:	09 f0       	breq	.+2      	; 0x2136 <async+0x1fc>
    2134:	78 94       	sei
    2136:	ce 01       	movw	r24, r28
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	5f 90       	pop	r5
    2156:	4f 90       	pop	r4
    2158:	3f 90       	pop	r3
    215a:	08 95       	ret

0000215c <sync>:
    215c:	cf 92       	push	r12
    215e:	df 92       	push	r13
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	7b 01       	movw	r14, r22
    2170:	6a 01       	movw	r12, r20
    2172:	1f b7       	in	r17, 0x3f	; 63
    2174:	10 78       	andi	r17, 0x80	; 128
    2176:	f8 94       	cli
    2178:	a8 81       	ld	r26, Y
    217a:	b9 81       	ldd	r27, Y+1	; 0x01
    217c:	10 97       	sbiw	r26, 0x00	; 0
    217e:	61 f1       	breq	.+88     	; 0x21d8 <sync+0x7c>
    2180:	14 96       	adiw	r26, 0x04	; 4
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	15 97       	sbiw	r26, 0x05	; 5
    2188:	30 97       	sbiw	r30, 0x00	; 0
    218a:	41 f0       	breq	.+16     	; 0x219c <sync+0x40>
    218c:	a0 81       	ld	r26, Z
    218e:	b1 81       	ldd	r27, Z+1	; 0x01
    2190:	14 96       	adiw	r26, 0x04	; 4
    2192:	ed 91       	ld	r30, X+
    2194:	fc 91       	ld	r31, X
    2196:	15 97       	sbiw	r26, 0x05	; 5
    2198:	30 97       	sbiw	r30, 0x00	; 0
    219a:	c1 f7       	brne	.-16     	; 0x218c <sync+0x30>
    219c:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <current>
    21a0:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <current+0x1>
    21a4:	2a 17       	cp	r18, r26
    21a6:	3b 07       	cpc	r19, r27
    21a8:	21 f0       	breq	.+8      	; 0x21b2 <sync+0x56>
    21aa:	11 23       	and	r17, r17
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <sync+0x54>
    21ae:	3d c0       	rjmp	.+122    	; 0x222a <sync+0xce>
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <sync+0x64>
    21b2:	11 23       	and	r17, r17
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <sync+0x5c>
    21b6:	3c c0       	rjmp	.+120    	; 0x2230 <sync+0xd4>
    21b8:	78 94       	sei
    21ba:	8f ef       	ldi	r24, 0xFF	; 255
    21bc:	9f ef       	ldi	r25, 0xFF	; 255
    21be:	52 c0       	rjmp	.+164    	; 0x2264 <sync+0x108>
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	9b 81       	ldd	r25, Y+3	; 0x03
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	d1 f1       	breq	.+116    	; 0x223c <sync+0xe0>
    21c8:	fc 01       	movw	r30, r24
    21ca:	15 82       	std	Z+5, r1	; 0x05
    21cc:	14 82       	std	Z+4, r1	; 0x04
    21ce:	36 c0       	rjmp	.+108    	; 0x223c <sync+0xe0>
    21d0:	78 94       	sei
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	46 c0       	rjmp	.+140    	; 0x2264 <sync+0x108>
    21d8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <current>
    21dc:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <current+0x1>
    21e0:	99 83       	std	Y+1, r25	; 0x01
    21e2:	88 83       	st	Y, r24
    21e4:	11 23       	and	r17, r17
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <sync+0x96>
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <sync+0x96>
    21f0:	78 94       	sei
    21f2:	b6 01       	movw	r22, r12
    21f4:	ce 01       	movw	r24, r28
    21f6:	f7 01       	movw	r30, r14
    21f8:	09 95       	icall
    21fa:	f8 2e       	mov	r15, r24
    21fc:	09 2f       	mov	r16, r25
    21fe:	8f b7       	in	r24, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	19 82       	std	Y+1, r1	; 0x01
    2204:	18 82       	st	Y, r1
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	9b 81       	ldd	r25, Y+3	; 0x03
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	91 05       	cpc	r25, r1
    220e:	38 f0       	brcs	.+14     	; 0x221e <sync+0xc2>
    2210:	1b 82       	std	Y+3, r1	; 0x03
    2212:	1a 82       	std	Y+2, r1	; 0x02
    2214:	fc 01       	movw	r30, r24
    2216:	15 82       	std	Z+5, r1	; 0x05
    2218:	14 82       	std	Z+4, r1	; 0x04
    221a:	0e 94 06 06 	call	0xc0c	; 0xc0c <dispatch>
    221e:	11 23       	and	r17, r17
    2220:	51 f0       	breq	.+20     	; 0x2236 <sync+0xda>
    2222:	78 94       	sei
    2224:	8f 2d       	mov	r24, r15
    2226:	90 2f       	mov	r25, r16
    2228:	1d c0       	rjmp	.+58     	; 0x2264 <sync+0x108>
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	9f ef       	ldi	r25, 0xFF	; 255
    222e:	1a c0       	rjmp	.+52     	; 0x2264 <sync+0x108>
    2230:	8f ef       	ldi	r24, 0xFF	; 255
    2232:	9f ef       	ldi	r25, 0xFF	; 255
    2234:	17 c0       	rjmp	.+46     	; 0x2264 <sync+0x108>
    2236:	8f 2d       	mov	r24, r15
    2238:	90 2f       	mov	r25, r16
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <sync+0x108>
    223c:	3b 83       	std	Y+3, r19	; 0x03
    223e:	2a 83       	std	Y+2, r18	; 0x02
    2240:	f9 01       	movw	r30, r18
    2242:	d5 83       	std	Z+5, r29	; 0x05
    2244:	c4 83       	std	Z+4, r28	; 0x04
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 06 06 	call	0xc0c	; 0xc0c <dispatch>
    224c:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <current>
    2250:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <current+0x1>
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	89 2b       	or	r24, r25
    225a:	09 f4       	brne	.+2      	; 0x225e <sync+0x102>
    225c:	b9 cf       	rjmp	.-142    	; 0x21d0 <sync+0x74>
    225e:	f9 83       	std	Y+1, r31	; 0x01
    2260:	e8 83       	st	Y, r30
    2262:	c2 cf       	rjmp	.-124    	; 0x21e8 <sync+0x8c>
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	df 90       	pop	r13
    2272:	cf 90       	pop	r12
    2274:	08 95       	ret

00002276 <run>:
    2276:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <current>
    227a:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <current+0x1>
    227e:	88 e5       	ldi	r24, 0x58	; 88
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <dequeue>
    2286:	ec 01       	movw	r28, r24
    2288:	d8 01       	movw	r26, r16
    228a:	13 96       	adiw	r26, 0x03	; 3
    228c:	9c 93       	st	X, r25
    228e:	8e 93       	st	-X, r24
    2290:	12 97       	sbiw	r26, 0x02	; 2
    2292:	78 94       	sei
    2294:	4e 85       	ldd	r20, Y+14	; 0x0e
    2296:	5f 85       	ldd	r21, Y+15	; 0x0f
    2298:	6c 85       	ldd	r22, Y+12	; 0x0c
    229a:	7d 85       	ldd	r23, Y+13	; 0x0d
    229c:	8a 85       	ldd	r24, Y+10	; 0x0a
    229e:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a0:	0e 94 ae 10 	call	0x215c	; 0x215c <sync>
    22a4:	8f b7       	in	r24, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <msgPool>
    22ac:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <msgPool+0x1>
    22b0:	99 83       	std	Y+1, r25	; 0x01
    22b2:	88 83       	st	Y, r24
    22b4:	d0 93 3a 01 	sts	0x013A, r29	; 0x80013a <msgPool+0x1>
    22b8:	c0 93 39 01 	sts	0x0139, r28	; 0x800139 <msgPool>
    22bc:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <activeStack>
    22c0:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <activeStack+0x1>
    22c4:	00 81       	ld	r16, Z
    22c6:	11 81       	ldd	r17, Z+1	; 0x01
    22c8:	e8 01       	movw	r28, r16
    22ca:	2a 81       	ldd	r18, Y+2	; 0x02
    22cc:	3b 81       	ldd	r19, Y+3	; 0x03
    22ce:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <msgQ>
    22d2:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <msgQ+0x1>
    22d6:	10 97       	sbiw	r26, 0x00	; 0
    22d8:	c1 f0       	breq	.+48     	; 0x230a <run+0x94>
    22da:	21 15       	cp	r18, r1
    22dc:	31 05       	cpc	r19, r1
    22de:	59 f2       	breq	.-106    	; 0x2276 <run>
    22e0:	16 96       	adiw	r26, 0x06	; 6
    22e2:	8d 91       	ld	r24, X+
    22e4:	9d 91       	ld	r25, X+
    22e6:	0d 90       	ld	r0, X+
    22e8:	bc 91       	ld	r27, X
    22ea:	a0 2d       	mov	r26, r0
    22ec:	e9 01       	movw	r28, r18
    22ee:	4e 81       	ldd	r20, Y+6	; 0x06
    22f0:	5f 81       	ldd	r21, Y+7	; 0x07
    22f2:	68 85       	ldd	r22, Y+8	; 0x08
    22f4:	79 85       	ldd	r23, Y+9	; 0x09
    22f6:	84 1b       	sub	r24, r20
    22f8:	95 0b       	sbc	r25, r21
    22fa:	a6 0b       	sbc	r26, r22
    22fc:	b7 0b       	sbc	r27, r23
    22fe:	18 16       	cp	r1, r24
    2300:	19 06       	cpc	r1, r25
    2302:	1a 06       	cpc	r1, r26
    2304:	1b 06       	cpc	r1, r27
    2306:	0c f0       	brlt	.+2      	; 0x230a <run+0x94>
    2308:	b6 cf       	rjmp	.-148    	; 0x2276 <run>
    230a:	10 93 36 01 	sts	0x0136, r17	; 0x800136 <activeStack+0x1>
    230e:	00 93 35 01 	sts	0x0135, r16	; 0x800135 <activeStack>
    2312:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <threadPool>
    2316:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <threadPool+0x1>
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	f0 93 38 01 	sts	0x0138, r31	; 0x800138 <threadPool+0x1>
    2322:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <threadPool>
    2326:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <activeStack>
    232a:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <activeStack+0x1>
    232e:	14 96       	adiw	r26, 0x04	; 4
    2330:	ed 91       	ld	r30, X+
    2332:	fc 91       	ld	r31, X
    2334:	15 97       	sbiw	r26, 0x05	; 5
    2336:	30 97       	sbiw	r30, 0x00	; 0
    2338:	41 f0       	breq	.+16     	; 0x234a <run+0xd4>
    233a:	a0 81       	ld	r26, Z
    233c:	b1 81       	ldd	r27, Z+1	; 0x01
    233e:	14 96       	adiw	r26, 0x04	; 4
    2340:	ed 91       	ld	r30, X+
    2342:	fc 91       	ld	r31, X
    2344:	15 97       	sbiw	r26, 0x05	; 5
    2346:	30 97       	sbiw	r30, 0x00	; 0
    2348:	c1 f7       	brne	.-16     	; 0x233a <run+0xc4>
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 06 06 	call	0xc0c	; 0xc0c <dispatch>
    2350:	92 cf       	rjmp	.-220    	; 0x2276 <run>

00002352 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2352:	42 31       	cpi	r20, 0x12	; 18
    2354:	b8 f4       	brcc	.+46     	; 0x2384 <install+0x32>
        char status;
        DISABLE(status);
    2356:	2f b7       	in	r18, 0x3f	; 63
    2358:	f8 94       	cli
        otable[i] = obj;
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	44 0f       	add	r20, r20
    235e:	55 1f       	adc	r21, r21
    2360:	fa 01       	movw	r30, r20
    2362:	e6 5a       	subi	r30, 0xA6	; 166
    2364:	fe 4f       	sbci	r31, 0xFE	; 254
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
        mtable[i] = m;
    236a:	fa 01       	movw	r30, r20
    236c:	ee 50       	subi	r30, 0x0E	; 14
    236e:	fe 4f       	sbci	r31, 0xFE	; 254
    2370:	71 83       	std	Z+1, r23	; 0x01
    2372:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	fc 01       	movw	r30, r24
    237a:	53 83       	std	Z+3, r21	; 0x03
    237c:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    237e:	22 23       	and	r18, r18
    2380:	0c f4       	brge	.+2      	; 0x2384 <install+0x32>
    2382:	78 94       	sei
    2384:	08 95       	ret

00002386 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2386:	8c 01       	movw	r16, r24
    2388:	7b 01       	movw	r14, r22
    238a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    238c:	8f b7       	in	r24, 0x3f	; 63
    238e:	f8 94       	cli
    initialize();
    2390:	0e 94 9b 05 	call	0xb36	; 0xb36 <initialize>
    ENABLE(1);
    2394:	78 94       	sei
    if (m != NULL)
    2396:	e1 14       	cp	r14, r1
    2398:	f1 04       	cpc	r15, r1
    239a:	41 f0       	breq	.+16     	; 0x23ac <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	a9 01       	movw	r20, r18
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	cb 01       	movw	r24, r22
    23a8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <async>
    DISABLE(status);
    23ac:	8f b7       	in	r24, 0x3f	; 63
    23ae:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    23b0:	0e 94 26 06 	call	0xc4c	; 0xc4c <schedule>
    ENABLE(1);
    23b4:	78 94       	sei
    while (1) {
        SLEEP();
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	83 bf       	out	0x33, r24	; 51
    23ba:	88 95       	sleep
    23bc:	fd cf       	rjmp	.-6      	; 0x23b8 <tinytimber+0x32>

000023be <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    23be:	67 2b       	or	r22, r23
    23c0:	79 f0       	breq	.+30     	; 0x23e0 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    23c2:	4e b1       	in	r20, 0x0e	; 14
    23c4:	21 e0       	ldi	r18, 0x01	; 1
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	b9 01       	movw	r22, r18
    23ca:	fc 01       	movw	r30, r24
    23cc:	04 80       	ldd	r0, Z+4	; 0x04
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <writeBit+0x16>
    23d0:	66 0f       	add	r22, r22
    23d2:	77 1f       	adc	r23, r23
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <writeBit+0x12>
    23d8:	cb 01       	movw	r24, r22
    23da:	84 2b       	or	r24, r20
    23dc:	8e b9       	out	0x0e, r24	; 14
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    23e0:	4e b1       	in	r20, 0x0e	; 14
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	b9 01       	movw	r22, r18
    23e8:	fc 01       	movw	r30, r24
    23ea:	04 80       	ldd	r0, Z+4	; 0x04
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <writeBit+0x34>
    23ee:	66 0f       	add	r22, r22
    23f0:	77 1f       	adc	r23, r23
    23f2:	0a 94       	dec	r0
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <writeBit+0x30>
    23f6:	cb 01       	movw	r24, r22
    23f8:	80 95       	com	r24
    23fa:	84 23       	and	r24, r20
    23fc:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	08 95       	ret

00002404 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    2404:	4e b1       	in	r20, 0x0e	; 14
    2406:	21 e0       	ldi	r18, 0x01	; 1
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	fc 01       	movw	r30, r24
    240c:	04 80       	ldd	r0, Z+4	; 0x04
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <toggleBit+0x10>
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	0a 94       	dec	r0
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <toggleBit+0xc>
    2418:	24 27       	eor	r18, r20
    241a:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	08 95       	ret

00002422 <__divmodhi4>:
    2422:	97 fb       	bst	r25, 7
    2424:	07 2e       	mov	r0, r23
    2426:	16 f4       	brtc	.+4      	; 0x242c <__divmodhi4+0xa>
    2428:	00 94       	com	r0
    242a:	07 d0       	rcall	.+14     	; 0x243a <__divmodhi4_neg1>
    242c:	77 fd       	sbrc	r23, 7
    242e:	09 d0       	rcall	.+18     	; 0x2442 <__divmodhi4_neg2>
    2430:	0e 94 4b 12 	call	0x2496	; 0x2496 <__udivmodhi4>
    2434:	07 fc       	sbrc	r0, 7
    2436:	05 d0       	rcall	.+10     	; 0x2442 <__divmodhi4_neg2>
    2438:	3e f4       	brtc	.+14     	; 0x2448 <__divmodhi4_exit>

0000243a <__divmodhi4_neg1>:
    243a:	90 95       	com	r25
    243c:	81 95       	neg	r24
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	08 95       	ret

00002442 <__divmodhi4_neg2>:
    2442:	70 95       	com	r23
    2444:	61 95       	neg	r22
    2446:	7f 4f       	sbci	r23, 0xFF	; 255

00002448 <__divmodhi4_exit>:
    2448:	08 95       	ret

0000244a <__divmodsi4>:
    244a:	05 2e       	mov	r0, r21
    244c:	97 fb       	bst	r25, 7
    244e:	1e f4       	brtc	.+6      	; 0x2456 <__divmodsi4+0xc>
    2450:	00 94       	com	r0
    2452:	0e 94 3c 12 	call	0x2478	; 0x2478 <__negsi2>
    2456:	57 fd       	sbrc	r21, 7
    2458:	07 d0       	rcall	.+14     	; 0x2468 <__divmodsi4_neg2>
    245a:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodsi4>
    245e:	07 fc       	sbrc	r0, 7
    2460:	03 d0       	rcall	.+6      	; 0x2468 <__divmodsi4_neg2>
    2462:	4e f4       	brtc	.+18     	; 0x2476 <__divmodsi4_exit>
    2464:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__negsi2>

00002468 <__divmodsi4_neg2>:
    2468:	50 95       	com	r21
    246a:	40 95       	com	r20
    246c:	30 95       	com	r19
    246e:	21 95       	neg	r18
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	4f 4f       	sbci	r20, 0xFF	; 255
    2474:	5f 4f       	sbci	r21, 0xFF	; 255

00002476 <__divmodsi4_exit>:
    2476:	08 95       	ret

00002478 <__negsi2>:
    2478:	90 95       	com	r25
    247a:	80 95       	com	r24
    247c:	70 95       	com	r23
    247e:	61 95       	neg	r22
    2480:	7f 4f       	sbci	r23, 0xFF	; 255
    2482:	8f 4f       	sbci	r24, 0xFF	; 255
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	08 95       	ret

00002488 <__usmulhisi3>:
    2488:	0e 94 81 12 	call	0x2502	; 0x2502 <__umulhisi3>

0000248c <__usmulhisi3_tail>:
    248c:	b7 ff       	sbrs	r27, 7
    248e:	08 95       	ret
    2490:	82 1b       	sub	r24, r18
    2492:	93 0b       	sbc	r25, r19
    2494:	08 95       	ret

00002496 <__udivmodhi4>:
    2496:	aa 1b       	sub	r26, r26
    2498:	bb 1b       	sub	r27, r27
    249a:	51 e1       	ldi	r21, 0x11	; 17
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <__udivmodhi4_ep>

0000249e <__udivmodhi4_loop>:
    249e:	aa 1f       	adc	r26, r26
    24a0:	bb 1f       	adc	r27, r27
    24a2:	a6 17       	cp	r26, r22
    24a4:	b7 07       	cpc	r27, r23
    24a6:	10 f0       	brcs	.+4      	; 0x24ac <__udivmodhi4_ep>
    24a8:	a6 1b       	sub	r26, r22
    24aa:	b7 0b       	sbc	r27, r23

000024ac <__udivmodhi4_ep>:
    24ac:	88 1f       	adc	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	5a 95       	dec	r21
    24b2:	a9 f7       	brne	.-22     	; 0x249e <__udivmodhi4_loop>
    24b4:	80 95       	com	r24
    24b6:	90 95       	com	r25
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	08 95       	ret

000024be <__udivmodsi4>:
    24be:	a1 e2       	ldi	r26, 0x21	; 33
    24c0:	1a 2e       	mov	r1, r26
    24c2:	aa 1b       	sub	r26, r26
    24c4:	bb 1b       	sub	r27, r27
    24c6:	fd 01       	movw	r30, r26
    24c8:	0d c0       	rjmp	.+26     	; 0x24e4 <__udivmodsi4_ep>

000024ca <__udivmodsi4_loop>:
    24ca:	aa 1f       	adc	r26, r26
    24cc:	bb 1f       	adc	r27, r27
    24ce:	ee 1f       	adc	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	a2 17       	cp	r26, r18
    24d4:	b3 07       	cpc	r27, r19
    24d6:	e4 07       	cpc	r30, r20
    24d8:	f5 07       	cpc	r31, r21
    24da:	20 f0       	brcs	.+8      	; 0x24e4 <__udivmodsi4_ep>
    24dc:	a2 1b       	sub	r26, r18
    24de:	b3 0b       	sbc	r27, r19
    24e0:	e4 0b       	sbc	r30, r20
    24e2:	f5 0b       	sbc	r31, r21

000024e4 <__udivmodsi4_ep>:
    24e4:	66 1f       	adc	r22, r22
    24e6:	77 1f       	adc	r23, r23
    24e8:	88 1f       	adc	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	1a 94       	dec	r1
    24ee:	69 f7       	brne	.-38     	; 0x24ca <__udivmodsi4_loop>
    24f0:	60 95       	com	r22
    24f2:	70 95       	com	r23
    24f4:	80 95       	com	r24
    24f6:	90 95       	com	r25
    24f8:	9b 01       	movw	r18, r22
    24fa:	ac 01       	movw	r20, r24
    24fc:	bd 01       	movw	r22, r26
    24fe:	cf 01       	movw	r24, r30
    2500:	08 95       	ret

00002502 <__umulhisi3>:
    2502:	a2 9f       	mul	r26, r18
    2504:	b0 01       	movw	r22, r0
    2506:	b3 9f       	mul	r27, r19
    2508:	c0 01       	movw	r24, r0
    250a:	a3 9f       	mul	r26, r19
    250c:	70 0d       	add	r23, r0
    250e:	81 1d       	adc	r24, r1
    2510:	11 24       	eor	r1, r1
    2512:	91 1d       	adc	r25, r1
    2514:	b2 9f       	mul	r27, r18
    2516:	70 0d       	add	r23, r0
    2518:	81 1d       	adc	r24, r1
    251a:	11 24       	eor	r1, r1
    251c:	91 1d       	adc	r25, r1
    251e:	08 95       	ret

00002520 <setjmp>:
    2520:	dc 01       	movw	r26, r24
    2522:	2d 92       	st	X+, r2
    2524:	3d 92       	st	X+, r3
    2526:	4d 92       	st	X+, r4
    2528:	5d 92       	st	X+, r5
    252a:	6d 92       	st	X+, r6
    252c:	7d 92       	st	X+, r7
    252e:	8d 92       	st	X+, r8
    2530:	9d 92       	st	X+, r9
    2532:	ad 92       	st	X+, r10
    2534:	bd 92       	st	X+, r11
    2536:	cd 92       	st	X+, r12
    2538:	dd 92       	st	X+, r13
    253a:	ed 92       	st	X+, r14
    253c:	fd 92       	st	X+, r15
    253e:	0d 93       	st	X+, r16
    2540:	1d 93       	st	X+, r17
    2542:	cd 93       	st	X+, r28
    2544:	dd 93       	st	X+, r29
    2546:	ff 91       	pop	r31
    2548:	ef 91       	pop	r30
    254a:	8d b7       	in	r24, 0x3d	; 61
    254c:	8d 93       	st	X+, r24
    254e:	8e b7       	in	r24, 0x3e	; 62
    2550:	8d 93       	st	X+, r24
    2552:	8f b7       	in	r24, 0x3f	; 63
    2554:	8d 93       	st	X+, r24
    2556:	ed 93       	st	X+, r30
    2558:	fd 93       	st	X+, r31
    255a:	88 27       	eor	r24, r24
    255c:	99 27       	eor	r25, r25
    255e:	09 94       	ijmp

00002560 <longjmp>:
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	81 30       	cpi	r24, 0x01	; 1
    2566:	91 05       	cpc	r25, r1
    2568:	81 1d       	adc	r24, r1
    256a:	2d 90       	ld	r2, X+
    256c:	3d 90       	ld	r3, X+
    256e:	4d 90       	ld	r4, X+
    2570:	5d 90       	ld	r5, X+
    2572:	6d 90       	ld	r6, X+
    2574:	7d 90       	ld	r7, X+
    2576:	8d 90       	ld	r8, X+
    2578:	9d 90       	ld	r9, X+
    257a:	ad 90       	ld	r10, X+
    257c:	bd 90       	ld	r11, X+
    257e:	cd 90       	ld	r12, X+
    2580:	dd 90       	ld	r13, X+
    2582:	ed 90       	ld	r14, X+
    2584:	fd 90       	ld	r15, X+
    2586:	0d 91       	ld	r16, X+
    2588:	1d 91       	ld	r17, X+
    258a:	cd 91       	ld	r28, X+
    258c:	dd 91       	ld	r29, X+
    258e:	ed 91       	ld	r30, X+
    2590:	fd 91       	ld	r31, X+
    2592:	0d 90       	ld	r0, X+
    2594:	f8 94       	cli
    2596:	fe bf       	out	0x3e, r31	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	ed bf       	out	0x3d, r30	; 61
    259c:	ed 91       	ld	r30, X+
    259e:	fd 91       	ld	r31, X+
    25a0:	09 94       	ijmp

000025a2 <_exit>:
    25a2:	f8 94       	cli

000025a4 <__stop_program>:
    25a4:	ff cf       	rjmp	.-2      	; 0x25a4 <__stop_program>
