
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00002468  000024fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800156  00800156  00002552  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002552  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cba  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001463  00000000  00000000  0000656e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aaa  00000000  00000000  000079d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e04  00000000  00000000  0000947c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6d  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cf4  00000000  00000000  0000aced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000e9e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_1>
       8:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__vector_2>
       c:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_3>
      10:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__vector_4>
      14:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__vector_9>
      28:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <__vector_10>
      2c:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__vector_11>
      30:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_12>
      34:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_13>
      38:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_14>
      3c:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_15>
      40:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_16>
      44:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_17>
      48:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_18>
      4c:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_19>
      50:	0c 94 17 0c 	jmp	0x182e	; 0x182e <__vector_20>
      54:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_21>
      58:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e6       	ldi	r30, 0x68	; 104
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a6 35       	cpi	r26, 0x56	; 86
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a6 e5       	ldi	r26, 0x56	; 86
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 3a       	cpi	r26, 0xA9	; 169
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 18 04 	call	0x830	; 0x830 <main>
      92:	0c 94 32 12 	jmp	0x2464	; 0x2464 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      a6:	fc 01       	movw	r30, r24
      a8:	22 85       	ldd	r18, Z+10	; 0x0a
      aa:	22 23       	and	r18, r18
      ac:	21 f0       	breq	.+8      	; 0xb6 <holdCheckerUp+0x1c>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      ae:	1e 9b       	sbis	0x03, 6	; 3
      b0:	0b c0       	rjmp	.+22     	; 0xc8 <holdCheckerUp+0x2e>
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      b2:	fc 01       	movw	r30, r24
      b4:	12 86       	std	Z+10, r1	; 0x0a
	}
	return 0;
}
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	1f 91       	pop	r17
      bc:	0f 91       	pop	r16
      be:	ff 90       	pop	r15
      c0:	ef 90       	pop	r14
      c2:	df 90       	pop	r13
      c4:	cf 90       	pop	r12
      c6:	08 95       	ret
      c8:	8c 01       	movw	r16, r24
int holdCheckerUp(Button *self, int arg) {
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	62 ef       	ldi	r22, 0xF2	; 242
      d0:	72 e0       	ldi	r23, 0x02	; 2
      d2:	84 81       	ldd	r24, Z+4	; 0x04
      d4:	95 81       	ldd	r25, Z+5	; 0x05
      d6:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      da:	c1 2c       	mov	r12, r1
      dc:	d1 2c       	mov	r13, r1
      de:	8d e4       	ldi	r24, 0x4D	; 77
      e0:	e8 2e       	mov	r14, r24
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	f8 2e       	mov	r15, r24
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	a9 01       	movw	r20, r18
      ec:	65 e3       	ldi	r22, 0x35	; 53
      ee:	7c e0       	ldi	r23, 0x0C	; 12
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
      f8:	de cf       	rjmp	.-68     	; 0xb6 <holdCheckerUp+0x1c>

000000fa <holdCheckerDown>:
	}
	return 0;
}

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     106:	fc 01       	movw	r30, r24
     108:	23 85       	ldd	r18, Z+11	; 0x0b
     10a:	22 23       	and	r18, r18
     10c:	21 f0       	breq	.+8      	; 0x116 <holdCheckerDown+0x1c>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     10e:	1f 9b       	sbis	0x03, 7	; 3
     110:	0b c0       	rjmp	.+22     	; 0x128 <holdCheckerDown+0x2e>
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     112:	fc 01       	movw	r30, r24
     114:	13 86       	std	Z+11, r1	; 0x0b
	}
	return 0;
}
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	1f 91       	pop	r17
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	08 95       	ret
     128:	8c 01       	movw	r16, r24
int holdCheckerDown(Button *self, int arg) {
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
		SYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	6b e2       	ldi	r22, 0x2B	; 43
     130:	73 e0       	ldi	r23, 0x03	; 3
     132:	84 81       	ldd	r24, Z+4	; 0x04
     134:	95 81       	ldd	r25, Z+5	; 0x05
     136:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	8d e7       	ldi	r24, 0x7D	; 125
     140:	e8 2e       	mov	r14, r24
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	f8 2e       	mov	r15, r24
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	65 e3       	ldi	r22, 0x35	; 53
     14e:	7c e0       	ldi	r23, 0x0C	; 12
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
     158:	de cf       	rjmp	.-68     	; 0x116 <holdCheckerDown+0x1c>

0000015a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     15a:	85 b1       	in	r24, 0x05	; 5
     15c:	80 6d       	ori	r24, 0xD0	; 208
     15e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     160:	8e b1       	in	r24, 0x0e	; 14
     162:	8c 60       	ori	r24, 0x0C	; 12
     164:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     166:	8d b3       	in	r24, 0x1d	; 29
     168:	80 6c       	ori	r24, 0xC0	; 192
     16a:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     16c:	eb e6       	ldi	r30, 0x6B	; 107
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8c 60       	ori	r24, 0x0C	; 12
     174:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     176:	ec e6       	ldi	r30, 0x6C	; 108
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	80 6d       	ori	r24, 0xD0	; 208
     17e:	80 83       	st	Z, r24
     180:	08 95       	ret

00000182 <leftdir>:
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
     182:	62 99       	sbic	0x0c, 2	; 12
     184:	04 c0       	rjmp	.+8      	; 0x18e <leftdir+0xc>
     186:	fc 01       	movw	r30, r24
     188:	20 85       	ldd	r18, Z+8	; 0x08
     18a:	22 23       	and	r18, r18
     18c:	39 f0       	breq	.+14     	; 0x19c <leftdir+0x1a>
		self->heldLeft = true;
		SYNC(self->gui, switchGen, 0);
	}
	
	else if (!PRESSEDLT) {
     18e:	62 9b       	sbis	0x0c, 2	; 12
     190:	02 c0       	rjmp	.+4      	; 0x196 <leftdir+0x14>
		self->heldLeft = false;
     192:	fc 01       	movw	r30, r24
     194:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	08 95       	ret
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		self->heldLeft = true;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 87       	std	Z+8, r24	; 0x08
		SYNC(self->gui, switchGen, 0);
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	6e ec       	ldi	r22, 0xCE	; 206
     1a6:	72 e0       	ldi	r23, 0x02	; 2
     1a8:	84 81       	ldd	r24, Z+4	; 0x04
     1aa:	95 81       	ldd	r25, Z+5	; 0x05
     1ac:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
	
	else if (!PRESSEDLT) {
		self->heldLeft = false;
	}
	return 0;
}
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	08 95       	ret

000001b6 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
     1b6:	63 99       	sbic	0x0c, 3	; 12
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <rightdir+0xc>
     1ba:	fc 01       	movw	r30, r24
     1bc:	21 85       	ldd	r18, Z+9	; 0x09
     1be:	22 23       	and	r18, r18
     1c0:	39 f0       	breq	.+14     	; 0x1d0 <rightdir+0x1a>
		self->heldRight = true;
		SYNC(self->gui, switchGen, 1);
	}
	else if (!PRESSEDRT) {
     1c2:	63 9b       	sbis	0x0c, 3	; 12
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <rightdir+0x14>
		self->heldRight = false;
     1c6:	fc 01       	movw	r30, r24
     1c8:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	08 95       	ret
}

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
	if (PRESSEDRT && !self->heldRight) {
		self->heldRight = true;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	81 87       	std	Z+9, r24	; 0x09
		SYNC(self->gui, switchGen, 1);
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	6e ec       	ldi	r22, 0xCE	; 206
     1da:	72 e0       	ldi	r23, 0x02	; 2
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
	}
	else if (!PRESSEDRT) {
		self->heldRight = false;
	}
	return 0;
}
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	08 95       	ret

000001ea <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	ec 01       	movw	r28, r24
	if (PRESSEDLT && !self->heldLeft) {
     1f0:	62 99       	sbic	0x0c, 2	; 12
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <buttonCheckerLR+0x10>
     1f4:	88 85       	ldd	r24, Y+8	; 0x08
     1f6:	88 23       	and	r24, r24
     1f8:	61 f0       	breq	.+24     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
		leftdir(self, 0);
	}
	else {
		self->heldLeft = false;
     1fa:	18 86       	std	Y+8, r1	; 0x08
	}
	if (PRESSEDRT && !self->heldRight) {
     1fc:	63 99       	sbic	0x0c, 3	; 12
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     200:	89 85       	ldd	r24, Y+9	; 0x09
     202:	88 23       	and	r24, r24
     204:	61 f0       	breq	.+24     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
		rightdir(self, 0);
	}
	else {
		self->heldRight = false;
     206:	19 86       	std	Y+9, r1	; 0x09
	}
	return 0;
}
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
	if (PRESSEDLT && !self->heldLeft) {
		leftdir(self, 0);
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	ce 01       	movw	r24, r28
     218:	0e 94 c1 00 	call	0x182	; 0x182 <leftdir>
     21c:	ef cf       	rjmp	.-34     	; 0x1fc <buttonCheckerLR+0x12>
	}
	else {
		self->heldLeft = false;
	}
	if (PRESSEDRT && !self->heldRight) {
		rightdir(self, 0);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	ce 01       	movw	r24, r28
     224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <rightdir>
	}
	else {
		self->heldRight = false;
	}
	return 0;
}
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     23e:	1e 99       	sbic	0x03, 6	; 3
     240:	12 c0       	rjmp	.+36     	; 0x266 <updir+0x34>
     242:	fc 01       	movw	r30, r24
     244:	26 81       	ldd	r18, Z+6	; 0x06
     246:	21 11       	cpse	r18, r1
     248:	0e c0       	rjmp	.+28     	; 0x266 <updir+0x34>
		self->heldUp = true; // Markera att knappen hålls nere
     24a:	21 e0       	ldi	r18, 0x01	; 1
     24c:	26 83       	std	Z+6, r18	; 0x06
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     24e:	32 85       	ldd	r19, Z+10	; 0x0a
     250:	33 23       	and	r19, r19
     252:	71 f0       	breq	.+28     	; 0x270 <updir+0x3e>
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
		self->heldUp = false;
	}
	return 0;
}
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
			self->holdUpRunning = true;
			AFTER(MSEC(50), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 50ms
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     266:	1e 9b       	sbis	0x03, 6	; 3
     268:	f5 cf       	rjmp	.-22     	; 0x254 <updir+0x22>
		self->heldUp = false;
     26a:	fc 01       	movw	r30, r24
     26c:	16 82       	std	Z+6, r1	; 0x06
     26e:	f2 cf       	rjmp	.-28     	; 0x254 <updir+0x22>
     270:	8c 01       	movw	r16, r24
int updir(Button *self, int arg) {
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
		self->heldUp = true; // Markera att knappen hålls nere
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
			self->holdUpRunning = true;
     272:	22 87       	std	Z+10, r18	; 0x0a
			AFTER(MSEC(50), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 50ms
     274:	c1 2c       	mov	r12, r1
     276:	d1 2c       	mov	r13, r1
     278:	8d e4       	ldi	r24, 0x4D	; 77
     27a:	e8 2e       	mov	r14, r24
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	f8 2e       	mov	r15, r24
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	a9 01       	movw	r20, r18
     286:	6a e1       	ldi	r22, 0x1A	; 26
     288:	76 e0       	ldi	r23, 0x06	; 6
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
     292:	e0 cf       	rjmp	.-64     	; 0x254 <updir+0x22>

00000294 <downdir>:
	}
	return 0;
}

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     294:	cf 92       	push	r12
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     2a0:	1f 99       	sbic	0x03, 7	; 3
     2a2:	12 c0       	rjmp	.+36     	; 0x2c8 <downdir+0x34>
     2a4:	fc 01       	movw	r30, r24
     2a6:	27 81       	ldd	r18, Z+7	; 0x07
     2a8:	21 11       	cpse	r18, r1
     2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <downdir+0x34>
		self->heldDown = true; // Markera att knappen hålls nere
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	27 83       	std	Z+7, r18	; 0x07
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     2b0:	33 85       	ldd	r19, Z+11	; 0x0b
     2b2:	33 23       	and	r19, r19
     2b4:	71 f0       	breq	.+28     	; 0x2d2 <downdir+0x3e>
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
		self->heldDown = false;
	}
	return 0;
}
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	08 95       	ret
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
			self->holdDownRunning = true;
			AFTER(MSEC(50), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 50ms
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     2c8:	1f 9b       	sbis	0x03, 7	; 3
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <downdir+0x22>
		self->heldDown = false;
     2cc:	fc 01       	movw	r30, r24
     2ce:	17 82       	std	Z+7, r1	; 0x07
     2d0:	f2 cf       	rjmp	.-28     	; 0x2b6 <downdir+0x22>
     2d2:	8c 01       	movw	r16, r24
int downdir(Button *self, int arg) {
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
		self->heldDown = true; // Markera att knappen hålls nere
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
			self->holdDownRunning = true;
     2d4:	23 87       	std	Z+11, r18	; 0x0b
			AFTER(MSEC(50), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 50ms
     2d6:	c1 2c       	mov	r12, r1
     2d8:	d1 2c       	mov	r13, r1
     2da:	8d e7       	ldi	r24, 0x7D	; 125
     2dc:	e8 2e       	mov	r14, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	f8 2e       	mov	r15, r24
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	a9 01       	movw	r20, r18
     2e8:	6a e1       	ldi	r22, 0x1A	; 26
     2ea:	76 e0       	ldi	r23, 0x06	; 6
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
     2f4:	e0 cf       	rjmp	.-64     	; 0x2b6 <downdir+0x22>

000002f6 <centerdir>:
	}
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
     2f6:	1c 99       	sbic	0x03, 4	; 3
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <centerdir+0xc>
     2fa:	fc 01       	movw	r30, r24
     2fc:	24 85       	ldd	r18, Z+12	; 0x0c
     2fe:	22 23       	and	r18, r18
     300:	39 f0       	breq	.+14     	; 0x310 <centerdir+0x1a>
		self->heldCenter = true;
		SYNC(self->gui, guiFrecReset, 0);
	}
	else if (!PRESSEDCN) {
     302:	1c 9b       	sbis	0x03, 4	; 3
     304:	02 c0       	rjmp	.+4      	; 0x30a <centerdir+0x14>
		self->heldCenter = false;
     306:	fc 01       	movw	r30, r24
     308:	14 86       	std	Z+12, r1	; 0x0c
	}
	return 0;
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	08 95       	ret
	return 0;
}
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
	if (PRESSEDCN && !self->heldCenter) {
		self->heldCenter = true;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	84 87       	std	Z+12, r24	; 0x0c
		SYNC(self->gui, guiFrecReset, 0);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	64 e6       	ldi	r22, 0x64	; 100
     31a:	73 e0       	ldi	r23, 0x03	; 3
     31c:	84 81       	ldd	r24, Z+4	; 0x04
     31e:	95 81       	ldd	r25, Z+5	; 0x05
     320:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
	}
	else if (!PRESSEDCN) {
		self->heldCenter = false;
	}
	return 0;
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	08 95       	ret

0000032a <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ec 01       	movw	r28, r24
	if (PRESSEDUP && !self->heldUp) {
     330:	1e 99       	sbic	0x03, 6	; 3
     332:	03 c0       	rjmp	.+6      	; 0x33a <buttonCheckerUDC+0x10>
     334:	8e 81       	ldd	r24, Y+6	; 0x06
     336:	88 23       	and	r24, r24
     338:	c1 f0       	breq	.+48     	; 0x36a <buttonCheckerUDC+0x40>
		updir(self, 0);
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     33a:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN && !self->heldDown) {
     33c:	1f 99       	sbic	0x03, 7	; 3
     33e:	03 c0       	rjmp	.+6      	; 0x346 <buttonCheckerUDC+0x1c>
     340:	8f 81       	ldd	r24, Y+7	; 0x07
     342:	88 23       	and	r24, r24
     344:	61 f0       	breq	.+24     	; 0x35e <buttonCheckerUDC+0x34>
		downdir(self, 0); // Hantera ner-knappen
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     346:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN && !self->heldCenter) {
     348:	1c 99       	sbic	0x03, 4	; 3
     34a:	03 c0       	rjmp	.+6      	; 0x352 <buttonCheckerUDC+0x28>
     34c:	8c 85       	ldd	r24, Y+12	; 0x0c
     34e:	88 23       	and	r24, r24
     350:	91 f0       	breq	.+36     	; 0x376 <buttonCheckerUDC+0x4c>
		centerdir(self, 0);
	}
	else {
		self->heldCenter = false;
     352:	1c 86       	std	Y+12, r1	; 0x0c
	}
	return 0;
}
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
	}
	if (PRESSEDDN && !self->heldDown) {
		downdir(self, 0); // Hantera ner-knappen
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	ce 01       	movw	r24, r28
     364:	0e 94 4a 01 	call	0x294	; 0x294 <downdir>
     368:	ef cf       	rjmp	.-34     	; 0x348 <buttonCheckerUDC+0x1e>


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
	if (PRESSEDUP && !self->heldUp) {
		updir(self, 0);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	ce 01       	movw	r24, r28
     370:	0e 94 19 01 	call	0x232	; 0x232 <updir>
     374:	e3 cf       	rjmp	.-58     	; 0x33c <buttonCheckerUDC+0x12>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
	}
	if (PRESSEDCN && !self->heldCenter) {
		centerdir(self, 0);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	ce 01       	movw	r24, r28
     37c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <centerdir>
	}
	else {
		self->heldCenter = false;
	}
	return 0;
}
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <writeChar.part.0>:
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     38a:	90 ed       	ldi	r25, 0xD0	; 208
     38c:	98 0f       	add	r25, r24
     38e:	9a 30       	cpi	r25, 0x0A	; 10
     390:	60 f1       	brcs	.+88     	; 0x3ea <writeChar.part.0+0x60>
     392:	9b 01       	movw	r18, r22
     394:	21 70       	andi	r18, 0x01	; 1
     396:	30 78       	andi	r19, 0x80	; 128
     398:	37 fd       	sbrc	r19, 7
     39a:	71 c0       	rjmp	.+226    	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
     39c:	22 0f       	add	r18, r18
     39e:	33 1f       	adc	r19, r19
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	77 fd       	sbrc	r23, 7
     3ae:	5d c0       	rjmp	.+186    	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
     3b0:	75 95       	asr	r23
     3b2:	67 95       	ror	r22
     3b4:	fb 01       	movw	r30, r22
     3b6:	e4 51       	subi	r30, 0x14	; 20
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	8f e0       	ldi	r24, 0x0F	; 15
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <writeChar.part.0+0x38>
     3c0:	88 0f       	add	r24, r24
     3c2:	2a 95       	dec	r18
     3c4:	ea f7       	brpl	.-6      	; 0x3c0 <writeChar.part.0+0x36>
     3c6:	80 95       	com	r24
     3c8:	90 81       	ld	r25, Z
     3ca:	98 23       	and	r25, r24
     3cc:	9b 2b       	or	r25, r27
     3ce:	90 83       	st	Z, r25
     3d0:	95 81       	ldd	r25, Z+5	; 0x05
     3d2:	98 23       	and	r25, r24
     3d4:	9a 2b       	or	r25, r26
     3d6:	95 83       	std	Z+5, r25	; 0x05
     3d8:	92 85       	ldd	r25, Z+10	; 0x0a
     3da:	98 23       	and	r25, r24
     3dc:	94 2b       	or	r25, r20
     3de:	92 87       	std	Z+10, r25	; 0x0a
     3e0:	97 85       	ldd	r25, Z+15	; 0x0f
     3e2:	89 23       	and	r24, r25
     3e4:	85 2b       	or	r24, r21
     3e6:	87 87       	std	Z+15, r24	; 0x0f
     3e8:	08 95       	ret
     3ea:	e8 2f       	mov	r30, r24
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	ee 51       	subi	r30, 0x1E	; 30
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	40 81       	ld	r20, Z
     3f8:	51 81       	ldd	r21, Z+1	; 0x01
     3fa:	9b 01       	movw	r18, r22
     3fc:	21 70       	andi	r18, 0x01	; 1
     3fe:	30 78       	andi	r19, 0x80	; 128
     400:	37 fd       	sbrc	r19, 7
     402:	36 c0       	rjmp	.+108    	; 0x470 <__DATA_REGION_LENGTH__+0x70>
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	22 0f       	add	r18, r18
     40a:	33 1f       	adc	r19, r19
     40c:	ca 01       	movw	r24, r20
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	99 27       	eor	r25, r25
     412:	98 2f       	mov	r25, r24
     414:	02 2e       	mov	r0, r18
     416:	01 c0       	rjmp	.+2      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     418:	99 0f       	add	r25, r25
     41a:	0a 94       	dec	r0
     41c:	ea f7       	brpl	.-6      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     41e:	b9 2f       	mov	r27, r25
     420:	ca 01       	movw	r24, r20
     422:	92 95       	swap	r25
     424:	82 95       	swap	r24
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	89 27       	eor	r24, r25
     42a:	9f 70       	andi	r25, 0x0F	; 15
     42c:	89 27       	eor	r24, r25
     42e:	8f 70       	andi	r24, 0x0F	; 15
     430:	99 27       	eor	r25, r25
     432:	98 2f       	mov	r25, r24
     434:	02 2e       	mov	r0, r18
     436:	01 c0       	rjmp	.+2      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     438:	99 0f       	add	r25, r25
     43a:	0a 94       	dec	r0
     43c:	ea f7       	brpl	.-6      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
     43e:	a9 2f       	mov	r26, r25
     440:	85 2f       	mov	r24, r21
     442:	99 27       	eor	r25, r25
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	99 27       	eor	r25, r25
     448:	02 2e       	mov	r0, r18
     44a:	01 c0       	rjmp	.+2      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
     44c:	88 0f       	add	r24, r24
     44e:	0a 94       	dec	r0
     450:	ea f7       	brpl	.-6      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
     452:	48 2f       	mov	r20, r24
     454:	85 2f       	mov	r24, r21
     456:	82 95       	swap	r24
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	02 2e       	mov	r0, r18
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__DATA_REGION_LENGTH__+0x60>
     45e:	88 0f       	add	r24, r24
     460:	0a 94       	dec	r0
     462:	ea f7       	brpl	.-6      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
     464:	58 2f       	mov	r21, r24
     466:	77 ff       	sbrs	r23, 7
     468:	a3 cf       	rjmp	.-186    	; 0x3b0 <writeChar.part.0+0x26>
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	a0 cf       	rjmp	.-192    	; 0x3b0 <writeChar.part.0+0x26>
     470:	21 50       	subi	r18, 0x01	; 1
     472:	31 09       	sbc	r19, r1
     474:	2e 6f       	ori	r18, 0xFE	; 254
     476:	3f 6f       	ori	r19, 0xFF	; 255
     478:	2f 5f       	subi	r18, 0xFF	; 255
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
     47c:	c3 cf       	rjmp	.-122    	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	31 09       	sbc	r19, r1
     482:	2e 6f       	ori	r18, 0xFE	; 254
     484:	3f 6f       	ori	r19, 0xFF	; 255
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	88 cf       	rjmp	.-240    	; 0x39c <writeChar.part.0+0x12>

0000048c <lcd_init>:
     48c:	80 ec       	ldi	r24, 0xC0	; 192
     48e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     492:	87 eb       	ldi	r24, 0xB7	; 183
     494:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
     498:	8f e0       	ldi	r24, 0x0F	; 15
     49a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     49e:	08 95       	ret

000004a0 <printAt>:
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
}

void printAt(long num, int pos) {
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	6b 01       	movw	r12, r22
     4ae:	7c 01       	movw	r14, r24
     4b0:	ea 01       	movw	r28, r20
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4b2:	46 30       	cpi	r20, 0x06	; 6
     4b4:	51 05       	cpc	r21, r1
     4b6:	f0 f0       	brcs	.+60     	; 0x4f4 <printAt+0x54>
}

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
     4b8:	21 96       	adiw	r28, 0x01	; 1
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4ba:	c6 30       	cpi	r28, 0x06	; 6
     4bc:	d1 05       	cpc	r29, r1
     4be:	38 f0       	brcs	.+14     	; 0x4ce <printAt+0x2e>
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
	
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	2a e0       	ldi	r18, 0x0A	; 10
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	0e 94 86 11 	call	0x230c	; 0x230c <__divmodsi4>
     4de:	86 2f       	mov	r24, r22
     4e0:	be 01       	movw	r22, r28
     4e2:	80 5d       	subi	r24, 0xD0	; 208
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	0c 94 c5 01 	jmp	0x38a	; 0x38a <writeChar.part.0>
     4f4:	24 e6       	ldi	r18, 0x64	; 100
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	0e 94 86 11 	call	0x230c	; 0x230c <__divmodsi4>
     500:	2a e0       	ldi	r18, 0x0A	; 10
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 86 11 	call	0x230c	; 0x230c <__divmodsi4>
     50c:	be 01       	movw	r22, r28
     50e:	80 e3       	ldi	r24, 0x30	; 48
     510:	82 0f       	add	r24, r18
     512:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     516:	d0 cf       	rjmp	.-96     	; 0x4b8 <printAt+0x18>

00000518 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	63 e9       	ldi	r22, 0x93	; 147
     524:	74 e0       	ldi	r23, 0x04	; 4
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	9d 81       	ldd	r25, Y+5	; 0x05
     52a:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
     52e:	bc 01       	movw	r22, r24
     530:	99 0f       	add	r25, r25
     532:	88 0b       	sbc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	63 e9       	ldi	r22, 0x93	; 147
     544:	74 e0       	ldi	r23, 0x04	; 4
     546:	8e 81       	ldd	r24, Y+6	; 0x06
     548:	9f 81       	ldd	r25, Y+7	; 0x07
     54a:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
     54e:	bc 01       	movw	r22, r24
     550:	99 0f       	add	r25, r25
     552:	88 0b       	sbc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	44 e0       	ldi	r20, 0x04	; 4
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     55e:	88 85       	ldd	r24, Y+8	; 0x08
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	88 23       	and	r24, r24
     566:	69 f0       	breq	.+26     	; 0x582 <updateDisplay+0x6a>
     568:	80 e3       	ldi	r24, 0x30	; 48
     56a:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     56e:	63 e0       	ldi	r22, 0x03	; 3
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	81 e3       	ldi	r24, 0x31	; 49
     574:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
		printAt(10, 2);
		} else {
		printAt(1, 2);
	}
	return 0;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret
     582:	81 e3       	ldi	r24, 0x31	; 49
     584:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     588:	63 e0       	ldi	r22, 0x03	; 3
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 e3       	ldi	r24, 0x30	; 48
     58e:	0e 94 c5 01 	call	0x38a	; 0x38a <writeChar.part.0>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     59c:	cf 92       	push	r12
     59e:	df 92       	push	r13
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	67 2b       	or	r22, r23
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <switchGen+0x14>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     5b4:	c1 2c       	mov	r12, r1
     5b6:	d1 2c       	mov	r13, r1
     5b8:	2c e8       	ldi	r18, 0x8C	; 140
     5ba:	e2 2e       	mov	r14, r18
     5bc:	22 e0       	ldi	r18, 0x02	; 2
     5be:	f2 2e       	mov	r15, r18
     5c0:	8c 01       	movw	r16, r24
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	a9 01       	movw	r20, r18
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	cb 01       	movw	r24, r22
     5ce:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	return 0;
}
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	08 95       	ret

000005e4 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     5f6:	88 85       	ldd	r24, Y+8	; 0x08
     5f8:	88 23       	and	r24, r24
     5fa:	51 f1       	breq	.+84     	; 0x650 <guiFrecInc+0x6c>
		ASYNC(self->gen1, FrecInc, 0);
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     5fc:	0e 81       	ldd	r16, Y+6	; 0x06
     5fe:	1f 81       	ldd	r17, Y+7	; 0x07
     600:	c1 2c       	mov	r12, r1
     602:	d1 2c       	mov	r13, r1
     604:	87 e9       	ldi	r24, 0x97	; 151
     606:	e8 2e       	mov	r14, r24
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	f8 2e       	mov	r15, r24
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	a9 01       	movw	r20, r18
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	cb 01       	movw	r24, r22
     618:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	}
	ASYNC(self, updateDisplay, 0);
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	9c e8       	ldi	r25, 0x8C	; 140
     622:	e9 2e       	mov	r14, r25
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	f9 2e       	mov	r15, r25
     628:	8e 01       	movw	r16, r28
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	a9 01       	movw	r20, r18
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	cb 01       	movw	r24, r22
     636:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	return 0;

}
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecInc, 0);
     650:	0c 81       	ldd	r16, Y+4	; 0x04
     652:	1d 81       	ldd	r17, Y+5	; 0x05
     654:	d5 cf       	rjmp	.-86     	; 0x600 <guiFrecInc+0x1c>

00000656 <guiFrecDec>:

}

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     668:	88 85       	ldd	r24, Y+8	; 0x08
     66a:	88 23       	and	r24, r24
     66c:	51 f1       	breq	.+84     	; 0x6c2 <guiFrecDec+0x6c>
		ASYNC(self->gen1, FrecDec, 0);
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     66e:	0e 81       	ldd	r16, Y+6	; 0x06
     670:	1f 81       	ldd	r17, Y+7	; 0x07
     672:	c1 2c       	mov	r12, r1
     674:	d1 2c       	mov	r13, r1
     676:	80 ea       	ldi	r24, 0xA0	; 160
     678:	e8 2e       	mov	r14, r24
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	f8 2e       	mov	r15, r24
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	a9 01       	movw	r20, r18
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	cb 01       	movw	r24, r22
     68a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	}
	ASYNC(self, updateDisplay, 0);
     68e:	c1 2c       	mov	r12, r1
     690:	d1 2c       	mov	r13, r1
     692:	9c e8       	ldi	r25, 0x8C	; 140
     694:	e9 2e       	mov	r14, r25
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	f9 2e       	mov	r15, r25
     69a:	8e 01       	movw	r16, r28
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	cb 01       	movw	r24, r22
     6a8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	return 0;
}
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	08 95       	ret

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecDec, 0);
     6c2:	0c 81       	ldd	r16, Y+4	; 0x04
     6c4:	1d 81       	ldd	r17, Y+5	; 0x05
     6c6:	d5 cf       	rjmp	.-86     	; 0x672 <guiFrecDec+0x1c>

000006c8 <guiFrecReset>:
	return 0;
}

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6da:	88 85       	ldd	r24, Y+8	; 0x08
     6dc:	88 23       	and	r24, r24
     6de:	51 f1       	breq	.+84     	; 0x734 <guiFrecReset+0x6c>
		ASYNC(self->gen1, FrecReset, 0);
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     6e0:	0e 81       	ldd	r16, Y+6	; 0x06
     6e2:	1f 81       	ldd	r17, Y+7	; 0x07
     6e4:	c1 2c       	mov	r12, r1
     6e6:	d1 2c       	mov	r13, r1
     6e8:	89 ea       	ldi	r24, 0xA9	; 169
     6ea:	e8 2e       	mov	r14, r24
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	f8 2e       	mov	r15, r24
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	a9 01       	movw	r20, r18
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	cb 01       	movw	r24, r22
     6fc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	}
	ASYNC(self, updateDisplay, 0);
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	9c e8       	ldi	r25, 0x8C	; 140
     706:	e9 2e       	mov	r14, r25
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	f9 2e       	mov	r15, r25
     70c:	8e 01       	movw	r16, r28
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	cb 01       	movw	r24, r22
     71a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	return 0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	08 95       	ret

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
	if (self->midPos == 0) {
		ASYNC(self->gen1, FrecReset, 0);
     734:	0c 81       	ldd	r16, Y+4	; 0x04
     736:	1d 81       	ldd	r17, Y+5	; 0x05
     738:	d5 cf       	rjmp	.-86     	; 0x6e4 <guiFrecReset+0x1c>

0000073a <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
	ASYNC(self->button, buttonCheckerLR, 0);
     746:	fc 01       	movw	r30, r24
     748:	04 81       	ldd	r16, Z+4	; 0x04
     74a:	15 81       	ldd	r17, Z+5	; 0x05
     74c:	c1 2c       	mov	r12, r1
     74e:	d1 2c       	mov	r13, r1
     750:	85 ef       	ldi	r24, 0xF5	; 245
     752:	e8 2e       	mov	r14, r24
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	f8 2e       	mov	r15, r24
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	a9 01       	movw	r20, r18
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	cb 01       	movw	r24, r22
     764:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	return 0;
}
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
	ASYNC(self->button, buttonCheckerUDC, 0);
     786:	fc 01       	movw	r30, r24
     788:	04 81       	ldd	r16, Z+4	; 0x04
     78a:	15 81       	ldd	r17, Z+5	; 0x05
     78c:	c1 2c       	mov	r12, r1
     78e:	d1 2c       	mov	r13, r1
     790:	85 e9       	ldi	r24, 0x95	; 149
     792:	e8 2e       	mov	r14, r24
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	f8 2e       	mov	r15, r24
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	a9 01       	movw	r20, r18
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	cb 01       	movw	r24, r22
     7a4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	return 0;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	08 95       	ret

000007ba <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     7cc:	c1 2c       	mov	r12, r1
     7ce:	d1 2c       	mov	r13, r1
     7d0:	84 e3       	ldi	r24, 0x34	; 52
     7d2:	e8 2e       	mov	r14, r24
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	f8 2e       	mov	r15, r24
     7d8:	06 e2       	ldi	r16, 0x26	; 38
     7da:	11 e0       	ldi	r17, 0x01	; 1
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	a9 01       	movw	r20, r18
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	cb 01       	movw	r24, r22
     7e8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	ASYNC(&pulseGen2, setPulse, 0);
     7ec:	0c e1       	ldi	r16, 0x1C	; 28
     7ee:	11 e0       	ldi	r17, 0x01	; 1
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	a9 01       	movw	r20, r18
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	cb 01       	movw	r24, r22
     7fc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     800:	9c e8       	ldi	r25, 0x8C	; 140
     802:	e9 2e       	mov	r14, r25
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	f9 2e       	mov	r15, r25
     808:	8e 01       	movw	r16, r28
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	a9 01       	movw	r20, r18
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	cb 01       	movw	r24, r22
     816:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	
	return 0;
}
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     830:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     834:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     838:	0e 94 ad 00 	call	0x15a	; 0x15a <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	6d e9       	ldi	r22, 0x9D	; 157
     840:	73 e0       	ldi	r23, 0x03	; 3
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 0b 11 	call	0x2216	; 0x2216 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     84a:	42 e0       	ldi	r20, 0x02	; 2
     84c:	6d eb       	ldi	r22, 0xBD	; 189
     84e:	73 e0       	ldi	r23, 0x03	; 3
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 0b 11 	call	0x2216	; 0x2216 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	6d ed       	ldi	r22, 0xDD	; 221
     85e:	73 e0       	ldi	r23, 0x03	; 3
     860:	83 e1       	ldi	r24, 0x13	; 19
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0c 94 25 11 	jmp	0x224a	; 0x224a <tinytimber>

00000868 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     87a:	8c 81       	ldd	r24, Y+4	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     87c:	0f 81       	ldd	r16, Y+7	; 0x07
     87e:	18 85       	ldd	r17, Y+8	; 0x08
     880:	c1 2c       	mov	r12, r1
     882:	d1 2c       	mov	r13, r1
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     884:	88 23       	and	r24, r24
     886:	a1 f1       	breq	.+104    	; 0x8f0 <setPulse+0x88>
	    ASYNC(self->wbit, writeBit, 0);
		AFTER(MSEC(1000), self, setPulse, 0);
    }
	else {
		// Annars toggla outputHigh.
		ASYNC(self->wbit, toggleBit, 0);
     888:	83 e6       	ldi	r24, 0x63	; 99
     88a:	e8 2e       	mov	r14, r24
     88c:	81 e1       	ldi	r24, 0x11	; 17
     88e:	f8 2e       	mov	r15, r24
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	a9 01       	movw	r20, r18
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	cb 01       	movw	r24, r22
     89c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
		
		// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
		int delay = 500 / self->frec;
     8a0:	6c 81       	ldd	r22, Y+4	; 0x04
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	84 ef       	ldi	r24, 0xF4	; 244
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
		AFTER(MSEC(delay), self, setPulse, 0);
     8ac:	2d e7       	ldi	r18, 0x7D	; 125
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	db 01       	movw	r26, r22
     8b2:	0e 94 a5 11 	call	0x234a	; 0x234a <__usmulhisi3>
     8b6:	95 95       	asr	r25
     8b8:	87 95       	ror	r24
     8ba:	77 95       	ror	r23
     8bc:	67 95       	ror	r22
     8be:	95 95       	asr	r25
     8c0:	87 95       	ror	r24
     8c2:	77 95       	ror	r23
     8c4:	67 95       	ror	r22
     8c6:	34 e3       	ldi	r19, 0x34	; 52
     8c8:	e3 2e       	mov	r14, r19
     8ca:	34 e0       	ldi	r19, 0x04	; 4
     8cc:	f3 2e       	mov	r15, r19
     8ce:	8e 01       	movw	r16, r28
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	a9 01       	movw	r20, r18
     8d6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
	}
	return 0;
}
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	08 95       	ret

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
	    ASYNC(self->wbit, writeBit, 0);
     8f0:	41 e4       	ldi	r20, 0x41	; 65
     8f2:	e4 2e       	mov	r14, r20
     8f4:	41 e1       	ldi	r20, 0x11	; 17
     8f6:	f4 2e       	mov	r15, r20
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	a9 01       	movw	r20, r18
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	cb 01       	movw	r24, r22
     904:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
		AFTER(MSEC(1000), self, setPulse, 0);
     908:	54 e3       	ldi	r21, 0x34	; 52
     90a:	e5 2e       	mov	r14, r21
     90c:	54 e0       	ldi	r21, 0x04	; 4
     90e:	f5 2e       	mov	r15, r21
     910:	8e 01       	movw	r16, r28
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	a9 01       	movw	r20, r18
     918:	62 e1       	ldi	r22, 0x12	; 18
     91a:	7a e7       	ldi	r23, 0x7A	; 122
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
     924:	da cf       	rjmp	.-76     	; 0x8da <setPulse+0x72>

00000926 <getFrec>:
	return 0;
}

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     926:	fc 01       	movw	r30, r24
     928:	84 81       	ldd	r24, Z+4	; 0x04
}
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret

0000092e <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     92e:	fc 01       	movw	r30, r24
    unsigned char old = self->frec;
    if (self->frec < 99) {
     930:	94 81       	ldd	r25, Z+4	; 0x04
     932:	93 36       	cpi	r25, 0x63	; 99
     934:	10 f4       	brcc	.+4      	; 0x93a <FrecInc+0xc>
	    self->frec++;
     936:	9f 5f       	subi	r25, 0xFF	; 255
     938:	94 83       	std	Z+4, r25	; 0x04
    }
    return 0;
}
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	08 95       	ret

00000940 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     940:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     942:	94 81       	ldd	r25, Z+4	; 0x04
     944:	99 23       	and	r25, r25
     946:	11 f0       	breq	.+4      	; 0x94c <FrecDec+0xc>
		self->frec--;
     948:	91 50       	subi	r25, 0x01	; 1
     94a:	94 83       	std	Z+4, r25	; 0x04
	}
	return 0;
}
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	08 95       	ret

00000952 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     960:	84 81       	ldd	r24, Z+4	; 0x04
     962:	81 11       	cpse	r24, r1
     964:	0b c0       	rjmp	.+22     	; 0x97c <FrecReset+0x2a>
	    self->frec = self->frec_old;
     966:	85 81       	ldd	r24, Z+5	; 0x05
     968:	84 83       	std	Z+4, r24	; 0x04
	    self->frec_old = self->frec;
	    self->frec = 0;
	    ASYNC(self->wbit, writeBit, 0);
    }
    return 0;
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	08 95       	ret
int FrecReset(Pulsegenerator *self, int arg) {
    if (self->frec == 0) {
	    self->frec = self->frec_old;
	    } 
	else {
	    self->frec_old = self->frec;
     97c:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     97e:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     980:	07 81       	ldd	r16, Z+7	; 0x07
     982:	10 85       	ldd	r17, Z+8	; 0x08
     984:	c1 2c       	mov	r12, r1
     986:	d1 2c       	mov	r13, r1
     988:	81 e4       	ldi	r24, 0x41	; 65
     98a:	e8 2e       	mov	r14, r24
     98c:	81 e1       	ldi	r24, 0x11	; 17
     98e:	f8 2e       	mov	r15, r24
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	a9 01       	movw	r20, r18
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	cb 01       	movw	r24, r22
     99c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
     9a0:	e4 cf       	rjmp	.-56     	; 0x96a <FrecReset+0x18>

000009a2 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     9a2:	e1 e6       	ldi	r30, 0x61	; 97
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     9aa:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     9ac:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     9ae:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     9b0:	e1 e8       	ldi	r30, 0x81	; 129
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8d 60       	ori	r24, 0x0D	; 13
     9b8:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     9ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     9c2:	ef e6       	ldi	r30, 0x6F	; 111
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	80 81       	ld	r24, Z
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     9cc:	82 ec       	ldi	r24, 0xC2	; 194
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     9d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     9d8:	08 95       	ret

000009da <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <initialize+0x6>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <initialize+0x8>
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	89 e4       	ldi	r24, 0x49	; 73
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	29 e2       	ldi	r18, 0x29	; 41
     9ec:	33 e0       	ldi	r19, 0x03	; 3
     9ee:	fc 01       	movw	r30, r24
     9f0:	70 97       	sbiw	r30, 0x10	; 16
     9f2:	91 83       	std	Z+1, r25	; 0x01
     9f4:	80 83       	st	Z, r24
     9f6:	40 96       	adiw	r24, 0x10	; 16
     9f8:	82 17       	cp	r24, r18
     9fa:	93 07       	cpc	r25, r19
     9fc:	c1 f7       	brne	.-16     	; 0x9ee <initialize+0x14>
     9fe:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <messages+0xe1>
     a02:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <messages+0xe0>
     a06:	e4 e8       	ldi	r30, 0x84	; 132
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	81 ea       	ldi	r24, 0xA1	; 161
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	8e eb       	ldi	r24, 0xBE	; 190
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	96 8f       	std	Z+30, r25	; 0x1e
     a18:	85 8f       	std	Z+29, r24	; 0x1d
     a1a:	ab ed       	ldi	r26, 0xDB	; 219
     a1c:	b1 e0       	ldi	r27, 0x01	; 1
     a1e:	b3 af       	std	Z+59, r27	; 0x3b
     a20:	a2 af       	std	Z+58, r26	; 0x3a
     a22:	1d 92       	st	X+, r1
     a24:	1c 92       	st	X, r1
     a26:	fa 83       	std	Y+2, r31	; 0x02
     a28:	e9 83       	std	Y+1, r30	; 0x01
     a2a:	e5 e8       	ldi	r30, 0x85	; 133
     a2c:	f3 e0       	ldi	r31, 0x03	; 3
     a2e:	fc 83       	std	Y+4, r31	; 0x04
     a30:	eb 83       	std	Y+3, r30	; 0x03
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	06 96       	adiw	r24, 0x06	; 6
     a38:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <setjmp>
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	e9 81       	ldd	r30, Y+1	; 0x01
     a42:	fa 81       	ldd	r31, Y+2	; 0x02
     a44:	97 8b       	std	Z+23, r25	; 0x17
     a46:	86 8b       	std	Z+22, r24	; 0x16
     a48:	91 8f       	std	Z+25, r25	; 0x19
     a4a:	80 8f       	std	Z+24, r24	; 0x18
     a4c:	80 e9       	ldi	r24, 0x90	; 144
     a4e:	90 e1       	ldi	r25, 0x10	; 16
     a50:	94 8f       	std	Z+28, r25	; 0x1c
     a52:	83 8f       	std	Z+27, r24	; 0x1b
     a54:	15 82       	std	Z+5, r1	; 0x05
     a56:	14 82       	std	Z+4, r1	; 0x04
     a58:	7d 96       	adiw	r30, 0x1d	; 29
     a5a:	fa 83       	std	Y+2, r31	; 0x02
     a5c:	e9 83       	std	Y+1, r30	; 0x01
     a5e:	eb 81       	ldd	r30, Y+3	; 0x03
     a60:	fc 81       	ldd	r31, Y+4	; 0x04
     a62:	e0 5a       	subi	r30, 0xA0	; 160
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	fc 83       	std	Y+4, r31	; 0x04
     a68:	eb 83       	std	Y+3, r30	; 0x03
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	88 5f       	subi	r24, 0xF8	; 248
     a70:	91 40       	sbci	r25, 0x01	; 1
     a72:	f9 f6       	brne	.-66     	; 0xa32 <initialize+0x58>
     a74:	ec e1       	ldi	r30, 0x1C	; 28
     a76:	f2 e0       	ldi	r31, 0x02	; 2
     a78:	11 82       	std	Z+1, r1	; 0x01
     a7a:	10 82       	st	Z, r1
     a7c:	15 82       	std	Z+5, r1	; 0x05
     a7e:	14 82       	std	Z+4, r1	; 0x04
     a80:	13 82       	std	Z+3, r1	; 0x03
     a82:	12 82       	std	Z+2, r1	; 0x02
     a84:	e1 e6       	ldi	r30, 0x61	; 97
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 e8       	ldi	r24, 0x80	; 128
     a8a:	80 83       	st	Z, r24
     a8c:	10 82       	st	Z, r1
     a8e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a92:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <dispatch>:
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <dispatch+0x6>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
     abe:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
     ac2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
     ac6:	06 96       	adiw	r24, 0x06	; 6
     ac8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <setjmp>
     acc:	89 2b       	or	r24, r25
     ace:	29 f0       	breq	.+10     	; 0xada <dispatch+0x2a>
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <current+0x1>
     ae2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <current>
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	06 96       	adiw	r24, 0x06	; 6
     aec:	0e 94 11 12 	call	0x2422	; 0x2422 <longjmp>

00000af0 <schedule>:
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <msgQ>
     afc:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <msgQ+0x1>
     b00:	30 97       	sbiw	r30, 0x00	; 0
     b02:	f1 f0       	breq	.+60     	; 0xb40 <schedule+0x50>
     b04:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
     b08:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	c1 f0       	breq	.+48     	; 0xb40 <schedule+0x50>
     b10:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <activeStack>
     b14:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <activeStack+0x1>
     b18:	aa 81       	ldd	r26, Y+2	; 0x02
     b1a:	bb 81       	ldd	r27, Y+3	; 0x03
     b1c:	10 97       	sbiw	r26, 0x00	; 0
     b1e:	a9 f0       	breq	.+42     	; 0xb4a <schedule+0x5a>
     b20:	46 81       	ldd	r20, Z+6	; 0x06
     b22:	57 81       	ldd	r21, Z+7	; 0x07
     b24:	60 85       	ldd	r22, Z+8	; 0x08
     b26:	71 85       	ldd	r23, Z+9	; 0x09
     b28:	16 96       	adiw	r26, 0x06	; 6
     b2a:	0d 91       	ld	r16, X+
     b2c:	1d 91       	ld	r17, X+
     b2e:	2d 91       	ld	r18, X+
     b30:	3c 91       	ld	r19, X
     b32:	19 97       	sbiw	r26, 0x09	; 9
     b34:	40 1b       	sub	r20, r16
     b36:	51 0b       	sbc	r21, r17
     b38:	62 0b       	sbc	r22, r18
     b3a:	73 0b       	sbc	r23, r19
     b3c:	77 fd       	sbrc	r23, 7
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <schedule+0x5a>
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret
     b4a:	fc 01       	movw	r30, r24
     b4c:	20 81       	ld	r18, Z
     b4e:	31 81       	ldd	r19, Z+1	; 0x01
     b50:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
     b54:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
     b58:	d1 83       	std	Z+1, r29	; 0x01
     b5a:	c0 83       	st	Z, r28
     b5c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
     b60:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	0c 94 58 05 	jmp	0xab0	; 0xab0 <dispatch>

00000b70 <dequeue.part.0>:
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b76:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b7a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	83 bf       	out	0x33, r24	; 51
     b82:	88 95       	sleep
     b84:	fd cf       	rjmp	.-6      	; 0xb80 <dequeue.part.0+0x10>

00000b86 <__vector_1>:
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
     ba8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     bac:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     bb0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bb4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bb8:	c9 01       	movw	r24, r18
     bba:	03 2e       	mov	r0, r19
     bbc:	00 0c       	add	r0, r0
     bbe:	aa 0b       	sbc	r26, r26
     bc0:	bb 0b       	sbc	r27, r27
     bc2:	dc 01       	movw	r26, r24
     bc4:	99 27       	eor	r25, r25
     bc6:	88 27       	eor	r24, r24
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	84 2b       	or	r24, r20
     bce:	95 2b       	or	r25, r21
     bd0:	a6 2b       	or	r26, r22
     bd2:	b7 2b       	or	r27, r23
     bd4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     bd8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     bdc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     be0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     be4:	b0 9b       	sbis	0x16, 0	; 22
     be6:	1b c0       	rjmp	.+54     	; 0xc1e <__vector_1+0x98>
     be8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bf0:	c9 01       	movw	r24, r18
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	09 2e       	mov	r0, r25
     bf6:	00 0c       	add	r0, r0
     bf8:	aa 0b       	sbc	r26, r26
     bfa:	bb 0b       	sbc	r27, r27
     bfc:	dc 01       	movw	r26, r24
     bfe:	99 27       	eor	r25, r25
     c00:	88 27       	eor	r24, r24
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	84 2b       	or	r24, r20
     c08:	95 2b       	or	r25, r21
     c0a:	a6 2b       	or	r26, r22
     c0c:	b7 2b       	or	r27, r23
     c0e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     c12:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     c16:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     c1a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     c1e:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable>
     c22:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1>
     c26:	30 97       	sbiw	r30, 0x00	; 0
     c28:	39 f0       	breq	.+14     	; 0xc38 <__vector_1+0xb2>
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable>
     c32:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1>
     c36:	09 95       	icall
     c38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <__vector_2>:
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	2f 93       	push	r18
     c6a:	3f 93       	push	r19
     c6c:	4f 93       	push	r20
     c6e:	5f 93       	push	r21
     c70:	6f 93       	push	r22
     c72:	7f 93       	push	r23
     c74:	8f 93       	push	r24
     c76:	9f 93       	push	r25
     c78:	af 93       	push	r26
     c7a:	bf 93       	push	r27
     c7c:	ef 93       	push	r30
     c7e:	ff 93       	push	r31
     c80:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     c84:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     c88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c90:	c9 01       	movw	r24, r18
     c92:	03 2e       	mov	r0, r19
     c94:	00 0c       	add	r0, r0
     c96:	aa 0b       	sbc	r26, r26
     c98:	bb 0b       	sbc	r27, r27
     c9a:	dc 01       	movw	r26, r24
     c9c:	99 27       	eor	r25, r25
     c9e:	88 27       	eor	r24, r24
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	84 2b       	or	r24, r20
     ca6:	95 2b       	or	r25, r21
     ca8:	a6 2b       	or	r26, r22
     caa:	b7 2b       	or	r27, r23
     cac:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     cb0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     cb4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     cb8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     cbc:	b0 9b       	sbis	0x16, 0	; 22
     cbe:	1b c0       	rjmp	.+54     	; 0xcf6 <__vector_2+0x98>
     cc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cc8:	c9 01       	movw	r24, r18
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	09 2e       	mov	r0, r25
     cce:	00 0c       	add	r0, r0
     cd0:	aa 0b       	sbc	r26, r26
     cd2:	bb 0b       	sbc	r27, r27
     cd4:	dc 01       	movw	r26, r24
     cd6:	99 27       	eor	r25, r25
     cd8:	88 27       	eor	r24, r24
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	84 2b       	or	r24, r20
     ce0:	95 2b       	or	r25, r21
     ce2:	a6 2b       	or	r26, r22
     ce4:	b7 2b       	or	r27, r23
     ce6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     cea:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     cee:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     cf2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     cf6:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x2>
     cfa:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x3>
     cfe:	30 97       	sbiw	r30, 0x00	; 0
     d00:	39 f0       	breq	.+14     	; 0xd10 <__vector_2+0xb2>
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x2>
     d0a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x3>
     d0e:	09 95       	icall
     d10:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
     d14:	ff 91       	pop	r31
     d16:	ef 91       	pop	r30
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	7f 91       	pop	r23
     d22:	6f 91       	pop	r22
     d24:	5f 91       	pop	r21
     d26:	4f 91       	pop	r20
     d28:	3f 91       	pop	r19
     d2a:	2f 91       	pop	r18
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <__vector_3>:
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
     d58:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     d5c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     d60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d68:	c9 01       	movw	r24, r18
     d6a:	03 2e       	mov	r0, r19
     d6c:	00 0c       	add	r0, r0
     d6e:	aa 0b       	sbc	r26, r26
     d70:	bb 0b       	sbc	r27, r27
     d72:	dc 01       	movw	r26, r24
     d74:	99 27       	eor	r25, r25
     d76:	88 27       	eor	r24, r24
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	84 2b       	or	r24, r20
     d7e:	95 2b       	or	r25, r21
     d80:	a6 2b       	or	r26, r22
     d82:	b7 2b       	or	r27, r23
     d84:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     d88:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     d8c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     d90:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     d94:	b0 9b       	sbis	0x16, 0	; 22
     d96:	1b c0       	rjmp	.+54     	; 0xdce <__vector_3+0x98>
     d98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     da0:	c9 01       	movw	r24, r18
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	09 2e       	mov	r0, r25
     da6:	00 0c       	add	r0, r0
     da8:	aa 0b       	sbc	r26, r26
     daa:	bb 0b       	sbc	r27, r27
     dac:	dc 01       	movw	r26, r24
     dae:	99 27       	eor	r25, r25
     db0:	88 27       	eor	r24, r24
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	84 2b       	or	r24, r20
     db8:	95 2b       	or	r25, r21
     dba:	a6 2b       	or	r26, r22
     dbc:	b7 2b       	or	r27, r23
     dbe:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     dc2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     dc6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     dca:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     dce:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x4>
     dd2:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x5>
     dd6:	30 97       	sbiw	r30, 0x00	; 0
     dd8:	39 f0       	breq	.+14     	; 0xde8 <__vector_3+0xb2>
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x4>
     de2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x5>
     de6:	09 95       	icall
     de8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <__vector_4>:
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
     e30:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     e34:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     e38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e40:	c9 01       	movw	r24, r18
     e42:	03 2e       	mov	r0, r19
     e44:	00 0c       	add	r0, r0
     e46:	aa 0b       	sbc	r26, r26
     e48:	bb 0b       	sbc	r27, r27
     e4a:	dc 01       	movw	r26, r24
     e4c:	99 27       	eor	r25, r25
     e4e:	88 27       	eor	r24, r24
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	84 2b       	or	r24, r20
     e56:	95 2b       	or	r25, r21
     e58:	a6 2b       	or	r26, r22
     e5a:	b7 2b       	or	r27, r23
     e5c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e60:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e64:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     e68:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     e6c:	b0 9b       	sbis	0x16, 0	; 22
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <__vector_4+0x98>
     e70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e78:	c9 01       	movw	r24, r18
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	09 2e       	mov	r0, r25
     e7e:	00 0c       	add	r0, r0
     e80:	aa 0b       	sbc	r26, r26
     e82:	bb 0b       	sbc	r27, r27
     e84:	dc 01       	movw	r26, r24
     e86:	99 27       	eor	r25, r25
     e88:	88 27       	eor	r24, r24
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	84 2b       	or	r24, r20
     e90:	95 2b       	or	r25, r21
     e92:	a6 2b       	or	r26, r22
     e94:	b7 2b       	or	r27, r23
     e96:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     e9a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     e9e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     ea2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     ea6:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x6>
     eaa:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x7>
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	39 f0       	breq	.+14     	; 0xec0 <__vector_4+0xb2>
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x6>
     eba:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x7>
     ebe:	09 95       	icall
     ec0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <__vector_5>:
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     f0c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     f10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f18:	c9 01       	movw	r24, r18
     f1a:	03 2e       	mov	r0, r19
     f1c:	00 0c       	add	r0, r0
     f1e:	aa 0b       	sbc	r26, r26
     f20:	bb 0b       	sbc	r27, r27
     f22:	dc 01       	movw	r26, r24
     f24:	99 27       	eor	r25, r25
     f26:	88 27       	eor	r24, r24
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	84 2b       	or	r24, r20
     f2e:	95 2b       	or	r25, r21
     f30:	a6 2b       	or	r26, r22
     f32:	b7 2b       	or	r27, r23
     f34:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f38:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f3c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f40:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f44:	b0 9b       	sbis	0x16, 0	; 22
     f46:	1b c0       	rjmp	.+54     	; 0xf7e <__vector_5+0x98>
     f48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f50:	c9 01       	movw	r24, r18
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	09 2e       	mov	r0, r25
     f56:	00 0c       	add	r0, r0
     f58:	aa 0b       	sbc	r26, r26
     f5a:	bb 0b       	sbc	r27, r27
     f5c:	dc 01       	movw	r26, r24
     f5e:	99 27       	eor	r25, r25
     f60:	88 27       	eor	r24, r24
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	84 2b       	or	r24, r20
     f68:	95 2b       	or	r25, r21
     f6a:	a6 2b       	or	r26, r22
     f6c:	b7 2b       	or	r27, r23
     f6e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
     f72:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
     f76:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
     f7a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
     f7e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x8>
     f82:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x9>
     f86:	30 97       	sbiw	r30, 0x00	; 0
     f88:	39 f0       	breq	.+14     	; 0xf98 <__vector_5+0xb2>
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x8>
     f92:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x9>
     f96:	09 95       	icall
     f98:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <__vector_10>:
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	2f 93       	push	r18
     fca:	3f 93       	push	r19
     fcc:	4f 93       	push	r20
     fce:	5f 93       	push	r21
     fd0:	6f 93       	push	r22
     fd2:	7f 93       	push	r23
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
     fdc:	ef 93       	push	r30
     fde:	ff 93       	push	r31
     fe0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
     fe4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
     fe8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ff0:	c9 01       	movw	r24, r18
     ff2:	03 2e       	mov	r0, r19
     ff4:	00 0c       	add	r0, r0
     ff6:	aa 0b       	sbc	r26, r26
     ff8:	bb 0b       	sbc	r27, r27
     ffa:	dc 01       	movw	r26, r24
     ffc:	99 27       	eor	r25, r25
     ffe:	88 27       	eor	r24, r24
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	84 2b       	or	r24, r20
    1006:	95 2b       	or	r25, r21
    1008:	a6 2b       	or	r26, r22
    100a:	b7 2b       	or	r27, r23
    100c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1010:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1014:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1018:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    101c:	b0 9b       	sbis	0x16, 0	; 22
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <__vector_10+0x98>
    1020:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1024:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1028:	c9 01       	movw	r24, r18
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	09 2e       	mov	r0, r25
    102e:	00 0c       	add	r0, r0
    1030:	aa 0b       	sbc	r26, r26
    1032:	bb 0b       	sbc	r27, r27
    1034:	dc 01       	movw	r26, r24
    1036:	99 27       	eor	r25, r25
    1038:	88 27       	eor	r24, r24
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	84 2b       	or	r24, r20
    1040:	95 2b       	or	r25, r21
    1042:	a6 2b       	or	r26, r22
    1044:	b7 2b       	or	r27, r23
    1046:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    104a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    104e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1052:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1056:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xa>
    105a:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xb>
    105e:	30 97       	sbiw	r30, 0x00	; 0
    1060:	39 f0       	breq	.+14     	; 0x1070 <__vector_10+0xb2>
    1062:	65 e0       	ldi	r22, 0x05	; 5
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xa>
    106a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xb>
    106e:	09 95       	icall
    1070:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

00001096 <__vector_11>:
    1096:	1f 92       	push	r1
    1098:	0f 92       	push	r0
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1
    10a0:	2f 93       	push	r18
    10a2:	3f 93       	push	r19
    10a4:	4f 93       	push	r20
    10a6:	5f 93       	push	r21
    10a8:	6f 93       	push	r22
    10aa:	7f 93       	push	r23
    10ac:	8f 93       	push	r24
    10ae:	9f 93       	push	r25
    10b0:	af 93       	push	r26
    10b2:	bf 93       	push	r27
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    10bc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    10c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10c8:	c9 01       	movw	r24, r18
    10ca:	03 2e       	mov	r0, r19
    10cc:	00 0c       	add	r0, r0
    10ce:	aa 0b       	sbc	r26, r26
    10d0:	bb 0b       	sbc	r27, r27
    10d2:	dc 01       	movw	r26, r24
    10d4:	99 27       	eor	r25, r25
    10d6:	88 27       	eor	r24, r24
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	84 2b       	or	r24, r20
    10de:	95 2b       	or	r25, r21
    10e0:	a6 2b       	or	r26, r22
    10e2:	b7 2b       	or	r27, r23
    10e4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    10e8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    10ec:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    10f0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    10f4:	b0 9b       	sbis	0x16, 0	; 22
    10f6:	1b c0       	rjmp	.+54     	; 0x112e <__vector_11+0x98>
    10f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1100:	c9 01       	movw	r24, r18
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	09 2e       	mov	r0, r25
    1106:	00 0c       	add	r0, r0
    1108:	aa 0b       	sbc	r26, r26
    110a:	bb 0b       	sbc	r27, r27
    110c:	dc 01       	movw	r26, r24
    110e:	99 27       	eor	r25, r25
    1110:	88 27       	eor	r24, r24
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	84 2b       	or	r24, r20
    1118:	95 2b       	or	r25, r21
    111a:	a6 2b       	or	r26, r22
    111c:	b7 2b       	or	r27, r23
    111e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1122:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1126:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    112a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    112e:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xc>
    1132:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xd>
    1136:	30 97       	sbiw	r30, 0x00	; 0
    1138:	39 f0       	breq	.+14     	; 0x1148 <__vector_11+0xb2>
    113a:	66 e0       	ldi	r22, 0x06	; 6
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xc>
    1142:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xd>
    1146:	09 95       	icall
    1148:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	bf 91       	pop	r27
    1152:	af 91       	pop	r26
    1154:	9f 91       	pop	r25
    1156:	8f 91       	pop	r24
    1158:	7f 91       	pop	r23
    115a:	6f 91       	pop	r22
    115c:	5f 91       	pop	r21
    115e:	4f 91       	pop	r20
    1160:	3f 91       	pop	r19
    1162:	2f 91       	pop	r18
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_12>:
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
    1190:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1194:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1198:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    119c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11a0:	c9 01       	movw	r24, r18
    11a2:	03 2e       	mov	r0, r19
    11a4:	00 0c       	add	r0, r0
    11a6:	aa 0b       	sbc	r26, r26
    11a8:	bb 0b       	sbc	r27, r27
    11aa:	dc 01       	movw	r26, r24
    11ac:	99 27       	eor	r25, r25
    11ae:	88 27       	eor	r24, r24
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	84 2b       	or	r24, r20
    11b6:	95 2b       	or	r25, r21
    11b8:	a6 2b       	or	r26, r22
    11ba:	b7 2b       	or	r27, r23
    11bc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    11c0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    11c4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    11c8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    11cc:	b0 9b       	sbis	0x16, 0	; 22
    11ce:	1b c0       	rjmp	.+54     	; 0x1206 <__vector_12+0x98>
    11d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d8:	c9 01       	movw	r24, r18
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	09 2e       	mov	r0, r25
    11de:	00 0c       	add	r0, r0
    11e0:	aa 0b       	sbc	r26, r26
    11e2:	bb 0b       	sbc	r27, r27
    11e4:	dc 01       	movw	r26, r24
    11e6:	99 27       	eor	r25, r25
    11e8:	88 27       	eor	r24, r24
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	84 2b       	or	r24, r20
    11f0:	95 2b       	or	r25, r21
    11f2:	a6 2b       	or	r26, r22
    11f4:	b7 2b       	or	r27, r23
    11f6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    11fa:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    11fe:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1202:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1206:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0xe>
    120a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0xf>
    120e:	30 97       	sbiw	r30, 0x00	; 0
    1210:	39 f0       	breq	.+14     	; 0x1220 <__vector_12+0xb2>
    1212:	67 e0       	ldi	r22, 0x07	; 7
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0xe>
    121a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0xf>
    121e:	09 95       	icall
    1220:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <__vector_13>:
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	2f 93       	push	r18
    1252:	3f 93       	push	r19
    1254:	4f 93       	push	r20
    1256:	5f 93       	push	r21
    1258:	6f 93       	push	r22
    125a:	7f 93       	push	r23
    125c:	8f 93       	push	r24
    125e:	9f 93       	push	r25
    1260:	af 93       	push	r26
    1262:	bf 93       	push	r27
    1264:	ef 93       	push	r30
    1266:	ff 93       	push	r31
    1268:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    126c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1270:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1274:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1278:	c9 01       	movw	r24, r18
    127a:	03 2e       	mov	r0, r19
    127c:	00 0c       	add	r0, r0
    127e:	aa 0b       	sbc	r26, r26
    1280:	bb 0b       	sbc	r27, r27
    1282:	dc 01       	movw	r26, r24
    1284:	99 27       	eor	r25, r25
    1286:	88 27       	eor	r24, r24
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	84 2b       	or	r24, r20
    128e:	95 2b       	or	r25, r21
    1290:	a6 2b       	or	r26, r22
    1292:	b7 2b       	or	r27, r23
    1294:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1298:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    129c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    12a0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    12a4:	b0 9b       	sbis	0x16, 0	; 22
    12a6:	1b c0       	rjmp	.+54     	; 0x12de <__vector_13+0x98>
    12a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12b0:	c9 01       	movw	r24, r18
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	09 2e       	mov	r0, r25
    12b6:	00 0c       	add	r0, r0
    12b8:	aa 0b       	sbc	r26, r26
    12ba:	bb 0b       	sbc	r27, r27
    12bc:	dc 01       	movw	r26, r24
    12be:	99 27       	eor	r25, r25
    12c0:	88 27       	eor	r24, r24
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	84 2b       	or	r24, r20
    12c8:	95 2b       	or	r25, r21
    12ca:	a6 2b       	or	r26, r22
    12cc:	b7 2b       	or	r27, r23
    12ce:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    12d2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    12d6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    12da:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    12de:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x10>
    12e2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x11>
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	39 f0       	breq	.+14     	; 0x12f8 <__vector_13+0xb2>
    12ea:	68 e0       	ldi	r22, 0x08	; 8
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x10>
    12f2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x11>
    12f6:	09 95       	icall
    12f8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    12fc:	ff 91       	pop	r31
    12fe:	ef 91       	pop	r30
    1300:	bf 91       	pop	r27
    1302:	af 91       	pop	r26
    1304:	9f 91       	pop	r25
    1306:	8f 91       	pop	r24
    1308:	7f 91       	pop	r23
    130a:	6f 91       	pop	r22
    130c:	5f 91       	pop	r21
    130e:	4f 91       	pop	r20
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <__vector_14>:
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
    1340:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1344:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1348:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    134c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1350:	c9 01       	movw	r24, r18
    1352:	03 2e       	mov	r0, r19
    1354:	00 0c       	add	r0, r0
    1356:	aa 0b       	sbc	r26, r26
    1358:	bb 0b       	sbc	r27, r27
    135a:	dc 01       	movw	r26, r24
    135c:	99 27       	eor	r25, r25
    135e:	88 27       	eor	r24, r24
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	84 2b       	or	r24, r20
    1366:	95 2b       	or	r25, r21
    1368:	a6 2b       	or	r26, r22
    136a:	b7 2b       	or	r27, r23
    136c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1370:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1374:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1378:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    137c:	b0 9b       	sbis	0x16, 0	; 22
    137e:	1b c0       	rjmp	.+54     	; 0x13b6 <__vector_14+0x98>
    1380:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1384:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1388:	c9 01       	movw	r24, r18
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	09 2e       	mov	r0, r25
    138e:	00 0c       	add	r0, r0
    1390:	aa 0b       	sbc	r26, r26
    1392:	bb 0b       	sbc	r27, r27
    1394:	dc 01       	movw	r26, r24
    1396:	99 27       	eor	r25, r25
    1398:	88 27       	eor	r24, r24
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	84 2b       	or	r24, r20
    13a0:	95 2b       	or	r25, r21
    13a2:	a6 2b       	or	r26, r22
    13a4:	b7 2b       	or	r27, r23
    13a6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    13aa:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    13ae:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    13b2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    13b6:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x12>
    13ba:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x13>
    13be:	30 97       	sbiw	r30, 0x00	; 0
    13c0:	39 f0       	breq	.+14     	; 0x13d0 <__vector_14+0xb2>
    13c2:	69 e0       	ldi	r22, 0x09	; 9
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x12>
    13ca:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x13>
    13ce:	09 95       	icall
    13d0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <__vector_15>:
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
    1418:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    141c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1420:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1424:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1428:	c9 01       	movw	r24, r18
    142a:	03 2e       	mov	r0, r19
    142c:	00 0c       	add	r0, r0
    142e:	aa 0b       	sbc	r26, r26
    1430:	bb 0b       	sbc	r27, r27
    1432:	dc 01       	movw	r26, r24
    1434:	99 27       	eor	r25, r25
    1436:	88 27       	eor	r24, r24
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	84 2b       	or	r24, r20
    143e:	95 2b       	or	r25, r21
    1440:	a6 2b       	or	r26, r22
    1442:	b7 2b       	or	r27, r23
    1444:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1448:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    144c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1450:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1454:	b0 9b       	sbis	0x16, 0	; 22
    1456:	1b c0       	rjmp	.+54     	; 0x148e <__vector_15+0x98>
    1458:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    145c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1460:	c9 01       	movw	r24, r18
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	09 2e       	mov	r0, r25
    1466:	00 0c       	add	r0, r0
    1468:	aa 0b       	sbc	r26, r26
    146a:	bb 0b       	sbc	r27, r27
    146c:	dc 01       	movw	r26, r24
    146e:	99 27       	eor	r25, r25
    1470:	88 27       	eor	r24, r24
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	84 2b       	or	r24, r20
    1478:	95 2b       	or	r25, r21
    147a:	a6 2b       	or	r26, r22
    147c:	b7 2b       	or	r27, r23
    147e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1482:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1486:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    148a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    148e:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x14>
    1492:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x15>
    1496:	30 97       	sbiw	r30, 0x00	; 0
    1498:	39 f0       	breq	.+14     	; 0x14a8 <__vector_15+0xb2>
    149a:	6a e0       	ldi	r22, 0x0A	; 10
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x14>
    14a2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x15>
    14a6:	09 95       	icall
    14a8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_16>:
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
    14f0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    14f4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    14f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1500:	c9 01       	movw	r24, r18
    1502:	03 2e       	mov	r0, r19
    1504:	00 0c       	add	r0, r0
    1506:	aa 0b       	sbc	r26, r26
    1508:	bb 0b       	sbc	r27, r27
    150a:	dc 01       	movw	r26, r24
    150c:	99 27       	eor	r25, r25
    150e:	88 27       	eor	r24, r24
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	84 2b       	or	r24, r20
    1516:	95 2b       	or	r25, r21
    1518:	a6 2b       	or	r26, r22
    151a:	b7 2b       	or	r27, r23
    151c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1520:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1524:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1528:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    152c:	b0 9b       	sbis	0x16, 0	; 22
    152e:	1b c0       	rjmp	.+54     	; 0x1566 <__vector_16+0x98>
    1530:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1534:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1538:	c9 01       	movw	r24, r18
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	09 2e       	mov	r0, r25
    153e:	00 0c       	add	r0, r0
    1540:	aa 0b       	sbc	r26, r26
    1542:	bb 0b       	sbc	r27, r27
    1544:	dc 01       	movw	r26, r24
    1546:	99 27       	eor	r25, r25
    1548:	88 27       	eor	r24, r24
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	84 2b       	or	r24, r20
    1550:	95 2b       	or	r25, r21
    1552:	a6 2b       	or	r26, r22
    1554:	b7 2b       	or	r27, r23
    1556:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    155a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    155e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1562:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1566:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x16>
    156a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x17>
    156e:	30 97       	sbiw	r30, 0x00	; 0
    1570:	39 f0       	breq	.+14     	; 0x1580 <__vector_16+0xb2>
    1572:	6b e0       	ldi	r22, 0x0B	; 11
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x16>
    157a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x17>
    157e:	09 95       	icall
    1580:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_17>:
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
    15c8:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    15cc:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    15d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15d8:	c9 01       	movw	r24, r18
    15da:	03 2e       	mov	r0, r19
    15dc:	00 0c       	add	r0, r0
    15de:	aa 0b       	sbc	r26, r26
    15e0:	bb 0b       	sbc	r27, r27
    15e2:	dc 01       	movw	r26, r24
    15e4:	99 27       	eor	r25, r25
    15e6:	88 27       	eor	r24, r24
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	84 2b       	or	r24, r20
    15ee:	95 2b       	or	r25, r21
    15f0:	a6 2b       	or	r26, r22
    15f2:	b7 2b       	or	r27, r23
    15f4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    15f8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    15fc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1600:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1604:	b0 9b       	sbis	0x16, 0	; 22
    1606:	1b c0       	rjmp	.+54     	; 0x163e <__vector_17+0x98>
    1608:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    160c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1610:	c9 01       	movw	r24, r18
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	09 2e       	mov	r0, r25
    1616:	00 0c       	add	r0, r0
    1618:	aa 0b       	sbc	r26, r26
    161a:	bb 0b       	sbc	r27, r27
    161c:	dc 01       	movw	r26, r24
    161e:	99 27       	eor	r25, r25
    1620:	88 27       	eor	r24, r24
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	84 2b       	or	r24, r20
    1628:	95 2b       	or	r25, r21
    162a:	a6 2b       	or	r26, r22
    162c:	b7 2b       	or	r27, r23
    162e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1632:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1636:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    163a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    163e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x18>
    1642:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x19>
    1646:	30 97       	sbiw	r30, 0x00	; 0
    1648:	39 f0       	breq	.+14     	; 0x1658 <__vector_17+0xb2>
    164a:	6c e0       	ldi	r22, 0x0C	; 12
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x18>
    1652:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x19>
    1656:	09 95       	icall
    1658:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    165c:	ff 91       	pop	r31
    165e:	ef 91       	pop	r30
    1660:	bf 91       	pop	r27
    1662:	af 91       	pop	r26
    1664:	9f 91       	pop	r25
    1666:	8f 91       	pop	r24
    1668:	7f 91       	pop	r23
    166a:	6f 91       	pop	r22
    166c:	5f 91       	pop	r21
    166e:	4f 91       	pop	r20
    1670:	3f 91       	pop	r19
    1672:	2f 91       	pop	r18
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	0f 90       	pop	r0
    167a:	1f 90       	pop	r1
    167c:	18 95       	reti

0000167e <__vector_18>:
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
    16a0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    16a4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    16a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16b0:	c9 01       	movw	r24, r18
    16b2:	03 2e       	mov	r0, r19
    16b4:	00 0c       	add	r0, r0
    16b6:	aa 0b       	sbc	r26, r26
    16b8:	bb 0b       	sbc	r27, r27
    16ba:	dc 01       	movw	r26, r24
    16bc:	99 27       	eor	r25, r25
    16be:	88 27       	eor	r24, r24
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	84 2b       	or	r24, r20
    16c6:	95 2b       	or	r25, r21
    16c8:	a6 2b       	or	r26, r22
    16ca:	b7 2b       	or	r27, r23
    16cc:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    16d0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    16d4:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    16d8:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    16dc:	b0 9b       	sbis	0x16, 0	; 22
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <__vector_18+0x98>
    16e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e8:	c9 01       	movw	r24, r18
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	09 2e       	mov	r0, r25
    16ee:	00 0c       	add	r0, r0
    16f0:	aa 0b       	sbc	r26, r26
    16f2:	bb 0b       	sbc	r27, r27
    16f4:	dc 01       	movw	r26, r24
    16f6:	99 27       	eor	r25, r25
    16f8:	88 27       	eor	r24, r24
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	84 2b       	or	r24, r20
    1700:	95 2b       	or	r25, r21
    1702:	a6 2b       	or	r26, r22
    1704:	b7 2b       	or	r27, r23
    1706:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    170a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    170e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1712:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1716:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1a>
    171a:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1b>
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	39 f0       	breq	.+14     	; 0x1730 <__vector_18+0xb2>
    1722:	6d e0       	ldi	r22, 0x0D	; 13
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1a>
    172a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1b>
    172e:	09 95       	icall
    1730:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <__vector_19>:
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    177c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1780:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1784:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1788:	c9 01       	movw	r24, r18
    178a:	03 2e       	mov	r0, r19
    178c:	00 0c       	add	r0, r0
    178e:	aa 0b       	sbc	r26, r26
    1790:	bb 0b       	sbc	r27, r27
    1792:	dc 01       	movw	r26, r24
    1794:	99 27       	eor	r25, r25
    1796:	88 27       	eor	r24, r24
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	84 2b       	or	r24, r20
    179e:	95 2b       	or	r25, r21
    17a0:	a6 2b       	or	r26, r22
    17a2:	b7 2b       	or	r27, r23
    17a4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    17a8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    17ac:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    17b0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    17b4:	b0 9b       	sbis	0x16, 0	; 22
    17b6:	1b c0       	rjmp	.+54     	; 0x17ee <__vector_19+0x98>
    17b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17c0:	c9 01       	movw	r24, r18
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	09 2e       	mov	r0, r25
    17c6:	00 0c       	add	r0, r0
    17c8:	aa 0b       	sbc	r26, r26
    17ca:	bb 0b       	sbc	r27, r27
    17cc:	dc 01       	movw	r26, r24
    17ce:	99 27       	eor	r25, r25
    17d0:	88 27       	eor	r24, r24
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	84 2b       	or	r24, r20
    17d8:	95 2b       	or	r25, r21
    17da:	a6 2b       	or	r26, r22
    17dc:	b7 2b       	or	r27, r23
    17de:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    17e2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    17e6:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    17ea:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    17ee:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1c>
    17f2:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1d>
    17f6:	30 97       	sbiw	r30, 0x00	; 0
    17f8:	39 f0       	breq	.+14     	; 0x1808 <__vector_19+0xb2>
    17fa:	6e e0       	ldi	r22, 0x0E	; 14
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1c>
    1802:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1d>
    1806:	09 95       	icall
    1808:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    180c:	ff 91       	pop	r31
    180e:	ef 91       	pop	r30
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	7f 91       	pop	r23
    181a:	6f 91       	pop	r22
    181c:	5f 91       	pop	r21
    181e:	4f 91       	pop	r20
    1820:	3f 91       	pop	r19
    1822:	2f 91       	pop	r18
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <__vector_20>:
    182e:	1f 92       	push	r1
    1830:	0f 92       	push	r0
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	0f 92       	push	r0
    1836:	11 24       	eor	r1, r1
    1838:	2f 93       	push	r18
    183a:	3f 93       	push	r19
    183c:	4f 93       	push	r20
    183e:	5f 93       	push	r21
    1840:	6f 93       	push	r22
    1842:	7f 93       	push	r23
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	af 93       	push	r26
    184a:	bf 93       	push	r27
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
    1850:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1854:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1858:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    185c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1860:	c9 01       	movw	r24, r18
    1862:	03 2e       	mov	r0, r19
    1864:	00 0c       	add	r0, r0
    1866:	aa 0b       	sbc	r26, r26
    1868:	bb 0b       	sbc	r27, r27
    186a:	dc 01       	movw	r26, r24
    186c:	99 27       	eor	r25, r25
    186e:	88 27       	eor	r24, r24
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	84 2b       	or	r24, r20
    1876:	95 2b       	or	r25, r21
    1878:	a6 2b       	or	r26, r22
    187a:	b7 2b       	or	r27, r23
    187c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1880:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1884:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1888:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    188c:	b0 9b       	sbis	0x16, 0	; 22
    188e:	1b c0       	rjmp	.+54     	; 0x18c6 <__vector_20+0x98>
    1890:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1894:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1898:	c9 01       	movw	r24, r18
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	09 2e       	mov	r0, r25
    189e:	00 0c       	add	r0, r0
    18a0:	aa 0b       	sbc	r26, r26
    18a2:	bb 0b       	sbc	r27, r27
    18a4:	dc 01       	movw	r26, r24
    18a6:	99 27       	eor	r25, r25
    18a8:	88 27       	eor	r24, r24
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	84 2b       	or	r24, r20
    18b0:	95 2b       	or	r25, r21
    18b2:	a6 2b       	or	r26, r22
    18b4:	b7 2b       	or	r27, r23
    18b6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    18ba:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    18be:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    18c2:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    18c6:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x1e>
    18ca:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x1f>
    18ce:	30 97       	sbiw	r30, 0x00	; 0
    18d0:	39 f0       	breq	.+14     	; 0x18e0 <__vector_20+0xb2>
    18d2:	6f e0       	ldi	r22, 0x0F	; 15
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x1e>
    18da:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x1f>
    18de:	09 95       	icall
    18e0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	bf 91       	pop	r27
    18ea:	af 91       	pop	r26
    18ec:	9f 91       	pop	r25
    18ee:	8f 91       	pop	r24
    18f0:	7f 91       	pop	r23
    18f2:	6f 91       	pop	r22
    18f4:	5f 91       	pop	r21
    18f6:	4f 91       	pop	r20
    18f8:	3f 91       	pop	r19
    18fa:	2f 91       	pop	r18
    18fc:	0f 90       	pop	r0
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <__vector_21>:
    1906:	1f 92       	push	r1
    1908:	0f 92       	push	r0
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	0f 92       	push	r0
    190e:	11 24       	eor	r1, r1
    1910:	2f 93       	push	r18
    1912:	3f 93       	push	r19
    1914:	4f 93       	push	r20
    1916:	5f 93       	push	r21
    1918:	6f 93       	push	r22
    191a:	7f 93       	push	r23
    191c:	8f 93       	push	r24
    191e:	9f 93       	push	r25
    1920:	af 93       	push	r26
    1922:	bf 93       	push	r27
    1924:	ef 93       	push	r30
    1926:	ff 93       	push	r31
    1928:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    192c:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1930:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1934:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1938:	c9 01       	movw	r24, r18
    193a:	03 2e       	mov	r0, r19
    193c:	00 0c       	add	r0, r0
    193e:	aa 0b       	sbc	r26, r26
    1940:	bb 0b       	sbc	r27, r27
    1942:	dc 01       	movw	r26, r24
    1944:	99 27       	eor	r25, r25
    1946:	88 27       	eor	r24, r24
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	84 2b       	or	r24, r20
    194e:	95 2b       	or	r25, r21
    1950:	a6 2b       	or	r26, r22
    1952:	b7 2b       	or	r27, r23
    1954:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1958:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    195c:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1960:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1964:	b0 9b       	sbis	0x16, 0	; 22
    1966:	1b c0       	rjmp	.+54     	; 0x199e <__vector_21+0x98>
    1968:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    196c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1970:	c9 01       	movw	r24, r18
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	09 2e       	mov	r0, r25
    1976:	00 0c       	add	r0, r0
    1978:	aa 0b       	sbc	r26, r26
    197a:	bb 0b       	sbc	r27, r27
    197c:	dc 01       	movw	r26, r24
    197e:	99 27       	eor	r25, r25
    1980:	88 27       	eor	r24, r24
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	84 2b       	or	r24, r20
    1988:	95 2b       	or	r25, r21
    198a:	a6 2b       	or	r26, r22
    198c:	b7 2b       	or	r27, r23
    198e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1992:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1996:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    199a:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    199e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x20>
    19a2:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x21>
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	39 f0       	breq	.+14     	; 0x19b8 <__vector_21+0xb2>
    19aa:	60 e1       	ldi	r22, 0x10	; 16
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x20>
    19b2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x21>
    19b6:	09 95       	icall
    19b8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    19bc:	ff 91       	pop	r31
    19be:	ef 91       	pop	r30
    19c0:	bf 91       	pop	r27
    19c2:	af 91       	pop	r26
    19c4:	9f 91       	pop	r25
    19c6:	8f 91       	pop	r24
    19c8:	7f 91       	pop	r23
    19ca:	6f 91       	pop	r22
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <__vector_22>:
    19de:	1f 92       	push	r1
    19e0:	0f 92       	push	r0
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	0f 92       	push	r0
    19e6:	11 24       	eor	r1, r1
    19e8:	2f 93       	push	r18
    19ea:	3f 93       	push	r19
    19ec:	4f 93       	push	r20
    19ee:	5f 93       	push	r21
    19f0:	6f 93       	push	r22
    19f2:	7f 93       	push	r23
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
    19f8:	af 93       	push	r26
    19fa:	bf 93       	push	r27
    19fc:	ef 93       	push	r30
    19fe:	ff 93       	push	r31
    1a00:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
    1a04:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <__data_end+0x1>
    1a08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a10:	c9 01       	movw	r24, r18
    1a12:	03 2e       	mov	r0, r19
    1a14:	00 0c       	add	r0, r0
    1a16:	aa 0b       	sbc	r26, r26
    1a18:	bb 0b       	sbc	r27, r27
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	99 27       	eor	r25, r25
    1a1e:	88 27       	eor	r24, r24
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	84 2b       	or	r24, r20
    1a26:	95 2b       	or	r25, r21
    1a28:	a6 2b       	or	r26, r22
    1a2a:	b7 2b       	or	r27, r23
    1a2c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a30:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a34:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a38:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a3c:	b0 9b       	sbis	0x16, 0	; 22
    1a3e:	1b c0       	rjmp	.+54     	; 0x1a76 <__vector_22+0x98>
    1a40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a48:	c9 01       	movw	r24, r18
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	09 2e       	mov	r0, r25
    1a4e:	00 0c       	add	r0, r0
    1a50:	aa 0b       	sbc	r26, r26
    1a52:	bb 0b       	sbc	r27, r27
    1a54:	dc 01       	movw	r26, r24
    1a56:	99 27       	eor	r25, r25
    1a58:	88 27       	eor	r24, r24
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	84 2b       	or	r24, r20
    1a60:	95 2b       	or	r25, r21
    1a62:	a6 2b       	or	r26, r22
    1a64:	b7 2b       	or	r27, r23
    1a66:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timestamp>
    1a6a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timestamp+0x1>
    1a6e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <timestamp+0x2>
    1a72:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <timestamp+0x3>
    1a76:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x22>
    1a7a:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x23>
    1a7e:	30 97       	sbiw	r30, 0x00	; 0
    1a80:	39 f0       	breq	.+14     	; 0x1a90 <__vector_22+0xb2>
    1a82:	61 e1       	ldi	r22, 0x11	; 17
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x22>
    1a8a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x23>
    1a8e:	09 95       	icall
    1a90:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <__vector_9>:
    1ab6:	1f 92       	push	r1
    1ab8:	0f 92       	push	r0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	0f 92       	push	r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	2f 93       	push	r18
    1ac2:	3f 93       	push	r19
    1ac4:	4f 93       	push	r20
    1ac6:	5f 93       	push	r21
    1ac8:	6f 93       	push	r22
    1aca:	7f 93       	push	r23
    1acc:	8f 93       	push	r24
    1ace:	9f 93       	push	r25
    1ad0:	ef 93       	push	r30
    1ad2:	ff 93       	push	r31
    1ad4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1ad8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
    1ae2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
    1ae6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <timerQ>
    1aea:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <timerQ+0x1>
    1aee:	30 97       	sbiw	r30, 0x00	; 0
    1af0:	39 f0       	breq	.+14     	; 0x1b00 <__vector_9+0x4a>
    1af2:	42 81       	ldd	r20, Z+2	; 0x02
    1af4:	53 81       	ldd	r21, Z+3	; 0x03
    1af6:	64 81       	ldd	r22, Z+4	; 0x04
    1af8:	75 81       	ldd	r23, Z+5	; 0x05
    1afa:	86 17       	cp	r24, r22
    1afc:	97 07       	cpc	r25, r23
    1afe:	a1 f0       	breq	.+40     	; 0x1b28 <__vector_9+0x72>
    1b00:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b04:	8d 7f       	andi	r24, 0xFD	; 253
    1b06:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	7f 91       	pop	r23
    1b14:	6f 91       	pop	r22
    1b16:	5f 91       	pop	r21
    1b18:	4f 91       	pop	r20
    1b1a:	3f 91       	pop	r19
    1b1c:	2f 91       	pop	r18
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti
    1b28:	ca 01       	movw	r24, r20
    1b2a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b2e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b32:	42 1b       	sub	r20, r18
    1b34:	53 0b       	sbc	r21, r19
    1b36:	41 30       	cpi	r20, 0x01	; 1
    1b38:	51 05       	cpc	r21, r1
    1b3a:	51 f0       	breq	.+20     	; 0x1b50 <__vector_9+0x9a>
    1b3c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b40:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b44:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b48:	82 60       	ori	r24, 0x02	; 2
    1b4a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1b4e:	dd cf       	rjmp	.-70     	; 0x1b0a <__vector_9+0x54>
    1b50:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b54:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	f0 cf       	rjmp	.-32     	; 0x1b3c <__vector_9+0x86>

00001b5c <__vector_7>:
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
    1b66:	8f 92       	push	r8
    1b68:	9f 92       	push	r9
    1b6a:	af 92       	push	r10
    1b6c:	bf 92       	push	r11
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
    1b96:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <__data_end>
    1b9a:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <__data_end+0x1>
    1b9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ba2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ba6:	b0 99       	sbic	0x16, 0	; 22
    1ba8:	98 c0       	rjmp	.+304    	; 0x1cda <__vector_7+0x17e>
    1baa:	47 01       	movw	r8, r14
    1bac:	0f 2c       	mov	r0, r15
    1bae:	00 0c       	add	r0, r0
    1bb0:	aa 08       	sbc	r10, r10
    1bb2:	bb 08       	sbc	r11, r11
    1bb4:	54 01       	movw	r10, r8
    1bb6:	99 24       	eor	r9, r9
    1bb8:	88 24       	eor	r8, r8
    1bba:	a0 e0       	ldi	r26, 0x00	; 0
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	88 2a       	or	r8, r24
    1bc0:	99 2a       	or	r9, r25
    1bc2:	aa 2a       	or	r10, r26
    1bc4:	bb 2a       	or	r11, r27
    1bc6:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <timerQ>
    1bca:	d0 91 5d 01 	lds	r29, 0x015D	; 0x80015d <timerQ+0x1>
    1bce:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <msgQ>
    1bd2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <msgQ+0x1>
    1bd6:	20 97       	sbiw	r28, 0x00	; 0
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <__vector_7+0x80>
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <__vector_7+0xfe>
    1bdc:	4a 81       	ldd	r20, Y+2	; 0x02
    1bde:	5b 81       	ldd	r21, Y+3	; 0x03
    1be0:	6c 81       	ldd	r22, Y+4	; 0x04
    1be2:	7d 81       	ldd	r23, Y+5	; 0x05
    1be4:	8a 01       	movw	r16, r20
    1be6:	9b 01       	movw	r18, r22
    1be8:	08 19       	sub	r16, r8
    1bea:	19 09       	sbc	r17, r9
    1bec:	2a 09       	sbc	r18, r10
    1bee:	3b 09       	sbc	r19, r11
    1bf0:	10 16       	cp	r1, r16
    1bf2:	11 06       	cpc	r1, r17
    1bf4:	12 06       	cpc	r1, r18
    1bf6:	13 06       	cpc	r1, r19
    1bf8:	0c f4       	brge	.+2      	; 0x1bfc <__vector_7+0xa0>
    1bfa:	40 c0       	rjmp	.+128    	; 0x1c7c <__vector_7+0x120>
    1bfc:	d8 80       	ld	r13, Y
    1bfe:	c9 80       	ldd	r12, Y+1	; 0x01
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	b9 f1       	breq	.+110    	; 0x1c72 <__vector_7+0x116>
    1c04:	0e 81       	ldd	r16, Y+6	; 0x06
    1c06:	1f 81       	ldd	r17, Y+7	; 0x07
    1c08:	28 85       	ldd	r18, Y+8	; 0x08
    1c0a:	39 85       	ldd	r19, Y+9	; 0x09
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	46 81       	ldd	r20, Z+6	; 0x06
    1c10:	57 81       	ldd	r21, Z+7	; 0x07
    1c12:	60 85       	ldd	r22, Z+8	; 0x08
    1c14:	71 85       	ldd	r23, Z+9	; 0x09
    1c16:	04 17       	cp	r16, r20
    1c18:	15 07       	cpc	r17, r21
    1c1a:	26 07       	cpc	r18, r22
    1c1c:	37 07       	cpc	r19, r23
    1c1e:	4c f1       	brlt	.+82     	; 0x1c72 <__vector_7+0x116>
    1c20:	dc 01       	movw	r26, r24
    1c22:	0a c0       	rjmp	.+20     	; 0x1c38 <__vector_7+0xdc>
    1c24:	46 81       	ldd	r20, Z+6	; 0x06
    1c26:	57 81       	ldd	r21, Z+7	; 0x07
    1c28:	60 85       	ldd	r22, Z+8	; 0x08
    1c2a:	71 85       	ldd	r23, Z+9	; 0x09
    1c2c:	04 17       	cp	r16, r20
    1c2e:	15 07       	cpc	r17, r21
    1c30:	26 07       	cpc	r18, r22
    1c32:	37 07       	cpc	r19, r23
    1c34:	dc f0       	brlt	.+54     	; 0x1c6c <__vector_7+0x110>
    1c36:	df 01       	movw	r26, r30
    1c38:	ed 91       	ld	r30, X+
    1c3a:	fc 91       	ld	r31, X
    1c3c:	11 97       	sbiw	r26, 0x01	; 1
    1c3e:	30 97       	sbiw	r30, 0x00	; 0
    1c40:	89 f7       	brne	.-30     	; 0x1c24 <__vector_7+0xc8>
    1c42:	19 82       	std	Y+1, r1	; 0x01
    1c44:	18 82       	st	Y, r1
    1c46:	cd 93       	st	X+, r28
    1c48:	dc 93       	st	X, r29
    1c4a:	38 2f       	mov	r19, r24
    1c4c:	29 2f       	mov	r18, r25
    1c4e:	cd 2d       	mov	r28, r13
    1c50:	dc 2d       	mov	r29, r12
    1c52:	83 2f       	mov	r24, r19
    1c54:	92 2f       	mov	r25, r18
    1c56:	20 97       	sbiw	r28, 0x00	; 0
    1c58:	09 f6       	brne	.-126    	; 0x1bdc <__vector_7+0x80>
    1c5a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <timerQ+0x1>
    1c5e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <timerQ>
    1c62:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    1c66:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    1c6a:	13 c0       	rjmp	.+38     	; 0x1c92 <__vector_7+0x136>
    1c6c:	f9 83       	std	Y+1, r31	; 0x01
    1c6e:	e8 83       	st	Y, r30
    1c70:	ea cf       	rjmp	.-44     	; 0x1c46 <__vector_7+0xea>
    1c72:	99 83       	std	Y+1, r25	; 0x01
    1c74:	88 83       	st	Y, r24
    1c76:	3c 2f       	mov	r19, r28
    1c78:	2d 2f       	mov	r18, r29
    1c7a:	e9 cf       	rjmp	.-46     	; 0x1c4e <__vector_7+0xf2>
    1c7c:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <timerQ+0x1>
    1c80:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <timerQ>
    1c84:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    1c88:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    1c8c:	e6 16       	cp	r14, r22
    1c8e:	f7 06       	cpc	r15, r23
    1c90:	d9 f1       	breq	.+118    	; 0x1d08 <__vector_7+0x1ac>
    1c92:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c96:	8d 7f       	andi	r24, 0xFD	; 253
    1c98:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c9c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	bf 91       	pop	r27
    1caa:	af 91       	pop	r26
    1cac:	9f 91       	pop	r25
    1cae:	8f 91       	pop	r24
    1cb0:	7f 91       	pop	r23
    1cb2:	6f 91       	pop	r22
    1cb4:	5f 91       	pop	r21
    1cb6:	4f 91       	pop	r20
    1cb8:	3f 91       	pop	r19
    1cba:	2f 91       	pop	r18
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	ff 90       	pop	r15
    1cc2:	ef 90       	pop	r14
    1cc4:	df 90       	pop	r13
    1cc6:	cf 90       	pop	r12
    1cc8:	bf 90       	pop	r11
    1cca:	af 90       	pop	r10
    1ccc:	9f 90       	pop	r9
    1cce:	8f 90       	pop	r8
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0f 90       	pop	r0
    1cd6:	1f 90       	pop	r1
    1cd8:	18 95       	reti
    1cda:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cde:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce2:	47 01       	movw	r8, r14
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	88 1a       	sub	r8, r24
    1ce8:	98 0a       	sbc	r9, r24
    1cea:	09 2c       	mov	r0, r9
    1cec:	00 0c       	add	r0, r0
    1cee:	aa 08       	sbc	r10, r10
    1cf0:	bb 08       	sbc	r11, r11
    1cf2:	d4 01       	movw	r26, r8
    1cf4:	99 27       	eor	r25, r25
    1cf6:	88 27       	eor	r24, r24
    1cf8:	49 01       	movw	r8, r18
    1cfa:	a1 2c       	mov	r10, r1
    1cfc:	b1 2c       	mov	r11, r1
    1cfe:	88 2a       	or	r8, r24
    1d00:	99 2a       	or	r9, r25
    1d02:	aa 2a       	or	r10, r26
    1d04:	bb 2a       	or	r11, r27
    1d06:	5f cf       	rjmp	.-322    	; 0x1bc6 <__vector_7+0x6a>
    1d08:	ca 01       	movw	r24, r20
    1d0a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d0e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d12:	42 1b       	sub	r20, r18
    1d14:	53 0b       	sbc	r21, r19
    1d16:	41 30       	cpi	r20, 0x01	; 1
    1d18:	51 05       	cpc	r21, r1
    1d1a:	51 f0       	breq	.+20     	; 0x1d30 <__vector_7+0x1d4>
    1d1c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d20:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d24:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d28:	82 60       	ori	r24, 0x02	; 2
    1d2a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d2e:	b6 cf       	rjmp	.-148    	; 0x1c9c <__vector_7+0x140>
    1d30:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d34:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	f0 cf       	rjmp	.-32     	; 0x1d1c <__vector_7+0x1c0>

00001d3c <async>:
    1d3c:	3f 92       	push	r3
    1d3e:	4f 92       	push	r4
    1d40:	5f 92       	push	r5
    1d42:	6f 92       	push	r6
    1d44:	7f 92       	push	r7
    1d46:	8f 92       	push	r8
    1d48:	9f 92       	push	r9
    1d4a:	af 92       	push	r10
    1d4c:	bf 92       	push	r11
    1d4e:	cf 92       	push	r12
    1d50:	df 92       	push	r13
    1d52:	ef 92       	push	r14
    1d54:	ff 92       	push	r15
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	ef b7       	in	r30, 0x3f	; 63
    1d60:	e0 78       	andi	r30, 0x80	; 128
    1d62:	3e 2e       	mov	r3, r30
    1d64:	f8 94       	cli
    1d66:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <msgPool>
    1d6a:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <msgPool+0x1>
    1d6e:	20 97       	sbiw	r28, 0x00	; 0
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <async+0x38>
    1d72:	52 c1       	rjmp	.+676    	; 0x2018 <async+0x2dc>
    1d74:	e8 81       	ld	r30, Y
    1d76:	f9 81       	ldd	r31, Y+1	; 0x01
    1d78:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <msgPool+0x1>
    1d7c:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <msgPool>
    1d80:	1b 87       	std	Y+11, r17	; 0x0b
    1d82:	0a 87       	std	Y+10, r16	; 0x0a
    1d84:	fd 86       	std	Y+13, r15	; 0x0d
    1d86:	ec 86       	std	Y+12, r14	; 0x0c
    1d88:	df 86       	std	Y+15, r13	; 0x0f
    1d8a:	ce 86       	std	Y+14, r12	; 0x0e
    1d8c:	33 20       	and	r3, r3
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <async+0x56>
    1d90:	6f c0       	rjmp	.+222    	; 0x1e70 <async+0x134>
    1d92:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    1d96:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    1d9a:	02 80       	ldd	r0, Z+2	; 0x02
    1d9c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d9e:	e0 2d       	mov	r30, r0
    1da0:	c2 80       	ldd	r12, Z+2	; 0x02
    1da2:	d3 80       	ldd	r13, Z+3	; 0x03
    1da4:	e4 80       	ldd	r14, Z+4	; 0x04
    1da6:	f5 80       	ldd	r15, Z+5	; 0x05
    1da8:	c6 0e       	add	r12, r22
    1daa:	d7 1e       	adc	r13, r23
    1dac:	e8 1e       	adc	r14, r24
    1dae:	f9 1e       	adc	r15, r25
    1db0:	ca 82       	std	Y+2, r12	; 0x02
    1db2:	db 82       	std	Y+3, r13	; 0x03
    1db4:	ec 82       	std	Y+4, r14	; 0x04
    1db6:	fd 82       	std	Y+5, r15	; 0x05
    1db8:	12 16       	cp	r1, r18
    1dba:	13 06       	cpc	r1, r19
    1dbc:	14 06       	cpc	r1, r20
    1dbe:	15 06       	cpc	r1, r21
    1dc0:	0c f0       	brlt	.+2      	; 0x1dc4 <async+0x88>
    1dc2:	f8 c0       	rjmp	.+496    	; 0x1fb4 <async+0x278>
    1dc4:	da 01       	movw	r26, r20
    1dc6:	c9 01       	movw	r24, r18
    1dc8:	8c 01       	movw	r16, r24
    1dca:	9d 01       	movw	r18, r26
    1dcc:	0c 0d       	add	r16, r12
    1dce:	1d 1d       	adc	r17, r13
    1dd0:	2e 1d       	adc	r18, r14
    1dd2:	3f 1d       	adc	r19, r15
    1dd4:	0e 83       	std	Y+6, r16	; 0x06
    1dd6:	1f 83       	std	Y+7, r17	; 0x07
    1dd8:	28 87       	std	Y+8, r18	; 0x08
    1dda:	39 87       	std	Y+9, r19	; 0x09
    1ddc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
    1de0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
    1de4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1de8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dec:	b0 99       	sbic	0x16, 0	; 22
    1dee:	49 c0       	rjmp	.+146    	; 0x1e82 <async+0x146>
    1df0:	2c 01       	movw	r4, r24
    1df2:	09 2e       	mov	r0, r25
    1df4:	00 0c       	add	r0, r0
    1df6:	66 08       	sbc	r6, r6
    1df8:	77 08       	sbc	r7, r7
    1dfa:	52 01       	movw	r10, r4
    1dfc:	99 24       	eor	r9, r9
    1dfe:	88 24       	eor	r8, r8
    1e00:	2b 01       	movw	r4, r22
    1e02:	61 2c       	mov	r6, r1
    1e04:	71 2c       	mov	r7, r1
    1e06:	48 28       	or	r4, r8
    1e08:	59 28       	or	r5, r9
    1e0a:	6a 28       	or	r6, r10
    1e0c:	7b 28       	or	r7, r11
    1e0e:	b7 01       	movw	r22, r14
    1e10:	a6 01       	movw	r20, r12
    1e12:	44 19       	sub	r20, r4
    1e14:	55 09       	sbc	r21, r5
    1e16:	66 09       	sbc	r22, r6
    1e18:	77 09       	sbc	r23, r7
    1e1a:	14 16       	cp	r1, r20
    1e1c:	15 06       	cpc	r1, r21
    1e1e:	16 06       	cpc	r1, r22
    1e20:	17 06       	cpc	r1, r23
    1e22:	0c f0       	brlt	.+2      	; 0x1e26 <async+0xea>
    1e24:	68 c0       	rjmp	.+208    	; 0x1ef6 <async+0x1ba>
    1e26:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <timerQ>
    1e2a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <timerQ+0x1>
    1e2e:	10 97       	sbiw	r26, 0x00	; 0
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <async+0xf8>
    1e32:	dc c0       	rjmp	.+440    	; 0x1fec <async+0x2b0>
    1e34:	12 96       	adiw	r26, 0x02	; 2
    1e36:	0d 91       	ld	r16, X+
    1e38:	1d 91       	ld	r17, X+
    1e3a:	2d 91       	ld	r18, X+
    1e3c:	3c 91       	ld	r19, X
    1e3e:	15 97       	sbiw	r26, 0x05	; 5
    1e40:	c0 16       	cp	r12, r16
    1e42:	d1 06       	cpc	r13, r17
    1e44:	e2 06       	cpc	r14, r18
    1e46:	f3 06       	cpc	r15, r19
    1e48:	5c f4       	brge	.+22     	; 0x1e60 <async+0x124>
    1e4a:	d0 c0       	rjmp	.+416    	; 0x1fec <async+0x2b0>
    1e4c:	42 81       	ldd	r20, Z+2	; 0x02
    1e4e:	53 81       	ldd	r21, Z+3	; 0x03
    1e50:	64 81       	ldd	r22, Z+4	; 0x04
    1e52:	75 81       	ldd	r23, Z+5	; 0x05
    1e54:	c4 16       	cp	r12, r20
    1e56:	d5 06       	cpc	r13, r21
    1e58:	e6 06       	cpc	r14, r22
    1e5a:	f7 06       	cpc	r15, r23
    1e5c:	4c f1       	brlt	.+82     	; 0x1eb0 <async+0x174>
    1e5e:	df 01       	movw	r26, r30
    1e60:	ed 91       	ld	r30, X+
    1e62:	fc 91       	ld	r31, X
    1e64:	11 97       	sbiw	r26, 0x01	; 1
    1e66:	30 97       	sbiw	r30, 0x00	; 0
    1e68:	89 f7       	brne	.-30     	; 0x1e4c <async+0x110>
    1e6a:	19 82       	std	Y+1, r1	; 0x01
    1e6c:	18 82       	st	Y, r1
    1e6e:	22 c0       	rjmp	.+68     	; 0x1eb4 <async+0x178>
    1e70:	c0 90 58 01 	lds	r12, 0x0158	; 0x800158 <timestamp>
    1e74:	d0 90 59 01 	lds	r13, 0x0159	; 0x800159 <timestamp+0x1>
    1e78:	e0 90 5a 01 	lds	r14, 0x015A	; 0x80015a <timestamp+0x2>
    1e7c:	f0 90 5b 01 	lds	r15, 0x015B	; 0x80015b <timestamp+0x3>
    1e80:	93 cf       	rjmp	.-218    	; 0x1da8 <async+0x6c>
    1e82:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e86:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e8a:	2c 01       	movw	r4, r24
    1e8c:	4f ef       	ldi	r20, 0xFF	; 255
    1e8e:	44 1a       	sub	r4, r20
    1e90:	54 0a       	sbc	r5, r20
    1e92:	05 2c       	mov	r0, r5
    1e94:	00 0c       	add	r0, r0
    1e96:	66 08       	sbc	r6, r6
    1e98:	77 08       	sbc	r7, r7
    1e9a:	b2 01       	movw	r22, r4
    1e9c:	55 27       	eor	r21, r21
    1e9e:	44 27       	eor	r20, r20
    1ea0:	2f 01       	movw	r4, r30
    1ea2:	61 2c       	mov	r6, r1
    1ea4:	71 2c       	mov	r7, r1
    1ea6:	44 2a       	or	r4, r20
    1ea8:	55 2a       	or	r5, r21
    1eaa:	66 2a       	or	r6, r22
    1eac:	77 2a       	or	r7, r23
    1eae:	af cf       	rjmp	.-162    	; 0x1e0e <async+0xd2>
    1eb0:	f9 83       	std	Y+1, r31	; 0x01
    1eb2:	e8 83       	st	Y, r30
    1eb4:	cd 93       	st	X+, r28
    1eb6:	dc 93       	st	X, r29
    1eb8:	82 17       	cp	r24, r18
    1eba:	93 07       	cpc	r25, r19
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <async+0x184>
    1ebe:	7f c0       	rjmp	.+254    	; 0x1fbe <async+0x282>
    1ec0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1ec4:	8d 7f       	andi	r24, 0xFD	; 253
    1ec6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1eca:	33 20       	and	r3, r3
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <async+0x194>
    1ece:	78 94       	sei
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	cf 90       	pop	r12
    1ee2:	bf 90       	pop	r11
    1ee4:	af 90       	pop	r10
    1ee6:	9f 90       	pop	r9
    1ee8:	8f 90       	pop	r8
    1eea:	7f 90       	pop	r7
    1eec:	6f 90       	pop	r6
    1eee:	5f 90       	pop	r5
    1ef0:	4f 90       	pop	r4
    1ef2:	3f 90       	pop	r3
    1ef4:	08 95       	ret
    1ef6:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <msgQ>
    1efa:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <msgQ+0x1>
    1efe:	10 97       	sbiw	r26, 0x00	; 0
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <async+0x1c8>
    1f02:	83 c0       	rjmp	.+262    	; 0x200a <async+0x2ce>
    1f04:	16 96       	adiw	r26, 0x06	; 6
    1f06:	cd 90       	ld	r12, X+
    1f08:	dd 90       	ld	r13, X+
    1f0a:	ed 90       	ld	r14, X+
    1f0c:	fc 90       	ld	r15, X
    1f0e:	19 97       	sbiw	r26, 0x09	; 9
    1f10:	0c 15       	cp	r16, r12
    1f12:	1d 05       	cpc	r17, r13
    1f14:	2e 05       	cpc	r18, r14
    1f16:	3f 05       	cpc	r19, r15
    1f18:	64 f4       	brge	.+24     	; 0x1f32 <async+0x1f6>
    1f1a:	77 c0       	rjmp	.+238    	; 0x200a <async+0x2ce>
    1f1c:	c6 80       	ldd	r12, Z+6	; 0x06
    1f1e:	d7 80       	ldd	r13, Z+7	; 0x07
    1f20:	e0 84       	ldd	r14, Z+8	; 0x08
    1f22:	f1 84       	ldd	r15, Z+9	; 0x09
    1f24:	0c 15       	cp	r16, r12
    1f26:	1d 05       	cpc	r17, r13
    1f28:	2e 05       	cpc	r18, r14
    1f2a:	3f 05       	cpc	r19, r15
    1f2c:	0c f4       	brge	.+2      	; 0x1f30 <async+0x1f4>
    1f2e:	5b c0       	rjmp	.+182    	; 0x1fe6 <async+0x2aa>
    1f30:	df 01       	movw	r26, r30
    1f32:	ed 91       	ld	r30, X+
    1f34:	fc 91       	ld	r31, X
    1f36:	11 97       	sbiw	r26, 0x01	; 1
    1f38:	30 97       	sbiw	r30, 0x00	; 0
    1f3a:	81 f7       	brne	.-32     	; 0x1f1c <async+0x1e0>
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	18 82       	st	Y, r1
    1f40:	cd 93       	st	X+, r28
    1f42:	dc 93       	st	X, r29
    1f44:	33 20       	and	r3, r3
    1f46:	21 f2       	breq	.-120    	; 0x1ed0 <async+0x194>
    1f48:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    1f4c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <async+0x21a>
    1f54:	bc cf       	rjmp	.-136    	; 0x1ece <async+0x192>
    1f56:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <activeStack>
    1f5a:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <activeStack+0x1>
    1f5e:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <msgQ>
    1f62:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <msgQ+0x1>
    1f66:	02 81       	ldd	r16, Z+2	; 0x02
    1f68:	13 81       	ldd	r17, Z+3	; 0x03
    1f6a:	d9 01       	movw	r26, r18
    1f6c:	16 96       	adiw	r26, 0x06	; 6
    1f6e:	4d 91       	ld	r20, X+
    1f70:	5d 91       	ld	r21, X+
    1f72:	6d 91       	ld	r22, X+
    1f74:	7c 91       	ld	r23, X
    1f76:	19 97       	sbiw	r26, 0x09	; 9
    1f78:	d8 01       	movw	r26, r16
    1f7a:	16 96       	adiw	r26, 0x06	; 6
    1f7c:	0d 91       	ld	r16, X+
    1f7e:	1d 91       	ld	r17, X+
    1f80:	2d 91       	ld	r18, X+
    1f82:	3c 91       	ld	r19, X
    1f84:	19 97       	sbiw	r26, 0x09	; 9
    1f86:	40 1b       	sub	r20, r16
    1f88:	51 0b       	sbc	r21, r17
    1f8a:	62 0b       	sbc	r22, r18
    1f8c:	73 0b       	sbc	r23, r19
    1f8e:	77 ff       	sbrs	r23, 7
    1f90:	9e cf       	rjmp	.-196    	; 0x1ece <async+0x192>
    1f92:	dc 01       	movw	r26, r24
    1f94:	2d 91       	ld	r18, X+
    1f96:	3c 91       	ld	r19, X
    1f98:	11 97       	sbiw	r26, 0x01	; 1
    1f9a:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <threadPool+0x1>
    1f9e:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <threadPool>
    1fa2:	ed 93       	st	X+, r30
    1fa4:	fc 93       	st	X, r31
    1fa6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <activeStack+0x1>
    1faa:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <activeStack>
    1fae:	0e 94 58 05 	call	0xab0	; 0xab0 <dispatch>
    1fb2:	8d cf       	rjmp	.-230    	; 0x1ece <async+0x192>
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	9f ef       	ldi	r25, 0xFF	; 255
    1fb8:	af ef       	ldi	r26, 0xFF	; 255
    1fba:	bf e7       	ldi	r27, 0x7F	; 127
    1fbc:	05 cf       	rjmp	.-502    	; 0x1dc8 <async+0x8c>
    1fbe:	c8 01       	movw	r24, r16
    1fc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fc8:	04 1b       	sub	r16, r20
    1fca:	15 0b       	sbc	r17, r21
    1fcc:	01 30       	cpi	r16, 0x01	; 1
    1fce:	11 05       	cpc	r17, r1
    1fd0:	b1 f0       	breq	.+44     	; 0x1ffe <async+0x2c2>
    1fd2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1fd6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1fda:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1fde:	82 60       	ori	r24, 0x02	; 2
    1fe0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1fe4:	72 cf       	rjmp	.-284    	; 0x1eca <async+0x18e>
    1fe6:	f9 83       	std	Y+1, r31	; 0x01
    1fe8:	e8 83       	st	Y, r30
    1fea:	aa cf       	rjmp	.-172    	; 0x1f40 <async+0x204>
    1fec:	b9 83       	std	Y+1, r27	; 0x01
    1fee:	a8 83       	st	Y, r26
    1ff0:	d0 93 5d 01 	sts	0x015D, r29	; 0x80015d <timerQ+0x1>
    1ff4:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <timerQ>
    1ff8:	97 01       	movw	r18, r14
    1ffa:	86 01       	movw	r16, r12
    1ffc:	5d cf       	rjmp	.-326    	; 0x1eb8 <async+0x17c>
    1ffe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2002:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	e4 cf       	rjmp	.-56     	; 0x1fd2 <async+0x296>
    200a:	b9 83       	std	Y+1, r27	; 0x01
    200c:	a8 83       	st	Y, r26
    200e:	d0 93 5f 01 	sts	0x015F, r29	; 0x80015f <msgQ+0x1>
    2012:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <msgQ>
    2016:	96 cf       	rjmp	.-212    	; 0x1f44 <async+0x208>
    2018:	0e 94 b8 05 	call	0xb70	; 0xb70 <dequeue.part.0>

0000201c <sync>:
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	ec 01       	movw	r28, r24
    202e:	7b 01       	movw	r14, r22
    2030:	6a 01       	movw	r12, r20
    2032:	1f b7       	in	r17, 0x3f	; 63
    2034:	10 78       	andi	r17, 0x80	; 128
    2036:	f8 94       	cli
    2038:	a8 81       	ld	r26, Y
    203a:	b9 81       	ldd	r27, Y+1	; 0x01
    203c:	10 97       	sbiw	r26, 0x00	; 0
    203e:	19 f4       	brne	.+6      	; 0x2046 <sync+0x2a>
    2040:	62 c0       	rjmp	.+196    	; 0x2106 <sync+0xea>
    2042:	a0 81       	ld	r26, Z
    2044:	b1 81       	ldd	r27, Z+1	; 0x01
    2046:	14 96       	adiw	r26, 0x04	; 4
    2048:	ed 91       	ld	r30, X+
    204a:	fc 91       	ld	r31, X
    204c:	15 97       	sbiw	r26, 0x05	; 5
    204e:	30 97       	sbiw	r30, 0x00	; 0
    2050:	c1 f7       	brne	.-16     	; 0x2042 <sync+0x26>
    2052:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <current>
    2056:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <current+0x1>
    205a:	2a 17       	cp	r18, r26
    205c:	3b 07       	cpc	r19, r27
    205e:	09 f4       	brne	.+2      	; 0x2062 <sync+0x46>
    2060:	4c c0       	rjmp	.+152    	; 0x20fa <sync+0xde>
    2062:	11 23       	and	r17, r17
    2064:	a1 f1       	breq	.+104    	; 0x20ce <sync+0xb2>
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	19 f0       	breq	.+6      	; 0x2074 <sync+0x58>
    206e:	fc 01       	movw	r30, r24
    2070:	15 82       	std	Z+5, r1	; 0x05
    2072:	14 82       	std	Z+4, r1	; 0x04
    2074:	3b 83       	std	Y+3, r19	; 0x03
    2076:	2a 83       	std	Y+2, r18	; 0x02
    2078:	f9 01       	movw	r30, r18
    207a:	d5 83       	std	Z+5, r29	; 0x05
    207c:	c4 83       	std	Z+4, r28	; 0x04
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 58 05 	call	0xab0	; 0xab0 <dispatch>
    2084:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    2088:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	89 2b       	or	r24, r25
    2092:	09 f4       	brne	.+2      	; 0x2096 <sync+0x7a>
    2094:	41 c0       	rjmp	.+130    	; 0x2118 <sync+0xfc>
    2096:	f9 83       	std	Y+1, r31	; 0x01
    2098:	e8 83       	st	Y, r30
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <sync+0x88>
    20a2:	78 94       	sei
    20a4:	b6 01       	movw	r22, r12
    20a6:	ce 01       	movw	r24, r28
    20a8:	f7 01       	movw	r30, r14
    20aa:	09 95       	icall
    20ac:	f8 2e       	mov	r15, r24
    20ae:	09 2f       	mov	r16, r25
    20b0:	8f b7       	in	r24, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	18 82       	st	Y, r1
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	91 05       	cpc	r25, r1
    20c0:	a0 f4       	brcc	.+40     	; 0x20ea <sync+0xce>
    20c2:	11 23       	and	r17, r17
    20c4:	79 f0       	breq	.+30     	; 0x20e4 <sync+0xc8>
    20c6:	78 94       	sei
    20c8:	8f 2d       	mov	r24, r15
    20ca:	90 2f       	mov	r25, r16
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <sync+0xb6>
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	9f ef       	ldi	r25, 0xFF	; 255
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	ff 90       	pop	r15
    20dc:	ef 90       	pop	r14
    20de:	df 90       	pop	r13
    20e0:	cf 90       	pop	r12
    20e2:	08 95       	ret
    20e4:	8f 2d       	mov	r24, r15
    20e6:	90 2f       	mov	r25, r16
    20e8:	f4 cf       	rjmp	.-24     	; 0x20d2 <sync+0xb6>
    20ea:	1b 82       	std	Y+3, r1	; 0x03
    20ec:	1a 82       	std	Y+2, r1	; 0x02
    20ee:	fc 01       	movw	r30, r24
    20f0:	15 82       	std	Z+5, r1	; 0x05
    20f2:	14 82       	std	Z+4, r1	; 0x04
    20f4:	0e 94 58 05 	call	0xab0	; 0xab0 <dispatch>
    20f8:	e4 cf       	rjmp	.-56     	; 0x20c2 <sync+0xa6>
    20fa:	11 23       	and	r17, r17
    20fc:	41 f3       	breq	.-48     	; 0x20ce <sync+0xb2>
    20fe:	78 94       	sei
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	9f ef       	ldi	r25, 0xFF	; 255
    2104:	e6 cf       	rjmp	.-52     	; 0x20d2 <sync+0xb6>
    2106:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <current>
    210a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <current+0x1>
    210e:	99 83       	std	Y+1, r25	; 0x01
    2110:	88 83       	st	Y, r24
    2112:	11 23       	and	r17, r17
    2114:	39 f2       	breq	.-114    	; 0x20a4 <sync+0x88>
    2116:	c1 cf       	rjmp	.-126    	; 0x209a <sync+0x7e>
    2118:	78 94       	sei
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	d9 cf       	rjmp	.-78     	; 0x20d2 <sync+0xb6>

00002120 <run>:
    2120:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    2124:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    2128:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    212c:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    2130:	20 97       	sbiw	r28, 0x00	; 0
    2132:	09 f4       	brne	.+2      	; 0x2136 <run+0x16>
    2134:	6e c0       	rjmp	.+220    	; 0x2212 <run+0xf2>
    2136:	88 81       	ld	r24, Y
    2138:	99 81       	ldd	r25, Y+1	; 0x01
    213a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <msgQ+0x1>
    213e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <msgQ>
    2142:	d3 83       	std	Z+3, r29	; 0x03
    2144:	c2 83       	std	Z+2, r28	; 0x02
    2146:	78 94       	sei
    2148:	4e 85       	ldd	r20, Y+14	; 0x0e
    214a:	5f 85       	ldd	r21, Y+15	; 0x0f
    214c:	6c 85       	ldd	r22, Y+12	; 0x0c
    214e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2150:	8a 85       	ldd	r24, Y+10	; 0x0a
    2152:	9b 85       	ldd	r25, Y+11	; 0x0b
    2154:	0e 94 0e 10 	call	0x201c	; 0x201c <sync>
    2158:	8f b7       	in	r24, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <msgPool>
    2160:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <msgPool+0x1>
    2164:	99 83       	std	Y+1, r25	; 0x01
    2166:	88 83       	st	Y, r24
    2168:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <msgPool+0x1>
    216c:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <msgPool>
    2170:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <activeStack>
    2174:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <activeStack+0x1>
    2178:	f7 01       	movw	r30, r14
    217a:	a0 81       	ld	r26, Z
    217c:	b1 81       	ldd	r27, Z+1	; 0x01
    217e:	12 96       	adiw	r26, 0x02	; 2
    2180:	8d 91       	ld	r24, X+
    2182:	9c 91       	ld	r25, X
    2184:	13 97       	sbiw	r26, 0x03	; 3
    2186:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    218a:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    218e:	20 97       	sbiw	r28, 0x00	; 0
    2190:	a9 f0       	breq	.+42     	; 0x21bc <run+0x9c>
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	49 f2       	breq	.-110    	; 0x2128 <run+0x8>
    2196:	4e 81       	ldd	r20, Y+6	; 0x06
    2198:	5f 81       	ldd	r21, Y+7	; 0x07
    219a:	68 85       	ldd	r22, Y+8	; 0x08
    219c:	79 85       	ldd	r23, Y+9	; 0x09
    219e:	fc 01       	movw	r30, r24
    21a0:	06 81       	ldd	r16, Z+6	; 0x06
    21a2:	17 81       	ldd	r17, Z+7	; 0x07
    21a4:	20 85       	ldd	r18, Z+8	; 0x08
    21a6:	31 85       	ldd	r19, Z+9	; 0x09
    21a8:	40 1b       	sub	r20, r16
    21aa:	51 0b       	sbc	r21, r17
    21ac:	62 0b       	sbc	r22, r18
    21ae:	73 0b       	sbc	r23, r19
    21b0:	14 16       	cp	r1, r20
    21b2:	15 06       	cpc	r1, r21
    21b4:	16 06       	cpc	r1, r22
    21b6:	17 06       	cpc	r1, r23
    21b8:	0c f0       	brlt	.+2      	; 0x21bc <run+0x9c>
    21ba:	b6 cf       	rjmp	.-148    	; 0x2128 <run+0x8>
    21bc:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <activeStack+0x1>
    21c0:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <activeStack>
    21c4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <threadPool>
    21c8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <threadPool+0x1>
    21cc:	f7 01       	movw	r30, r14
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <threadPool+0x1>
    21d6:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <threadPool>
    21da:	14 96       	adiw	r26, 0x04	; 4
    21dc:	ed 91       	ld	r30, X+
    21de:	fc 91       	ld	r31, X
    21e0:	15 97       	sbiw	r26, 0x05	; 5
    21e2:	30 97       	sbiw	r30, 0x00	; 0
    21e4:	41 f0       	breq	.+16     	; 0x21f6 <run+0xd6>
    21e6:	a0 81       	ld	r26, Z
    21e8:	b1 81       	ldd	r27, Z+1	; 0x01
    21ea:	14 96       	adiw	r26, 0x04	; 4
    21ec:	ed 91       	ld	r30, X+
    21ee:	fc 91       	ld	r31, X
    21f0:	15 97       	sbiw	r26, 0x05	; 5
    21f2:	30 97       	sbiw	r30, 0x00	; 0
    21f4:	c1 f7       	brne	.-16     	; 0x21e6 <run+0xc6>
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 58 05 	call	0xab0	; 0xab0 <dispatch>
    21fc:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <msgQ>
    2200:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <msgQ+0x1>
    2204:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <current>
    2208:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <current+0x1>
    220c:	20 97       	sbiw	r28, 0x00	; 0
    220e:	09 f0       	breq	.+2      	; 0x2212 <run+0xf2>
    2210:	92 cf       	rjmp	.-220    	; 0x2136 <run+0x16>
    2212:	0e 94 b8 05 	call	0xb70	; 0xb70 <dequeue.part.0>

00002216 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2216:	42 31       	cpi	r20, 0x12	; 18
    2218:	b8 f4       	brcc	.+46     	; 0x2248 <install+0x32>
        char status;
        DISABLE(status);
    221a:	2f b7       	in	r18, 0x3f	; 63
    221c:	f8 94       	cli
        otable[i] = obj;
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	44 0f       	add	r20, r20
    2222:	55 1f       	adc	r21, r21
    2224:	fa 01       	movw	r30, r20
    2226:	e0 5a       	subi	r30, 0xA0	; 160
    2228:	fe 4f       	sbci	r31, 0xFE	; 254
    222a:	91 83       	std	Z+1, r25	; 0x01
    222c:	80 83       	st	Z, r24
        mtable[i] = m;
    222e:	fa 01       	movw	r30, r20
    2230:	e8 50       	subi	r30, 0x08	; 8
    2232:	fe 4f       	sbci	r31, 0xFE	; 254
    2234:	71 83       	std	Z+1, r23	; 0x01
    2236:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	fc 01       	movw	r30, r24
    223e:	53 83       	std	Z+3, r21	; 0x03
    2240:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2242:	27 ff       	sbrs	r18, 7
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <install+0x32>
    2246:	78 94       	sei
    2248:	08 95       	ret

0000224a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    224a:	8c 01       	movw	r16, r24
    224c:	7b 01       	movw	r14, r22
    224e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2250:	8f b7       	in	r24, 0x3f	; 63
    2252:	f8 94       	cli
    initialize();
    2254:	0e 94 ed 04 	call	0x9da	; 0x9da <initialize>
    ENABLE(1);
    2258:	78 94       	sei
    if (m != NULL)
    225a:	e1 14       	cp	r14, r1
    225c:	f1 04       	cpc	r15, r1
    225e:	41 f0       	breq	.+16     	; 0x2270 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	cb 01       	movw	r24, r22
    226c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <async>
    DISABLE(status);
    2270:	8f b7       	in	r24, 0x3f	; 63
    2272:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2274:	0e 94 78 05 	call	0xaf0	; 0xaf0 <schedule>
    ENABLE(1);
    2278:	78 94       	sei
    while (1) {
        SLEEP();
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	83 bf       	out	0x33, r24	; 51
    227e:	88 95       	sleep
    2280:	fd cf       	rjmp	.-6      	; 0x227c <tinytimber+0x32>

00002282 <writeBit>:


// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
	PORTE |= (1 << self->portBit);
    2282:	4e b1       	in	r20, 0x0e	; 14
    2284:	21 e0       	ldi	r18, 0x01	; 1
    2286:	30 e0       	ldi	r19, 0x00	; 0
#include "writeBit.h"


// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    2288:	67 2b       	or	r22, r23
    228a:	79 f4       	brne	.+30     	; 0x22aa <writeBit+0x28>
	PORTE |= (1 << self->portBit);
	else
	PORTE &= ~(1 << self->portBit);
    228c:	b9 01       	movw	r22, r18
    228e:	fc 01       	movw	r30, r24
    2290:	04 80       	ldd	r0, Z+4	; 0x04
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <writeBit+0x16>
    2294:	66 0f       	add	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	0a 94       	dec	r0
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <writeBit+0x12>
    229c:	cb 01       	movw	r24, r22
    229e:	80 95       	com	r24
    22a0:	84 23       	and	r24, r20
    22a2:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	08 95       	ret


// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
	PORTE |= (1 << self->portBit);
    22aa:	b9 01       	movw	r22, r18
    22ac:	fc 01       	movw	r30, r24
    22ae:	04 80       	ldd	r0, Z+4	; 0x04
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <writeBit+0x34>
    22b2:	66 0f       	add	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <writeBit+0x30>
    22ba:	cb 01       	movw	r24, r22
    22bc:	84 2b       	or	r24, r20
    22be:	8e b9       	out	0x0e, r24	; 14
	else
	PORTE &= ~(1 << self->portBit);
	return 0;
}
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	08 95       	ret

000022c6 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    22c6:	4e b1       	in	r20, 0x0e	; 14
    22c8:	21 e0       	ldi	r18, 0x01	; 1
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	fc 01       	movw	r30, r24
    22ce:	04 80       	ldd	r0, Z+4	; 0x04
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <toggleBit+0x10>
    22d2:	22 0f       	add	r18, r18
    22d4:	33 1f       	adc	r19, r19
    22d6:	0a 94       	dec	r0
    22d8:	e2 f7       	brpl	.-8      	; 0x22d2 <toggleBit+0xc>
    22da:	24 27       	eor	r18, r20
    22dc:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	08 95       	ret

000022e4 <__divmodhi4>:
    22e4:	97 fb       	bst	r25, 7
    22e6:	07 2e       	mov	r0, r23
    22e8:	16 f4       	brtc	.+4      	; 0x22ee <__divmodhi4+0xa>
    22ea:	00 94       	com	r0
    22ec:	07 d0       	rcall	.+14     	; 0x22fc <__divmodhi4_neg1>
    22ee:	77 fd       	sbrc	r23, 7
    22f0:	09 d0       	rcall	.+18     	; 0x2304 <__divmodhi4_neg2>
    22f2:	0e 94 ac 11 	call	0x2358	; 0x2358 <__udivmodhi4>
    22f6:	07 fc       	sbrc	r0, 7
    22f8:	05 d0       	rcall	.+10     	; 0x2304 <__divmodhi4_neg2>
    22fa:	3e f4       	brtc	.+14     	; 0x230a <__divmodhi4_exit>

000022fc <__divmodhi4_neg1>:
    22fc:	90 95       	com	r25
    22fe:	81 95       	neg	r24
    2300:	9f 4f       	sbci	r25, 0xFF	; 255
    2302:	08 95       	ret

00002304 <__divmodhi4_neg2>:
    2304:	70 95       	com	r23
    2306:	61 95       	neg	r22
    2308:	7f 4f       	sbci	r23, 0xFF	; 255

0000230a <__divmodhi4_exit>:
    230a:	08 95       	ret

0000230c <__divmodsi4>:
    230c:	05 2e       	mov	r0, r21
    230e:	97 fb       	bst	r25, 7
    2310:	1e f4       	brtc	.+6      	; 0x2318 <__divmodsi4+0xc>
    2312:	00 94       	com	r0
    2314:	0e 94 9d 11 	call	0x233a	; 0x233a <__negsi2>
    2318:	57 fd       	sbrc	r21, 7
    231a:	07 d0       	rcall	.+14     	; 0x232a <__divmodsi4_neg2>
    231c:	0e 94 c0 11 	call	0x2380	; 0x2380 <__udivmodsi4>
    2320:	07 fc       	sbrc	r0, 7
    2322:	03 d0       	rcall	.+6      	; 0x232a <__divmodsi4_neg2>
    2324:	4e f4       	brtc	.+18     	; 0x2338 <__divmodsi4_exit>
    2326:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__negsi2>

0000232a <__divmodsi4_neg2>:
    232a:	50 95       	com	r21
    232c:	40 95       	com	r20
    232e:	30 95       	com	r19
    2330:	21 95       	neg	r18
    2332:	3f 4f       	sbci	r19, 0xFF	; 255
    2334:	4f 4f       	sbci	r20, 0xFF	; 255
    2336:	5f 4f       	sbci	r21, 0xFF	; 255

00002338 <__divmodsi4_exit>:
    2338:	08 95       	ret

0000233a <__negsi2>:
    233a:	90 95       	com	r25
    233c:	80 95       	com	r24
    233e:	70 95       	com	r23
    2340:	61 95       	neg	r22
    2342:	7f 4f       	sbci	r23, 0xFF	; 255
    2344:	8f 4f       	sbci	r24, 0xFF	; 255
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	08 95       	ret

0000234a <__usmulhisi3>:
    234a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__umulhisi3>

0000234e <__usmulhisi3_tail>:
    234e:	b7 ff       	sbrs	r27, 7
    2350:	08 95       	ret
    2352:	82 1b       	sub	r24, r18
    2354:	93 0b       	sbc	r25, r19
    2356:	08 95       	ret

00002358 <__udivmodhi4>:
    2358:	aa 1b       	sub	r26, r26
    235a:	bb 1b       	sub	r27, r27
    235c:	51 e1       	ldi	r21, 0x11	; 17
    235e:	07 c0       	rjmp	.+14     	; 0x236e <__udivmodhi4_ep>

00002360 <__udivmodhi4_loop>:
    2360:	aa 1f       	adc	r26, r26
    2362:	bb 1f       	adc	r27, r27
    2364:	a6 17       	cp	r26, r22
    2366:	b7 07       	cpc	r27, r23
    2368:	10 f0       	brcs	.+4      	; 0x236e <__udivmodhi4_ep>
    236a:	a6 1b       	sub	r26, r22
    236c:	b7 0b       	sbc	r27, r23

0000236e <__udivmodhi4_ep>:
    236e:	88 1f       	adc	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	5a 95       	dec	r21
    2374:	a9 f7       	brne	.-22     	; 0x2360 <__udivmodhi4_loop>
    2376:	80 95       	com	r24
    2378:	90 95       	com	r25
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	08 95       	ret

00002380 <__udivmodsi4>:
    2380:	a1 e2       	ldi	r26, 0x21	; 33
    2382:	1a 2e       	mov	r1, r26
    2384:	aa 1b       	sub	r26, r26
    2386:	bb 1b       	sub	r27, r27
    2388:	fd 01       	movw	r30, r26
    238a:	0d c0       	rjmp	.+26     	; 0x23a6 <__udivmodsi4_ep>

0000238c <__udivmodsi4_loop>:
    238c:	aa 1f       	adc	r26, r26
    238e:	bb 1f       	adc	r27, r27
    2390:	ee 1f       	adc	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	a2 17       	cp	r26, r18
    2396:	b3 07       	cpc	r27, r19
    2398:	e4 07       	cpc	r30, r20
    239a:	f5 07       	cpc	r31, r21
    239c:	20 f0       	brcs	.+8      	; 0x23a6 <__udivmodsi4_ep>
    239e:	a2 1b       	sub	r26, r18
    23a0:	b3 0b       	sbc	r27, r19
    23a2:	e4 0b       	sbc	r30, r20
    23a4:	f5 0b       	sbc	r31, r21

000023a6 <__udivmodsi4_ep>:
    23a6:	66 1f       	adc	r22, r22
    23a8:	77 1f       	adc	r23, r23
    23aa:	88 1f       	adc	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	1a 94       	dec	r1
    23b0:	69 f7       	brne	.-38     	; 0x238c <__udivmodsi4_loop>
    23b2:	60 95       	com	r22
    23b4:	70 95       	com	r23
    23b6:	80 95       	com	r24
    23b8:	90 95       	com	r25
    23ba:	9b 01       	movw	r18, r22
    23bc:	ac 01       	movw	r20, r24
    23be:	bd 01       	movw	r22, r26
    23c0:	cf 01       	movw	r24, r30
    23c2:	08 95       	ret

000023c4 <__umulhisi3>:
    23c4:	a2 9f       	mul	r26, r18
    23c6:	b0 01       	movw	r22, r0
    23c8:	b3 9f       	mul	r27, r19
    23ca:	c0 01       	movw	r24, r0
    23cc:	a3 9f       	mul	r26, r19
    23ce:	70 0d       	add	r23, r0
    23d0:	81 1d       	adc	r24, r1
    23d2:	11 24       	eor	r1, r1
    23d4:	91 1d       	adc	r25, r1
    23d6:	b2 9f       	mul	r27, r18
    23d8:	70 0d       	add	r23, r0
    23da:	81 1d       	adc	r24, r1
    23dc:	11 24       	eor	r1, r1
    23de:	91 1d       	adc	r25, r1
    23e0:	08 95       	ret

000023e2 <setjmp>:
    23e2:	dc 01       	movw	r26, r24
    23e4:	2d 92       	st	X+, r2
    23e6:	3d 92       	st	X+, r3
    23e8:	4d 92       	st	X+, r4
    23ea:	5d 92       	st	X+, r5
    23ec:	6d 92       	st	X+, r6
    23ee:	7d 92       	st	X+, r7
    23f0:	8d 92       	st	X+, r8
    23f2:	9d 92       	st	X+, r9
    23f4:	ad 92       	st	X+, r10
    23f6:	bd 92       	st	X+, r11
    23f8:	cd 92       	st	X+, r12
    23fa:	dd 92       	st	X+, r13
    23fc:	ed 92       	st	X+, r14
    23fe:	fd 92       	st	X+, r15
    2400:	0d 93       	st	X+, r16
    2402:	1d 93       	st	X+, r17
    2404:	cd 93       	st	X+, r28
    2406:	dd 93       	st	X+, r29
    2408:	ff 91       	pop	r31
    240a:	ef 91       	pop	r30
    240c:	8d b7       	in	r24, 0x3d	; 61
    240e:	8d 93       	st	X+, r24
    2410:	8e b7       	in	r24, 0x3e	; 62
    2412:	8d 93       	st	X+, r24
    2414:	8f b7       	in	r24, 0x3f	; 63
    2416:	8d 93       	st	X+, r24
    2418:	ed 93       	st	X+, r30
    241a:	fd 93       	st	X+, r31
    241c:	88 27       	eor	r24, r24
    241e:	99 27       	eor	r25, r25
    2420:	09 94       	ijmp

00002422 <longjmp>:
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	91 05       	cpc	r25, r1
    242a:	81 1d       	adc	r24, r1
    242c:	2d 90       	ld	r2, X+
    242e:	3d 90       	ld	r3, X+
    2430:	4d 90       	ld	r4, X+
    2432:	5d 90       	ld	r5, X+
    2434:	6d 90       	ld	r6, X+
    2436:	7d 90       	ld	r7, X+
    2438:	8d 90       	ld	r8, X+
    243a:	9d 90       	ld	r9, X+
    243c:	ad 90       	ld	r10, X+
    243e:	bd 90       	ld	r11, X+
    2440:	cd 90       	ld	r12, X+
    2442:	dd 90       	ld	r13, X+
    2444:	ed 90       	ld	r14, X+
    2446:	fd 90       	ld	r15, X+
    2448:	0d 91       	ld	r16, X+
    244a:	1d 91       	ld	r17, X+
    244c:	cd 91       	ld	r28, X+
    244e:	dd 91       	ld	r29, X+
    2450:	ed 91       	ld	r30, X+
    2452:	fd 91       	ld	r31, X+
    2454:	0d 90       	ld	r0, X+
    2456:	f8 94       	cli
    2458:	fe bf       	out	0x3e, r31	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	ed bf       	out	0x3d, r30	; 61
    245e:	ed 91       	ld	r30, X+
    2460:	fd 91       	ld	r31, X+
    2462:	09 94       	ijmp

00002464 <_exit>:
    2464:	f8 94       	cli

00002466 <__stop_program>:
    2466:	ff cf       	rjmp	.-2      	; 0x2466 <__stop_program>
