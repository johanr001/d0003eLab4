
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00002548  000025dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080014c  0080014c  00002628  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ce  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b8  00000000  00000000  0000624e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000196a  00000000  00000000  00007506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e8c  00000000  00000000  00008e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1d  00000000  00000000  00009cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000338c  00000000  00000000  0000a719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000daa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_1>
       8:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_2>
       c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_3>
      10:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__vector_4>
      14:	0c 94 05 08 	jmp	0x100a	; 0x100a <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_9>
      28:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_10>
      2c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_11>
      30:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_12>
      34:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_13>
      38:	0c 94 21 0a 	jmp	0x1442	; 0x1442 <__vector_14>
      3c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_15>
      40:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_16>
      44:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_17>
      48:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_18>
      4c:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__vector_19>
      50:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_20>
      54:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_21>
      58:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e8 e4       	ldi	r30, 0x48	; 72
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 34       	cpi	r26, 0x4C	; 76
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e4       	ldi	r26, 0x4C	; 76
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 39       	cpi	r26, 0x9F	; 159
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <main>
      92:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() checkar om den håller.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
	if (self->held && PRESSEDUP) {
      aa:	fc 01       	movw	r30, r24
      ac:	26 81       	ldd	r18, Z+6	; 0x06
      ae:	22 23       	and	r18, r18
      b0:	31 f1       	breq	.+76     	; 0xfe <holdCheckerUp+0x64>
      b2:	1e 99       	sbic	0x03, 6	; 3
      b4:	24 c0       	rjmp	.+72     	; 0xfe <holdCheckerUp+0x64>
      b6:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecInc, 0);
      b8:	04 81       	ldd	r16, Z+4	; 0x04
      ba:	15 81       	ldd	r17, Z+5	; 0x05
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	f2 e0       	ldi	r31, 0x02	; 2
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
		AFTER(MSEC(500), self, holdCheckerUp, 0);
      dc:	0f 2e       	mov	r0, r31
      de:	fd e4       	ldi	r31, 0x4D	; 77
      e0:	ef 2e       	mov	r14, r31
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	8e 01       	movw	r16, r28
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	a9 01       	movw	r20, r18
      f0:	69 e0       	ldi	r22, 0x09	; 9
      f2:	7d e3       	ldi	r23, 0x3D	; 61
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <holdCheckerUp+0x68>
		} else {
		self->held = false;
      fe:	fc 01       	movw	r30, r24
     100:	16 82       	std	Z+6, r1	; 0x06
	}
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	ff 90       	pop	r15
     10c:	ef 90       	pop	r14
     10e:	df 90       	pop	r13
     110:	cf 90       	pop	r12
     112:	08 95       	ret

00000114 <holdCheckerDown>:

int holdCheckerDown(Button *self, int arg) {
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
	if (self->held && PRESSEDDN) {
     124:	fc 01       	movw	r30, r24
     126:	26 81       	ldd	r18, Z+6	; 0x06
     128:	22 23       	and	r18, r18
     12a:	31 f1       	breq	.+76     	; 0x178 <holdCheckerDown+0x64>
     12c:	1f 99       	sbic	0x03, 7	; 3
     12e:	24 c0       	rjmp	.+72     	; 0x178 <holdCheckerDown+0x64>
     130:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecDec, 0);
     132:	04 81       	ldd	r16, Z+4	; 0x04
     134:	15 81       	ldd	r17, Z+5	; 0x05
     136:	c1 2c       	mov	r12, r1
     138:	d1 2c       	mov	r13, r1
     13a:	0f 2e       	mov	r0, r31
     13c:	ff e4       	ldi	r31, 0x4F	; 79
     13e:	ef 2e       	mov	r14, r31
     140:	f3 e0       	ldi	r31, 0x03	; 3
     142:	ff 2e       	mov	r15, r31
     144:	f0 2d       	mov	r31, r0
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	a9 01       	movw	r20, r18
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	cb 01       	movw	r24, r22
     152:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
		AFTER(MSEC(500), self, holdCheckerDown, 0);
     156:	0f 2e       	mov	r0, r31
     158:	fa e8       	ldi	r31, 0x8A	; 138
     15a:	ef 2e       	mov	r14, r31
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	ff 2e       	mov	r15, r31
     160:	f0 2d       	mov	r31, r0
     162:	8e 01       	movw	r16, r28
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	a9 01       	movw	r20, r18
     16a:	69 e0       	ldi	r22, 0x09	; 9
     16c:	7d e3       	ldi	r23, 0x3D	; 61
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
     176:	02 c0       	rjmp	.+4      	; 0x17c <holdCheckerDown+0x68>
		} else {
		self->held = false;
     178:	fc 01       	movw	r30, r24
     17a:	16 82       	std	Z+6, r1	; 0x06
	}
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	df 90       	pop	r13
     18a:	cf 90       	pop	r12
     18c:	08 95       	ret

0000018e <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     18e:	85 b1       	in	r24, 0x05	; 5
     190:	80 6d       	ori	r24, 0xD0	; 208
     192:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     194:	8e b1       	in	r24, 0x0e	; 14
     196:	8c 60       	ori	r24, 0x0C	; 12
     198:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     19a:	8d b3       	in	r24, 0x1d	; 29
     19c:	80 6c       	ori	r24, 0xC0	; 192
     19e:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a0:	eb e6       	ldi	r30, 0x6B	; 107
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	8c 60       	ori	r24, 0x0C	; 12
     1a8:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1aa:	ec e6       	ldi	r30, 0x6C	; 108
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	80 6d       	ori	r24, 0xD0	; 208
     1b2:	80 83       	st	Z, r24
     1b4:	08 95       	ret

000001b6 <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja "vänster" generator, om PRESSEDLT är sant.
int leftdir(Button *self, int arg) {
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
	if (PRESSEDLT) {
     1c2:	62 99       	sbic	0x0c, 2	; 12
     1c4:	13 c0       	rjmp	.+38     	; 0x1ec <leftdir+0x36>
     1c6:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     1c8:	04 81       	ldd	r16, Z+4	; 0x04
     1ca:	15 81       	ldd	r17, Z+5	; 0x05
     1cc:	c1 2c       	mov	r12, r1
     1ce:	d1 2c       	mov	r13, r1
     1d0:	0f 2e       	mov	r0, r31
     1d2:	fb ed       	ldi	r31, 0xDB	; 219
     1d4:	ef 2e       	mov	r14, r31
     1d6:	f2 e0       	ldi	r31, 0x02	; 2
     1d8:	ff 2e       	mov	r15, r31
     1da:	f0 2d       	mov	r31, r0
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	a9 01       	movw	r20, r18
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	cb 01       	movw	r24, r22
     1e8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	return 0;
}
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	08 95       	ret

000001fe <rightdir>:

// rightdir() => anropar switchGen(1) för "höger" generator.
int rightdir(Button *self, int arg) {
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
	if (PRESSEDRT) {
     20a:	63 99       	sbic	0x0c, 3	; 12
     20c:	14 c0       	rjmp	.+40     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
     20e:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     210:	04 81       	ldd	r16, Z+4	; 0x04
     212:	15 81       	ldd	r17, Z+5	; 0x05
     214:	cc 24       	eor	r12, r12
     216:	c3 94       	inc	r12
     218:	d1 2c       	mov	r13, r1
     21a:	0f 2e       	mov	r0, r31
     21c:	fb ed       	ldi	r31, 0xDB	; 219
     21e:	ef 2e       	mov	r14, r31
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	ff 2e       	mov	r15, r31
     224:	f0 2d       	mov	r31, r0
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	a9 01       	movw	r20, r18
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	cb 01       	movw	r24, r22
     232:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	return 0;
}
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
     246:	08 95       	ret

00000248 <buttonCheckerLR>:
		} else {
		self->held = false;
	}
}
	
int buttonCheckerLR(Button *self, int arg) {
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     24e:	62 99       	sbic	0x0c, 2	; 12
     250:	04 c0       	rjmp	.+8      	; 0x25a <buttonCheckerLR+0x12>
		leftdir(self, 0);
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	0e 94 db 00 	call	0x1b6	; 0x1b6 <leftdir>
	}
	if (PRESSEDRT) {
     25a:	63 99       	sbic	0x0c, 3	; 12
     25c:	05 c0       	rjmp	.+10     	; 0x268 <buttonCheckerLR+0x20>
		rightdir(self, 0);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	ce 01       	movw	r24, r28
     264:	0e 94 ff 00 	call	0x1fe	; 0x1fe <rightdir>
	}
	return 0;
}
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
	if (PRESSEDUP) { // Check if the UP button is pressed.
     282:	1e 99       	sbic	0x03, 6	; 3
     284:	24 c0       	rjmp	.+72     	; 0x2ce <updir+0x5c>
     286:	ec 01       	movw	r28, r24
		self->held = true; // Set the held flag.
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	8e 83       	std	Y+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Increment frequency.
     28c:	0c 81       	ldd	r16, Y+4	; 0x04
     28e:	1d 81       	ldd	r17, Y+5	; 0x05
     290:	c1 2c       	mov	r12, r1
     292:	d1 2c       	mov	r13, r1
     294:	0f 2e       	mov	r0, r31
     296:	f2 e0       	ldi	r31, 0x02	; 2
     298:	ef 2e       	mov	r14, r31
     29a:	f3 e0       	ldi	r31, 0x03	; 3
     29c:	ff 2e       	mov	r15, r31
     29e:	f0 2d       	mov	r31, r0
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	cb 01       	movw	r24, r22
     2ac:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
		ASYNC(self, holdCheckerUp, 0); // Start holdCheckerUp for repeated increments.
     2b0:	0f 2e       	mov	r0, r31
     2b2:	fd e4       	ldi	r31, 0x4D	; 77
     2b4:	ef 2e       	mov	r14, r31
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ff 2e       	mov	r15, r31
     2ba:	f0 2d       	mov	r31, r0
     2bc:	8e 01       	movw	r16, r28
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	a9 01       	movw	r20, r18
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	cb 01       	movw	r24, r22
     2ca:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	return 0;
}
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	08 95       	ret

000002e4 <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
    if (PRESSEDDN) { // Check if the DOWN button is pressed.
     2f4:	1f 99       	sbic	0x03, 7	; 3
     2f6:	24 c0       	rjmp	.+72     	; 0x340 <downdir+0x5c>
     2f8:	ec 01       	movw	r28, r24
	    self->held = true; // Set the held flag.
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	8e 83       	std	Y+6, r24	; 0x06
	    ASYNC(self->gui, guiFrecDec, 0); // Decrement frequency.
     2fe:	0c 81       	ldd	r16, Y+4	; 0x04
     300:	1d 81       	ldd	r17, Y+5	; 0x05
     302:	c1 2c       	mov	r12, r1
     304:	d1 2c       	mov	r13, r1
     306:	0f 2e       	mov	r0, r31
     308:	ff e4       	ldi	r31, 0x4F	; 79
     30a:	ef 2e       	mov	r14, r31
     30c:	f3 e0       	ldi	r31, 0x03	; 3
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	cb 01       	movw	r24, r22
     31e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	    ASYNC(self, holdCheckerDown, 0); // Start holdCheckerDown for repeated decrements.
     322:	0f 2e       	mov	r0, r31
     324:	fa e8       	ldi	r31, 0x8A	; 138
     326:	ef 2e       	mov	r14, r31
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	ff 2e       	mov	r15, r31
     32c:	f0 2d       	mov	r31, r0
     32e:	8e 01       	movw	r16, r28
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	a9 01       	movw	r20, r18
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	cb 01       	movw	r24, r22
     33c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
    }
    return 0;
}
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
     354:	08 95       	ret

00000356 <centerdir>:

// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
	if (PRESSEDCN) {
     362:	1c 99       	sbic	0x03, 4	; 3
     364:	13 c0       	rjmp	.+38     	; 0x38c <centerdir+0x36>
     366:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecReset, 0);
     368:	04 81       	ldd	r16, Z+4	; 0x04
     36a:	15 81       	ldd	r17, Z+5	; 0x05
     36c:	c1 2c       	mov	r12, r1
     36e:	d1 2c       	mov	r13, r1
     370:	0f 2e       	mov	r0, r31
     372:	fc e9       	ldi	r31, 0x9C	; 156
     374:	ef 2e       	mov	r14, r31
     376:	f3 e0       	ldi	r31, 0x03	; 3
     378:	ff 2e       	mov	r15, r31
     37a:	f0 2d       	mov	r31, r0
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	a9 01       	movw	r20, r18
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	cb 01       	movw	r24, r22
     388:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	return 0;
}
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	08 95       	ret

0000039e <buttonCheckerUDC>:
	}
	return 0;
}

// buttonChecker() checkar vilken knapp som blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     3a4:	1e 99       	sbic	0x03, 6	; 3
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <buttonCheckerUDC+0x12>
		updir(self, 0);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	0e 94 39 01 	call	0x272	; 0x272 <updir>
	}
	if (PRESSEDDN) {
     3b0:	1f 99       	sbic	0x03, 7	; 3
     3b2:	05 c0       	rjmp	.+10     	; 0x3be <buttonCheckerUDC+0x20>
		downdir(self, 0);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	ce 01       	movw	r24, r28
     3ba:	0e 94 72 01 	call	0x2e4	; 0x2e4 <downdir>
	}
	if (PRESSEDCN) {
     3be:	1c 99       	sbic	0x03, 4	; 3
     3c0:	05 c0       	rjmp	.+10     	; 0x3cc <buttonCheckerUDC+0x2e>
		centerdir(self, 0);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	ce 01       	movw	r24, r28
     3c8:	0e 94 ab 01 	call	0x356	; 0x356 <centerdir>
	}
	return 0;
}
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     3d6:	80 ec       	ldi	r24, 0xC0	; 192
     3d8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     3dc:	87 eb       	ldi	r24, 0xB7	; 183
     3de:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     3e8:	08 95       	ret

000003ea <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     3ea:	66 30       	cpi	r22, 0x06	; 6
     3ec:	71 05       	cpc	r23, r1
     3ee:	08 f0       	brcs	.+2      	; 0x3f2 <writeChar+0x8>
     3f0:	6b c0       	rjmp	.+214    	; 0x4c8 <__DATA_REGION_LENGTH__+0xc8>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     3f2:	90 ed       	ldi	r25, 0xD0	; 208
     3f4:	98 0f       	add	r25, r24
     3f6:	9a 30       	cpi	r25, 0x0A	; 10
     3f8:	48 f4       	brcc	.+18     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     3fa:	e8 2f       	mov	r30, r24
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e8 52       	subi	r30, 0x28	; 40
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	20 81       	ld	r18, Z
     408:	31 81       	ldd	r19, Z+1	; 0x01
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     410:	fb 01       	movw	r30, r22
     412:	77 23       	and	r23, r23
     414:	0c f4       	brge	.+2      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     416:	31 96       	adiw	r30, 0x01	; 1
     418:	f5 95       	asr	r31
     41a:	e7 95       	ror	r30
     41c:	e4 51       	subi	r30, 0x14	; 20
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     420:	61 70       	andi	r22, 0x01	; 1
     422:	70 78       	andi	r23, 0x80	; 128
     424:	77 23       	and	r23, r23
     426:	34 f4       	brge	.+12     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     428:	61 50       	subi	r22, 0x01	; 1
     42a:	71 09       	sbc	r23, r1
     42c:	6e 6f       	ori	r22, 0xFE	; 254
     42e:	7f 6f       	ori	r23, 0xFF	; 255
     430:	6f 5f       	subi	r22, 0xFF	; 255
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	66 0f       	add	r22, r22
     436:	77 1f       	adc	r23, r23
     438:	66 0f       	add	r22, r22
     43a:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     43c:	8f e0       	ldi	r24, 0x0F	; 15
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	06 2e       	mov	r0, r22
     442:	02 c0       	rjmp	.+4      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	0a 94       	dec	r0
     44a:	e2 f7       	brpl	.-8      	; 0x444 <__DATA_REGION_LENGTH__+0x44>
     44c:	80 95       	com	r24
     44e:	40 81       	ld	r20, Z
     450:	98 2f       	mov	r25, r24
     452:	94 23       	and	r25, r20
     454:	a9 01       	movw	r20, r18
     456:	4f 70       	andi	r20, 0x0F	; 15
     458:	55 27       	eor	r21, r21
     45a:	06 2e       	mov	r0, r22
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__DATA_REGION_LENGTH__+0x62>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
     466:	49 2b       	or	r20, r25
     468:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     46a:	a9 01       	movw	r20, r18
     46c:	52 95       	swap	r21
     46e:	42 95       	swap	r20
     470:	4f 70       	andi	r20, 0x0F	; 15
     472:	45 27       	eor	r20, r21
     474:	5f 70       	andi	r21, 0x0F	; 15
     476:	45 27       	eor	r20, r21
     478:	4f 70       	andi	r20, 0x0F	; 15
     47a:	55 27       	eor	r21, r21
     47c:	06 2e       	mov	r0, r22
     47e:	02 c0       	rjmp	.+4      	; 0x484 <__DATA_REGION_LENGTH__+0x84>
     480:	44 0f       	add	r20, r20
     482:	55 1f       	adc	r21, r21
     484:	0a 94       	dec	r0
     486:	e2 f7       	brpl	.-8      	; 0x480 <__DATA_REGION_LENGTH__+0x80>
     488:	95 81       	ldd	r25, Z+5	; 0x05
     48a:	98 23       	and	r25, r24
     48c:	49 2b       	or	r20, r25
     48e:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     490:	43 2f       	mov	r20, r19
     492:	55 27       	eor	r21, r21
     494:	4f 70       	andi	r20, 0x0F	; 15
     496:	55 27       	eor	r21, r21
     498:	06 2e       	mov	r0, r22
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__DATA_REGION_LENGTH__+0xa0>
     49c:	44 0f       	add	r20, r20
     49e:	55 1f       	adc	r21, r21
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <__DATA_REGION_LENGTH__+0x9c>
     4a4:	92 85       	ldd	r25, Z+10	; 0x0a
     4a6:	98 23       	and	r25, r24
     4a8:	49 2b       	or	r20, r25
     4aa:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     4ac:	47 85       	ldd	r20, Z+15	; 0x0f
     4ae:	48 23       	and	r20, r24
     4b0:	c9 01       	movw	r24, r18
     4b2:	89 2f       	mov	r24, r25
     4b4:	99 27       	eor	r25, r25
     4b6:	82 95       	swap	r24
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	6a 95       	dec	r22
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__DATA_REGION_LENGTH__+0xbc>
     4c4:	84 2b       	or	r24, r20
     4c6:	87 87       	std	Z+15, r24	; 0x0f
     4c8:	08 95       	ret

000004ca <printAt>:
}

void printAt(long num, int pos) {
     4ca:	8f 92       	push	r8
     4cc:	9f 92       	push	r9
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	4b 01       	movw	r8, r22
     4e0:	5c 01       	movw	r10, r24
     4e2:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     4e4:	24 e6       	ldi	r18, 0x64	; 100
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	0e 94 0a 12 	call	0x2414	; 0x2414 <__divmodsi4>
     4f0:	0f 2e       	mov	r0, r31
     4f2:	fa e0       	ldi	r31, 0x0A	; 10
     4f4:	cf 2e       	mov	r12, r31
     4f6:	d1 2c       	mov	r13, r1
     4f8:	e1 2c       	mov	r14, r1
     4fa:	f1 2c       	mov	r15, r1
     4fc:	f0 2d       	mov	r31, r0
     4fe:	a7 01       	movw	r20, r14
     500:	96 01       	movw	r18, r12
     502:	0e 94 0a 12 	call	0x2414	; 0x2414 <__divmodsi4>
     506:	be 01       	movw	r22, r28
     508:	80 e3       	ldi	r24, 0x30	; 48
     50a:	82 0f       	add	r24, r18
     50c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     510:	21 96       	adiw	r28, 0x01	; 1
     512:	c5 01       	movw	r24, r10
     514:	b4 01       	movw	r22, r8
     516:	a7 01       	movw	r20, r14
     518:	96 01       	movw	r18, r12
     51a:	0e 94 0a 12 	call	0x2414	; 0x2414 <__divmodsi4>
     51e:	86 2f       	mov	r24, r22
     520:	be 01       	movw	r22, r28
     522:	80 5d       	subi	r24, 0xD0	; 208
     524:	0e 94 f5 01 	call	0x3ea	; 0x3ea <writeChar>
	
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	bf 90       	pop	r11
     536:	af 90       	pop	r10
     538:	9f 90       	pop	r9
     53a:	8f 90       	pop	r8
     53c:	08 95       	ret

0000053e <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser synkront (SYNC)
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24

	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	64 ef       	ldi	r22, 0xF4	; 244
     54a:	74 e0       	ldi	r23, 0x04	; 4
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	9d 81       	ldd	r25, Y+5	; 0x05
     550:	0e 94 a2 10 	call	0x2144	; 0x2144 <sync>
     554:	bc 01       	movw	r22, r24
     556:	99 0f       	add	r25, r25
     558:	88 0b       	sbc	r24, r24
     55a:	99 0b       	sbc	r25, r25
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	0e 94 65 02 	call	0x4ca	; 0x4ca <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	64 ef       	ldi	r22, 0xF4	; 244
     56a:	74 e0       	ldi	r23, 0x04	; 4
     56c:	8e 81       	ldd	r24, Y+6	; 0x06
     56e:	9f 81       	ldd	r25, Y+7	; 0x07
     570:	0e 94 a2 10 	call	0x2144	; 0x2144 <sync>
     574:	bc 01       	movw	r22, r24
     576:	99 0f       	add	r25, r25
     578:	88 0b       	sbc	r24, r24
     57a:	99 0b       	sbc	r25, r25
     57c:	44 e0       	ldi	r20, 0x04	; 4
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	0e 94 65 02 	call	0x4ca	; 0x4ca <printAt>

	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     584:	88 85       	ldd	r24, Y+8	; 0x08
     586:	81 11       	cpse	r24, r1
     588:	09 c0       	rjmp	.+18     	; 0x59c <updateDisplay+0x5e>
		printAt(10, 2);
     58a:	42 e0       	ldi	r20, 0x02	; 2
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	6a e0       	ldi	r22, 0x0A	; 10
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 65 02 	call	0x4ca	; 0x4ca <printAt>
     59a:	08 c0       	rjmp	.+16     	; 0x5ac <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     59c:	42 e0       	ldi	r20, 0x02	; 2
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 65 02 	call	0x4ca	; 0x4ca <printAt>
	}

	return 0;
}
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
	if (self->midPos == arg) {
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 85       	ldd	r18, Z+8	; 0x08
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	26 17       	cp	r18, r22
     5ca:	37 07       	cpc	r19, r23
     5cc:	91 f0       	breq	.+36     	; 0x5f2 <switchGen+0x3c>
     5ce:	8c 01       	movw	r16, r24
		// Om samma generator redan är aktiv, gör inget.
		return 0;
	}
	self->midPos = arg;
     5d0:	60 87       	std	Z+8, r22	; 0x08
	// Använder ASYNC för att anropa updateDisplay,
	// så att vi inte blockeras, men ändå uppdaterar displayen direkt.
	ASYNC(self, updateDisplay, 0);
     5d2:	c1 2c       	mov	r12, r1
     5d4:	d1 2c       	mov	r13, r1
     5d6:	0f 2e       	mov	r0, r31
     5d8:	ff e9       	ldi	r31, 0x9F	; 159
     5da:	ef 2e       	mov	r14, r31
     5dc:	f2 e0       	ldi	r31, 0x02	; 2
     5de:	ff 2e       	mov	r15, r31
     5e0:	f0 2d       	mov	r31, r0
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	a9 01       	movw	r20, r18
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	cb 01       	movw	r24, r22
     5ee:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	return 0;
}
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	08 95       	ret

00000604 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     616:	88 85       	ldd	r24, Y+8	; 0x08
     618:	81 11       	cpse	r24, r1
     61a:	13 c0       	rjmp	.+38     	; 0x642 <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     61c:	0c 81       	ldd	r16, Y+4	; 0x04
     61e:	1d 81       	ldd	r17, Y+5	; 0x05
     620:	c1 2c       	mov	r12, r1
     622:	d1 2c       	mov	r13, r1
     624:	0f 2e       	mov	r0, r31
     626:	f8 ef       	ldi	r31, 0xF8	; 248
     628:	ef 2e       	mov	r14, r31
     62a:	f4 e0       	ldi	r31, 0x04	; 4
     62c:	ff 2e       	mov	r15, r31
     62e:	f0 2d       	mov	r31, r0
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	a9 01       	movw	r20, r18
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	cb 01       	movw	r24, r22
     63c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
     640:	12 c0       	rjmp	.+36     	; 0x666 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     642:	0e 81       	ldd	r16, Y+6	; 0x06
     644:	1f 81       	ldd	r17, Y+7	; 0x07
     646:	c1 2c       	mov	r12, r1
     648:	d1 2c       	mov	r13, r1
     64a:	0f 2e       	mov	r0, r31
     64c:	f8 ef       	ldi	r31, 0xF8	; 248
     64e:	ef 2e       	mov	r14, r31
     650:	f4 e0       	ldi	r31, 0x04	; 4
     652:	ff 2e       	mov	r15, r31
     654:	f0 2d       	mov	r31, r0
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	a9 01       	movw	r20, r18
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	cb 01       	movw	r24, r22
     662:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	ASYNC(self, updateDisplay, 0);
     666:	c1 2c       	mov	r12, r1
     668:	d1 2c       	mov	r13, r1
     66a:	0f 2e       	mov	r0, r31
     66c:	ff e9       	ldi	r31, 0x9F	; 159
     66e:	ef 2e       	mov	r14, r31
     670:	f2 e0       	ldi	r31, 0x02	; 2
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
     676:	8e 01       	movw	r16, r28
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	cb 01       	movw	r24, r22
     684:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	return 0;
}
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	08 95       	ret

0000069e <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6b0:	88 85       	ldd	r24, Y+8	; 0x08
     6b2:	81 11       	cpse	r24, r1
     6b4:	13 c0       	rjmp	.+38     	; 0x6dc <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     6b6:	0c 81       	ldd	r16, Y+4	; 0x04
     6b8:	1d 81       	ldd	r17, Y+5	; 0x05
     6ba:	c1 2c       	mov	r12, r1
     6bc:	d1 2c       	mov	r13, r1
     6be:	0f 2e       	mov	r0, r31
     6c0:	fd e2       	ldi	r31, 0x2D	; 45
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f5 e0       	ldi	r31, 0x05	; 5
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	a9 01       	movw	r20, r18
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
     6d6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
     6da:	12 c0       	rjmp	.+36     	; 0x700 <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     6dc:	0e 81       	ldd	r16, Y+6	; 0x06
     6de:	1f 81       	ldd	r17, Y+7	; 0x07
     6e0:	c1 2c       	mov	r12, r1
     6e2:	d1 2c       	mov	r13, r1
     6e4:	0f 2e       	mov	r0, r31
     6e6:	fd e2       	ldi	r31, 0x2D	; 45
     6e8:	ef 2e       	mov	r14, r31
     6ea:	f5 e0       	ldi	r31, 0x05	; 5
     6ec:	ff 2e       	mov	r15, r31
     6ee:	f0 2d       	mov	r31, r0
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	a9 01       	movw	r20, r18
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	cb 01       	movw	r24, r22
     6fc:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	ASYNC(self, updateDisplay, 0);
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	0f 2e       	mov	r0, r31
     706:	ff e9       	ldi	r31, 0x9F	; 159
     708:	ef 2e       	mov	r14, r31
     70a:	f2 e0       	ldi	r31, 0x02	; 2
     70c:	ff 2e       	mov	r15, r31
     70e:	f0 2d       	mov	r31, r0
     710:	8e 01       	movw	r16, r28
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	a9 01       	movw	r20, r18
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	cb 01       	movw	r24, r22
     71e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	return 0;
}
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	08 95       	ret

00000738 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     74a:	88 85       	ldd	r24, Y+8	; 0x08
     74c:	81 11       	cpse	r24, r1
     74e:	13 c0       	rjmp	.+38     	; 0x776 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     750:	0c 81       	ldd	r16, Y+4	; 0x04
     752:	1d 81       	ldd	r17, Y+5	; 0x05
     754:	c1 2c       	mov	r12, r1
     756:	d1 2c       	mov	r13, r1
     758:	0f 2e       	mov	r0, r31
     75a:	fa e3       	ldi	r31, 0x3A	; 58
     75c:	ef 2e       	mov	r14, r31
     75e:	f5 e0       	ldi	r31, 0x05	; 5
     760:	ff 2e       	mov	r15, r31
     762:	f0 2d       	mov	r31, r0
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	a9 01       	movw	r20, r18
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	cb 01       	movw	r24, r22
     770:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
     774:	12 c0       	rjmp	.+36     	; 0x79a <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     776:	0e 81       	ldd	r16, Y+6	; 0x06
     778:	1f 81       	ldd	r17, Y+7	; 0x07
     77a:	c1 2c       	mov	r12, r1
     77c:	d1 2c       	mov	r13, r1
     77e:	0f 2e       	mov	r0, r31
     780:	fa e3       	ldi	r31, 0x3A	; 58
     782:	ef 2e       	mov	r14, r31
     784:	f5 e0       	ldi	r31, 0x05	; 5
     786:	ff 2e       	mov	r15, r31
     788:	f0 2d       	mov	r31, r0
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	a9 01       	movw	r20, r18
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	cb 01       	movw	r24, r22
     796:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	}
	ASYNC(self, updateDisplay, 0);
     79a:	c1 2c       	mov	r12, r1
     79c:	d1 2c       	mov	r13, r1
     79e:	0f 2e       	mov	r0, r31
     7a0:	ff e9       	ldi	r31, 0x9F	; 159
     7a2:	ef 2e       	mov	r14, r31
     7a4:	f2 e0       	ldi	r31, 0x02	; 2
     7a6:	ff 2e       	mov	r15, r31
     7a8:	f0 2d       	mov	r31, r0
     7aa:	8e 01       	movw	r16, r28
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	a9 01       	movw	r20, r18
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	cb 01       	movw	r24, r22
     7b8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	return 0;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	08 95       	ret

000007d2 <horizontal>:

#include "button.h"

#include "interruptHandler.h"

void horizontal(Interrupthandler *self, int arg) {
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     7de:	fc 01       	movw	r30, r24
     7e0:	04 81       	ldd	r16, Z+4	; 0x04
     7e2:	15 81       	ldd	r17, Z+5	; 0x05
     7e4:	c1 2c       	mov	r12, r1
     7e6:	d1 2c       	mov	r13, r1
     7e8:	0f 2e       	mov	r0, r31
     7ea:	f4 e2       	ldi	r31, 0x24	; 36
     7ec:	ef 2e       	mov	r14, r31
     7ee:	f1 e0       	ldi	r31, 0x01	; 1
     7f0:	ff 2e       	mov	r15, r31
     7f2:	f0 2d       	mov	r31, r0
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	a9 01       	movw	r20, r18
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	cb 01       	movw	r24, r22
     800:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	
}
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	08 95       	ret

00000812 <vertical>:

void vertical(Interrupthandler *self, int arg) {
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     81e:	fc 01       	movw	r30, r24
     820:	04 81       	ldd	r16, Z+4	; 0x04
     822:	15 81       	ldd	r17, Z+5	; 0x05
     824:	c1 2c       	mov	r12, r1
     826:	d1 2c       	mov	r13, r1
     828:	0f 2e       	mov	r0, r31
     82a:	ff ec       	ldi	r31, 0xCF	; 207
     82c:	ef 2e       	mov	r14, r31
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	ff 2e       	mov	r15, r31
     832:	f0 2d       	mov	r31, r0
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	a9 01       	movw	r20, r18
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	cb 01       	movw	r24, r22
     840:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <startProgram>:
// Skapar ett Button-objekt som kopplas till GUI för att byta generator/frekvens.
Button button = initButton(&gui);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self, int arg) {
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     864:	c1 2c       	mov	r12, r1
     866:	d1 2c       	mov	r13, r1
     868:	0f 2e       	mov	r0, r31
     86a:	fc e9       	ldi	r31, 0x9C	; 156
     86c:	ef 2e       	mov	r14, r31
     86e:	f4 e0       	ldi	r31, 0x04	; 4
     870:	ff 2e       	mov	r15, r31
     872:	f0 2d       	mov	r31, r0
     874:	0b e1       	ldi	r16, 0x1B	; 27
     876:	11 e0       	ldi	r17, 0x01	; 1
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	a9 01       	movw	r20, r18
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	cb 01       	movw	r24, r22
     884:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
	ASYNC(&pulseGen2, setPulse, 0);
     888:	00 e1       	ldi	r16, 0x10	; 16
     88a:	11 e0       	ldi	r17, 0x01	; 1
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	a9 01       	movw	r20, r18
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	cb 01       	movw	r24, r22
     898:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     89c:	0f 2e       	mov	r0, r31
     89e:	ff e9       	ldi	r31, 0x9F	; 159
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f2 e0       	ldi	r31, 0x02	; 2
     8a4:	ff 2e       	mov	r15, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	8e 01       	movw	r16, r28
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	a9 01       	movw	r20, r18
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	cb 01       	movw	r24, r22
     8b6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>

	return 0;
}
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	08 95       	ret

000008d0 <main>:

int main(void) {
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <main+0x6>
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <main+0x8>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <main+0xa>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
	// Initiera timer/klocka via avr_init().
	avr_init();
     8de:	0e 94 73 05 	call	0xae6	; 0xae6 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     8e2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     8e6:	0e 94 c7 00 	call	0x18e	; 0x18e <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.
	Interrupthandler interr = initInterr(&button);
     8ea:	1a 82       	std	Y+2, r1	; 0x02
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1c 82       	std	Y+4, r1	; 0x04
     8f0:	1b 82       	std	Y+3, r1	; 0x03
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	9e 83       	std	Y+6, r25	; 0x06
     8f8:	8d 83       	std	Y+5, r24	; 0x05
	INSTALL(&interr, horizontal, IRQ_PCINT0);
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	69 ee       	ldi	r22, 0xE9	; 233
     8fe:	73 e0       	ldi	r23, 0x03	; 3
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	0e 94 9d 11 	call	0x233a	; 0x233a <install>
	INSTALL(&interr, vertical, IRQ_PCINT1);
     908:	42 e0       	ldi	r20, 0x02	; 2
     90a:	69 e0       	ldi	r22, 0x09	; 9
     90c:	74 e0       	ldi	r23, 0x04	; 4
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	0e 94 9d 11 	call	0x233a	; 0x233a <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	69 e2       	ldi	r22, 0x29	; 41
     91c:	74 e0       	ldi	r23, 0x04	; 4
     91e:	87 e0       	ldi	r24, 0x07	; 7
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 b7 11 	call	0x236e	; 0x236e <tinytimber>
}
     926:	26 96       	adiw	r28, 0x06	; 6
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     94a:	8c 81       	ldd	r24, Y+4	; 0x04
     94c:	9d 81       	ldd	r25, Y+5	; 0x05
     94e:	89 2b       	or	r24, r25
     950:	51 f4       	brne	.+20     	; 0x966 <setPulse+0x2e>
	    self->outputHigh = false;
     952:	18 86       	std	Y+8, r1	; 0x08
	    SYNC(self->wbitPtr, writeBit, 0);
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	63 ed       	ldi	r22, 0xD3	; 211
     95a:	71 e1       	ldi	r23, 0x11	; 17
     95c:	89 85       	ldd	r24, Y+9	; 0x09
     95e:	9a 85       	ldd	r25, Y+10	; 0x0a
     960:	0e 94 a2 10 	call	0x2144	; 0x2144 <sync>
	    return 0;
     964:	36 c0       	rjmp	.+108    	; 0x9d2 <setPulse+0x9a>
    }
	// Annars toggla outputHigh (true/false => bit=1/0).
    self->outputHigh = !(self->outputHigh);
     966:	48 85       	ldd	r20, Y+8	; 0x08
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	48 27       	eor	r20, r24
     96c:	48 87       	std	Y+8, r20	; 0x08
    int value = self->outputHigh ? 1 : 0;
    SYNC(self->wbitPtr, writeBit, value);
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	63 ed       	ldi	r22, 0xD3	; 211
     972:	71 e1       	ldi	r23, 0x11	; 17
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	9a 85       	ldd	r25, Y+10	; 0x0a
     978:	0e 94 a2 10 	call	0x2144	; 0x2144 <sync>
	
	// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
    int delay = 1000 / self->frec;
    AFTER(MSEC(delay), self, setPulse, 0);
     97c:	6c 81       	ldd	r22, Y+4	; 0x04
     97e:	7d 81       	ldd	r23, Y+5	; 0x05
     980:	88 ee       	ldi	r24, 0xE8	; 232
     982:	93 e0       	ldi	r25, 0x03	; 3
     984:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__udivmodhi4>
     988:	2d e7       	ldi	r18, 0x7D	; 125
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	db 01       	movw	r26, r22
     98e:	0e 94 29 12 	call	0x2452	; 0x2452 <__usmulhisi3>
     992:	8b 01       	movw	r16, r22
     994:	9c 01       	movw	r18, r24
     996:	99 23       	and	r25, r25
     998:	24 f4       	brge	.+8      	; 0x9a2 <setPulse+0x6a>
     99a:	0d 5f       	subi	r16, 0xFD	; 253
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	2f 4f       	sbci	r18, 0xFF	; 255
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	c9 01       	movw	r24, r18
     9a4:	b8 01       	movw	r22, r16
     9a6:	95 95       	asr	r25
     9a8:	87 95       	ror	r24
     9aa:	77 95       	ror	r23
     9ac:	67 95       	ror	r22
     9ae:	95 95       	asr	r25
     9b0:	87 95       	ror	r24
     9b2:	77 95       	ror	r23
     9b4:	67 95       	ror	r22
     9b6:	c1 2c       	mov	r12, r1
     9b8:	d1 2c       	mov	r13, r1
     9ba:	0f 2e       	mov	r0, r31
     9bc:	fc e9       	ldi	r31, 0x9C	; 156
     9be:	ef 2e       	mov	r14, r31
     9c0:	f4 e0       	ldi	r31, 0x04	; 4
     9c2:	ff 2e       	mov	r15, r31
     9c4:	f0 2d       	mov	r31, r0
     9c6:	8e 01       	movw	r16, r28
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	a9 01       	movw	r20, r18
     9ce:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
    return 0;
}
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	08 95       	ret

000009e8 <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
}
     9e8:	fc 01       	movw	r30, r24
     9ea:	84 81       	ldd	r24, Z+4	; 0x04
     9ec:	95 81       	ldd	r25, Z+5	; 0x05
     9ee:	08 95       	ret

000009f0 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
    int old = self->frec;
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
     a04:	9d 81       	ldd	r25, Y+5	; 0x05
    if (self->frec < 99) {
     a06:	83 36       	cpi	r24, 0x63	; 99
     a08:	91 05       	cpc	r25, r1
     a0a:	28 f4       	brcc	.+10     	; 0xa16 <FrecInc+0x26>
	    self->frec++;
     a0c:	9c 01       	movw	r18, r24
     a0e:	2f 5f       	subi	r18, 0xFF	; 255
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	3d 83       	std	Y+5, r19	; 0x05
     a14:	2c 83       	std	Y+4, r18	; 0x04
    }
    // Om går från 0 till mer än 0 starta.
    if (old == 0 && self->frec > 0) {
     a16:	89 2b       	or	r24, r25
     a18:	a9 f4       	brne	.+42     	; 0xa44 <FrecInc+0x54>
     a1a:	8c 81       	ldd	r24, Y+4	; 0x04
     a1c:	9d 81       	ldd	r25, Y+5	; 0x05
     a1e:	89 2b       	or	r24, r25
     a20:	89 f0       	breq	.+34     	; 0xa44 <FrecInc+0x54>
	    ASYNC(self, setPulse, 0);
     a22:	c1 2c       	mov	r12, r1
     a24:	d1 2c       	mov	r13, r1
     a26:	0f 2e       	mov	r0, r31
     a28:	fc e9       	ldi	r31, 0x9C	; 156
     a2a:	ef 2e       	mov	r14, r31
     a2c:	f4 e0       	ldi	r31, 0x04	; 4
     a2e:	ff 2e       	mov	r15, r31
     a30:	f0 2d       	mov	r31, r0
     a32:	8e 01       	movw	r16, r28
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	a9 01       	movw	r20, r18
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	cb 01       	movw	r24, r22
     a40:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
    }
    return self->frec;
    }
     a44:	8c 81       	ldd	r24, Y+4	; 0x04
     a46:	9d 81       	ldd	r25, Y+5	; 0x05
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     a5a:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     a5c:	24 81       	ldd	r18, Z+4	; 0x04
     a5e:	35 81       	ldd	r19, Z+5	; 0x05
     a60:	21 15       	cp	r18, r1
     a62:	31 05       	cpc	r19, r1
     a64:	21 f0       	breq	.+8      	; 0xa6e <FrecDec+0x14>
		self->frec--;
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	31 09       	sbc	r19, r1
     a6a:	35 83       	std	Z+5, r19	; 0x05
     a6c:	24 83       	std	Z+4, r18	; 0x04
	}
	return self->frec;
}
     a6e:	84 81       	ldd	r24, Z+4	; 0x04
     a70:	95 81       	ldd	r25, Z+5	; 0x05
     a72:	08 95       	ret

00000a74 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     a82:	84 81       	ldd	r24, Z+4	; 0x04
     a84:	95 81       	ldd	r25, Z+5	; 0x05
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	c1 f4       	brne	.+48     	; 0xaba <FrecReset+0x46>
	    self->frec = self->frec_old;
     a8a:	86 81       	ldd	r24, Z+6	; 0x06
     a8c:	97 81       	ldd	r25, Z+7	; 0x07
     a8e:	95 83       	std	Z+5, r25	; 0x05
     a90:	84 83       	std	Z+4, r24	; 0x04
	    if (self->frec > 0) {
     a92:	89 2b       	or	r24, r25
     a94:	f9 f0       	breq	.+62     	; 0xad4 <FrecReset+0x60>
		    ASYNC(self, setPulse, 0);
     a96:	c1 2c       	mov	r12, r1
     a98:	d1 2c       	mov	r13, r1
     a9a:	0f 2e       	mov	r0, r31
     a9c:	fc e9       	ldi	r31, 0x9C	; 156
     a9e:	ef 2e       	mov	r14, r31
     aa0:	f4 e0       	ldi	r31, 0x04	; 4
     aa2:	ff 2e       	mov	r15, r31
     aa4:	f0 2d       	mov	r31, r0
     aa6:	8f 01       	movw	r16, r30
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	a9 01       	movw	r20, r18
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	cb 01       	movw	r24, r22
     ab4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
     ab8:	0d c0       	rjmp	.+26     	; 0xad4 <FrecReset+0x60>
	    }
	    } else {
	    self->frec_old = self->frec;
     aba:	97 83       	std	Z+7, r25	; 0x07
     abc:	86 83       	std	Z+6, r24	; 0x06
	    self->frec = 0;
     abe:	15 82       	std	Z+5, r1	; 0x05
     ac0:	14 82       	std	Z+4, r1	; 0x04
	    self->outputHigh = false;
     ac2:	10 86       	std	Z+8, r1	; 0x08
	    SYNC(self->wbitPtr, writeBit, 0);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	63 ed       	ldi	r22, 0xD3	; 211
     aca:	71 e1       	ldi	r23, 0x11	; 17
     acc:	81 85       	ldd	r24, Z+9	; 0x09
     ace:	92 85       	ldd	r25, Z+10	; 0x0a
     ad0:	0e 94 a2 10 	call	0x2144	; 0x2144 <sync>
    }
    return 0;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	08 95       	ret

00000ae6 <avr_init>:
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	
	CLKPR = 0x80;
     ae6:	e1 e6       	ldi	r30, 0x61	; 97
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 e8       	ldi	r24, 0x80	; 128
     aec:	80 83       	st	Z, r24
	CLKPR = 0x00;
     aee:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     af0:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     af2:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     af4:	e1 e8       	ldi	r30, 0x81	; 129
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	8d 60       	ori	r24, 0x0D	; 13
     afc:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     afe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b02:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     b06:	ef e6       	ldi	r30, 0x6F	; 111
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	82 60       	ori	r24, 0x02	; 2
     b0e:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     b10:	82 ec       	ldi	r24, 0xC2	; 194
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b18:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b1c:	08 95       	ret

00000b1e <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	00 d0       	rcall	.+0      	; 0xb24 <initialize+0x6>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <initialize+0x8>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	8f e3       	ldi	r24, 0x3F	; 63
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	2f e1       	ldi	r18, 0x1F	; 31
     b30:	33 e0       	ldi	r19, 0x03	; 3
     b32:	fc 01       	movw	r30, r24
     b34:	70 97       	sbiw	r30, 0x10	; 16
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	80 83       	st	Z, r24
     b3a:	40 96       	adiw	r24, 0x10	; 16
     b3c:	82 17       	cp	r24, r18
     b3e:	93 07       	cpc	r25, r19
     b40:	c1 f7       	brne	.-16     	; 0xb32 <initialize+0x14>
     b42:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <messages+0xe1>
     b46:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <messages+0xe0>
     b4a:	ea e7       	ldi	r30, 0x7A	; 122
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	87 e9       	ldi	r24, 0x97	; 151
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
     b56:	84 eb       	ldi	r24, 0xB4	; 180
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	96 8f       	std	Z+30, r25	; 0x1e
     b5c:	85 8f       	std	Z+29, r24	; 0x1d
     b5e:	a1 ed       	ldi	r26, 0xD1	; 209
     b60:	b1 e0       	ldi	r27, 0x01	; 1
     b62:	b3 af       	std	Z+59, r27	; 0x3b
     b64:	a2 af       	std	Z+58, r26	; 0x3a
     b66:	1d 92       	st	X+, r1
     b68:	1c 92       	st	X, r1
     b6a:	fa 83       	std	Y+2, r31	; 0x02
     b6c:	e9 83       	std	Y+1, r30	; 0x01
     b6e:	eb e7       	ldi	r30, 0x7B	; 123
     b70:	f3 e0       	ldi	r31, 0x03	; 3
     b72:	fc 83       	std	Y+4, r31	; 0x04
     b74:	eb 83       	std	Y+3, r30	; 0x03
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	06 96       	adiw	r24, 0x06	; 6
     b7c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <setjmp>
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	e9 81       	ldd	r30, Y+1	; 0x01
     b86:	fa 81       	ldd	r31, Y+2	; 0x02
     b88:	97 8b       	std	Z+23, r25	; 0x17
     b8a:	86 8b       	std	Z+22, r24	; 0x16
     b8c:	91 8f       	std	Z+25, r25	; 0x19
     b8e:	80 8f       	std	Z+24, r24	; 0x18
     b90:	8f e2       	ldi	r24, 0x2F	; 47
     b92:	91 e1       	ldi	r25, 0x11	; 17
     b94:	94 8f       	std	Z+28, r25	; 0x1c
     b96:	83 8f       	std	Z+27, r24	; 0x1b
     b98:	15 82       	std	Z+5, r1	; 0x05
     b9a:	14 82       	std	Z+4, r1	; 0x04
     b9c:	7d 96       	adiw	r30, 0x1d	; 29
     b9e:	fa 83       	std	Y+2, r31	; 0x02
     ba0:	e9 83       	std	Y+1, r30	; 0x01
     ba2:	eb 81       	ldd	r30, Y+3	; 0x03
     ba4:	fc 81       	ldd	r31, Y+4	; 0x04
     ba6:	e0 5a       	subi	r30, 0xA0	; 160
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	fc 83       	std	Y+4, r31	; 0x04
     bac:	eb 83       	std	Y+3, r30	; 0x03
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	9a 81       	ldd	r25, Y+2	; 0x02
     bb2:	8e 5e       	subi	r24, 0xEE	; 238
     bb4:	91 40       	sbci	r25, 0x01	; 1
     bb6:	f9 f6       	brne	.-66     	; 0xb76 <initialize+0x58>
     bb8:	e2 e1       	ldi	r30, 0x12	; 18
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	11 82       	std	Z+1, r1	; 0x01
     bbe:	10 82       	st	Z, r1
     bc0:	15 82       	std	Z+5, r1	; 0x05
     bc2:	14 82       	std	Z+4, r1	; 0x04
     bc4:	13 82       	std	Z+3, r1	; 0x03
     bc6:	12 82       	std	Z+2, r1	; 0x02
     bc8:	e1 e6       	ldi	r30, 0x61	; 97
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 e8       	ldi	r24, 0x80	; 128
     bce:	80 83       	st	Z, r24
     bd0:	10 82       	st	Z, r1
     bd2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bd6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <dispatch>:
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <dispatch+0x6>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <current>
     c06:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <current+0x1>
     c0a:	06 96       	adiw	r24, 0x06	; 6
     c0c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <setjmp>
     c10:	89 2b       	or	r24, r25
     c12:	59 f4       	brne	.+22     	; 0xc2a <dispatch+0x36>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <current+0x1>
     c1c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <current>
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	06 96       	adiw	r24, 0x06	; 6
     c26:	0e 94 81 12 	call	0x2502	; 0x2502 <longjmp>
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <schedule>:
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <msgQ>
     c40:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <msgQ+0x1>
     c44:	30 97       	sbiw	r30, 0x00	; 0
     c46:	61 f1       	breq	.+88     	; 0xca0 <schedule+0x6c>
     c48:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <threadPool>
     c4c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <threadPool+0x1>
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	31 f1       	breq	.+76     	; 0xca0 <schedule+0x6c>
     c54:	c0 91 32 01 	lds	r28, 0x0132	; 0x800132 <activeStack>
     c58:	d0 91 33 01 	lds	r29, 0x0133	; 0x800133 <activeStack+0x1>
     c5c:	aa 81       	ldd	r26, Y+2	; 0x02
     c5e:	bb 81       	ldd	r27, Y+3	; 0x03
     c60:	10 97       	sbiw	r26, 0x00	; 0
     c62:	79 f0       	breq	.+30     	; 0xc82 <schedule+0x4e>
     c64:	46 81       	ldd	r20, Z+6	; 0x06
     c66:	57 81       	ldd	r21, Z+7	; 0x07
     c68:	60 85       	ldd	r22, Z+8	; 0x08
     c6a:	71 85       	ldd	r23, Z+9	; 0x09
     c6c:	16 96       	adiw	r26, 0x06	; 6
     c6e:	0d 91       	ld	r16, X+
     c70:	1d 91       	ld	r17, X+
     c72:	2d 91       	ld	r18, X+
     c74:	3c 91       	ld	r19, X
     c76:	19 97       	sbiw	r26, 0x09	; 9
     c78:	40 1b       	sub	r20, r16
     c7a:	51 0b       	sbc	r21, r17
     c7c:	62 0b       	sbc	r22, r18
     c7e:	73 0b       	sbc	r23, r19
     c80:	7a f4       	brpl	.+30     	; 0xca0 <schedule+0x6c>
     c82:	fc 01       	movw	r30, r24
     c84:	20 81       	ld	r18, Z
     c86:	31 81       	ldd	r19, Z+1	; 0x01
     c88:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <threadPool+0x1>
     c8c:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <threadPool>
     c90:	d1 83       	std	Z+1, r29	; 0x01
     c92:	c0 83       	st	Z, r28
     c94:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <activeStack+0x1>
     c98:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <activeStack>
     c9c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dispatch>
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <__vector_1>:
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     cd0:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     cd4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cd8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cdc:	c9 01       	movw	r24, r18
     cde:	03 2e       	mov	r0, r19
     ce0:	00 0c       	add	r0, r0
     ce2:	aa 0b       	sbc	r26, r26
     ce4:	bb 0b       	sbc	r27, r27
     ce6:	dc 01       	movw	r26, r24
     ce8:	99 27       	eor	r25, r25
     cea:	88 27       	eor	r24, r24
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	84 2b       	or	r24, r20
     cf2:	95 2b       	or	r25, r21
     cf4:	a6 2b       	or	r26, r22
     cf6:	b7 2b       	or	r27, r23
     cf8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     cfc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     d00:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     d04:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     d08:	b0 9b       	sbis	0x16, 0	; 22
     d0a:	1b c0       	rjmp	.+54     	; 0xd42 <__vector_1+0x98>
     d0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d14:	c9 01       	movw	r24, r18
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	09 2e       	mov	r0, r25
     d1a:	00 0c       	add	r0, r0
     d1c:	aa 0b       	sbc	r26, r26
     d1e:	bb 0b       	sbc	r27, r27
     d20:	dc 01       	movw	r26, r24
     d22:	99 27       	eor	r25, r25
     d24:	88 27       	eor	r24, r24
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	84 2b       	or	r24, r20
     d2c:	95 2b       	or	r25, r21
     d2e:	a6 2b       	or	r26, r22
     d30:	b7 2b       	or	r27, r23
     d32:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     d36:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     d3a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     d3e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     d42:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable>
     d46:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x1>
     d4a:	30 97       	sbiw	r30, 0x00	; 0
     d4c:	39 f0       	breq	.+14     	; 0xd5c <__vector_1+0xb2>
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable>
     d56:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x1>
     d5a:	09 95       	icall
     d5c:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_2>:
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     da8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     dac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     db0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     db4:	c9 01       	movw	r24, r18
     db6:	03 2e       	mov	r0, r19
     db8:	00 0c       	add	r0, r0
     dba:	aa 0b       	sbc	r26, r26
     dbc:	bb 0b       	sbc	r27, r27
     dbe:	dc 01       	movw	r26, r24
     dc0:	99 27       	eor	r25, r25
     dc2:	88 27       	eor	r24, r24
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	84 2b       	or	r24, r20
     dca:	95 2b       	or	r25, r21
     dcc:	a6 2b       	or	r26, r22
     dce:	b7 2b       	or	r27, r23
     dd0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     dd4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     dd8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     ddc:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     de0:	b0 9b       	sbis	0x16, 0	; 22
     de2:	1b c0       	rjmp	.+54     	; 0xe1a <__vector_2+0x98>
     de4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     de8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dec:	c9 01       	movw	r24, r18
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	09 2e       	mov	r0, r25
     df2:	00 0c       	add	r0, r0
     df4:	aa 0b       	sbc	r26, r26
     df6:	bb 0b       	sbc	r27, r27
     df8:	dc 01       	movw	r26, r24
     dfa:	99 27       	eor	r25, r25
     dfc:	88 27       	eor	r24, r24
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	84 2b       	or	r24, r20
     e04:	95 2b       	or	r25, r21
     e06:	a6 2b       	or	r26, r22
     e08:	b7 2b       	or	r27, r23
     e0a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     e0e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     e12:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     e16:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     e1a:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x2>
     e1e:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x3>
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	39 f0       	breq	.+14     	; 0xe34 <__vector_2+0xb2>
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x2>
     e2e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x3>
     e32:	09 95       	icall
     e34:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <__vector_3>:
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     e80:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     e84:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e88:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e8c:	c9 01       	movw	r24, r18
     e8e:	03 2e       	mov	r0, r19
     e90:	00 0c       	add	r0, r0
     e92:	aa 0b       	sbc	r26, r26
     e94:	bb 0b       	sbc	r27, r27
     e96:	dc 01       	movw	r26, r24
     e98:	99 27       	eor	r25, r25
     e9a:	88 27       	eor	r24, r24
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	84 2b       	or	r24, r20
     ea2:	95 2b       	or	r25, r21
     ea4:	a6 2b       	or	r26, r22
     ea6:	b7 2b       	or	r27, r23
     ea8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     eac:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     eb0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     eb4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     eb8:	b0 9b       	sbis	0x16, 0	; 22
     eba:	1b c0       	rjmp	.+54     	; 0xef2 <__vector_3+0x98>
     ebc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ec0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ec4:	c9 01       	movw	r24, r18
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	09 2e       	mov	r0, r25
     eca:	00 0c       	add	r0, r0
     ecc:	aa 0b       	sbc	r26, r26
     ece:	bb 0b       	sbc	r27, r27
     ed0:	dc 01       	movw	r26, r24
     ed2:	99 27       	eor	r25, r25
     ed4:	88 27       	eor	r24, r24
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	84 2b       	or	r24, r20
     edc:	95 2b       	or	r25, r21
     ede:	a6 2b       	or	r26, r22
     ee0:	b7 2b       	or	r27, r23
     ee2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     ee6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     eea:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     eee:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     ef2:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x4>
     ef6:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x5>
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	39 f0       	breq	.+14     	; 0xf0c <__vector_3+0xb2>
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x4>
     f06:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x5>
     f0a:	09 95       	icall
     f0c:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <__vector_4>:
     f32:	1f 92       	push	r1
     f34:	0f 92       	push	r0
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
     f58:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
     f5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f64:	c9 01       	movw	r24, r18
     f66:	03 2e       	mov	r0, r19
     f68:	00 0c       	add	r0, r0
     f6a:	aa 0b       	sbc	r26, r26
     f6c:	bb 0b       	sbc	r27, r27
     f6e:	dc 01       	movw	r26, r24
     f70:	99 27       	eor	r25, r25
     f72:	88 27       	eor	r24, r24
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	84 2b       	or	r24, r20
     f7a:	95 2b       	or	r25, r21
     f7c:	a6 2b       	or	r26, r22
     f7e:	b7 2b       	or	r27, r23
     f80:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     f84:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     f88:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     f8c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     f90:	b0 9b       	sbis	0x16, 0	; 22
     f92:	1b c0       	rjmp	.+54     	; 0xfca <__vector_4+0x98>
     f94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f9c:	c9 01       	movw	r24, r18
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	09 2e       	mov	r0, r25
     fa2:	00 0c       	add	r0, r0
     fa4:	aa 0b       	sbc	r26, r26
     fa6:	bb 0b       	sbc	r27, r27
     fa8:	dc 01       	movw	r26, r24
     faa:	99 27       	eor	r25, r25
     fac:	88 27       	eor	r24, r24
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	84 2b       	or	r24, r20
     fb4:	95 2b       	or	r25, r21
     fb6:	a6 2b       	or	r26, r22
     fb8:	b7 2b       	or	r27, r23
     fba:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
     fbe:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
     fc2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
     fc6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
     fca:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x6>
     fce:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x7>
     fd2:	30 97       	sbiw	r30, 0x00	; 0
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <__vector_4+0xb2>
     fd6:	63 e0       	ldi	r22, 0x03	; 3
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x6>
     fde:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x7>
     fe2:	09 95       	icall
     fe4:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__vector_5>:
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
    102c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1030:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1034:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1038:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    103c:	c9 01       	movw	r24, r18
    103e:	03 2e       	mov	r0, r19
    1040:	00 0c       	add	r0, r0
    1042:	aa 0b       	sbc	r26, r26
    1044:	bb 0b       	sbc	r27, r27
    1046:	dc 01       	movw	r26, r24
    1048:	99 27       	eor	r25, r25
    104a:	88 27       	eor	r24, r24
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	84 2b       	or	r24, r20
    1052:	95 2b       	or	r25, r21
    1054:	a6 2b       	or	r26, r22
    1056:	b7 2b       	or	r27, r23
    1058:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    105c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1060:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1064:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1068:	b0 9b       	sbis	0x16, 0	; 22
    106a:	1b c0       	rjmp	.+54     	; 0x10a2 <__vector_5+0x98>
    106c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1070:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1074:	c9 01       	movw	r24, r18
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	09 2e       	mov	r0, r25
    107a:	00 0c       	add	r0, r0
    107c:	aa 0b       	sbc	r26, r26
    107e:	bb 0b       	sbc	r27, r27
    1080:	dc 01       	movw	r26, r24
    1082:	99 27       	eor	r25, r25
    1084:	88 27       	eor	r24, r24
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	84 2b       	or	r24, r20
    108c:	95 2b       	or	r25, r21
    108e:	a6 2b       	or	r26, r22
    1090:	b7 2b       	or	r27, r23
    1092:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1096:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    109a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    109e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    10a2:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x8>
    10a6:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x9>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	39 f0       	breq	.+14     	; 0x10bc <__vector_5+0xb2>
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x8>
    10b6:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x9>
    10ba:	09 95       	icall
    10bc:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    10c0:	ff 91       	pop	r31
    10c2:	ef 91       	pop	r30
    10c4:	bf 91       	pop	r27
    10c6:	af 91       	pop	r26
    10c8:	9f 91       	pop	r25
    10ca:	8f 91       	pop	r24
    10cc:	7f 91       	pop	r23
    10ce:	6f 91       	pop	r22
    10d0:	5f 91       	pop	r21
    10d2:	4f 91       	pop	r20
    10d4:	3f 91       	pop	r19
    10d6:	2f 91       	pop	r18
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <__vector_10>:
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	2f 93       	push	r18
    10ee:	3f 93       	push	r19
    10f0:	4f 93       	push	r20
    10f2:	5f 93       	push	r21
    10f4:	6f 93       	push	r22
    10f6:	7f 93       	push	r23
    10f8:	8f 93       	push	r24
    10fa:	9f 93       	push	r25
    10fc:	af 93       	push	r26
    10fe:	bf 93       	push	r27
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
    1104:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1108:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    110c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1110:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1114:	c9 01       	movw	r24, r18
    1116:	03 2e       	mov	r0, r19
    1118:	00 0c       	add	r0, r0
    111a:	aa 0b       	sbc	r26, r26
    111c:	bb 0b       	sbc	r27, r27
    111e:	dc 01       	movw	r26, r24
    1120:	99 27       	eor	r25, r25
    1122:	88 27       	eor	r24, r24
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	84 2b       	or	r24, r20
    112a:	95 2b       	or	r25, r21
    112c:	a6 2b       	or	r26, r22
    112e:	b7 2b       	or	r27, r23
    1130:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1134:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1138:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    113c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1140:	b0 9b       	sbis	0x16, 0	; 22
    1142:	1b c0       	rjmp	.+54     	; 0x117a <__vector_10+0x98>
    1144:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1148:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    114c:	c9 01       	movw	r24, r18
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	09 2e       	mov	r0, r25
    1152:	00 0c       	add	r0, r0
    1154:	aa 0b       	sbc	r26, r26
    1156:	bb 0b       	sbc	r27, r27
    1158:	dc 01       	movw	r26, r24
    115a:	99 27       	eor	r25, r25
    115c:	88 27       	eor	r24, r24
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	84 2b       	or	r24, r20
    1164:	95 2b       	or	r25, r21
    1166:	a6 2b       	or	r26, r22
    1168:	b7 2b       	or	r27, r23
    116a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    116e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1172:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1176:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    117a:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0xa>
    117e:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0xb>
    1182:	30 97       	sbiw	r30, 0x00	; 0
    1184:	39 f0       	breq	.+14     	; 0x1194 <__vector_10+0xb2>
    1186:	65 e0       	ldi	r22, 0x05	; 5
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0xa>
    118e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0xb>
    1192:	09 95       	icall
    1194:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1198:	ff 91       	pop	r31
    119a:	ef 91       	pop	r30
    119c:	bf 91       	pop	r27
    119e:	af 91       	pop	r26
    11a0:	9f 91       	pop	r25
    11a2:	8f 91       	pop	r24
    11a4:	7f 91       	pop	r23
    11a6:	6f 91       	pop	r22
    11a8:	5f 91       	pop	r21
    11aa:	4f 91       	pop	r20
    11ac:	3f 91       	pop	r19
    11ae:	2f 91       	pop	r18
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_11>:
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    11e0:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    11e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ec:	c9 01       	movw	r24, r18
    11ee:	03 2e       	mov	r0, r19
    11f0:	00 0c       	add	r0, r0
    11f2:	aa 0b       	sbc	r26, r26
    11f4:	bb 0b       	sbc	r27, r27
    11f6:	dc 01       	movw	r26, r24
    11f8:	99 27       	eor	r25, r25
    11fa:	88 27       	eor	r24, r24
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	84 2b       	or	r24, r20
    1202:	95 2b       	or	r25, r21
    1204:	a6 2b       	or	r26, r22
    1206:	b7 2b       	or	r27, r23
    1208:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    120c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1210:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1214:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1218:	b0 9b       	sbis	0x16, 0	; 22
    121a:	1b c0       	rjmp	.+54     	; 0x1252 <__vector_11+0x98>
    121c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1220:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1224:	c9 01       	movw	r24, r18
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	09 2e       	mov	r0, r25
    122a:	00 0c       	add	r0, r0
    122c:	aa 0b       	sbc	r26, r26
    122e:	bb 0b       	sbc	r27, r27
    1230:	dc 01       	movw	r26, r24
    1232:	99 27       	eor	r25, r25
    1234:	88 27       	eor	r24, r24
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	84 2b       	or	r24, r20
    123c:	95 2b       	or	r25, r21
    123e:	a6 2b       	or	r26, r22
    1240:	b7 2b       	or	r27, r23
    1242:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1246:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    124a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    124e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1252:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0xc>
    1256:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0xd>
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	39 f0       	breq	.+14     	; 0x126c <__vector_11+0xb2>
    125e:	66 e0       	ldi	r22, 0x06	; 6
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0xc>
    1266:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0xd>
    126a:	09 95       	icall
    126c:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_12>:
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
    12b4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    12b8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    12bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12c4:	c9 01       	movw	r24, r18
    12c6:	03 2e       	mov	r0, r19
    12c8:	00 0c       	add	r0, r0
    12ca:	aa 0b       	sbc	r26, r26
    12cc:	bb 0b       	sbc	r27, r27
    12ce:	dc 01       	movw	r26, r24
    12d0:	99 27       	eor	r25, r25
    12d2:	88 27       	eor	r24, r24
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	84 2b       	or	r24, r20
    12da:	95 2b       	or	r25, r21
    12dc:	a6 2b       	or	r26, r22
    12de:	b7 2b       	or	r27, r23
    12e0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    12e4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    12e8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    12ec:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    12f0:	b0 9b       	sbis	0x16, 0	; 22
    12f2:	1b c0       	rjmp	.+54     	; 0x132a <__vector_12+0x98>
    12f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12fc:	c9 01       	movw	r24, r18
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	09 2e       	mov	r0, r25
    1302:	00 0c       	add	r0, r0
    1304:	aa 0b       	sbc	r26, r26
    1306:	bb 0b       	sbc	r27, r27
    1308:	dc 01       	movw	r26, r24
    130a:	99 27       	eor	r25, r25
    130c:	88 27       	eor	r24, r24
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	84 2b       	or	r24, r20
    1314:	95 2b       	or	r25, r21
    1316:	a6 2b       	or	r26, r22
    1318:	b7 2b       	or	r27, r23
    131a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    131e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1322:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1326:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    132a:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0xe>
    132e:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0xf>
    1332:	30 97       	sbiw	r30, 0x00	; 0
    1334:	39 f0       	breq	.+14     	; 0x1344 <__vector_12+0xb2>
    1336:	67 e0       	ldi	r22, 0x07	; 7
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0xe>
    133e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0xf>
    1342:	09 95       	icall
    1344:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <__vector_13>:
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1390:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1394:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1398:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    139c:	c9 01       	movw	r24, r18
    139e:	03 2e       	mov	r0, r19
    13a0:	00 0c       	add	r0, r0
    13a2:	aa 0b       	sbc	r26, r26
    13a4:	bb 0b       	sbc	r27, r27
    13a6:	dc 01       	movw	r26, r24
    13a8:	99 27       	eor	r25, r25
    13aa:	88 27       	eor	r24, r24
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	84 2b       	or	r24, r20
    13b2:	95 2b       	or	r25, r21
    13b4:	a6 2b       	or	r26, r22
    13b6:	b7 2b       	or	r27, r23
    13b8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    13bc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    13c0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    13c4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    13c8:	b0 9b       	sbis	0x16, 0	; 22
    13ca:	1b c0       	rjmp	.+54     	; 0x1402 <__vector_13+0x98>
    13cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d4:	c9 01       	movw	r24, r18
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	09 2e       	mov	r0, r25
    13da:	00 0c       	add	r0, r0
    13dc:	aa 0b       	sbc	r26, r26
    13de:	bb 0b       	sbc	r27, r27
    13e0:	dc 01       	movw	r26, r24
    13e2:	99 27       	eor	r25, r25
    13e4:	88 27       	eor	r24, r24
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	84 2b       	or	r24, r20
    13ec:	95 2b       	or	r25, r21
    13ee:	a6 2b       	or	r26, r22
    13f0:	b7 2b       	or	r27, r23
    13f2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    13f6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    13fa:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    13fe:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1402:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x10>
    1406:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x11>
    140a:	30 97       	sbiw	r30, 0x00	; 0
    140c:	39 f0       	breq	.+14     	; 0x141c <__vector_13+0xb2>
    140e:	68 e0       	ldi	r22, 0x08	; 8
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x10>
    1416:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x11>
    141a:	09 95       	icall
    141c:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1420:	ff 91       	pop	r31
    1422:	ef 91       	pop	r30
    1424:	bf 91       	pop	r27
    1426:	af 91       	pop	r26
    1428:	9f 91       	pop	r25
    142a:	8f 91       	pop	r24
    142c:	7f 91       	pop	r23
    142e:	6f 91       	pop	r22
    1430:	5f 91       	pop	r21
    1432:	4f 91       	pop	r20
    1434:	3f 91       	pop	r19
    1436:	2f 91       	pop	r18
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <__vector_14>:
    1442:	1f 92       	push	r1
    1444:	0f 92       	push	r0
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	0f 92       	push	r0
    144a:	11 24       	eor	r1, r1
    144c:	2f 93       	push	r18
    144e:	3f 93       	push	r19
    1450:	4f 93       	push	r20
    1452:	5f 93       	push	r21
    1454:	6f 93       	push	r22
    1456:	7f 93       	push	r23
    1458:	8f 93       	push	r24
    145a:	9f 93       	push	r25
    145c:	af 93       	push	r26
    145e:	bf 93       	push	r27
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
    1464:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1468:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    146c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1470:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1474:	c9 01       	movw	r24, r18
    1476:	03 2e       	mov	r0, r19
    1478:	00 0c       	add	r0, r0
    147a:	aa 0b       	sbc	r26, r26
    147c:	bb 0b       	sbc	r27, r27
    147e:	dc 01       	movw	r26, r24
    1480:	99 27       	eor	r25, r25
    1482:	88 27       	eor	r24, r24
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	84 2b       	or	r24, r20
    148a:	95 2b       	or	r25, r21
    148c:	a6 2b       	or	r26, r22
    148e:	b7 2b       	or	r27, r23
    1490:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1494:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1498:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    149c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    14a0:	b0 9b       	sbis	0x16, 0	; 22
    14a2:	1b c0       	rjmp	.+54     	; 0x14da <__vector_14+0x98>
    14a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ac:	c9 01       	movw	r24, r18
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	09 2e       	mov	r0, r25
    14b2:	00 0c       	add	r0, r0
    14b4:	aa 0b       	sbc	r26, r26
    14b6:	bb 0b       	sbc	r27, r27
    14b8:	dc 01       	movw	r26, r24
    14ba:	99 27       	eor	r25, r25
    14bc:	88 27       	eor	r24, r24
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	84 2b       	or	r24, r20
    14c4:	95 2b       	or	r25, r21
    14c6:	a6 2b       	or	r26, r22
    14c8:	b7 2b       	or	r27, r23
    14ca:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    14ce:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    14d2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    14d6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    14da:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x12>
    14de:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x13>
    14e2:	30 97       	sbiw	r30, 0x00	; 0
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <__vector_14+0xb2>
    14e6:	69 e0       	ldi	r22, 0x09	; 9
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x12>
    14ee:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x13>
    14f2:	09 95       	icall
    14f4:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    14f8:	ff 91       	pop	r31
    14fa:	ef 91       	pop	r30
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	7f 91       	pop	r23
    1506:	6f 91       	pop	r22
    1508:	5f 91       	pop	r21
    150a:	4f 91       	pop	r20
    150c:	3f 91       	pop	r19
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <__vector_15>:
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	0f 92       	push	r0
    1522:	11 24       	eor	r1, r1
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	5f 93       	push	r21
    152c:	6f 93       	push	r22
    152e:	7f 93       	push	r23
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	af 93       	push	r26
    1536:	bf 93       	push	r27
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
    153c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1540:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1544:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1548:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    154c:	c9 01       	movw	r24, r18
    154e:	03 2e       	mov	r0, r19
    1550:	00 0c       	add	r0, r0
    1552:	aa 0b       	sbc	r26, r26
    1554:	bb 0b       	sbc	r27, r27
    1556:	dc 01       	movw	r26, r24
    1558:	99 27       	eor	r25, r25
    155a:	88 27       	eor	r24, r24
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	84 2b       	or	r24, r20
    1562:	95 2b       	or	r25, r21
    1564:	a6 2b       	or	r26, r22
    1566:	b7 2b       	or	r27, r23
    1568:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    156c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1570:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1574:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1578:	b0 9b       	sbis	0x16, 0	; 22
    157a:	1b c0       	rjmp	.+54     	; 0x15b2 <__vector_15+0x98>
    157c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1580:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1584:	c9 01       	movw	r24, r18
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	09 2e       	mov	r0, r25
    158a:	00 0c       	add	r0, r0
    158c:	aa 0b       	sbc	r26, r26
    158e:	bb 0b       	sbc	r27, r27
    1590:	dc 01       	movw	r26, r24
    1592:	99 27       	eor	r25, r25
    1594:	88 27       	eor	r24, r24
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	84 2b       	or	r24, r20
    159c:	95 2b       	or	r25, r21
    159e:	a6 2b       	or	r26, r22
    15a0:	b7 2b       	or	r27, r23
    15a2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    15a6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    15aa:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    15ae:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    15b2:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x14>
    15b6:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x15>
    15ba:	30 97       	sbiw	r30, 0x00	; 0
    15bc:	39 f0       	breq	.+14     	; 0x15cc <__vector_15+0xb2>
    15be:	6a e0       	ldi	r22, 0x0A	; 10
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x14>
    15c6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x15>
    15ca:	09 95       	icall
    15cc:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_16>:
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1618:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    161c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1620:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1624:	c9 01       	movw	r24, r18
    1626:	03 2e       	mov	r0, r19
    1628:	00 0c       	add	r0, r0
    162a:	aa 0b       	sbc	r26, r26
    162c:	bb 0b       	sbc	r27, r27
    162e:	dc 01       	movw	r26, r24
    1630:	99 27       	eor	r25, r25
    1632:	88 27       	eor	r24, r24
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	84 2b       	or	r24, r20
    163a:	95 2b       	or	r25, r21
    163c:	a6 2b       	or	r26, r22
    163e:	b7 2b       	or	r27, r23
    1640:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1644:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1648:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    164c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1650:	b0 9b       	sbis	0x16, 0	; 22
    1652:	1b c0       	rjmp	.+54     	; 0x168a <__vector_16+0x98>
    1654:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1658:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    165c:	c9 01       	movw	r24, r18
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	09 2e       	mov	r0, r25
    1662:	00 0c       	add	r0, r0
    1664:	aa 0b       	sbc	r26, r26
    1666:	bb 0b       	sbc	r27, r27
    1668:	dc 01       	movw	r26, r24
    166a:	99 27       	eor	r25, r25
    166c:	88 27       	eor	r24, r24
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	84 2b       	or	r24, r20
    1674:	95 2b       	or	r25, r21
    1676:	a6 2b       	or	r26, r22
    1678:	b7 2b       	or	r27, r23
    167a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    167e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1682:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1686:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    168a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x16>
    168e:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x17>
    1692:	30 97       	sbiw	r30, 0x00	; 0
    1694:	39 f0       	breq	.+14     	; 0x16a4 <__vector_16+0xb2>
    1696:	6b e0       	ldi	r22, 0x0B	; 11
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x16>
    169e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x17>
    16a2:	09 95       	icall
    16a4:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_17>:
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    16f0:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    16f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16fc:	c9 01       	movw	r24, r18
    16fe:	03 2e       	mov	r0, r19
    1700:	00 0c       	add	r0, r0
    1702:	aa 0b       	sbc	r26, r26
    1704:	bb 0b       	sbc	r27, r27
    1706:	dc 01       	movw	r26, r24
    1708:	99 27       	eor	r25, r25
    170a:	88 27       	eor	r24, r24
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	84 2b       	or	r24, r20
    1712:	95 2b       	or	r25, r21
    1714:	a6 2b       	or	r26, r22
    1716:	b7 2b       	or	r27, r23
    1718:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    171c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1720:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1724:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1728:	b0 9b       	sbis	0x16, 0	; 22
    172a:	1b c0       	rjmp	.+54     	; 0x1762 <__vector_17+0x98>
    172c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1730:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1734:	c9 01       	movw	r24, r18
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	09 2e       	mov	r0, r25
    173a:	00 0c       	add	r0, r0
    173c:	aa 0b       	sbc	r26, r26
    173e:	bb 0b       	sbc	r27, r27
    1740:	dc 01       	movw	r26, r24
    1742:	99 27       	eor	r25, r25
    1744:	88 27       	eor	r24, r24
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	84 2b       	or	r24, r20
    174c:	95 2b       	or	r25, r21
    174e:	a6 2b       	or	r26, r22
    1750:	b7 2b       	or	r27, r23
    1752:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1756:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    175a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    175e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1762:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x18>
    1766:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x19>
    176a:	30 97       	sbiw	r30, 0x00	; 0
    176c:	39 f0       	breq	.+14     	; 0x177c <__vector_17+0xb2>
    176e:	6c e0       	ldi	r22, 0x0C	; 12
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x18>
    1776:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x19>
    177a:	09 95       	icall
    177c:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_18>:
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
    17c4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    17c8:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    17cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17d4:	c9 01       	movw	r24, r18
    17d6:	03 2e       	mov	r0, r19
    17d8:	00 0c       	add	r0, r0
    17da:	aa 0b       	sbc	r26, r26
    17dc:	bb 0b       	sbc	r27, r27
    17de:	dc 01       	movw	r26, r24
    17e0:	99 27       	eor	r25, r25
    17e2:	88 27       	eor	r24, r24
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	84 2b       	or	r24, r20
    17ea:	95 2b       	or	r25, r21
    17ec:	a6 2b       	or	r26, r22
    17ee:	b7 2b       	or	r27, r23
    17f0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    17f4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    17f8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    17fc:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1800:	b0 9b       	sbis	0x16, 0	; 22
    1802:	1b c0       	rjmp	.+54     	; 0x183a <__vector_18+0x98>
    1804:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1808:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    180c:	c9 01       	movw	r24, r18
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	09 2e       	mov	r0, r25
    1812:	00 0c       	add	r0, r0
    1814:	aa 0b       	sbc	r26, r26
    1816:	bb 0b       	sbc	r27, r27
    1818:	dc 01       	movw	r26, r24
    181a:	99 27       	eor	r25, r25
    181c:	88 27       	eor	r24, r24
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	84 2b       	or	r24, r20
    1824:	95 2b       	or	r25, r21
    1826:	a6 2b       	or	r26, r22
    1828:	b7 2b       	or	r27, r23
    182a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    182e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1832:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1836:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    183a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x1a>
    183e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x1b>
    1842:	30 97       	sbiw	r30, 0x00	; 0
    1844:	39 f0       	breq	.+14     	; 0x1854 <__vector_18+0xb2>
    1846:	6d e0       	ldi	r22, 0x0D	; 13
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x1a>
    184e:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x1b>
    1852:	09 95       	icall
    1854:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1858:	ff 91       	pop	r31
    185a:	ef 91       	pop	r30
    185c:	bf 91       	pop	r27
    185e:	af 91       	pop	r26
    1860:	9f 91       	pop	r25
    1862:	8f 91       	pop	r24
    1864:	7f 91       	pop	r23
    1866:	6f 91       	pop	r22
    1868:	5f 91       	pop	r21
    186a:	4f 91       	pop	r20
    186c:	3f 91       	pop	r19
    186e:	2f 91       	pop	r18
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	0f 90       	pop	r0
    1876:	1f 90       	pop	r1
    1878:	18 95       	reti

0000187a <__vector_19>:
    187a:	1f 92       	push	r1
    187c:	0f 92       	push	r0
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	0f 92       	push	r0
    1882:	11 24       	eor	r1, r1
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
    189c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    18a0:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    18a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ac:	c9 01       	movw	r24, r18
    18ae:	03 2e       	mov	r0, r19
    18b0:	00 0c       	add	r0, r0
    18b2:	aa 0b       	sbc	r26, r26
    18b4:	bb 0b       	sbc	r27, r27
    18b6:	dc 01       	movw	r26, r24
    18b8:	99 27       	eor	r25, r25
    18ba:	88 27       	eor	r24, r24
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	84 2b       	or	r24, r20
    18c2:	95 2b       	or	r25, r21
    18c4:	a6 2b       	or	r26, r22
    18c6:	b7 2b       	or	r27, r23
    18c8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    18cc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    18d0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    18d4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    18d8:	b0 9b       	sbis	0x16, 0	; 22
    18da:	1b c0       	rjmp	.+54     	; 0x1912 <__vector_19+0x98>
    18dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e4:	c9 01       	movw	r24, r18
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	09 2e       	mov	r0, r25
    18ea:	00 0c       	add	r0, r0
    18ec:	aa 0b       	sbc	r26, r26
    18ee:	bb 0b       	sbc	r27, r27
    18f0:	dc 01       	movw	r26, r24
    18f2:	99 27       	eor	r25, r25
    18f4:	88 27       	eor	r24, r24
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	84 2b       	or	r24, r20
    18fc:	95 2b       	or	r25, r21
    18fe:	a6 2b       	or	r26, r22
    1900:	b7 2b       	or	r27, r23
    1902:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1906:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    190a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    190e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1912:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x1c>
    1916:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x1d>
    191a:	30 97       	sbiw	r30, 0x00	; 0
    191c:	39 f0       	breq	.+14     	; 0x192c <__vector_19+0xb2>
    191e:	6e e0       	ldi	r22, 0x0E	; 14
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x1c>
    1926:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x1d>
    192a:	09 95       	icall
    192c:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_20>:
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1978:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    197c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1980:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1984:	c9 01       	movw	r24, r18
    1986:	03 2e       	mov	r0, r19
    1988:	00 0c       	add	r0, r0
    198a:	aa 0b       	sbc	r26, r26
    198c:	bb 0b       	sbc	r27, r27
    198e:	dc 01       	movw	r26, r24
    1990:	99 27       	eor	r25, r25
    1992:	88 27       	eor	r24, r24
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	84 2b       	or	r24, r20
    199a:	95 2b       	or	r25, r21
    199c:	a6 2b       	or	r26, r22
    199e:	b7 2b       	or	r27, r23
    19a0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    19a4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    19a8:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    19ac:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    19b0:	b0 9b       	sbis	0x16, 0	; 22
    19b2:	1b c0       	rjmp	.+54     	; 0x19ea <__vector_20+0x98>
    19b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19bc:	c9 01       	movw	r24, r18
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	09 2e       	mov	r0, r25
    19c2:	00 0c       	add	r0, r0
    19c4:	aa 0b       	sbc	r26, r26
    19c6:	bb 0b       	sbc	r27, r27
    19c8:	dc 01       	movw	r26, r24
    19ca:	99 27       	eor	r25, r25
    19cc:	88 27       	eor	r24, r24
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	84 2b       	or	r24, r20
    19d4:	95 2b       	or	r25, r21
    19d6:	a6 2b       	or	r26, r22
    19d8:	b7 2b       	or	r27, r23
    19da:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    19de:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    19e2:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    19e6:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    19ea:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x1e>
    19ee:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x1f>
    19f2:	30 97       	sbiw	r30, 0x00	; 0
    19f4:	39 f0       	breq	.+14     	; 0x1a04 <__vector_20+0xb2>
    19f6:	6f e0       	ldi	r22, 0x0F	; 15
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x1e>
    19fe:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x1f>
    1a02:	09 95       	icall
    1a04:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1a08:	ff 91       	pop	r31
    1a0a:	ef 91       	pop	r30
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <__vector_21>:
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1a50:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1a54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	03 2e       	mov	r0, r19
    1a60:	00 0c       	add	r0, r0
    1a62:	aa 0b       	sbc	r26, r26
    1a64:	bb 0b       	sbc	r27, r27
    1a66:	dc 01       	movw	r26, r24
    1a68:	99 27       	eor	r25, r25
    1a6a:	88 27       	eor	r24, r24
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	84 2b       	or	r24, r20
    1a72:	95 2b       	or	r25, r21
    1a74:	a6 2b       	or	r26, r22
    1a76:	b7 2b       	or	r27, r23
    1a78:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1a7c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1a80:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1a84:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1a88:	b0 9b       	sbis	0x16, 0	; 22
    1a8a:	1b c0       	rjmp	.+54     	; 0x1ac2 <__vector_21+0x98>
    1a8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a94:	c9 01       	movw	r24, r18
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	09 2e       	mov	r0, r25
    1a9a:	00 0c       	add	r0, r0
    1a9c:	aa 0b       	sbc	r26, r26
    1a9e:	bb 0b       	sbc	r27, r27
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	99 27       	eor	r25, r25
    1aa4:	88 27       	eor	r24, r24
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	84 2b       	or	r24, r20
    1aac:	95 2b       	or	r25, r21
    1aae:	a6 2b       	or	r26, r22
    1ab0:	b7 2b       	or	r27, r23
    1ab2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1ab6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1aba:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1abe:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1ac2:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x20>
    1ac6:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x21>
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	39 f0       	breq	.+14     	; 0x1adc <__vector_21+0xb2>
    1ace:	60 e1       	ldi	r22, 0x10	; 16
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x20>
    1ad6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x21>
    1ada:	09 95       	icall
    1adc:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1ae0:	ff 91       	pop	r31
    1ae2:	ef 91       	pop	r30
    1ae4:	bf 91       	pop	r27
    1ae6:	af 91       	pop	r26
    1ae8:	9f 91       	pop	r25
    1aea:	8f 91       	pop	r24
    1aec:	7f 91       	pop	r23
    1aee:	6f 91       	pop	r22
    1af0:	5f 91       	pop	r21
    1af2:	4f 91       	pop	r20
    1af4:	3f 91       	pop	r19
    1af6:	2f 91       	pop	r18
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	0f 90       	pop	r0
    1afe:	1f 90       	pop	r1
    1b00:	18 95       	reti

00001b02 <__vector_22>:
    1b02:	1f 92       	push	r1
    1b04:	0f 92       	push	r0
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	0f 92       	push	r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	2f 93       	push	r18
    1b0e:	3f 93       	push	r19
    1b10:	4f 93       	push	r20
    1b12:	5f 93       	push	r21
    1b14:	6f 93       	push	r22
    1b16:	7f 93       	push	r23
    1b18:	8f 93       	push	r24
    1b1a:	9f 93       	push	r25
    1b1c:	af 93       	push	r26
    1b1e:	bf 93       	push	r27
    1b20:	ef 93       	push	r30
    1b22:	ff 93       	push	r31
    1b24:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1b28:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1b2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b34:	c9 01       	movw	r24, r18
    1b36:	03 2e       	mov	r0, r19
    1b38:	00 0c       	add	r0, r0
    1b3a:	aa 0b       	sbc	r26, r26
    1b3c:	bb 0b       	sbc	r27, r27
    1b3e:	dc 01       	movw	r26, r24
    1b40:	99 27       	eor	r25, r25
    1b42:	88 27       	eor	r24, r24
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	84 2b       	or	r24, r20
    1b4a:	95 2b       	or	r25, r21
    1b4c:	a6 2b       	or	r26, r22
    1b4e:	b7 2b       	or	r27, r23
    1b50:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1b54:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1b58:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1b5c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1b60:	b0 9b       	sbis	0x16, 0	; 22
    1b62:	1b c0       	rjmp	.+54     	; 0x1b9a <__vector_22+0x98>
    1b64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	09 2e       	mov	r0, r25
    1b72:	00 0c       	add	r0, r0
    1b74:	aa 0b       	sbc	r26, r26
    1b76:	bb 0b       	sbc	r27, r27
    1b78:	dc 01       	movw	r26, r24
    1b7a:	99 27       	eor	r25, r25
    1b7c:	88 27       	eor	r24, r24
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	84 2b       	or	r24, r20
    1b84:	95 2b       	or	r25, r21
    1b86:	a6 2b       	or	r26, r22
    1b88:	b7 2b       	or	r27, r23
    1b8a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <timestamp>
    1b8e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <timestamp+0x1>
    1b92:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <timestamp+0x2>
    1b96:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <timestamp+0x3>
    1b9a:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x22>
    1b9e:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x23>
    1ba2:	30 97       	sbiw	r30, 0x00	; 0
    1ba4:	39 f0       	breq	.+14     	; 0x1bb4 <__vector_22+0xb2>
    1ba6:	61 e1       	ldi	r22, 0x11	; 17
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x22>
    1bae:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x23>
    1bb2:	09 95       	icall
    1bb4:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <enqueueByDeadline>:
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	7b 01       	movw	r14, r22
    1be8:	eb 01       	movw	r28, r22
    1bea:	a8 81       	ld	r26, Y
    1bec:	b9 81       	ldd	r27, Y+1	; 0x01
    1bee:	10 97       	sbiw	r26, 0x00	; 0
    1bf0:	61 f1       	breq	.+88     	; 0x1c4a <enqueueByDeadline+0x70>
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	06 81       	ldd	r16, Z+6	; 0x06
    1bf6:	17 81       	ldd	r17, Z+7	; 0x07
    1bf8:	20 85       	ldd	r18, Z+8	; 0x08
    1bfa:	31 85       	ldd	r19, Z+9	; 0x09
    1bfc:	16 96       	adiw	r26, 0x06	; 6
    1bfe:	4d 91       	ld	r20, X+
    1c00:	5d 91       	ld	r21, X+
    1c02:	6d 91       	ld	r22, X+
    1c04:	7c 91       	ld	r23, X
    1c06:	19 97       	sbiw	r26, 0x09	; 9
    1c08:	04 17       	cp	r16, r20
    1c0a:	15 07       	cpc	r17, r21
    1c0c:	26 07       	cpc	r18, r22
    1c0e:	37 07       	cpc	r19, r23
    1c10:	14 f4       	brge	.+4      	; 0x1c16 <enqueueByDeadline+0x3c>
    1c12:	1b c0       	rjmp	.+54     	; 0x1c4a <enqueueByDeadline+0x70>
    1c14:	df 01       	movw	r26, r30
    1c16:	ed 91       	ld	r30, X+
    1c18:	fc 91       	ld	r31, X
    1c1a:	11 97       	sbiw	r26, 0x01	; 1
    1c1c:	30 97       	sbiw	r30, 0x00	; 0
    1c1e:	49 f0       	breq	.+18     	; 0x1c32 <enqueueByDeadline+0x58>
    1c20:	46 81       	ldd	r20, Z+6	; 0x06
    1c22:	57 81       	ldd	r21, Z+7	; 0x07
    1c24:	60 85       	ldd	r22, Z+8	; 0x08
    1c26:	71 85       	ldd	r23, Z+9	; 0x09
    1c28:	04 17       	cp	r16, r20
    1c2a:	15 07       	cpc	r17, r21
    1c2c:	26 07       	cpc	r18, r22
    1c2e:	37 07       	cpc	r19, r23
    1c30:	8c f7       	brge	.-30     	; 0x1c14 <enqueueByDeadline+0x3a>
    1c32:	ec 01       	movw	r28, r24
    1c34:	f9 83       	std	Y+1, r31	; 0x01
    1c36:	e8 83       	st	Y, r30
    1c38:	10 97       	sbiw	r26, 0x00	; 0
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <enqueueByDeadline+0x6a>
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	07 c0       	rjmp	.+14     	; 0x1c52 <enqueueByDeadline+0x78>
    1c44:	8d 93       	st	X+, r24
    1c46:	9c 93       	st	X, r25
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <enqueueByDeadline+0x78>
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	b9 83       	std	Y+1, r27	; 0x01
    1c4e:	a8 83       	st	Y, r26
    1c50:	f5 cf       	rjmp	.-22     	; 0x1c3c <enqueueByDeadline+0x62>
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	08 95       	ret

00001c60 <enqueueByBaseline>:
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	7b 01       	movw	r14, r22
    1c6e:	eb 01       	movw	r28, r22
    1c70:	a8 81       	ld	r26, Y
    1c72:	b9 81       	ldd	r27, Y+1	; 0x01
    1c74:	10 97       	sbiw	r26, 0x00	; 0
    1c76:	61 f1       	breq	.+88     	; 0x1cd0 <enqueueByBaseline+0x70>
    1c78:	fc 01       	movw	r30, r24
    1c7a:	02 81       	ldd	r16, Z+2	; 0x02
    1c7c:	13 81       	ldd	r17, Z+3	; 0x03
    1c7e:	24 81       	ldd	r18, Z+4	; 0x04
    1c80:	35 81       	ldd	r19, Z+5	; 0x05
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	4d 91       	ld	r20, X+
    1c86:	5d 91       	ld	r21, X+
    1c88:	6d 91       	ld	r22, X+
    1c8a:	7c 91       	ld	r23, X
    1c8c:	15 97       	sbiw	r26, 0x05	; 5
    1c8e:	04 17       	cp	r16, r20
    1c90:	15 07       	cpc	r17, r21
    1c92:	26 07       	cpc	r18, r22
    1c94:	37 07       	cpc	r19, r23
    1c96:	14 f4       	brge	.+4      	; 0x1c9c <enqueueByBaseline+0x3c>
    1c98:	1b c0       	rjmp	.+54     	; 0x1cd0 <enqueueByBaseline+0x70>
    1c9a:	df 01       	movw	r26, r30
    1c9c:	ed 91       	ld	r30, X+
    1c9e:	fc 91       	ld	r31, X
    1ca0:	11 97       	sbiw	r26, 0x01	; 1
    1ca2:	30 97       	sbiw	r30, 0x00	; 0
    1ca4:	49 f0       	breq	.+18     	; 0x1cb8 <enqueueByBaseline+0x58>
    1ca6:	42 81       	ldd	r20, Z+2	; 0x02
    1ca8:	53 81       	ldd	r21, Z+3	; 0x03
    1caa:	64 81       	ldd	r22, Z+4	; 0x04
    1cac:	75 81       	ldd	r23, Z+5	; 0x05
    1cae:	04 17       	cp	r16, r20
    1cb0:	15 07       	cpc	r17, r21
    1cb2:	26 07       	cpc	r18, r22
    1cb4:	37 07       	cpc	r19, r23
    1cb6:	8c f7       	brge	.-30     	; 0x1c9a <enqueueByBaseline+0x3a>
    1cb8:	ec 01       	movw	r28, r24
    1cba:	f9 83       	std	Y+1, r31	; 0x01
    1cbc:	e8 83       	st	Y, r30
    1cbe:	10 97       	sbiw	r26, 0x00	; 0
    1cc0:	21 f4       	brne	.+8      	; 0x1cca <enqueueByBaseline+0x6a>
    1cc2:	f7 01       	movw	r30, r14
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	80 83       	st	Z, r24
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <enqueueByBaseline+0x78>
    1cca:	8d 93       	st	X+, r24
    1ccc:	9c 93       	st	X, r25
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <enqueueByBaseline+0x78>
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	b9 83       	std	Y+1, r27	; 0x01
    1cd4:	a8 83       	st	Y, r26
    1cd6:	f5 cf       	rjmp	.-22     	; 0x1cc2 <enqueueByBaseline+0x62>
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	08 95       	ret

00001ce6 <dequeue>:
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	ed 91       	ld	r30, X+
    1cea:	fc 91       	ld	r31, X
    1cec:	11 97       	sbiw	r26, 0x01	; 1
    1cee:	30 97       	sbiw	r30, 0x00	; 0
    1cf0:	59 f4       	brne	.+22     	; 0x1d08 <dequeue+0x22>
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1cf8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1cfc:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	83 bf       	out	0x33, r24	; 51
    1d04:	88 95       	sleep
    1d06:	fd cf       	rjmp	.-6      	; 0x1d02 <dequeue+0x1c>
    1d08:	20 81       	ld	r18, Z
    1d0a:	31 81       	ldd	r19, Z+1	; 0x01
    1d0c:	2d 93       	st	X+, r18
    1d0e:	3c 93       	st	X, r19
    1d10:	cf 01       	movw	r24, r30
    1d12:	08 95       	ret

00001d14 <__vector_9>:
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	ef 93       	push	r30
    1d30:	ff 93       	push	r31
    1d32:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    1d36:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
    1d40:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
    1d44:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1d48:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1d4c:	30 97       	sbiw	r30, 0x00	; 0
    1d4e:	01 f1       	breq	.+64     	; 0x1d90 <__vector_9+0x7c>
    1d50:	42 81       	ldd	r20, Z+2	; 0x02
    1d52:	53 81       	ldd	r21, Z+3	; 0x03
    1d54:	64 81       	ldd	r22, Z+4	; 0x04
    1d56:	75 81       	ldd	r23, Z+5	; 0x05
    1d58:	86 17       	cp	r24, r22
    1d5a:	97 07       	cpc	r25, r23
    1d5c:	c9 f4       	brne	.+50     	; 0x1d90 <__vector_9+0x7c>
    1d5e:	ca 01       	movw	r24, r20
    1d60:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d64:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d68:	42 1b       	sub	r20, r18
    1d6a:	53 0b       	sbc	r21, r19
    1d6c:	41 30       	cpi	r20, 0x01	; 1
    1d6e:	51 05       	cpc	r21, r1
    1d70:	29 f4       	brne	.+10     	; 0x1d7c <__vector_9+0x68>
    1d72:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d76:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d84:	ef e6       	ldi	r30, 0x6F	; 111
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	82 60       	ori	r24, 0x02	; 2
    1d8c:	80 83       	st	Z, r24
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <__vector_9+0x86>
    1d90:	ef e6       	ldi	r30, 0x6F	; 111
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8d 7f       	andi	r24, 0xFD	; 253
    1d98:	80 83       	st	Z, r24
    1d9a:	ff 91       	pop	r31
    1d9c:	ef 91       	pop	r30
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	7f 91       	pop	r23
    1da4:	6f 91       	pop	r22
    1da6:	5f 91       	pop	r21
    1da8:	4f 91       	pop	r20
    1daa:	3f 91       	pop	r19
    1dac:	2f 91       	pop	r18
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <__vector_7>:
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
    1de2:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <__data_end>
    1de6:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <__data_end+0x1>
    1dea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1df2:	b0 99       	sbic	0x16, 0	; 22
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <__vector_7+0x5c>
    1df6:	0d 2c       	mov	r0, r13
    1df8:	00 0c       	add	r0, r0
    1dfa:	ee 08       	sbc	r14, r14
    1dfc:	ff 08       	sbc	r15, r15
    1dfe:	d6 01       	movw	r26, r12
    1e00:	99 27       	eor	r25, r25
    1e02:	88 27       	eor	r24, r24
    1e04:	69 01       	movw	r12, r18
    1e06:	e1 2c       	mov	r14, r1
    1e08:	f1 2c       	mov	r15, r1
    1e0a:	c8 2a       	or	r12, r24
    1e0c:	d9 2a       	or	r13, r25
    1e0e:	ea 2a       	or	r14, r26
    1e10:	fb 2a       	or	r15, r27
    1e12:	15 c0       	rjmp	.+42     	; 0x1e3e <__vector_7+0x86>
    1e14:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e18:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	c8 1a       	sub	r12, r24
    1e20:	d8 0a       	sbc	r13, r24
    1e22:	0d 2c       	mov	r0, r13
    1e24:	00 0c       	add	r0, r0
    1e26:	ee 08       	sbc	r14, r14
    1e28:	ff 08       	sbc	r15, r15
    1e2a:	d6 01       	movw	r26, r12
    1e2c:	99 27       	eor	r25, r25
    1e2e:	88 27       	eor	r24, r24
    1e30:	69 01       	movw	r12, r18
    1e32:	e1 2c       	mov	r14, r1
    1e34:	f1 2c       	mov	r15, r1
    1e36:	c8 2a       	or	r12, r24
    1e38:	d9 2a       	or	r13, r25
    1e3a:	ea 2a       	or	r14, r26
    1e3c:	fb 2a       	or	r15, r27
    1e3e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1e42:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1e46:	30 97       	sbiw	r30, 0x00	; 0
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <__vector_7+0x94>
    1e4a:	42 c0       	rjmp	.+132    	; 0x1ed0 <__vector_7+0x118>
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	a4 81       	ldd	r26, Z+4	; 0x04
    1e52:	b5 81       	ldd	r27, Z+5	; 0x05
    1e54:	8c 19       	sub	r24, r12
    1e56:	9d 09       	sbc	r25, r13
    1e58:	ae 09       	sbc	r26, r14
    1e5a:	bf 09       	sbc	r27, r15
    1e5c:	18 16       	cp	r1, r24
    1e5e:	19 06       	cpc	r1, r25
    1e60:	1a 06       	cpc	r1, r26
    1e62:	1b 06       	cpc	r1, r27
    1e64:	ec f1       	brlt	.+122    	; 0x1ee0 <__vector_7+0x128>
    1e66:	82 e5       	ldi	r24, 0x52	; 82
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <dequeue>
    1e6e:	64 e5       	ldi	r22, 0x54	; 84
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <enqueueByDeadline>
    1e76:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    1e7a:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    1e7e:	30 97       	sbiw	r30, 0x00	; 0
    1e80:	39 f1       	breq	.+78     	; 0x1ed0 <__vector_7+0x118>
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	a4 81       	ldd	r26, Z+4	; 0x04
    1e88:	b5 81       	ldd	r27, Z+5	; 0x05
    1e8a:	8c 19       	sub	r24, r12
    1e8c:	9d 09       	sbc	r25, r13
    1e8e:	ae 09       	sbc	r26, r14
    1e90:	bf 09       	sbc	r27, r15
    1e92:	18 16       	cp	r1, r24
    1e94:	19 06       	cpc	r1, r25
    1e96:	1a 06       	cpc	r1, r26
    1e98:	1b 06       	cpc	r1, r27
    1e9a:	2c f7       	brge	.-54     	; 0x1e66 <__vector_7+0xae>
    1e9c:	21 c0       	rjmp	.+66     	; 0x1ee0 <__vector_7+0x128>
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ea8:	84 1b       	sub	r24, r20
    1eaa:	95 0b       	sbc	r25, r21
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	31 f4       	brne	.+12     	; 0x1ebc <__vector_7+0x104>
    1eb0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eb4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eb8:	2f 5f       	subi	r18, 0xFF	; 255
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ec0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ec4:	ef e6       	ldi	r30, 0x6F	; 111
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	80 83       	st	Z, r24
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <__vector_7+0x122>
    1ed0:	ef e6       	ldi	r30, 0x6F	; 111
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8d 7f       	andi	r24, 0xFD	; 253
    1ed8:	80 83       	st	Z, r24
    1eda:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    1ede:	0c c0       	rjmp	.+24     	; 0x1ef8 <__vector_7+0x140>
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ee6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ee8:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    1eec:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    1ef0:	2a 17       	cp	r18, r26
    1ef2:	3b 07       	cpc	r19, r27
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <__vector_7+0x118>
    1ef6:	d3 cf       	rjmp	.-90     	; 0x1e9e <__vector_7+0xe6>
    1ef8:	ff 91       	pop	r31
    1efa:	ef 91       	pop	r30
    1efc:	bf 91       	pop	r27
    1efe:	af 91       	pop	r26
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	7f 91       	pop	r23
    1f06:	6f 91       	pop	r22
    1f08:	5f 91       	pop	r21
    1f0a:	4f 91       	pop	r20
    1f0c:	3f 91       	pop	r19
    1f0e:	2f 91       	pop	r18
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <async>:
    1f22:	3f 92       	push	r3
    1f24:	4f 92       	push	r4
    1f26:	5f 92       	push	r5
    1f28:	6f 92       	push	r6
    1f2a:	7f 92       	push	r7
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	2b 01       	movw	r4, r22
    1f46:	3c 01       	movw	r6, r24
    1f48:	49 01       	movw	r8, r18
    1f4a:	5a 01       	movw	r10, r20
    1f4c:	8f b7       	in	r24, 0x3f	; 63
    1f4e:	80 78       	andi	r24, 0x80	; 128
    1f50:	38 2e       	mov	r3, r24
    1f52:	f8 94       	cli
    1f54:	86 e3       	ldi	r24, 0x36	; 54
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <dequeue>
    1f5c:	ec 01       	movw	r28, r24
    1f5e:	1b 87       	std	Y+11, r17	; 0x0b
    1f60:	0a 87       	std	Y+10, r16	; 0x0a
    1f62:	fd 86       	std	Y+13, r15	; 0x0d
    1f64:	ec 86       	std	Y+12, r14	; 0x0c
    1f66:	df 86       	std	Y+15, r13	; 0x0f
    1f68:	ce 86       	std	Y+14, r12	; 0x0e
    1f6a:	33 20       	and	r3, r3
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <async+0x64>
    1f6e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <current>
    1f72:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <current+0x1>
    1f76:	02 80       	ldd	r0, Z+2	; 0x02
    1f78:	f3 81       	ldd	r31, Z+3	; 0x03
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	a4 81       	ldd	r26, Z+4	; 0x04
    1f82:	b5 81       	ldd	r27, Z+5	; 0x05
    1f84:	08 c0       	rjmp	.+16     	; 0x1f96 <async+0x74>
    1f86:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <timestamp>
    1f8a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <timestamp+0x1>
    1f8e:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <timestamp+0x2>
    1f92:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <timestamp+0x3>
    1f96:	48 0e       	add	r4, r24
    1f98:	59 1e       	adc	r5, r25
    1f9a:	6a 1e       	adc	r6, r26
    1f9c:	7b 1e       	adc	r7, r27
    1f9e:	4a 82       	std	Y+2, r4	; 0x02
    1fa0:	5b 82       	std	Y+3, r5	; 0x03
    1fa2:	6c 82       	std	Y+4, r6	; 0x04
    1fa4:	7d 82       	std	Y+5, r7	; 0x05
    1fa6:	18 14       	cp	r1, r8
    1fa8:	19 04       	cpc	r1, r9
    1faa:	1a 04       	cpc	r1, r10
    1fac:	1b 04       	cpc	r1, r11
    1fae:	44 f0       	brlt	.+16     	; 0x1fc0 <async+0x9e>
    1fb0:	0f 2e       	mov	r0, r31
    1fb2:	88 24       	eor	r8, r8
    1fb4:	8a 94       	dec	r8
    1fb6:	98 2c       	mov	r9, r8
    1fb8:	a8 2c       	mov	r10, r8
    1fba:	ff e7       	ldi	r31, 0x7F	; 127
    1fbc:	bf 2e       	mov	r11, r31
    1fbe:	f0 2d       	mov	r31, r0
    1fc0:	84 0c       	add	r8, r4
    1fc2:	95 1c       	adc	r9, r5
    1fc4:	a6 1c       	adc	r10, r6
    1fc6:	b7 1c       	adc	r11, r7
    1fc8:	8e 82       	std	Y+6, r8	; 0x06
    1fca:	9f 82       	std	Y+7, r9	; 0x07
    1fcc:	a8 86       	std	Y+8, r10	; 0x08
    1fce:	b9 86       	std	Y+9, r11	; 0x09
    1fd0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    1fd4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
    1fd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fdc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fe0:	b0 99       	sbic	0x16, 0	; 22
    1fe2:	0e c0       	rjmp	.+28     	; 0x2000 <async+0xde>
    1fe4:	09 2e       	mov	r0, r25
    1fe6:	00 0c       	add	r0, r0
    1fe8:	aa 0b       	sbc	r26, r26
    1fea:	bb 0b       	sbc	r27, r27
    1fec:	dc 01       	movw	r26, r24
    1fee:	99 27       	eor	r25, r25
    1ff0:	88 27       	eor	r24, r24
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	84 2b       	or	r24, r20
    1ff8:	95 2b       	or	r25, r21
    1ffa:	a6 2b       	or	r26, r22
    1ffc:	b7 2b       	or	r27, r23
    1ffe:	13 c0       	rjmp	.+38     	; 0x2026 <async+0x104>
    2000:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2004:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	09 2e       	mov	r0, r25
    200c:	00 0c       	add	r0, r0
    200e:	aa 0b       	sbc	r26, r26
    2010:	bb 0b       	sbc	r27, r27
    2012:	dc 01       	movw	r26, r24
    2014:	99 27       	eor	r25, r25
    2016:	88 27       	eor	r24, r24
    2018:	a9 01       	movw	r20, r18
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	84 2b       	or	r24, r20
    2020:	95 2b       	or	r25, r21
    2022:	a6 2b       	or	r26, r22
    2024:	b7 2b       	or	r27, r23
    2026:	48 1a       	sub	r4, r24
    2028:	59 0a       	sbc	r5, r25
    202a:	6a 0a       	sbc	r6, r26
    202c:	7b 0a       	sbc	r7, r27
    202e:	14 14       	cp	r1, r4
    2030:	15 04       	cpc	r1, r5
    2032:	16 04       	cpc	r1, r6
    2034:	17 04       	cpc	r1, r7
    2036:	ac f5       	brge	.+106    	; 0x20a2 <async+0x180>
    2038:	62 e5       	ldi	r22, 0x52	; 82
    203a:	71 e0       	ldi	r23, 0x01	; 1
    203c:	ce 01       	movw	r24, r28
    203e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <enqueueByBaseline>
    2042:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <timerQ>
    2046:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <timerQ+0x1>
    204a:	30 97       	sbiw	r30, 0x00	; 0
    204c:	21 f1       	breq	.+72     	; 0x2096 <async+0x174>
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	a4 81       	ldd	r26, Z+4	; 0x04
    2054:	b5 81       	ldd	r27, Z+5	; 0x05
    2056:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
    205a:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
    205e:	2a 17       	cp	r18, r26
    2060:	3b 07       	cpc	r19, r27
    2062:	c9 f4       	brne	.+50     	; 0x2096 <async+0x174>
    2064:	9c 01       	movw	r18, r24
    2066:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    206a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    206e:	84 1b       	sub	r24, r20
    2070:	95 0b       	sbc	r25, r21
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	31 f4       	brne	.+12     	; 0x2082 <async+0x160>
    2076:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    207a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    207e:	2f 5f       	subi	r18, 0xFF	; 255
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2086:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    208a:	ef e6       	ldi	r30, 0x6F	; 111
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	82 60       	ori	r24, 0x02	; 2
    2092:	80 83       	st	Z, r24
    2094:	41 c0       	rjmp	.+130    	; 0x2118 <async+0x1f6>
    2096:	ef e6       	ldi	r30, 0x6F	; 111
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8d 7f       	andi	r24, 0xFD	; 253
    209e:	80 83       	st	Z, r24
    20a0:	3b c0       	rjmp	.+118    	; 0x2118 <async+0x1f6>
    20a2:	64 e5       	ldi	r22, 0x54	; 84
    20a4:	71 e0       	ldi	r23, 0x01	; 1
    20a6:	ce 01       	movw	r24, r28
    20a8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <enqueueByDeadline>
    20ac:	33 20       	and	r3, r3
    20ae:	b9 f1       	breq	.+110    	; 0x211e <async+0x1fc>
    20b0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <threadPool>
    20b4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <threadPool+0x1>
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	81 f1       	breq	.+96     	; 0x211c <async+0x1fa>
    20bc:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <activeStack>
    20c0:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <activeStack+0x1>
    20c4:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <msgQ>
    20c8:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <msgQ+0x1>
    20cc:	02 81       	ldd	r16, Z+2	; 0x02
    20ce:	13 81       	ldd	r17, Z+3	; 0x03
    20d0:	d9 01       	movw	r26, r18
    20d2:	16 96       	adiw	r26, 0x06	; 6
    20d4:	4d 91       	ld	r20, X+
    20d6:	5d 91       	ld	r21, X+
    20d8:	6d 91       	ld	r22, X+
    20da:	7c 91       	ld	r23, X
    20dc:	19 97       	sbiw	r26, 0x09	; 9
    20de:	d8 01       	movw	r26, r16
    20e0:	16 96       	adiw	r26, 0x06	; 6
    20e2:	0d 91       	ld	r16, X+
    20e4:	1d 91       	ld	r17, X+
    20e6:	2d 91       	ld	r18, X+
    20e8:	3c 91       	ld	r19, X
    20ea:	19 97       	sbiw	r26, 0x09	; 9
    20ec:	40 1b       	sub	r20, r16
    20ee:	51 0b       	sbc	r21, r17
    20f0:	62 0b       	sbc	r22, r18
    20f2:	73 0b       	sbc	r23, r19
    20f4:	9a f4       	brpl	.+38     	; 0x211c <async+0x1fa>
    20f6:	dc 01       	movw	r26, r24
    20f8:	2d 91       	ld	r18, X+
    20fa:	3c 91       	ld	r19, X
    20fc:	11 97       	sbiw	r26, 0x01	; 1
    20fe:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <threadPool+0x1>
    2102:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <threadPool>
    2106:	ed 93       	st	X+, r30
    2108:	fc 93       	st	X, r31
    210a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <activeStack+0x1>
    210e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <activeStack>
    2112:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dispatch>
    2116:	02 c0       	rjmp	.+4      	; 0x211c <async+0x1fa>
    2118:	33 20       	and	r3, r3
    211a:	09 f0       	breq	.+2      	; 0x211e <async+0x1fc>
    211c:	78 94       	sei
    211e:	ce 01       	movw	r24, r28
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	df 90       	pop	r13
    212e:	cf 90       	pop	r12
    2130:	bf 90       	pop	r11
    2132:	af 90       	pop	r10
    2134:	9f 90       	pop	r9
    2136:	8f 90       	pop	r8
    2138:	7f 90       	pop	r7
    213a:	6f 90       	pop	r6
    213c:	5f 90       	pop	r5
    213e:	4f 90       	pop	r4
    2140:	3f 90       	pop	r3
    2142:	08 95       	ret

00002144 <sync>:
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	ec 01       	movw	r28, r24
    2156:	7b 01       	movw	r14, r22
    2158:	6a 01       	movw	r12, r20
    215a:	1f b7       	in	r17, 0x3f	; 63
    215c:	10 78       	andi	r17, 0x80	; 128
    215e:	f8 94       	cli
    2160:	a8 81       	ld	r26, Y
    2162:	b9 81       	ldd	r27, Y+1	; 0x01
    2164:	10 97       	sbiw	r26, 0x00	; 0
    2166:	61 f1       	breq	.+88     	; 0x21c0 <sync+0x7c>
    2168:	14 96       	adiw	r26, 0x04	; 4
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	15 97       	sbiw	r26, 0x05	; 5
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	41 f0       	breq	.+16     	; 0x2184 <sync+0x40>
    2174:	a0 81       	ld	r26, Z
    2176:	b1 81       	ldd	r27, Z+1	; 0x01
    2178:	14 96       	adiw	r26, 0x04	; 4
    217a:	ed 91       	ld	r30, X+
    217c:	fc 91       	ld	r31, X
    217e:	15 97       	sbiw	r26, 0x05	; 5
    2180:	30 97       	sbiw	r30, 0x00	; 0
    2182:	c1 f7       	brne	.-16     	; 0x2174 <sync+0x30>
    2184:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <current>
    2188:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <current+0x1>
    218c:	2a 17       	cp	r18, r26
    218e:	3b 07       	cpc	r19, r27
    2190:	21 f0       	breq	.+8      	; 0x219a <sync+0x56>
    2192:	11 23       	and	r17, r17
    2194:	09 f4       	brne	.+2      	; 0x2198 <sync+0x54>
    2196:	3d c0       	rjmp	.+122    	; 0x2212 <sync+0xce>
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <sync+0x64>
    219a:	11 23       	and	r17, r17
    219c:	09 f4       	brne	.+2      	; 0x21a0 <sync+0x5c>
    219e:	3c c0       	rjmp	.+120    	; 0x2218 <sync+0xd4>
    21a0:	78 94       	sei
    21a2:	8f ef       	ldi	r24, 0xFF	; 255
    21a4:	9f ef       	ldi	r25, 0xFF	; 255
    21a6:	52 c0       	rjmp	.+164    	; 0x224c <sync+0x108>
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	d1 f1       	breq	.+116    	; 0x2224 <sync+0xe0>
    21b0:	fc 01       	movw	r30, r24
    21b2:	15 82       	std	Z+5, r1	; 0x05
    21b4:	14 82       	std	Z+4, r1	; 0x04
    21b6:	36 c0       	rjmp	.+108    	; 0x2224 <sync+0xe0>
    21b8:	78 94       	sei
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	46 c0       	rjmp	.+140    	; 0x224c <sync+0x108>
    21c0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <current>
    21c4:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <current+0x1>
    21c8:	99 83       	std	Y+1, r25	; 0x01
    21ca:	88 83       	st	Y, r24
    21cc:	11 23       	and	r17, r17
    21ce:	29 f0       	breq	.+10     	; 0x21da <sync+0x96>
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	09 f0       	breq	.+2      	; 0x21da <sync+0x96>
    21d8:	78 94       	sei
    21da:	b6 01       	movw	r22, r12
    21dc:	ce 01       	movw	r24, r28
    21de:	f7 01       	movw	r30, r14
    21e0:	09 95       	icall
    21e2:	f8 2e       	mov	r15, r24
    21e4:	09 2f       	mov	r16, r25
    21e6:	8f b7       	in	r24, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	19 82       	std	Y+1, r1	; 0x01
    21ec:	18 82       	st	Y, r1
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	91 05       	cpc	r25, r1
    21f6:	38 f0       	brcs	.+14     	; 0x2206 <sync+0xc2>
    21f8:	1b 82       	std	Y+3, r1	; 0x03
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	fc 01       	movw	r30, r24
    21fe:	15 82       	std	Z+5, r1	; 0x05
    2200:	14 82       	std	Z+4, r1	; 0x04
    2202:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dispatch>
    2206:	11 23       	and	r17, r17
    2208:	51 f0       	breq	.+20     	; 0x221e <sync+0xda>
    220a:	78 94       	sei
    220c:	8f 2d       	mov	r24, r15
    220e:	90 2f       	mov	r25, r16
    2210:	1d c0       	rjmp	.+58     	; 0x224c <sync+0x108>
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	9f ef       	ldi	r25, 0xFF	; 255
    2216:	1a c0       	rjmp	.+52     	; 0x224c <sync+0x108>
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	9f ef       	ldi	r25, 0xFF	; 255
    221c:	17 c0       	rjmp	.+46     	; 0x224c <sync+0x108>
    221e:	8f 2d       	mov	r24, r15
    2220:	90 2f       	mov	r25, r16
    2222:	14 c0       	rjmp	.+40     	; 0x224c <sync+0x108>
    2224:	3b 83       	std	Y+3, r19	; 0x03
    2226:	2a 83       	std	Y+2, r18	; 0x02
    2228:	f9 01       	movw	r30, r18
    222a:	d5 83       	std	Z+5, r29	; 0x05
    222c:	c4 83       	std	Z+4, r28	; 0x04
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dispatch>
    2234:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <current>
    2238:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <current+0x1>
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	89 2b       	or	r24, r25
    2242:	09 f4       	brne	.+2      	; 0x2246 <sync+0x102>
    2244:	b9 cf       	rjmp	.-142    	; 0x21b8 <sync+0x74>
    2246:	f9 83       	std	Y+1, r31	; 0x01
    2248:	e8 83       	st	Y, r30
    224a:	c2 cf       	rjmp	.-124    	; 0x21d0 <sync+0x8c>
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	ff 90       	pop	r15
    2256:	ef 90       	pop	r14
    2258:	df 90       	pop	r13
    225a:	cf 90       	pop	r12
    225c:	08 95       	ret

0000225e <run>:
    225e:	00 91 30 01 	lds	r16, 0x0130	; 0x800130 <current>
    2262:	10 91 31 01 	lds	r17, 0x0131	; 0x800131 <current+0x1>
    2266:	84 e5       	ldi	r24, 0x54	; 84
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <dequeue>
    226e:	ec 01       	movw	r28, r24
    2270:	d8 01       	movw	r26, r16
    2272:	13 96       	adiw	r26, 0x03	; 3
    2274:	9c 93       	st	X, r25
    2276:	8e 93       	st	-X, r24
    2278:	12 97       	sbiw	r26, 0x02	; 2
    227a:	78 94       	sei
    227c:	4e 85       	ldd	r20, Y+14	; 0x0e
    227e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2280:	6c 85       	ldd	r22, Y+12	; 0x0c
    2282:	7d 85       	ldd	r23, Y+13	; 0x0d
    2284:	8a 85       	ldd	r24, Y+10	; 0x0a
    2286:	9b 85       	ldd	r25, Y+11	; 0x0b
    2288:	0e 94 a2 10 	call	0x2144	; 0x2144 <sync>
    228c:	8f b7       	in	r24, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <msgPool>
    2294:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <msgPool+0x1>
    2298:	99 83       	std	Y+1, r25	; 0x01
    229a:	88 83       	st	Y, r24
    229c:	d0 93 37 01 	sts	0x0137, r29	; 0x800137 <msgPool+0x1>
    22a0:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <msgPool>
    22a4:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <activeStack>
    22a8:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <activeStack+0x1>
    22ac:	00 81       	ld	r16, Z
    22ae:	11 81       	ldd	r17, Z+1	; 0x01
    22b0:	e8 01       	movw	r28, r16
    22b2:	2a 81       	ldd	r18, Y+2	; 0x02
    22b4:	3b 81       	ldd	r19, Y+3	; 0x03
    22b6:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <msgQ>
    22ba:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <msgQ+0x1>
    22be:	10 97       	sbiw	r26, 0x00	; 0
    22c0:	c1 f0       	breq	.+48     	; 0x22f2 <run+0x94>
    22c2:	21 15       	cp	r18, r1
    22c4:	31 05       	cpc	r19, r1
    22c6:	59 f2       	breq	.-106    	; 0x225e <run>
    22c8:	16 96       	adiw	r26, 0x06	; 6
    22ca:	8d 91       	ld	r24, X+
    22cc:	9d 91       	ld	r25, X+
    22ce:	0d 90       	ld	r0, X+
    22d0:	bc 91       	ld	r27, X
    22d2:	a0 2d       	mov	r26, r0
    22d4:	e9 01       	movw	r28, r18
    22d6:	4e 81       	ldd	r20, Y+6	; 0x06
    22d8:	5f 81       	ldd	r21, Y+7	; 0x07
    22da:	68 85       	ldd	r22, Y+8	; 0x08
    22dc:	79 85       	ldd	r23, Y+9	; 0x09
    22de:	84 1b       	sub	r24, r20
    22e0:	95 0b       	sbc	r25, r21
    22e2:	a6 0b       	sbc	r26, r22
    22e4:	b7 0b       	sbc	r27, r23
    22e6:	18 16       	cp	r1, r24
    22e8:	19 06       	cpc	r1, r25
    22ea:	1a 06       	cpc	r1, r26
    22ec:	1b 06       	cpc	r1, r27
    22ee:	0c f0       	brlt	.+2      	; 0x22f2 <run+0x94>
    22f0:	b6 cf       	rjmp	.-148    	; 0x225e <run>
    22f2:	10 93 33 01 	sts	0x0133, r17	; 0x800133 <activeStack+0x1>
    22f6:	00 93 32 01 	sts	0x0132, r16	; 0x800132 <activeStack>
    22fa:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <threadPool>
    22fe:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <threadPool+0x1>
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
    2306:	f0 93 35 01 	sts	0x0135, r31	; 0x800135 <threadPool+0x1>
    230a:	e0 93 34 01 	sts	0x0134, r30	; 0x800134 <threadPool>
    230e:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <activeStack>
    2312:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <activeStack+0x1>
    2316:	14 96       	adiw	r26, 0x04	; 4
    2318:	ed 91       	ld	r30, X+
    231a:	fc 91       	ld	r31, X
    231c:	15 97       	sbiw	r26, 0x05	; 5
    231e:	30 97       	sbiw	r30, 0x00	; 0
    2320:	41 f0       	breq	.+16     	; 0x2332 <run+0xd4>
    2322:	a0 81       	ld	r26, Z
    2324:	b1 81       	ldd	r27, Z+1	; 0x01
    2326:	14 96       	adiw	r26, 0x04	; 4
    2328:	ed 91       	ld	r30, X+
    232a:	fc 91       	ld	r31, X
    232c:	15 97       	sbiw	r26, 0x05	; 5
    232e:	30 97       	sbiw	r30, 0x00	; 0
    2330:	c1 f7       	brne	.-16     	; 0x2322 <run+0xc4>
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <dispatch>
    2338:	92 cf       	rjmp	.-220    	; 0x225e <run>

0000233a <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    233a:	42 31       	cpi	r20, 0x12	; 18
    233c:	b8 f4       	brcc	.+46     	; 0x236c <install+0x32>
        char status;
        DISABLE(status);
    233e:	2f b7       	in	r18, 0x3f	; 63
    2340:	f8 94       	cli
        otable[i] = obj;
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	44 0f       	add	r20, r20
    2346:	55 1f       	adc	r21, r21
    2348:	fa 01       	movw	r30, r20
    234a:	ea 5a       	subi	r30, 0xAA	; 170
    234c:	fe 4f       	sbci	r31, 0xFE	; 254
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
        mtable[i] = m;
    2352:	fa 01       	movw	r30, r20
    2354:	e2 51       	subi	r30, 0x12	; 18
    2356:	fe 4f       	sbci	r31, 0xFE	; 254
    2358:	71 83       	std	Z+1, r23	; 0x01
    235a:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	fc 01       	movw	r30, r24
    2362:	53 83       	std	Z+3, r21	; 0x03
    2364:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2366:	22 23       	and	r18, r18
    2368:	0c f4       	brge	.+2      	; 0x236c <install+0x32>
    236a:	78 94       	sei
    236c:	08 95       	ret

0000236e <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    236e:	8c 01       	movw	r16, r24
    2370:	7b 01       	movw	r14, r22
    2372:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2374:	8f b7       	in	r24, 0x3f	; 63
    2376:	f8 94       	cli
    initialize();
    2378:	0e 94 8f 05 	call	0xb1e	; 0xb1e <initialize>
    ENABLE(1);
    237c:	78 94       	sei
    if (m != NULL)
    237e:	e1 14       	cp	r14, r1
    2380:	f1 04       	cpc	r15, r1
    2382:	41 f0       	breq	.+16     	; 0x2394 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	a9 01       	movw	r20, r18
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	cb 01       	movw	r24, r22
    2390:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <async>
    DISABLE(status);
    2394:	8f b7       	in	r24, 0x3f	; 63
    2396:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2398:	0e 94 1a 06 	call	0xc34	; 0xc34 <schedule>
    ENABLE(1);
    239c:	78 94       	sei
    while (1) {
        SLEEP();
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	83 bf       	out	0x33, r24	; 51
    23a2:	88 95       	sleep
    23a4:	fd cf       	rjmp	.-6      	; 0x23a0 <tinytimber+0x32>

000023a6 <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int value) {
	if (value)
    23a6:	67 2b       	or	r22, r23
    23a8:	79 f0       	breq	.+30     	; 0x23c8 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    23aa:	4e b1       	in	r20, 0x0e	; 14
    23ac:	21 e0       	ldi	r18, 0x01	; 1
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	b9 01       	movw	r22, r18
    23b2:	fc 01       	movw	r30, r24
    23b4:	04 80       	ldd	r0, Z+4	; 0x04
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <writeBit+0x16>
    23b8:	66 0f       	add	r22, r22
    23ba:	77 1f       	adc	r23, r23
    23bc:	0a 94       	dec	r0
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <writeBit+0x12>
    23c0:	cb 01       	movw	r24, r22
    23c2:	84 2b       	or	r24, r20
    23c4:	8e b9       	out	0x0e, r24	; 14
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    23c8:	4e b1       	in	r20, 0x0e	; 14
    23ca:	21 e0       	ldi	r18, 0x01	; 1
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	b9 01       	movw	r22, r18
    23d0:	fc 01       	movw	r30, r24
    23d2:	04 80       	ldd	r0, Z+4	; 0x04
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <writeBit+0x34>
    23d6:	66 0f       	add	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	0a 94       	dec	r0
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <writeBit+0x30>
    23de:	cb 01       	movw	r24, r22
    23e0:	80 95       	com	r24
    23e2:	84 23       	and	r24, r20
    23e4:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	08 95       	ret

000023ec <__udivmodhi4>:
    23ec:	aa 1b       	sub	r26, r26
    23ee:	bb 1b       	sub	r27, r27
    23f0:	51 e1       	ldi	r21, 0x11	; 17
    23f2:	07 c0       	rjmp	.+14     	; 0x2402 <__udivmodhi4_ep>

000023f4 <__udivmodhi4_loop>:
    23f4:	aa 1f       	adc	r26, r26
    23f6:	bb 1f       	adc	r27, r27
    23f8:	a6 17       	cp	r26, r22
    23fa:	b7 07       	cpc	r27, r23
    23fc:	10 f0       	brcs	.+4      	; 0x2402 <__udivmodhi4_ep>
    23fe:	a6 1b       	sub	r26, r22
    2400:	b7 0b       	sbc	r27, r23

00002402 <__udivmodhi4_ep>:
    2402:	88 1f       	adc	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	5a 95       	dec	r21
    2408:	a9 f7       	brne	.-22     	; 0x23f4 <__udivmodhi4_loop>
    240a:	80 95       	com	r24
    240c:	90 95       	com	r25
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	08 95       	ret

00002414 <__divmodsi4>:
    2414:	05 2e       	mov	r0, r21
    2416:	97 fb       	bst	r25, 7
    2418:	1e f4       	brtc	.+6      	; 0x2420 <__divmodsi4+0xc>
    241a:	00 94       	com	r0
    241c:	0e 94 21 12 	call	0x2442	; 0x2442 <__negsi2>
    2420:	57 fd       	sbrc	r21, 7
    2422:	07 d0       	rcall	.+14     	; 0x2432 <__divmodsi4_neg2>
    2424:	0e 94 30 12 	call	0x2460	; 0x2460 <__udivmodsi4>
    2428:	07 fc       	sbrc	r0, 7
    242a:	03 d0       	rcall	.+6      	; 0x2432 <__divmodsi4_neg2>
    242c:	4e f4       	brtc	.+18     	; 0x2440 <__divmodsi4_exit>
    242e:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__negsi2>

00002432 <__divmodsi4_neg2>:
    2432:	50 95       	com	r21
    2434:	40 95       	com	r20
    2436:	30 95       	com	r19
    2438:	21 95       	neg	r18
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	4f 4f       	sbci	r20, 0xFF	; 255
    243e:	5f 4f       	sbci	r21, 0xFF	; 255

00002440 <__divmodsi4_exit>:
    2440:	08 95       	ret

00002442 <__negsi2>:
    2442:	90 95       	com	r25
    2444:	80 95       	com	r24
    2446:	70 95       	com	r23
    2448:	61 95       	neg	r22
    244a:	7f 4f       	sbci	r23, 0xFF	; 255
    244c:	8f 4f       	sbci	r24, 0xFF	; 255
    244e:	9f 4f       	sbci	r25, 0xFF	; 255
    2450:	08 95       	ret

00002452 <__usmulhisi3>:
    2452:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__umulhisi3>

00002456 <__usmulhisi3_tail>:
    2456:	b7 ff       	sbrs	r27, 7
    2458:	08 95       	ret
    245a:	82 1b       	sub	r24, r18
    245c:	93 0b       	sbc	r25, r19
    245e:	08 95       	ret

00002460 <__udivmodsi4>:
    2460:	a1 e2       	ldi	r26, 0x21	; 33
    2462:	1a 2e       	mov	r1, r26
    2464:	aa 1b       	sub	r26, r26
    2466:	bb 1b       	sub	r27, r27
    2468:	fd 01       	movw	r30, r26
    246a:	0d c0       	rjmp	.+26     	; 0x2486 <__udivmodsi4_ep>

0000246c <__udivmodsi4_loop>:
    246c:	aa 1f       	adc	r26, r26
    246e:	bb 1f       	adc	r27, r27
    2470:	ee 1f       	adc	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	a2 17       	cp	r26, r18
    2476:	b3 07       	cpc	r27, r19
    2478:	e4 07       	cpc	r30, r20
    247a:	f5 07       	cpc	r31, r21
    247c:	20 f0       	brcs	.+8      	; 0x2486 <__udivmodsi4_ep>
    247e:	a2 1b       	sub	r26, r18
    2480:	b3 0b       	sbc	r27, r19
    2482:	e4 0b       	sbc	r30, r20
    2484:	f5 0b       	sbc	r31, r21

00002486 <__udivmodsi4_ep>:
    2486:	66 1f       	adc	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	1a 94       	dec	r1
    2490:	69 f7       	brne	.-38     	; 0x246c <__udivmodsi4_loop>
    2492:	60 95       	com	r22
    2494:	70 95       	com	r23
    2496:	80 95       	com	r24
    2498:	90 95       	com	r25
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	bd 01       	movw	r22, r26
    24a0:	cf 01       	movw	r24, r30
    24a2:	08 95       	ret

000024a4 <__umulhisi3>:
    24a4:	a2 9f       	mul	r26, r18
    24a6:	b0 01       	movw	r22, r0
    24a8:	b3 9f       	mul	r27, r19
    24aa:	c0 01       	movw	r24, r0
    24ac:	a3 9f       	mul	r26, r19
    24ae:	70 0d       	add	r23, r0
    24b0:	81 1d       	adc	r24, r1
    24b2:	11 24       	eor	r1, r1
    24b4:	91 1d       	adc	r25, r1
    24b6:	b2 9f       	mul	r27, r18
    24b8:	70 0d       	add	r23, r0
    24ba:	81 1d       	adc	r24, r1
    24bc:	11 24       	eor	r1, r1
    24be:	91 1d       	adc	r25, r1
    24c0:	08 95       	ret

000024c2 <setjmp>:
    24c2:	dc 01       	movw	r26, r24
    24c4:	2d 92       	st	X+, r2
    24c6:	3d 92       	st	X+, r3
    24c8:	4d 92       	st	X+, r4
    24ca:	5d 92       	st	X+, r5
    24cc:	6d 92       	st	X+, r6
    24ce:	7d 92       	st	X+, r7
    24d0:	8d 92       	st	X+, r8
    24d2:	9d 92       	st	X+, r9
    24d4:	ad 92       	st	X+, r10
    24d6:	bd 92       	st	X+, r11
    24d8:	cd 92       	st	X+, r12
    24da:	dd 92       	st	X+, r13
    24dc:	ed 92       	st	X+, r14
    24de:	fd 92       	st	X+, r15
    24e0:	0d 93       	st	X+, r16
    24e2:	1d 93       	st	X+, r17
    24e4:	cd 93       	st	X+, r28
    24e6:	dd 93       	st	X+, r29
    24e8:	ff 91       	pop	r31
    24ea:	ef 91       	pop	r30
    24ec:	8d b7       	in	r24, 0x3d	; 61
    24ee:	8d 93       	st	X+, r24
    24f0:	8e b7       	in	r24, 0x3e	; 62
    24f2:	8d 93       	st	X+, r24
    24f4:	8f b7       	in	r24, 0x3f	; 63
    24f6:	8d 93       	st	X+, r24
    24f8:	ed 93       	st	X+, r30
    24fa:	fd 93       	st	X+, r31
    24fc:	88 27       	eor	r24, r24
    24fe:	99 27       	eor	r25, r25
    2500:	09 94       	ijmp

00002502 <longjmp>:
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	91 05       	cpc	r25, r1
    250a:	81 1d       	adc	r24, r1
    250c:	2d 90       	ld	r2, X+
    250e:	3d 90       	ld	r3, X+
    2510:	4d 90       	ld	r4, X+
    2512:	5d 90       	ld	r5, X+
    2514:	6d 90       	ld	r6, X+
    2516:	7d 90       	ld	r7, X+
    2518:	8d 90       	ld	r8, X+
    251a:	9d 90       	ld	r9, X+
    251c:	ad 90       	ld	r10, X+
    251e:	bd 90       	ld	r11, X+
    2520:	cd 90       	ld	r12, X+
    2522:	dd 90       	ld	r13, X+
    2524:	ed 90       	ld	r14, X+
    2526:	fd 90       	ld	r15, X+
    2528:	0d 91       	ld	r16, X+
    252a:	1d 91       	ld	r17, X+
    252c:	cd 91       	ld	r28, X+
    252e:	dd 91       	ld	r29, X+
    2530:	ed 91       	ld	r30, X+
    2532:	fd 91       	ld	r31, X+
    2534:	0d 90       	ld	r0, X+
    2536:	f8 94       	cli
    2538:	fe bf       	out	0x3e, r31	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	ed bf       	out	0x3d, r30	; 61
    253e:	ed 91       	ld	r30, X+
    2540:	fd 91       	ld	r31, X+
    2542:	09 94       	ijmp

00002544 <_exit>:
    2544:	f8 94       	cli

00002546 <__stop_program>:
    2546:	ff cf       	rjmp	.-2      	; 0x2546 <__stop_program>
