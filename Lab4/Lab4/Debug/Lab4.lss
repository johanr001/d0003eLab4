
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00002372  00002406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000358  00800144  00800144  0000244a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000244a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000337a  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fa  00000000  00000000  00005ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001795  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d9c  00000000  00000000  00008478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ab  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fce  00000000  00000000  00009bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000cb8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_1>
       8:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_2>
       c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_3>
      10:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_4>
      14:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_9>
      28:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_10>
      2c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_11>
      30:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__vector_12>
      34:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__vector_13>
      38:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_14>
      3c:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_15>
      40:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_16>
      44:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_17>
      48:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_18>
      4c:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__vector_19>
      50:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_20>
      54:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_21>
      58:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 e7       	ldi	r30, 0x72	; 114
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 34       	cpi	r26, 0x44	; 68
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e4       	ldi	r26, 0x44	; 68
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ac 39       	cpi	r26, 0x9C	; 156
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 9e 03 	call	0x73c	; 0x73c <main>
      92:	0c 94 b7 11 	jmp	0x236e	; 0x236e <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
      9a:	85 b1       	in	r24, 0x05	; 5
      9c:	80 6d       	ori	r24, 0xD0	; 208
      9e:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
      a0:	8e b1       	in	r24, 0x0e	; 14
      a2:	8c 60       	ori	r24, 0x0C	; 12
      a4:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
      a6:	8d b3       	in	r24, 0x1d	; 29
      a8:	80 6c       	ori	r24, 0xC0	; 192
      aa:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
      ac:	eb e6       	ldi	r30, 0x6B	; 107
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	8c 60       	ori	r24, 0x0C	; 12
      b4:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
      b6:	ec e6       	ldi	r30, 0x6C	; 108
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	80 6d       	ori	r24, 0xD0	; 208
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <checkButtons>:
}

// checkButtons() anropas när en pin change interrupt sker.
// I stället för att direkt läsa och reagera, använder vi AFTER(50ms) för debounce.
// Det innebär att koden väntar 50 ms innan knapptrycket analyseras, för att undvika studs.
int checkButtons(Button *self, int arg) {
      c2:	cf 92       	push	r12
      c4:	df 92       	push	r13
      c6:	ef 92       	push	r14
      c8:	ff 92       	push	r15
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
	// AFTER schemalägger att debounceButtons ska köras om 50 ms.
	// ASYNC eller SYNC vore för direkt anrop, men AFTER används för fördröjning/debounce.
	AFTER(MSEC(50), self, debounceButtons, 0);
      ce:	c1 2c       	mov	r12, r1
      d0:	d1 2c       	mov	r13, r1
      d2:	0f 2e       	mov	r0, r31
      d4:	f7 e3       	ldi	r31, 0x37	; 55
      d6:	ef 2e       	mov	r14, r31
      d8:	f1 e0       	ldi	r31, 0x01	; 1
      da:	ff 2e       	mov	r15, r31
      dc:	f0 2d       	mov	r31, r0
      de:	8c 01       	movw	r16, r24
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	a9 01       	movw	r20, r18
      e6:	6a e1       	ldi	r22, 0x1A	; 26
      e8:	76 e0       	ldi	r23, 0x06	; 6
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	return 0;
}
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	1f 91       	pop	r17
      f8:	0f 91       	pop	r16
      fa:	ff 90       	pop	r15
      fc:	ef 90       	pop	r14
      fe:	df 90       	pop	r13
     100:	cf 90       	pop	r12
     102:	08 95       	ret

00000104 <leftdir>:
// (så att man inte kör vidare om den hann släppas).
// De använder ASYNC för att starta en metod i en annan "tråd" (d.v.s.
// i TinyTimbers schemaläggning) utan att blockera denna knappkod.

// leftdir => anropar switchGen(0) för att välja "vänster" generator, om PRESSEDLT är sant.
int leftdir(Button *self, int arg) {
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
	if (PRESSEDLT) {
     110:	62 99       	sbic	0x0c, 2	; 12
     112:	13 c0       	rjmp	.+38     	; 0x13a <leftdir+0x36>
     114:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     116:	04 81       	ldd	r16, Z+4	; 0x04
     118:	15 81       	ldd	r17, Z+5	; 0x05
     11a:	c1 2c       	mov	r12, r1
     11c:	d1 2c       	mov	r13, r1
     11e:	0f 2e       	mov	r0, r31
     120:	f1 e5       	ldi	r31, 0x51	; 81
     122:	ef 2e       	mov	r14, r31
     124:	f2 e0       	ldi	r31, 0x02	; 2
     126:	ff 2e       	mov	r15, r31
     128:	f0 2d       	mov	r31, r0
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	a9 01       	movw	r20, r18
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	cb 01       	movw	r24, r22
     136:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	return 0;
}
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	ff 90       	pop	r15
     144:	ef 90       	pop	r14
     146:	df 90       	pop	r13
     148:	cf 90       	pop	r12
     14a:	08 95       	ret

0000014c <rightdir>:

// rightdir => anropar switchGen(1) för "höger" generator.
int rightdir(Button *self, int arg) {
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
	if (PRESSEDRT) {
     158:	63 99       	sbic	0x0c, 3	; 12
     15a:	14 c0       	rjmp	.+40     	; 0x184 <rightdir+0x38>
     15c:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     15e:	04 81       	ldd	r16, Z+4	; 0x04
     160:	15 81       	ldd	r17, Z+5	; 0x05
     162:	cc 24       	eor	r12, r12
     164:	c3 94       	inc	r12
     166:	d1 2c       	mov	r13, r1
     168:	0f 2e       	mov	r0, r31
     16a:	f1 e5       	ldi	r31, 0x51	; 81
     16c:	ef 2e       	mov	r14, r31
     16e:	f2 e0       	ldi	r31, 0x02	; 2
     170:	ff 2e       	mov	r15, r31
     172:	f0 2d       	mov	r31, r0
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	a9 01       	movw	r20, r18
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	cb 01       	movw	r24, r22
     180:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	return 0;
}
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	08 95       	ret

00000196 <updir>:

// updir => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     196:	cf 92       	push	r12
     198:	df 92       	push	r13
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
	if (PRESSEDUP) {
     1a2:	1e 99       	sbic	0x03, 6	; 3
     1a4:	13 c0       	rjmp	.+38     	; 0x1cc <updir+0x36>
     1a6:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecInc, 0);
     1a8:	04 81       	ldd	r16, Z+4	; 0x04
     1aa:	15 81       	ldd	r17, Z+5	; 0x05
     1ac:	c1 2c       	mov	r12, r1
     1ae:	d1 2c       	mov	r13, r1
     1b0:	0f 2e       	mov	r0, r31
     1b2:	f8 e7       	ldi	r31, 0x78	; 120
     1b4:	ef 2e       	mov	r14, r31
     1b6:	f2 e0       	ldi	r31, 0x02	; 2
     1b8:	ff 2e       	mov	r15, r31
     1ba:	f0 2d       	mov	r31, r0
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	a9 01       	movw	r20, r18
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	cb 01       	movw	r24, r22
     1c8:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	return 0;
}
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	08 95       	ret

000001de <downdir>:

// downdir => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
	if (PRESSEDDN) {
     1ea:	1f 99       	sbic	0x03, 7	; 3
     1ec:	13 c0       	rjmp	.+38     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
     1ee:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecDec, 0);
     1f0:	04 81       	ldd	r16, Z+4	; 0x04
     1f2:	15 81       	ldd	r17, Z+5	; 0x05
     1f4:	c1 2c       	mov	r12, r1
     1f6:	d1 2c       	mov	r13, r1
     1f8:	0f 2e       	mov	r0, r31
     1fa:	f5 ec       	ldi	r31, 0xC5	; 197
     1fc:	ef 2e       	mov	r14, r31
     1fe:	f2 e0       	ldi	r31, 0x02	; 2
     200:	ff 2e       	mov	r15, r31
     202:	f0 2d       	mov	r31, r0
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	a9 01       	movw	r20, r18
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	cb 01       	movw	r24, r22
     210:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	return 0;
}
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	df 90       	pop	r13
     222:	cf 90       	pop	r12
     224:	08 95       	ret

00000226 <centerdir>:

// centerdir => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
	if (PRESSEDCN) {
     232:	1c 99       	sbic	0x03, 4	; 3
     234:	13 c0       	rjmp	.+38     	; 0x25c <centerdir+0x36>
     236:	fc 01       	movw	r30, r24
		ASYNC(self->gui, guiFrecReset, 0);
     238:	04 81       	ldd	r16, Z+4	; 0x04
     23a:	15 81       	ldd	r17, Z+5	; 0x05
     23c:	c1 2c       	mov	r12, r1
     23e:	d1 2c       	mov	r13, r1
     240:	0f 2e       	mov	r0, r31
     242:	f2 e1       	ldi	r31, 0x12	; 18
     244:	ef 2e       	mov	r14, r31
     246:	f3 e0       	ldi	r31, 0x03	; 3
     248:	ff 2e       	mov	r15, r31
     24a:	f0 2d       	mov	r31, r0
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	a9 01       	movw	r20, r18
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	cb 01       	movw	r24, r22
     258:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	return 0;
}
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	08 95       	ret

0000026e <debounceButtons>:
}

// debounceButtons() körs 50 ms senare, vilket ger knappen tid att stabilisera sig
// (mindre risk för studs). Därefter kollar vi vilka knappar som faktiskt är nedtryckta
// och anropar motsvarande funktion.
int debounceButtons(Button *self, int arg) {
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     274:	62 99       	sbic	0x0c, 2	; 12
     276:	04 c0       	rjmp	.+8      	; 0x280 <debounceButtons+0x12>
		leftdir(self, 0);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	0e 94 82 00 	call	0x104	; 0x104 <leftdir>
	}
	if (PRESSEDRT) {
     280:	63 99       	sbic	0x0c, 3	; 12
     282:	05 c0       	rjmp	.+10     	; 0x28e <debounceButtons+0x20>
		rightdir(self, 0);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	ce 01       	movw	r24, r28
     28a:	0e 94 a6 00 	call	0x14c	; 0x14c <rightdir>
	}
	if (PRESSEDUP) {
     28e:	1e 99       	sbic	0x03, 6	; 3
     290:	05 c0       	rjmp	.+10     	; 0x29c <debounceButtons+0x2e>
		updir(self, 0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	ce 01       	movw	r24, r28
     298:	0e 94 cb 00 	call	0x196	; 0x196 <updir>
	}
	if (PRESSEDDN) {
     29c:	1f 99       	sbic	0x03, 7	; 3
     29e:	05 c0       	rjmp	.+10     	; 0x2aa <debounceButtons+0x3c>
		downdir(self, 0);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	ce 01       	movw	r24, r28
     2a6:	0e 94 ef 00 	call	0x1de	; 0x1de <downdir>
	}
	if (PRESSEDCN) {
     2aa:	1c 99       	sbic	0x03, 4	; 3
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <debounceButtons+0x4a>
		centerdir(self, 0);
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	ce 01       	movw	r24, r28
     2b4:	0e 94 13 01 	call	0x226	; 0x226 <centerdir>
	}
	return 0;
}
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     2c2:	80 ec       	ldi	r24, 0xC0	; 192
     2c4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     2c8:	87 eb       	ldi	r24, 0xB7	; 183
     2ca:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     2ce:	8f e0       	ldi	r24, 0x0F	; 15
     2d0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     2d4:	08 95       	ret

000002d6 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     2d6:	66 30       	cpi	r22, 0x06	; 6
     2d8:	71 05       	cpc	r23, r1
     2da:	08 f0       	brcs	.+2      	; 0x2de <writeChar+0x8>
     2dc:	6b c0       	rjmp	.+214    	; 0x3b4 <writeChar+0xde>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     2de:	90 ed       	ldi	r25, 0xD0	; 208
     2e0:	98 0f       	add	r25, r24
     2e2:	9a 30       	cpi	r25, 0x0A	; 10
     2e4:	48 f4       	brcc	.+18     	; 0x2f8 <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     2e6:	e8 2f       	mov	r30, r24
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	e1 53       	subi	r30, 0x31	; 49
     2f0:	ff 4f       	sbci	r31, 0xFF	; 255
     2f2:	20 81       	ld	r18, Z
     2f4:	31 81       	ldd	r19, Z+1	; 0x01
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     2fc:	fb 01       	movw	r30, r22
     2fe:	77 23       	and	r23, r23
     300:	0c f4       	brge	.+2      	; 0x304 <writeChar+0x2e>
     302:	31 96       	adiw	r30, 0x01	; 1
     304:	f5 95       	asr	r31
     306:	e7 95       	ror	r30
     308:	e4 51       	subi	r30, 0x14	; 20
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     30c:	61 70       	andi	r22, 0x01	; 1
     30e:	70 78       	andi	r23, 0x80	; 128
     310:	77 23       	and	r23, r23
     312:	34 f4       	brge	.+12     	; 0x320 <writeChar+0x4a>
     314:	61 50       	subi	r22, 0x01	; 1
     316:	71 09       	sbc	r23, r1
     318:	6e 6f       	ori	r22, 0xFE	; 254
     31a:	7f 6f       	ori	r23, 0xFF	; 255
     31c:	6f 5f       	subi	r22, 0xFF	; 255
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	66 0f       	add	r22, r22
     322:	77 1f       	adc	r23, r23
     324:	66 0f       	add	r22, r22
     326:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     328:	8f e0       	ldi	r24, 0x0F	; 15
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	06 2e       	mov	r0, r22
     32e:	02 c0       	rjmp	.+4      	; 0x334 <writeChar+0x5e>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <writeChar+0x5a>
     338:	80 95       	com	r24
     33a:	40 81       	ld	r20, Z
     33c:	98 2f       	mov	r25, r24
     33e:	94 23       	and	r25, r20
     340:	a9 01       	movw	r20, r18
     342:	4f 70       	andi	r20, 0x0F	; 15
     344:	55 27       	eor	r21, r21
     346:	06 2e       	mov	r0, r22
     348:	02 c0       	rjmp	.+4      	; 0x34e <writeChar+0x78>
     34a:	44 0f       	add	r20, r20
     34c:	55 1f       	adc	r21, r21
     34e:	0a 94       	dec	r0
     350:	e2 f7       	brpl	.-8      	; 0x34a <writeChar+0x74>
     352:	49 2b       	or	r20, r25
     354:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     356:	a9 01       	movw	r20, r18
     358:	52 95       	swap	r21
     35a:	42 95       	swap	r20
     35c:	4f 70       	andi	r20, 0x0F	; 15
     35e:	45 27       	eor	r20, r21
     360:	5f 70       	andi	r21, 0x0F	; 15
     362:	45 27       	eor	r20, r21
     364:	4f 70       	andi	r20, 0x0F	; 15
     366:	55 27       	eor	r21, r21
     368:	06 2e       	mov	r0, r22
     36a:	02 c0       	rjmp	.+4      	; 0x370 <writeChar+0x9a>
     36c:	44 0f       	add	r20, r20
     36e:	55 1f       	adc	r21, r21
     370:	0a 94       	dec	r0
     372:	e2 f7       	brpl	.-8      	; 0x36c <writeChar+0x96>
     374:	95 81       	ldd	r25, Z+5	; 0x05
     376:	98 23       	and	r25, r24
     378:	49 2b       	or	r20, r25
     37a:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     37c:	43 2f       	mov	r20, r19
     37e:	55 27       	eor	r21, r21
     380:	4f 70       	andi	r20, 0x0F	; 15
     382:	55 27       	eor	r21, r21
     384:	06 2e       	mov	r0, r22
     386:	02 c0       	rjmp	.+4      	; 0x38c <writeChar+0xb6>
     388:	44 0f       	add	r20, r20
     38a:	55 1f       	adc	r21, r21
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <writeChar+0xb2>
     390:	92 85       	ldd	r25, Z+10	; 0x0a
     392:	98 23       	and	r25, r24
     394:	49 2b       	or	r20, r25
     396:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     398:	47 85       	ldd	r20, Z+15	; 0x0f
     39a:	48 23       	and	r20, r24
     39c:	c9 01       	movw	r24, r18
     39e:	89 2f       	mov	r24, r25
     3a0:	99 27       	eor	r25, r25
     3a2:	82 95       	swap	r24
     3a4:	8f 70       	andi	r24, 0x0F	; 15
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <writeChar+0xd6>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	6a 95       	dec	r22
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <writeChar+0xd2>
     3b0:	84 2b       	or	r24, r20
     3b2:	87 87       	std	Z+15, r24	; 0x0f
     3b4:	08 95       	ret

000003b6 <printAt>:
}

void printAt(long num, int pos) {
     3b6:	8f 92       	push	r8
     3b8:	9f 92       	push	r9
     3ba:	af 92       	push	r10
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	4b 01       	movw	r8, r22
     3cc:	5c 01       	movw	r10, r24
     3ce:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     3d0:	24 e6       	ldi	r18, 0x64	; 100
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
     3dc:	0f 2e       	mov	r0, r31
     3de:	fa e0       	ldi	r31, 0x0A	; 10
     3e0:	cf 2e       	mov	r12, r31
     3e2:	d1 2c       	mov	r13, r1
     3e4:	e1 2c       	mov	r14, r1
     3e6:	f1 2c       	mov	r15, r1
     3e8:	f0 2d       	mov	r31, r0
     3ea:	a7 01       	movw	r20, r14
     3ec:	96 01       	movw	r18, r12
     3ee:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
     3f2:	be 01       	movw	r22, r28
     3f4:	80 e3       	ldi	r24, 0x30	; 48
     3f6:	82 0f       	add	r24, r18
     3f8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     3fc:	21 96       	adiw	r28, 0x01	; 1
     3fe:	c5 01       	movw	r24, r10
     400:	b4 01       	movw	r22, r8
     402:	a7 01       	movw	r20, r14
     404:	96 01       	movw	r18, r12
     406:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
     40a:	86 2f       	mov	r24, r22
     40c:	be 01       	movw	r22, r28
     40e:	80 5d       	subi	r24, 0xD0	; 208
     410:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeChar>
	
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	9f 90       	pop	r9
     426:	8f 90       	pop	r8
     428:	08 95       	ret

0000042a <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser synkront (SYNC)
// och visar dem på LCD. Mittpositionen visar "10" om gen1 är vald, "01" om gen2 är vald.
int updateDisplay(GUI *self, int arg) {
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24

	// Vänstra sidan (pos 0..1): frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	65 e1       	ldi	r22, 0x15	; 21
     436:	74 e0       	ldi	r23, 0x04	; 4
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <sync>
     440:	bc 01       	movw	r22, r24
     442:	99 0f       	add	r25, r25
     444:	88 0b       	sbc	r24, r24
     446:	99 0b       	sbc	r25, r25
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <printAt>

	// Högra sidan (pos 4..5): frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	65 e1       	ldi	r22, 0x15	; 21
     456:	74 e0       	ldi	r23, 0x04	; 4
     458:	8e 81       	ldd	r24, Y+6	; 0x06
     45a:	9f 81       	ldd	r25, Y+7	; 0x07
     45c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <sync>
     460:	bc 01       	movw	r22, r24
     462:	99 0f       	add	r25, r25
     464:	88 0b       	sbc	r24, r24
     466:	99 0b       	sbc	r25, r25
     468:	44 e0       	ldi	r20, 0x04	; 4
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <printAt>

	// Mitt (pos 2..3): visa vilken generator som är aktiv ( "10" => gen1, "01" => gen2 )
	if (self->midPos == 0) {
     470:	88 85       	ldd	r24, Y+8	; 0x08
     472:	81 11       	cpse	r24, r1
     474:	09 c0       	rjmp	.+18     	; 0x488 <updateDisplay+0x5e>
		printAt(10, 2);
     476:	42 e0       	ldi	r20, 0x02	; 2
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	6a e0       	ldi	r22, 0x0A	; 10
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 db 01 	call	0x3b6	; 0x3b6 <printAt>
     486:	08 c0       	rjmp	.+16     	; 0x498 <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     488:	42 e0       	ldi	r20, 0x02	; 2
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 db 01 	call	0x3b6	; 0x3b6 <printAt>
	}

	return 0;
}
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     4a2:	cf 92       	push	r12
     4a4:	df 92       	push	r13
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
	if (self->midPos == arg) {
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 85       	ldd	r18, Z+8	; 0x08
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	26 17       	cp	r18, r22
     4b6:	37 07       	cpc	r19, r23
     4b8:	91 f0       	breq	.+36     	; 0x4de <switchGen+0x3c>
     4ba:	8c 01       	movw	r16, r24
		// Om samma generator redan är aktiv, gör inget.
		return 0;
	}
	self->midPos = arg;
     4bc:	60 87       	std	Z+8, r22	; 0x08
	// Använder ASYNC för att anropa updateDisplay i en asynkron "tråd"
	// så att vi inte blockeras, men ändå uppdaterar displayen direkt.
	ASYNC(self, updateDisplay, 0);
     4be:	c1 2c       	mov	r12, r1
     4c0:	d1 2c       	mov	r13, r1
     4c2:	0f 2e       	mov	r0, r31
     4c4:	f5 e1       	ldi	r31, 0x15	; 21
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
     4ca:	ff 2e       	mov	r15, r31
     4cc:	f0 2d       	mov	r31, r0
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	a9 01       	movw	r20, r18
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	cb 01       	movw	r24, r22
     4da:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	return 0;
}
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	08 95       	ret

000004f0 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     502:	88 85       	ldd	r24, Y+8	; 0x08
     504:	81 11       	cpse	r24, r1
     506:	13 c0       	rjmp	.+38     	; 0x52e <__stack+0x2f>
		ASYNC(self->gen1, FrecInc, 0);
     508:	0c 81       	ldd	r16, Y+4	; 0x04
     50a:	1d 81       	ldd	r17, Y+5	; 0x05
     50c:	c1 2c       	mov	r12, r1
     50e:	d1 2c       	mov	r13, r1
     510:	0f 2e       	mov	r0, r31
     512:	f9 e1       	ldi	r31, 0x19	; 25
     514:	ef 2e       	mov	r14, r31
     516:	f4 e0       	ldi	r31, 0x04	; 4
     518:	ff 2e       	mov	r15, r31
     51a:	f0 2d       	mov	r31, r0
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	cb 01       	movw	r24, r22
     528:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
     52c:	12 c0       	rjmp	.+36     	; 0x552 <__stack+0x53>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     52e:	0e 81       	ldd	r16, Y+6	; 0x06
     530:	1f 81       	ldd	r17, Y+7	; 0x07
     532:	c1 2c       	mov	r12, r1
     534:	d1 2c       	mov	r13, r1
     536:	0f 2e       	mov	r0, r31
     538:	f9 e1       	ldi	r31, 0x19	; 25
     53a:	ef 2e       	mov	r14, r31
     53c:	f4 e0       	ldi	r31, 0x04	; 4
     53e:	ff 2e       	mov	r15, r31
     540:	f0 2d       	mov	r31, r0
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	cb 01       	movw	r24, r22
     54e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	ASYNC(self, updateDisplay, 0);
     552:	c1 2c       	mov	r12, r1
     554:	d1 2c       	mov	r13, r1
     556:	0f 2e       	mov	r0, r31
     558:	f5 e1       	ldi	r31, 0x15	; 21
     55a:	ef 2e       	mov	r14, r31
     55c:	f2 e0       	ldi	r31, 0x02	; 2
     55e:	ff 2e       	mov	r15, r31
     560:	f0 2d       	mov	r31, r0
     562:	8e 01       	movw	r16, r28
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	a9 01       	movw	r20, r18
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	cb 01       	movw	r24, r22
     570:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	return 0;
}
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	08 95       	ret

0000058a <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     59c:	88 85       	ldd	r24, Y+8	; 0x08
     59e:	81 11       	cpse	r24, r1
     5a0:	13 c0       	rjmp	.+38     	; 0x5c8 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     5a2:	0c 81       	ldd	r16, Y+4	; 0x04
     5a4:	1d 81       	ldd	r17, Y+5	; 0x05
     5a6:	c1 2c       	mov	r12, r1
     5a8:	d1 2c       	mov	r13, r1
     5aa:	0f 2e       	mov	r0, r31
     5ac:	fa e4       	ldi	r31, 0x4A	; 74
     5ae:	ef 2e       	mov	r14, r31
     5b0:	f4 e0       	ldi	r31, 0x04	; 4
     5b2:	ff 2e       	mov	r15, r31
     5b4:	f0 2d       	mov	r31, r0
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	a9 01       	movw	r20, r18
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	cb 01       	movw	r24, r22
     5c2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
     5c6:	12 c0       	rjmp	.+36     	; 0x5ec <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     5c8:	0e 81       	ldd	r16, Y+6	; 0x06
     5ca:	1f 81       	ldd	r17, Y+7	; 0x07
     5cc:	c1 2c       	mov	r12, r1
     5ce:	d1 2c       	mov	r13, r1
     5d0:	0f 2e       	mov	r0, r31
     5d2:	fa e4       	ldi	r31, 0x4A	; 74
     5d4:	ef 2e       	mov	r14, r31
     5d6:	f4 e0       	ldi	r31, 0x04	; 4
     5d8:	ff 2e       	mov	r15, r31
     5da:	f0 2d       	mov	r31, r0
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	a9 01       	movw	r20, r18
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	cb 01       	movw	r24, r22
     5e8:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	ASYNC(self, updateDisplay, 0);
     5ec:	c1 2c       	mov	r12, r1
     5ee:	d1 2c       	mov	r13, r1
     5f0:	0f 2e       	mov	r0, r31
     5f2:	f5 e1       	ldi	r31, 0x15	; 21
     5f4:	ef 2e       	mov	r14, r31
     5f6:	f2 e0       	ldi	r31, 0x02	; 2
     5f8:	ff 2e       	mov	r15, r31
     5fa:	f0 2d       	mov	r31, r0
     5fc:	8e 01       	movw	r16, r28
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	a9 01       	movw	r20, r18
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	cb 01       	movw	r24, r22
     60a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	return 0;
}
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	08 95       	ret

00000624 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens (se FrecReset i pulsegen).
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     636:	88 85       	ldd	r24, Y+8	; 0x08
     638:	81 11       	cpse	r24, r1
     63a:	13 c0       	rjmp	.+38     	; 0x662 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     63c:	0c 81       	ldd	r16, Y+4	; 0x04
     63e:	1d 81       	ldd	r17, Y+5	; 0x05
     640:	c1 2c       	mov	r12, r1
     642:	d1 2c       	mov	r13, r1
     644:	0f 2e       	mov	r0, r31
     646:	f7 e5       	ldi	r31, 0x57	; 87
     648:	ef 2e       	mov	r14, r31
     64a:	f4 e0       	ldi	r31, 0x04	; 4
     64c:	ff 2e       	mov	r15, r31
     64e:	f0 2d       	mov	r31, r0
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	a9 01       	movw	r20, r18
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	cb 01       	movw	r24, r22
     65c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
     660:	12 c0       	rjmp	.+36     	; 0x686 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     662:	0e 81       	ldd	r16, Y+6	; 0x06
     664:	1f 81       	ldd	r17, Y+7	; 0x07
     666:	c1 2c       	mov	r12, r1
     668:	d1 2c       	mov	r13, r1
     66a:	0f 2e       	mov	r0, r31
     66c:	f7 e5       	ldi	r31, 0x57	; 87
     66e:	ef 2e       	mov	r14, r31
     670:	f4 e0       	ldi	r31, 0x04	; 4
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	a9 01       	movw	r20, r18
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	cb 01       	movw	r24, r22
     682:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	}
	ASYNC(self, updateDisplay, 0);
     686:	c1 2c       	mov	r12, r1
     688:	d1 2c       	mov	r13, r1
     68a:	0f 2e       	mov	r0, r31
     68c:	f5 e1       	ldi	r31, 0x15	; 21
     68e:	ef 2e       	mov	r14, r31
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	ff 2e       	mov	r15, r31
     694:	f0 2d       	mov	r31, r0
     696:	8e 01       	movw	r16, r28
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	a9 01       	movw	r20, r18
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	cb 01       	movw	r24, r22
     6a4:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	return 0;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	cf 90       	pop	r12
     6bc:	08 95       	ret

000006be <startApp>:
// Skapar ett Button-objekt som kopplas till GUI för att byta generator/frekvens.
Button button = initButton(&gui);

// startApp() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay asynkront för att initiera LCD-uppdateringar.
int startApp(GUI *self, int arg) {
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     6d0:	c1 2c       	mov	r12, r1
     6d2:	d1 2c       	mov	r13, r1
     6d4:	0f 2e       	mov	r0, r31
     6d6:	fb eb       	ldi	r31, 0xBB	; 187
     6d8:	ef 2e       	mov	r14, r31
     6da:	f3 e0       	ldi	r31, 0x03	; 3
     6dc:	ff 2e       	mov	r15, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	0b e1       	ldi	r16, 0x1B	; 27
     6e2:	11 e0       	ldi	r17, 0x01	; 1
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	a9 01       	movw	r20, r18
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	cb 01       	movw	r24, r22
     6f0:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	ASYNC(&pulseGen2, setPulse, 0);
     6f4:	0f e0       	ldi	r16, 0x0F	; 15
     6f6:	11 e0       	ldi	r17, 0x01	; 1
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	a9 01       	movw	r20, r18
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	cb 01       	movw	r24, r22
     704:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     708:	0f 2e       	mov	r0, r31
     70a:	f5 e1       	ldi	r31, 0x15	; 21
     70c:	ef 2e       	mov	r14, r31
     70e:	f2 e0       	ldi	r31, 0x02	; 2
     710:	ff 2e       	mov	r15, r31
     712:	f0 2d       	mov	r31, r0
     714:	8e 01       	movw	r16, r28
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>

	return 0;
}
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     73c:	0e 94 90 04 	call	0x920	; 0x920 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     740:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     744:	0e 94 4d 00 	call	0x9a	; 0x9a <btn_init>

	// Installera knappobjektet som avbrottshanterare för PCINT0 och PCINT1.
	INSTALL(&button, checkButtons, IRQ_PCINT0);
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	61 e6       	ldi	r22, 0x61	; 97
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 ba 10 	call	0x2174	; 0x2174 <install>
	INSTALL(&button, checkButtons, IRQ_PCINT1);
     756:	42 e0       	ldi	r20, 0x02	; 2
     758:	61 e6       	ldi	r22, 0x61	; 97
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 ba 10 	call	0x2174	; 0x2174 <install>

	// TINYTIMBER startar kärnan. Vi anropar startApp på gui som första metod.
	return TINYTIMBER(&gui, startApp, 0);
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	6f e5       	ldi	r22, 0x5F	; 95
     76a:	73 e0       	ldi	r23, 0x03	; 3
     76c:	86 e0       	ldi	r24, 0x06	; 6
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <tinytimber>
}
     774:	08 95       	ret

00000776 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling (halvperiod).
int setPulse(Pulsegenerator *self, int arg) {
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
	if (self->frec == 0) {
     788:	8c 81       	ldd	r24, Y+4	; 0x04
     78a:	9d 81       	ldd	r25, Y+5	; 0x05
     78c:	89 2b       	or	r24, r25
     78e:	51 f4       	brne	.+20     	; 0x7a4 <setPulse+0x2e>
		self->pos = false;
     790:	18 86       	std	Y+8, r1	; 0x08
		int packed = PACK_BIT(self->bit, 0);
		SYNC(self->wbitPtr, writeBit, packed);
     792:	59 85       	ldd	r21, Y+9	; 0x09
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	60 ef       	ldi	r22, 0xF0	; 240
     798:	70 e1       	ldi	r23, 0x10	; 16
     79a:	8a 85       	ldd	r24, Y+10	; 0x0a
     79c:	9b 85       	ldd	r25, Y+11	; 0x0b
     79e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <sync>
		return 0;
     7a2:	38 c0       	rjmp	.+112    	; 0x814 <setPulse+0x9e>
	}
	
	// Annars toggla pos (true/false => bit=1/0).
	self->pos = !(self->pos);
     7a4:	48 85       	ldd	r20, Y+8	; 0x08
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	48 27       	eor	r20, r24
     7aa:	48 87       	std	Y+8, r20	; 0x08
	int value = self->pos ? 1 : 0;
	int packed = PACK_BIT(self->bit, value);
	// Skriv ut på PORTE via SYNC för att vänta tills skrivningen är klar.
	SYNC(self->wbitPtr, writeBit, packed);
     7ac:	89 85       	ldd	r24, Y+9	; 0x09
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	58 2b       	or	r21, r24
     7b2:	60 ef       	ldi	r22, 0xF0	; 240
     7b4:	70 e1       	ldi	r23, 0x10	; 16
     7b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     7b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     7ba:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <sync>
	
	// Delay = 500 / frekvens => halvperiod i ms, AFTER planerar nästa anrop.
	int delay = 500 / self->frec;
	AFTER(MSEC(delay), self, setPulse, 0);
     7be:	6c 81       	ldd	r22, Y+4	; 0x04
     7c0:	7d 81       	ldd	r23, Y+5	; 0x05
     7c2:	84 ef       	ldi	r24, 0xF4	; 244
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 0b 11 	call	0x2216	; 0x2216 <__udivmodhi4>
     7ca:	2d e7       	ldi	r18, 0x7D	; 125
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	db 01       	movw	r26, r22
     7d0:	0e 94 3e 11 	call	0x227c	; 0x227c <__usmulhisi3>
     7d4:	8b 01       	movw	r16, r22
     7d6:	9c 01       	movw	r18, r24
     7d8:	99 23       	and	r25, r25
     7da:	24 f4       	brge	.+8      	; 0x7e4 <setPulse+0x6e>
     7dc:	0d 5f       	subi	r16, 0xFD	; 253
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
     7e0:	2f 4f       	sbci	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	c9 01       	movw	r24, r18
     7e6:	b8 01       	movw	r22, r16
     7e8:	95 95       	asr	r25
     7ea:	87 95       	ror	r24
     7ec:	77 95       	ror	r23
     7ee:	67 95       	ror	r22
     7f0:	95 95       	asr	r25
     7f2:	87 95       	ror	r24
     7f4:	77 95       	ror	r23
     7f6:	67 95       	ror	r22
     7f8:	c1 2c       	mov	r12, r1
     7fa:	d1 2c       	mov	r13, r1
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fb eb       	ldi	r31, 0xBB	; 187
     800:	ef 2e       	mov	r14, r31
     802:	f3 e0       	ldi	r31, 0x03	; 3
     804:	ff 2e       	mov	r15, r31
     806:	f0 2d       	mov	r31, r0
     808:	8e 01       	movw	r16, r28
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	a9 01       	movw	r20, r18
     810:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
	return 0;
}
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	08 95       	ret

0000082a <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
}
     82a:	fc 01       	movw	r30, r24
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	95 81       	ldd	r25, Z+5	; 0x05
     830:	08 95       	ret

00000832 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
// Om frekvens gick från 0 till >0, starta togglingen via ASYNC(setPulse).
int FrecInc(Pulsegenerator *self, int arg) {
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
	int wasZero = (self->frec == 0);
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
	if (self->frec < 99) {
     848:	83 36       	cpi	r24, 0x63	; 99
     84a:	91 05       	cpc	r25, r1
     84c:	c0 f4       	brcc	.+48     	; 0x87e <FrecInc+0x4c>
		self->frec++;
     84e:	9c 01       	movw	r18, r24
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	3d 83       	std	Y+5, r19	; 0x05
     856:	2c 83       	std	Y+4, r18	; 0x04
		if (wasZero && self->frec > 0) {
     858:	89 2b       	or	r24, r25
     85a:	89 f4       	brne	.+34     	; 0x87e <FrecInc+0x4c>
			ASYNC(self, setPulse, 0);
     85c:	c1 2c       	mov	r12, r1
     85e:	d1 2c       	mov	r13, r1
     860:	0f 2e       	mov	r0, r31
     862:	fb eb       	ldi	r31, 0xBB	; 187
     864:	ef 2e       	mov	r14, r31
     866:	f3 e0       	ldi	r31, 0x03	; 3
     868:	ff 2e       	mov	r15, r31
     86a:	f0 2d       	mov	r31, r0
     86c:	8e 01       	movw	r16, r28
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a9 01       	movw	r20, r18
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	cb 01       	movw	r24, r22
     87a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
		}
	}
	return self->frec;
}
     87e:	8c 81       	ldd	r24, Y+4	; 0x04
     880:	9d 81       	ldd	r25, Y+5	; 0x05
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	08 95       	ret

00000894 <FrecDec>:

// FrecDec() minskar frekvensen ned till minst 0 (stannar togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     894:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     896:	24 81       	ldd	r18, Z+4	; 0x04
     898:	35 81       	ldd	r19, Z+5	; 0x05
     89a:	21 15       	cp	r18, r1
     89c:	31 05       	cpc	r19, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <FrecDec+0x14>
		self->frec--;
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	31 09       	sbc	r19, r1
     8a4:	35 83       	std	Z+5, r19	; 0x05
     8a6:	24 83       	std	Z+4, r18	; 0x04
	}
	return self->frec;
}
     8a8:	84 81       	ldd	r24, Z+4	; 0x04
     8aa:	95 81       	ldd	r25, Z+5	; 0x05
     8ac:	08 95       	ret

000008ae <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt utgång låg.
int FrecReset(Pulsegenerator *self, int arg) {
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	fc 01       	movw	r30, r24
	if (self->frec == 0) {
     8bc:	84 81       	ldd	r24, Z+4	; 0x04
     8be:	95 81       	ldd	r25, Z+5	; 0x05
     8c0:	00 97       	sbiw	r24, 0x00	; 0
     8c2:	c1 f4       	brne	.+48     	; 0x8f4 <FrecReset+0x46>
		self->frec = self->frec_old;
     8c4:	86 81       	ldd	r24, Z+6	; 0x06
     8c6:	97 81       	ldd	r25, Z+7	; 0x07
     8c8:	95 83       	std	Z+5, r25	; 0x05
     8ca:	84 83       	std	Z+4, r24	; 0x04
		if (self->frec > 0) {
     8cc:	89 2b       	or	r24, r25
     8ce:	f9 f0       	breq	.+62     	; 0x90e <FrecReset+0x60>
			ASYNC(self, setPulse, 0);
     8d0:	c1 2c       	mov	r12, r1
     8d2:	d1 2c       	mov	r13, r1
     8d4:	0f 2e       	mov	r0, r31
     8d6:	fb eb       	ldi	r31, 0xBB	; 187
     8d8:	ef 2e       	mov	r14, r31
     8da:	f3 e0       	ldi	r31, 0x03	; 3
     8dc:	ff 2e       	mov	r15, r31
     8de:	f0 2d       	mov	r31, r0
     8e0:	8f 01       	movw	r16, r30
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	a9 01       	movw	r20, r18
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	cb 01       	movw	r24, r22
     8ee:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
     8f2:	0d c0       	rjmp	.+26     	; 0x90e <FrecReset+0x60>
		}
		} else {
		self->frec_old = self->frec;
     8f4:	97 83       	std	Z+7, r25	; 0x07
     8f6:	86 83       	std	Z+6, r24	; 0x06
		self->frec = 0;
     8f8:	15 82       	std	Z+5, r1	; 0x05
     8fa:	14 82       	std	Z+4, r1	; 0x04
		self->pos = false;
     8fc:	10 86       	std	Z+8, r1	; 0x08
		int packed = PACK_BIT(self->bit, 0);
		SYNC(self->wbitPtr, writeBit, packed);
     8fe:	51 85       	ldd	r21, Z+9	; 0x09
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	60 ef       	ldi	r22, 0xF0	; 240
     904:	70 e1       	ldi	r23, 0x10	; 16
     906:	82 85       	ldd	r24, Z+10	; 0x0a
     908:	93 85       	ldd	r25, Z+11	; 0x0b
     90a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <sync>
	}
	return 0;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <avr_init>:

// avr_init() initierar klockan och timer1 för att stödja TinyTimber-schemaläggning
// samt tidberäkningar. Den ställer också in prescalers och andra timerregister.
void avr_init(){
	
	CLKPR = 0x80;
     920:	e1 e6       	ldi	r30, 0x61	; 97
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 e8       	ldi	r24, 0x80	; 128
     926:	80 83       	st	Z, r24
	CLKPR = 0x00;
     928:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     92a:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     92c:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     92e:	e1 e8       	ldi	r30, 0x81	; 129
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	8d 60       	ori	r24, 0x0D	; 13
     936:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     938:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     93c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     940:	ef e6       	ldi	r30, 0x6F	; 111
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	82 60       	ori	r24, 0x02	; 2
     948:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     94a:	82 ec       	ldi	r24, 0xC2	; 194
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     952:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     956:	08 95       	ret

00000958 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	00 d0       	rcall	.+0      	; 0x95e <initialize+0x6>
     95e:	00 d0       	rcall	.+0      	; 0x960 <initialize+0x8>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	8c e3       	ldi	r24, 0x3C	; 60
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	2c e1       	ldi	r18, 0x1C	; 28
     96a:	33 e0       	ldi	r19, 0x03	; 3
     96c:	fc 01       	movw	r30, r24
     96e:	70 97       	sbiw	r30, 0x10	; 16
     970:	91 83       	std	Z+1, r25	; 0x01
     972:	80 83       	st	Z, r24
     974:	40 96       	adiw	r24, 0x10	; 16
     976:	82 17       	cp	r24, r18
     978:	93 07       	cpc	r25, r19
     97a:	c1 f7       	brne	.-16     	; 0x96c <initialize+0x14>
     97c:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <messages+0xe1>
     980:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <messages+0xe0>
     984:	e7 e7       	ldi	r30, 0x77	; 119
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	84 e9       	ldi	r24, 0x94	; 148
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	91 83       	std	Z+1, r25	; 0x01
     98e:	80 83       	st	Z, r24
     990:	81 eb       	ldi	r24, 0xB1	; 177
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	96 8f       	std	Z+30, r25	; 0x1e
     996:	85 8f       	std	Z+29, r24	; 0x1d
     998:	ae ec       	ldi	r26, 0xCE	; 206
     99a:	b1 e0       	ldi	r27, 0x01	; 1
     99c:	b3 af       	std	Z+59, r27	; 0x3b
     99e:	a2 af       	std	Z+58, r26	; 0x3a
     9a0:	1d 92       	st	X+, r1
     9a2:	1c 92       	st	X, r1
     9a4:	fa 83       	std	Y+2, r31	; 0x02
     9a6:	e9 83       	std	Y+1, r30	; 0x01
     9a8:	e8 e7       	ldi	r30, 0x78	; 120
     9aa:	f3 e0       	ldi	r31, 0x03	; 3
     9ac:	fc 83       	std	Y+4, r31	; 0x04
     9ae:	eb 83       	std	Y+3, r30	; 0x03
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	06 96       	adiw	r24, 0x06	; 6
     9b6:	0e 94 76 11 	call	0x22ec	; 0x22ec <setjmp>
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	e9 81       	ldd	r30, Y+1	; 0x01
     9c0:	fa 81       	ldd	r31, Y+2	; 0x02
     9c2:	97 8b       	std	Z+23, r25	; 0x17
     9c4:	86 8b       	std	Z+22, r24	; 0x16
     9c6:	91 8f       	std	Z+25, r25	; 0x19
     9c8:	80 8f       	std	Z+24, r24	; 0x18
     9ca:	8c e4       	ldi	r24, 0x4C	; 76
     9cc:	90 e1       	ldi	r25, 0x10	; 16
     9ce:	94 8f       	std	Z+28, r25	; 0x1c
     9d0:	83 8f       	std	Z+27, r24	; 0x1b
     9d2:	15 82       	std	Z+5, r1	; 0x05
     9d4:	14 82       	std	Z+4, r1	; 0x04
     9d6:	7d 96       	adiw	r30, 0x1d	; 29
     9d8:	fa 83       	std	Y+2, r31	; 0x02
     9da:	e9 83       	std	Y+1, r30	; 0x01
     9dc:	eb 81       	ldd	r30, Y+3	; 0x03
     9de:	fc 81       	ldd	r31, Y+4	; 0x04
     9e0:	e0 5a       	subi	r30, 0xA0	; 160
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	fc 83       	std	Y+4, r31	; 0x04
     9e6:	eb 83       	std	Y+3, r30	; 0x03
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	9a 81       	ldd	r25, Y+2	; 0x02
     9ec:	8b 5e       	subi	r24, 0xEB	; 235
     9ee:	91 40       	sbci	r25, 0x01	; 1
     9f0:	f9 f6       	brne	.-66     	; 0x9b0 <initialize+0x58>
     9f2:	ef e0       	ldi	r30, 0x0F	; 15
     9f4:	f2 e0       	ldi	r31, 0x02	; 2
     9f6:	11 82       	std	Z+1, r1	; 0x01
     9f8:	10 82       	st	Z, r1
     9fa:	15 82       	std	Z+5, r1	; 0x05
     9fc:	14 82       	std	Z+4, r1	; 0x04
     9fe:	13 82       	std	Z+3, r1	; 0x03
     a00:	12 82       	std	Z+2, r1	; 0x02
     a02:	e1 e6       	ldi	r30, 0x61	; 97
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 e8       	ldi	r24, 0x80	; 128
     a08:	80 83       	st	Z, r24
     a0a:	10 82       	st	Z, r1
     a0c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a10:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <dispatch>:
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	00 d0       	rcall	.+0      	; 0xa34 <dispatch+0x6>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <current>
     a40:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <current+0x1>
     a44:	06 96       	adiw	r24, 0x06	; 6
     a46:	0e 94 76 11 	call	0x22ec	; 0x22ec <setjmp>
     a4a:	89 2b       	or	r24, r25
     a4c:	59 f4       	brne	.+22     	; 0xa64 <dispatch+0x36>
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <current+0x1>
     a56:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <current>
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	06 96       	adiw	r24, 0x06	; 6
     a60:	0e 94 96 11 	call	0x232c	; 0x232c <longjmp>
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <schedule>:
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <msgQ>
     a7a:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <msgQ+0x1>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	61 f1       	breq	.+88     	; 0xada <schedule+0x6c>
     a82:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
     a86:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	31 f1       	breq	.+76     	; 0xada <schedule+0x6c>
     a8e:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <activeStack>
     a92:	d0 91 2a 01 	lds	r29, 0x012A	; 0x80012a <activeStack+0x1>
     a96:	aa 81       	ldd	r26, Y+2	; 0x02
     a98:	bb 81       	ldd	r27, Y+3	; 0x03
     a9a:	10 97       	sbiw	r26, 0x00	; 0
     a9c:	79 f0       	breq	.+30     	; 0xabc <schedule+0x4e>
     a9e:	46 81       	ldd	r20, Z+6	; 0x06
     aa0:	57 81       	ldd	r21, Z+7	; 0x07
     aa2:	60 85       	ldd	r22, Z+8	; 0x08
     aa4:	71 85       	ldd	r23, Z+9	; 0x09
     aa6:	16 96       	adiw	r26, 0x06	; 6
     aa8:	0d 91       	ld	r16, X+
     aaa:	1d 91       	ld	r17, X+
     aac:	2d 91       	ld	r18, X+
     aae:	3c 91       	ld	r19, X
     ab0:	19 97       	sbiw	r26, 0x09	; 9
     ab2:	40 1b       	sub	r20, r16
     ab4:	51 0b       	sbc	r21, r17
     ab6:	62 0b       	sbc	r22, r18
     ab8:	73 0b       	sbc	r23, r19
     aba:	7a f4       	brpl	.+30     	; 0xada <schedule+0x6c>
     abc:	fc 01       	movw	r30, r24
     abe:	20 81       	ld	r18, Z
     ac0:	31 81       	ldd	r19, Z+1	; 0x01
     ac2:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <threadPool+0x1>
     ac6:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <threadPool>
     aca:	d1 83       	std	Z+1, r29	; 0x01
     acc:	c0 83       	st	Z, r28
     ace:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <activeStack+0x1>
     ad2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <activeStack>
     ad6:	0e 94 17 05 	call	0xa2e	; 0xa2e <dispatch>
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	08 95       	ret

00000ae4 <__vector_1>:
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
     b06:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     b0a:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     b0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b16:	c9 01       	movw	r24, r18
     b18:	03 2e       	mov	r0, r19
     b1a:	00 0c       	add	r0, r0
     b1c:	aa 0b       	sbc	r26, r26
     b1e:	bb 0b       	sbc	r27, r27
     b20:	dc 01       	movw	r26, r24
     b22:	99 27       	eor	r25, r25
     b24:	88 27       	eor	r24, r24
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	84 2b       	or	r24, r20
     b2c:	95 2b       	or	r25, r21
     b2e:	a6 2b       	or	r26, r22
     b30:	b7 2b       	or	r27, r23
     b32:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     b36:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     b3a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     b3e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     b42:	b0 9b       	sbis	0x16, 0	; 22
     b44:	1b c0       	rjmp	.+54     	; 0xb7c <__vector_1+0x98>
     b46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b4e:	c9 01       	movw	r24, r18
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	09 2e       	mov	r0, r25
     b54:	00 0c       	add	r0, r0
     b56:	aa 0b       	sbc	r26, r26
     b58:	bb 0b       	sbc	r27, r27
     b5a:	dc 01       	movw	r26, r24
     b5c:	99 27       	eor	r25, r25
     b5e:	88 27       	eor	r24, r24
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	84 2b       	or	r24, r20
     b66:	95 2b       	or	r25, r21
     b68:	a6 2b       	or	r26, r22
     b6a:	b7 2b       	or	r27, r23
     b6c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     b70:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     b74:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     b78:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     b7c:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <mtable>
     b80:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <mtable+0x1>
     b84:	30 97       	sbiw	r30, 0x00	; 0
     b86:	39 f0       	breq	.+14     	; 0xb96 <__vector_1+0xb2>
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <otable>
     b90:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <otable+0x1>
     b94:	09 95       	icall
     b96:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_2>:
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
     bde:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     be2:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     be6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bee:	c9 01       	movw	r24, r18
     bf0:	03 2e       	mov	r0, r19
     bf2:	00 0c       	add	r0, r0
     bf4:	aa 0b       	sbc	r26, r26
     bf6:	bb 0b       	sbc	r27, r27
     bf8:	dc 01       	movw	r26, r24
     bfa:	99 27       	eor	r25, r25
     bfc:	88 27       	eor	r24, r24
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	84 2b       	or	r24, r20
     c04:	95 2b       	or	r25, r21
     c06:	a6 2b       	or	r26, r22
     c08:	b7 2b       	or	r27, r23
     c0a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     c0e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     c12:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     c16:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     c1a:	b0 9b       	sbis	0x16, 0	; 22
     c1c:	1b c0       	rjmp	.+54     	; 0xc54 <__vector_2+0x98>
     c1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c26:	c9 01       	movw	r24, r18
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	09 2e       	mov	r0, r25
     c2c:	00 0c       	add	r0, r0
     c2e:	aa 0b       	sbc	r26, r26
     c30:	bb 0b       	sbc	r27, r27
     c32:	dc 01       	movw	r26, r24
     c34:	99 27       	eor	r25, r25
     c36:	88 27       	eor	r24, r24
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	84 2b       	or	r24, r20
     c3e:	95 2b       	or	r25, r21
     c40:	a6 2b       	or	r26, r22
     c42:	b7 2b       	or	r27, r23
     c44:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     c48:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     c4c:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     c50:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     c54:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <mtable+0x2>
     c58:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <mtable+0x3>
     c5c:	30 97       	sbiw	r30, 0x00	; 0
     c5e:	39 f0       	breq	.+14     	; 0xc6e <__vector_2+0xb2>
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <otable+0x2>
     c68:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <otable+0x3>
     c6c:	09 95       	icall
     c6e:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	bf 91       	pop	r27
     c78:	af 91       	pop	r26
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	7f 91       	pop	r23
     c80:	6f 91       	pop	r22
     c82:	5f 91       	pop	r21
     c84:	4f 91       	pop	r20
     c86:	3f 91       	pop	r19
     c88:	2f 91       	pop	r18
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_3>:
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     cba:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     cbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cc6:	c9 01       	movw	r24, r18
     cc8:	03 2e       	mov	r0, r19
     cca:	00 0c       	add	r0, r0
     ccc:	aa 0b       	sbc	r26, r26
     cce:	bb 0b       	sbc	r27, r27
     cd0:	dc 01       	movw	r26, r24
     cd2:	99 27       	eor	r25, r25
     cd4:	88 27       	eor	r24, r24
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	84 2b       	or	r24, r20
     cdc:	95 2b       	or	r25, r21
     cde:	a6 2b       	or	r26, r22
     ce0:	b7 2b       	or	r27, r23
     ce2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     ce6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     cea:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     cee:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     cf2:	b0 9b       	sbis	0x16, 0	; 22
     cf4:	1b c0       	rjmp	.+54     	; 0xd2c <__vector_3+0x98>
     cf6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cfa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cfe:	c9 01       	movw	r24, r18
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	09 2e       	mov	r0, r25
     d04:	00 0c       	add	r0, r0
     d06:	aa 0b       	sbc	r26, r26
     d08:	bb 0b       	sbc	r27, r27
     d0a:	dc 01       	movw	r26, r24
     d0c:	99 27       	eor	r25, r25
     d0e:	88 27       	eor	r24, r24
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	84 2b       	or	r24, r20
     d16:	95 2b       	or	r25, r21
     d18:	a6 2b       	or	r26, r22
     d1a:	b7 2b       	or	r27, r23
     d1c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     d20:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     d24:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     d28:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     d2c:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <mtable+0x4>
     d30:	f0 91 f0 01 	lds	r31, 0x01F0	; 0x8001f0 <mtable+0x5>
     d34:	30 97       	sbiw	r30, 0x00	; 0
     d36:	39 f0       	breq	.+14     	; 0xd46 <__vector_3+0xb2>
     d38:	62 e0       	ldi	r22, 0x02	; 2
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <otable+0x4>
     d40:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <otable+0x5>
     d44:	09 95       	icall
     d46:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <__vector_4>:
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     d92:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     d96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d9e:	c9 01       	movw	r24, r18
     da0:	03 2e       	mov	r0, r19
     da2:	00 0c       	add	r0, r0
     da4:	aa 0b       	sbc	r26, r26
     da6:	bb 0b       	sbc	r27, r27
     da8:	dc 01       	movw	r26, r24
     daa:	99 27       	eor	r25, r25
     dac:	88 27       	eor	r24, r24
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	84 2b       	or	r24, r20
     db4:	95 2b       	or	r25, r21
     db6:	a6 2b       	or	r26, r22
     db8:	b7 2b       	or	r27, r23
     dba:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     dbe:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     dc2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     dc6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     dca:	b0 9b       	sbis	0x16, 0	; 22
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__vector_4+0x98>
     dce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dd2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd6:	c9 01       	movw	r24, r18
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	09 2e       	mov	r0, r25
     ddc:	00 0c       	add	r0, r0
     dde:	aa 0b       	sbc	r26, r26
     de0:	bb 0b       	sbc	r27, r27
     de2:	dc 01       	movw	r26, r24
     de4:	99 27       	eor	r25, r25
     de6:	88 27       	eor	r24, r24
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	84 2b       	or	r24, r20
     dee:	95 2b       	or	r25, r21
     df0:	a6 2b       	or	r26, r22
     df2:	b7 2b       	or	r27, r23
     df4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     df8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     dfc:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     e00:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     e04:	e0 91 f1 01 	lds	r30, 0x01F1	; 0x8001f1 <mtable+0x6>
     e08:	f0 91 f2 01 	lds	r31, 0x01F2	; 0x8001f2 <mtable+0x7>
     e0c:	30 97       	sbiw	r30, 0x00	; 0
     e0e:	39 f0       	breq	.+14     	; 0xe1e <__vector_4+0xb2>
     e10:	63 e0       	ldi	r22, 0x03	; 3
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <otable+0x6>
     e18:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <otable+0x7>
     e1c:	09 95       	icall
     e1e:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	bf 91       	pop	r27
     e28:	af 91       	pop	r26
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	7f 91       	pop	r23
     e30:	6f 91       	pop	r22
     e32:	5f 91       	pop	r21
     e34:	4f 91       	pop	r20
     e36:	3f 91       	pop	r19
     e38:	2f 91       	pop	r18
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_5>:
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
     e66:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     e6a:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     e6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e76:	c9 01       	movw	r24, r18
     e78:	03 2e       	mov	r0, r19
     e7a:	00 0c       	add	r0, r0
     e7c:	aa 0b       	sbc	r26, r26
     e7e:	bb 0b       	sbc	r27, r27
     e80:	dc 01       	movw	r26, r24
     e82:	99 27       	eor	r25, r25
     e84:	88 27       	eor	r24, r24
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	84 2b       	or	r24, r20
     e8c:	95 2b       	or	r25, r21
     e8e:	a6 2b       	or	r26, r22
     e90:	b7 2b       	or	r27, r23
     e92:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     e96:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     e9a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     e9e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     ea2:	b0 9b       	sbis	0x16, 0	; 22
     ea4:	1b c0       	rjmp	.+54     	; 0xedc <__vector_5+0x98>
     ea6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eaa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eae:	c9 01       	movw	r24, r18
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	09 2e       	mov	r0, r25
     eb4:	00 0c       	add	r0, r0
     eb6:	aa 0b       	sbc	r26, r26
     eb8:	bb 0b       	sbc	r27, r27
     eba:	dc 01       	movw	r26, r24
     ebc:	99 27       	eor	r25, r25
     ebe:	88 27       	eor	r24, r24
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	84 2b       	or	r24, r20
     ec6:	95 2b       	or	r25, r21
     ec8:	a6 2b       	or	r26, r22
     eca:	b7 2b       	or	r27, r23
     ecc:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     ed0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     ed4:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     ed8:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     edc:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <mtable+0x8>
     ee0:	f0 91 f4 01 	lds	r31, 0x01F4	; 0x8001f4 <mtable+0x9>
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	39 f0       	breq	.+14     	; 0xef6 <__vector_5+0xb2>
     ee8:	64 e0       	ldi	r22, 0x04	; 4
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <otable+0x8>
     ef0:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <otable+0x9>
     ef4:	09 95       	icall
     ef6:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0
     f18:	1f 90       	pop	r1
     f1a:	18 95       	reti

00000f1c <__vector_10>:
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
     f42:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
     f46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f4e:	c9 01       	movw	r24, r18
     f50:	03 2e       	mov	r0, r19
     f52:	00 0c       	add	r0, r0
     f54:	aa 0b       	sbc	r26, r26
     f56:	bb 0b       	sbc	r27, r27
     f58:	dc 01       	movw	r26, r24
     f5a:	99 27       	eor	r25, r25
     f5c:	88 27       	eor	r24, r24
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	84 2b       	or	r24, r20
     f64:	95 2b       	or	r25, r21
     f66:	a6 2b       	or	r26, r22
     f68:	b7 2b       	or	r27, r23
     f6a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     f6e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     f72:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     f76:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     f7a:	b0 9b       	sbis	0x16, 0	; 22
     f7c:	1b c0       	rjmp	.+54     	; 0xfb4 <__vector_10+0x98>
     f7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f86:	c9 01       	movw	r24, r18
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	09 2e       	mov	r0, r25
     f8c:	00 0c       	add	r0, r0
     f8e:	aa 0b       	sbc	r26, r26
     f90:	bb 0b       	sbc	r27, r27
     f92:	dc 01       	movw	r26, r24
     f94:	99 27       	eor	r25, r25
     f96:	88 27       	eor	r24, r24
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	84 2b       	or	r24, r20
     f9e:	95 2b       	or	r25, r21
     fa0:	a6 2b       	or	r26, r22
     fa2:	b7 2b       	or	r27, r23
     fa4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
     fa8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
     fac:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
     fb0:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
     fb4:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <mtable+0xa>
     fb8:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <mtable+0xb>
     fbc:	30 97       	sbiw	r30, 0x00	; 0
     fbe:	39 f0       	breq	.+14     	; 0xfce <__vector_10+0xb2>
     fc0:	65 e0       	ldi	r22, 0x05	; 5
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <otable+0xa>
     fc8:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <otable+0xb>
     fcc:	09 95       	icall
     fce:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_11>:
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    101a:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    101e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1022:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1026:	c9 01       	movw	r24, r18
    1028:	03 2e       	mov	r0, r19
    102a:	00 0c       	add	r0, r0
    102c:	aa 0b       	sbc	r26, r26
    102e:	bb 0b       	sbc	r27, r27
    1030:	dc 01       	movw	r26, r24
    1032:	99 27       	eor	r25, r25
    1034:	88 27       	eor	r24, r24
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	84 2b       	or	r24, r20
    103c:	95 2b       	or	r25, r21
    103e:	a6 2b       	or	r26, r22
    1040:	b7 2b       	or	r27, r23
    1042:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1046:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    104a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    104e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1052:	b0 9b       	sbis	0x16, 0	; 22
    1054:	1b c0       	rjmp	.+54     	; 0x108c <__vector_11+0x98>
    1056:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    105a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    105e:	c9 01       	movw	r24, r18
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	09 2e       	mov	r0, r25
    1064:	00 0c       	add	r0, r0
    1066:	aa 0b       	sbc	r26, r26
    1068:	bb 0b       	sbc	r27, r27
    106a:	dc 01       	movw	r26, r24
    106c:	99 27       	eor	r25, r25
    106e:	88 27       	eor	r24, r24
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	84 2b       	or	r24, r20
    1076:	95 2b       	or	r25, r21
    1078:	a6 2b       	or	r26, r22
    107a:	b7 2b       	or	r27, r23
    107c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1080:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1084:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1088:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    108c:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <mtable+0xc>
    1090:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <mtable+0xd>
    1094:	30 97       	sbiw	r30, 0x00	; 0
    1096:	39 f0       	breq	.+14     	; 0x10a6 <__vector_11+0xb2>
    1098:	66 e0       	ldi	r22, 0x06	; 6
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <otable+0xc>
    10a0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <otable+0xd>
    10a4:	09 95       	icall
    10a6:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    10aa:	ff 91       	pop	r31
    10ac:	ef 91       	pop	r30
    10ae:	bf 91       	pop	r27
    10b0:	af 91       	pop	r26
    10b2:	9f 91       	pop	r25
    10b4:	8f 91       	pop	r24
    10b6:	7f 91       	pop	r23
    10b8:	6f 91       	pop	r22
    10ba:	5f 91       	pop	r21
    10bc:	4f 91       	pop	r20
    10be:	3f 91       	pop	r19
    10c0:	2f 91       	pop	r18
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <__vector_12>:
    10cc:	1f 92       	push	r1
    10ce:	0f 92       	push	r0
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	0f 92       	push	r0
    10d4:	11 24       	eor	r1, r1
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
    10ee:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    10f2:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    10f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fe:	c9 01       	movw	r24, r18
    1100:	03 2e       	mov	r0, r19
    1102:	00 0c       	add	r0, r0
    1104:	aa 0b       	sbc	r26, r26
    1106:	bb 0b       	sbc	r27, r27
    1108:	dc 01       	movw	r26, r24
    110a:	99 27       	eor	r25, r25
    110c:	88 27       	eor	r24, r24
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	84 2b       	or	r24, r20
    1114:	95 2b       	or	r25, r21
    1116:	a6 2b       	or	r26, r22
    1118:	b7 2b       	or	r27, r23
    111a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    111e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1122:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1126:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    112a:	b0 9b       	sbis	0x16, 0	; 22
    112c:	1b c0       	rjmp	.+54     	; 0x1164 <__vector_12+0x98>
    112e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1132:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1136:	c9 01       	movw	r24, r18
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	09 2e       	mov	r0, r25
    113c:	00 0c       	add	r0, r0
    113e:	aa 0b       	sbc	r26, r26
    1140:	bb 0b       	sbc	r27, r27
    1142:	dc 01       	movw	r26, r24
    1144:	99 27       	eor	r25, r25
    1146:	88 27       	eor	r24, r24
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	84 2b       	or	r24, r20
    114e:	95 2b       	or	r25, r21
    1150:	a6 2b       	or	r26, r22
    1152:	b7 2b       	or	r27, r23
    1154:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1158:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    115c:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1160:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1164:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <mtable+0xe>
    1168:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <mtable+0xf>
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	39 f0       	breq	.+14     	; 0x117e <__vector_12+0xb2>
    1170:	67 e0       	ldi	r22, 0x07	; 7
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <otable+0xe>
    1178:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <otable+0xf>
    117c:	09 95       	icall
    117e:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	bf 91       	pop	r27
    1188:	af 91       	pop	r26
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	7f 91       	pop	r23
    1190:	6f 91       	pop	r22
    1192:	5f 91       	pop	r21
    1194:	4f 91       	pop	r20
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	0f 90       	pop	r0
    11a0:	1f 90       	pop	r1
    11a2:	18 95       	reti

000011a4 <__vector_13>:
    11a4:	1f 92       	push	r1
    11a6:	0f 92       	push	r0
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	0f 92       	push	r0
    11ac:	11 24       	eor	r1, r1
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	ef 93       	push	r30
    11c4:	ff 93       	push	r31
    11c6:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    11ca:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    11ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d6:	c9 01       	movw	r24, r18
    11d8:	03 2e       	mov	r0, r19
    11da:	00 0c       	add	r0, r0
    11dc:	aa 0b       	sbc	r26, r26
    11de:	bb 0b       	sbc	r27, r27
    11e0:	dc 01       	movw	r26, r24
    11e2:	99 27       	eor	r25, r25
    11e4:	88 27       	eor	r24, r24
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	84 2b       	or	r24, r20
    11ec:	95 2b       	or	r25, r21
    11ee:	a6 2b       	or	r26, r22
    11f0:	b7 2b       	or	r27, r23
    11f2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    11f6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    11fa:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    11fe:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1202:	b0 9b       	sbis	0x16, 0	; 22
    1204:	1b c0       	rjmp	.+54     	; 0x123c <__vector_13+0x98>
    1206:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    120a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    120e:	c9 01       	movw	r24, r18
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	09 2e       	mov	r0, r25
    1214:	00 0c       	add	r0, r0
    1216:	aa 0b       	sbc	r26, r26
    1218:	bb 0b       	sbc	r27, r27
    121a:	dc 01       	movw	r26, r24
    121c:	99 27       	eor	r25, r25
    121e:	88 27       	eor	r24, r24
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	84 2b       	or	r24, r20
    1226:	95 2b       	or	r25, r21
    1228:	a6 2b       	or	r26, r22
    122a:	b7 2b       	or	r27, r23
    122c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1230:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1234:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1238:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    123c:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <mtable+0x10>
    1240:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <mtable+0x11>
    1244:	30 97       	sbiw	r30, 0x00	; 0
    1246:	39 f0       	breq	.+14     	; 0x1256 <__vector_13+0xb2>
    1248:	68 e0       	ldi	r22, 0x08	; 8
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <otable+0x10>
    1250:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <otable+0x11>
    1254:	09 95       	icall
    1256:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_14>:
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    12a2:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    12a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ae:	c9 01       	movw	r24, r18
    12b0:	03 2e       	mov	r0, r19
    12b2:	00 0c       	add	r0, r0
    12b4:	aa 0b       	sbc	r26, r26
    12b6:	bb 0b       	sbc	r27, r27
    12b8:	dc 01       	movw	r26, r24
    12ba:	99 27       	eor	r25, r25
    12bc:	88 27       	eor	r24, r24
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	84 2b       	or	r24, r20
    12c4:	95 2b       	or	r25, r21
    12c6:	a6 2b       	or	r26, r22
    12c8:	b7 2b       	or	r27, r23
    12ca:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    12ce:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    12d2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    12d6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    12da:	b0 9b       	sbis	0x16, 0	; 22
    12dc:	1b c0       	rjmp	.+54     	; 0x1314 <__vector_14+0x98>
    12de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12e6:	c9 01       	movw	r24, r18
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	09 2e       	mov	r0, r25
    12ec:	00 0c       	add	r0, r0
    12ee:	aa 0b       	sbc	r26, r26
    12f0:	bb 0b       	sbc	r27, r27
    12f2:	dc 01       	movw	r26, r24
    12f4:	99 27       	eor	r25, r25
    12f6:	88 27       	eor	r24, r24
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	84 2b       	or	r24, r20
    12fe:	95 2b       	or	r25, r21
    1300:	a6 2b       	or	r26, r22
    1302:	b7 2b       	or	r27, r23
    1304:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1308:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    130c:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1310:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1314:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <mtable+0x12>
    1318:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <mtable+0x13>
    131c:	30 97       	sbiw	r30, 0x00	; 0
    131e:	39 f0       	breq	.+14     	; 0x132e <__vector_14+0xb2>
    1320:	69 e0       	ldi	r22, 0x09	; 9
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <otable+0x12>
    1328:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <otable+0x13>
    132c:	09 95       	icall
    132e:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_15>:
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
    1376:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    137a:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    137e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1382:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1386:	c9 01       	movw	r24, r18
    1388:	03 2e       	mov	r0, r19
    138a:	00 0c       	add	r0, r0
    138c:	aa 0b       	sbc	r26, r26
    138e:	bb 0b       	sbc	r27, r27
    1390:	dc 01       	movw	r26, r24
    1392:	99 27       	eor	r25, r25
    1394:	88 27       	eor	r24, r24
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	84 2b       	or	r24, r20
    139c:	95 2b       	or	r25, r21
    139e:	a6 2b       	or	r26, r22
    13a0:	b7 2b       	or	r27, r23
    13a2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    13a6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    13aa:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    13ae:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    13b2:	b0 9b       	sbis	0x16, 0	; 22
    13b4:	1b c0       	rjmp	.+54     	; 0x13ec <__vector_15+0x98>
    13b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13be:	c9 01       	movw	r24, r18
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	09 2e       	mov	r0, r25
    13c4:	00 0c       	add	r0, r0
    13c6:	aa 0b       	sbc	r26, r26
    13c8:	bb 0b       	sbc	r27, r27
    13ca:	dc 01       	movw	r26, r24
    13cc:	99 27       	eor	r25, r25
    13ce:	88 27       	eor	r24, r24
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	84 2b       	or	r24, r20
    13d6:	95 2b       	or	r25, r21
    13d8:	a6 2b       	or	r26, r22
    13da:	b7 2b       	or	r27, r23
    13dc:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    13e0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    13e4:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    13e8:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    13ec:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <mtable+0x14>
    13f0:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <mtable+0x15>
    13f4:	30 97       	sbiw	r30, 0x00	; 0
    13f6:	39 f0       	breq	.+14     	; 0x1406 <__vector_15+0xb2>
    13f8:	6a e0       	ldi	r22, 0x0A	; 10
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <otable+0x14>
    1400:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <otable+0x15>
    1404:	09 95       	icall
    1406:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_16>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
    144e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1452:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1456:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    145a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    145e:	c9 01       	movw	r24, r18
    1460:	03 2e       	mov	r0, r19
    1462:	00 0c       	add	r0, r0
    1464:	aa 0b       	sbc	r26, r26
    1466:	bb 0b       	sbc	r27, r27
    1468:	dc 01       	movw	r26, r24
    146a:	99 27       	eor	r25, r25
    146c:	88 27       	eor	r24, r24
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	84 2b       	or	r24, r20
    1474:	95 2b       	or	r25, r21
    1476:	a6 2b       	or	r26, r22
    1478:	b7 2b       	or	r27, r23
    147a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    147e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1482:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1486:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    148a:	b0 9b       	sbis	0x16, 0	; 22
    148c:	1b c0       	rjmp	.+54     	; 0x14c4 <__vector_16+0x98>
    148e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1492:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1496:	c9 01       	movw	r24, r18
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	09 2e       	mov	r0, r25
    149c:	00 0c       	add	r0, r0
    149e:	aa 0b       	sbc	r26, r26
    14a0:	bb 0b       	sbc	r27, r27
    14a2:	dc 01       	movw	r26, r24
    14a4:	99 27       	eor	r25, r25
    14a6:	88 27       	eor	r24, r24
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	84 2b       	or	r24, r20
    14ae:	95 2b       	or	r25, r21
    14b0:	a6 2b       	or	r26, r22
    14b2:	b7 2b       	or	r27, r23
    14b4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    14b8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    14bc:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    14c0:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    14c4:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <mtable+0x16>
    14c8:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <mtable+0x17>
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	39 f0       	breq	.+14     	; 0x14de <__vector_16+0xb2>
    14d0:	6b e0       	ldi	r22, 0x0B	; 11
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <otable+0x16>
    14d8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <otable+0x17>
    14dc:	09 95       	icall
    14de:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    14e2:	ff 91       	pop	r31
    14e4:	ef 91       	pop	r30
    14e6:	bf 91       	pop	r27
    14e8:	af 91       	pop	r26
    14ea:	9f 91       	pop	r25
    14ec:	8f 91       	pop	r24
    14ee:	7f 91       	pop	r23
    14f0:	6f 91       	pop	r22
    14f2:	5f 91       	pop	r21
    14f4:	4f 91       	pop	r20
    14f6:	3f 91       	pop	r19
    14f8:	2f 91       	pop	r18
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <__vector_17>:
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	2f 93       	push	r18
    1510:	3f 93       	push	r19
    1512:	4f 93       	push	r20
    1514:	5f 93       	push	r21
    1516:	6f 93       	push	r22
    1518:	7f 93       	push	r23
    151a:	8f 93       	push	r24
    151c:	9f 93       	push	r25
    151e:	af 93       	push	r26
    1520:	bf 93       	push	r27
    1522:	ef 93       	push	r30
    1524:	ff 93       	push	r31
    1526:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    152a:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    152e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1532:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1536:	c9 01       	movw	r24, r18
    1538:	03 2e       	mov	r0, r19
    153a:	00 0c       	add	r0, r0
    153c:	aa 0b       	sbc	r26, r26
    153e:	bb 0b       	sbc	r27, r27
    1540:	dc 01       	movw	r26, r24
    1542:	99 27       	eor	r25, r25
    1544:	88 27       	eor	r24, r24
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	84 2b       	or	r24, r20
    154c:	95 2b       	or	r25, r21
    154e:	a6 2b       	or	r26, r22
    1550:	b7 2b       	or	r27, r23
    1552:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1556:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    155a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    155e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1562:	b0 9b       	sbis	0x16, 0	; 22
    1564:	1b c0       	rjmp	.+54     	; 0x159c <__vector_17+0x98>
    1566:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    156a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    156e:	c9 01       	movw	r24, r18
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	09 2e       	mov	r0, r25
    1574:	00 0c       	add	r0, r0
    1576:	aa 0b       	sbc	r26, r26
    1578:	bb 0b       	sbc	r27, r27
    157a:	dc 01       	movw	r26, r24
    157c:	99 27       	eor	r25, r25
    157e:	88 27       	eor	r24, r24
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	84 2b       	or	r24, r20
    1586:	95 2b       	or	r25, r21
    1588:	a6 2b       	or	r26, r22
    158a:	b7 2b       	or	r27, r23
    158c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1590:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1594:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1598:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    159c:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <mtable+0x18>
    15a0:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <mtable+0x19>
    15a4:	30 97       	sbiw	r30, 0x00	; 0
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <__vector_17+0xb2>
    15a8:	6c e0       	ldi	r22, 0x0C	; 12
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <otable+0x18>
    15b0:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <otable+0x19>
    15b4:	09 95       	icall
    15b6:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_18>:
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
    15fe:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1602:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1606:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    160a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    160e:	c9 01       	movw	r24, r18
    1610:	03 2e       	mov	r0, r19
    1612:	00 0c       	add	r0, r0
    1614:	aa 0b       	sbc	r26, r26
    1616:	bb 0b       	sbc	r27, r27
    1618:	dc 01       	movw	r26, r24
    161a:	99 27       	eor	r25, r25
    161c:	88 27       	eor	r24, r24
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	84 2b       	or	r24, r20
    1624:	95 2b       	or	r25, r21
    1626:	a6 2b       	or	r26, r22
    1628:	b7 2b       	or	r27, r23
    162a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    162e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1632:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1636:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    163a:	b0 9b       	sbis	0x16, 0	; 22
    163c:	1b c0       	rjmp	.+54     	; 0x1674 <__vector_18+0x98>
    163e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1642:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1646:	c9 01       	movw	r24, r18
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	09 2e       	mov	r0, r25
    164c:	00 0c       	add	r0, r0
    164e:	aa 0b       	sbc	r26, r26
    1650:	bb 0b       	sbc	r27, r27
    1652:	dc 01       	movw	r26, r24
    1654:	99 27       	eor	r25, r25
    1656:	88 27       	eor	r24, r24
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	84 2b       	or	r24, r20
    165e:	95 2b       	or	r25, r21
    1660:	a6 2b       	or	r26, r22
    1662:	b7 2b       	or	r27, r23
    1664:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1668:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    166c:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1670:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1674:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <mtable+0x1a>
    1678:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <mtable+0x1b>
    167c:	30 97       	sbiw	r30, 0x00	; 0
    167e:	39 f0       	breq	.+14     	; 0x168e <__vector_18+0xb2>
    1680:	6d e0       	ldi	r22, 0x0D	; 13
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <otable+0x1a>
    1688:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <otable+0x1b>
    168c:	09 95       	icall
    168e:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	0f 90       	pop	r0
    16b0:	1f 90       	pop	r1
    16b2:	18 95       	reti

000016b4 <__vector_19>:
    16b4:	1f 92       	push	r1
    16b6:	0f 92       	push	r0
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	0f 92       	push	r0
    16bc:	11 24       	eor	r1, r1
    16be:	2f 93       	push	r18
    16c0:	3f 93       	push	r19
    16c2:	4f 93       	push	r20
    16c4:	5f 93       	push	r21
    16c6:	6f 93       	push	r22
    16c8:	7f 93       	push	r23
    16ca:	8f 93       	push	r24
    16cc:	9f 93       	push	r25
    16ce:	af 93       	push	r26
    16d0:	bf 93       	push	r27
    16d2:	ef 93       	push	r30
    16d4:	ff 93       	push	r31
    16d6:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    16da:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    16de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e6:	c9 01       	movw	r24, r18
    16e8:	03 2e       	mov	r0, r19
    16ea:	00 0c       	add	r0, r0
    16ec:	aa 0b       	sbc	r26, r26
    16ee:	bb 0b       	sbc	r27, r27
    16f0:	dc 01       	movw	r26, r24
    16f2:	99 27       	eor	r25, r25
    16f4:	88 27       	eor	r24, r24
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	84 2b       	or	r24, r20
    16fc:	95 2b       	or	r25, r21
    16fe:	a6 2b       	or	r26, r22
    1700:	b7 2b       	or	r27, r23
    1702:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1706:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    170a:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    170e:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1712:	b0 9b       	sbis	0x16, 0	; 22
    1714:	1b c0       	rjmp	.+54     	; 0x174c <__vector_19+0x98>
    1716:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    171a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    171e:	c9 01       	movw	r24, r18
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	09 2e       	mov	r0, r25
    1724:	00 0c       	add	r0, r0
    1726:	aa 0b       	sbc	r26, r26
    1728:	bb 0b       	sbc	r27, r27
    172a:	dc 01       	movw	r26, r24
    172c:	99 27       	eor	r25, r25
    172e:	88 27       	eor	r24, r24
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	84 2b       	or	r24, r20
    1736:	95 2b       	or	r25, r21
    1738:	a6 2b       	or	r26, r22
    173a:	b7 2b       	or	r27, r23
    173c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1740:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1744:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1748:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    174c:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <mtable+0x1c>
    1750:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <mtable+0x1d>
    1754:	30 97       	sbiw	r30, 0x00	; 0
    1756:	39 f0       	breq	.+14     	; 0x1766 <__vector_19+0xb2>
    1758:	6e e0       	ldi	r22, 0x0E	; 14
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <otable+0x1c>
    1760:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <otable+0x1d>
    1764:	09 95       	icall
    1766:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    176a:	ff 91       	pop	r31
    176c:	ef 91       	pop	r30
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	9f 91       	pop	r25
    1774:	8f 91       	pop	r24
    1776:	7f 91       	pop	r23
    1778:	6f 91       	pop	r22
    177a:	5f 91       	pop	r21
    177c:	4f 91       	pop	r20
    177e:	3f 91       	pop	r19
    1780:	2f 91       	pop	r18
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <__vector_20>:
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	2f 93       	push	r18
    1798:	3f 93       	push	r19
    179a:	4f 93       	push	r20
    179c:	5f 93       	push	r21
    179e:	6f 93       	push	r22
    17a0:	7f 93       	push	r23
    17a2:	8f 93       	push	r24
    17a4:	9f 93       	push	r25
    17a6:	af 93       	push	r26
    17a8:	bf 93       	push	r27
    17aa:	ef 93       	push	r30
    17ac:	ff 93       	push	r31
    17ae:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    17b2:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    17b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17be:	c9 01       	movw	r24, r18
    17c0:	03 2e       	mov	r0, r19
    17c2:	00 0c       	add	r0, r0
    17c4:	aa 0b       	sbc	r26, r26
    17c6:	bb 0b       	sbc	r27, r27
    17c8:	dc 01       	movw	r26, r24
    17ca:	99 27       	eor	r25, r25
    17cc:	88 27       	eor	r24, r24
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	84 2b       	or	r24, r20
    17d4:	95 2b       	or	r25, r21
    17d6:	a6 2b       	or	r26, r22
    17d8:	b7 2b       	or	r27, r23
    17da:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    17de:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    17e2:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    17e6:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    17ea:	b0 9b       	sbis	0x16, 0	; 22
    17ec:	1b c0       	rjmp	.+54     	; 0x1824 <__vector_20+0x98>
    17ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17f6:	c9 01       	movw	r24, r18
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	09 2e       	mov	r0, r25
    17fc:	00 0c       	add	r0, r0
    17fe:	aa 0b       	sbc	r26, r26
    1800:	bb 0b       	sbc	r27, r27
    1802:	dc 01       	movw	r26, r24
    1804:	99 27       	eor	r25, r25
    1806:	88 27       	eor	r24, r24
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	84 2b       	or	r24, r20
    180e:	95 2b       	or	r25, r21
    1810:	a6 2b       	or	r26, r22
    1812:	b7 2b       	or	r27, r23
    1814:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    1818:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    181c:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1820:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    1824:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <mtable+0x1e>
    1828:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <mtable+0x1f>
    182c:	30 97       	sbiw	r30, 0x00	; 0
    182e:	39 f0       	breq	.+14     	; 0x183e <__vector_20+0xb2>
    1830:	6f e0       	ldi	r22, 0x0F	; 15
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <otable+0x1e>
    1838:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <otable+0x1f>
    183c:	09 95       	icall
    183e:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    1842:	ff 91       	pop	r31
    1844:	ef 91       	pop	r30
    1846:	bf 91       	pop	r27
    1848:	af 91       	pop	r26
    184a:	9f 91       	pop	r25
    184c:	8f 91       	pop	r24
    184e:	7f 91       	pop	r23
    1850:	6f 91       	pop	r22
    1852:	5f 91       	pop	r21
    1854:	4f 91       	pop	r20
    1856:	3f 91       	pop	r19
    1858:	2f 91       	pop	r18
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <__vector_21>:
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	2f 93       	push	r18
    1870:	3f 93       	push	r19
    1872:	4f 93       	push	r20
    1874:	5f 93       	push	r21
    1876:	6f 93       	push	r22
    1878:	7f 93       	push	r23
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	af 93       	push	r26
    1880:	bf 93       	push	r27
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
    1886:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    188a:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    188e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1892:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1896:	c9 01       	movw	r24, r18
    1898:	03 2e       	mov	r0, r19
    189a:	00 0c       	add	r0, r0
    189c:	aa 0b       	sbc	r26, r26
    189e:	bb 0b       	sbc	r27, r27
    18a0:	dc 01       	movw	r26, r24
    18a2:	99 27       	eor	r25, r25
    18a4:	88 27       	eor	r24, r24
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	84 2b       	or	r24, r20
    18ac:	95 2b       	or	r25, r21
    18ae:	a6 2b       	or	r26, r22
    18b0:	b7 2b       	or	r27, r23
    18b2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    18b6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    18ba:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    18be:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    18c2:	b0 9b       	sbis	0x16, 0	; 22
    18c4:	1b c0       	rjmp	.+54     	; 0x18fc <__vector_21+0x98>
    18c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ce:	c9 01       	movw	r24, r18
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	09 2e       	mov	r0, r25
    18d4:	00 0c       	add	r0, r0
    18d6:	aa 0b       	sbc	r26, r26
    18d8:	bb 0b       	sbc	r27, r27
    18da:	dc 01       	movw	r26, r24
    18dc:	99 27       	eor	r25, r25
    18de:	88 27       	eor	r24, r24
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	84 2b       	or	r24, r20
    18e6:	95 2b       	or	r25, r21
    18e8:	a6 2b       	or	r26, r22
    18ea:	b7 2b       	or	r27, r23
    18ec:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    18f0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    18f4:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    18f8:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    18fc:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <mtable+0x20>
    1900:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <mtable+0x21>
    1904:	30 97       	sbiw	r30, 0x00	; 0
    1906:	39 f0       	breq	.+14     	; 0x1916 <__vector_21+0xb2>
    1908:	60 e1       	ldi	r22, 0x10	; 16
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <otable+0x20>
    1910:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <otable+0x21>
    1914:	09 95       	icall
    1916:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <__vector_22>:
    193c:	1f 92       	push	r1
    193e:	0f 92       	push	r0
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	0f 92       	push	r0
    1944:	11 24       	eor	r1, r1
    1946:	2f 93       	push	r18
    1948:	3f 93       	push	r19
    194a:	4f 93       	push	r20
    194c:	5f 93       	push	r21
    194e:	6f 93       	push	r22
    1950:	7f 93       	push	r23
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
    1956:	af 93       	push	r26
    1958:	bf 93       	push	r27
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
    195e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1962:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1966:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    196a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    196e:	c9 01       	movw	r24, r18
    1970:	03 2e       	mov	r0, r19
    1972:	00 0c       	add	r0, r0
    1974:	aa 0b       	sbc	r26, r26
    1976:	bb 0b       	sbc	r27, r27
    1978:	dc 01       	movw	r26, r24
    197a:	99 27       	eor	r25, r25
    197c:	88 27       	eor	r24, r24
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	84 2b       	or	r24, r20
    1984:	95 2b       	or	r25, r21
    1986:	a6 2b       	or	r26, r22
    1988:	b7 2b       	or	r27, r23
    198a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    198e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    1992:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    1996:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    199a:	b0 9b       	sbis	0x16, 0	; 22
    199c:	1b c0       	rjmp	.+54     	; 0x19d4 <__vector_22+0x98>
    199e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19a6:	c9 01       	movw	r24, r18
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	09 2e       	mov	r0, r25
    19ac:	00 0c       	add	r0, r0
    19ae:	aa 0b       	sbc	r26, r26
    19b0:	bb 0b       	sbc	r27, r27
    19b2:	dc 01       	movw	r26, r24
    19b4:	99 27       	eor	r25, r25
    19b6:	88 27       	eor	r24, r24
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	84 2b       	or	r24, r20
    19be:	95 2b       	or	r25, r21
    19c0:	a6 2b       	or	r26, r22
    19c2:	b7 2b       	or	r27, r23
    19c4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timestamp>
    19c8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timestamp+0x1>
    19cc:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <timestamp+0x2>
    19d0:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <timestamp+0x3>
    19d4:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <mtable+0x22>
    19d8:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <mtable+0x23>
    19dc:	30 97       	sbiw	r30, 0x00	; 0
    19de:	39 f0       	breq	.+14     	; 0x19ee <__vector_22+0xb2>
    19e0:	61 e1       	ldi	r22, 0x11	; 17
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <otable+0x22>
    19e8:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <otable+0x23>
    19ec:	09 95       	icall
    19ee:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    19f2:	ff 91       	pop	r31
    19f4:	ef 91       	pop	r30
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <enqueueByDeadline>:
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	7b 01       	movw	r14, r22
    1a22:	eb 01       	movw	r28, r22
    1a24:	a8 81       	ld	r26, Y
    1a26:	b9 81       	ldd	r27, Y+1	; 0x01
    1a28:	10 97       	sbiw	r26, 0x00	; 0
    1a2a:	61 f1       	breq	.+88     	; 0x1a84 <enqueueByDeadline+0x70>
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	06 81       	ldd	r16, Z+6	; 0x06
    1a30:	17 81       	ldd	r17, Z+7	; 0x07
    1a32:	20 85       	ldd	r18, Z+8	; 0x08
    1a34:	31 85       	ldd	r19, Z+9	; 0x09
    1a36:	16 96       	adiw	r26, 0x06	; 6
    1a38:	4d 91       	ld	r20, X+
    1a3a:	5d 91       	ld	r21, X+
    1a3c:	6d 91       	ld	r22, X+
    1a3e:	7c 91       	ld	r23, X
    1a40:	19 97       	sbiw	r26, 0x09	; 9
    1a42:	04 17       	cp	r16, r20
    1a44:	15 07       	cpc	r17, r21
    1a46:	26 07       	cpc	r18, r22
    1a48:	37 07       	cpc	r19, r23
    1a4a:	14 f4       	brge	.+4      	; 0x1a50 <enqueueByDeadline+0x3c>
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <enqueueByDeadline+0x70>
    1a4e:	df 01       	movw	r26, r30
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	30 97       	sbiw	r30, 0x00	; 0
    1a58:	49 f0       	breq	.+18     	; 0x1a6c <enqueueByDeadline+0x58>
    1a5a:	46 81       	ldd	r20, Z+6	; 0x06
    1a5c:	57 81       	ldd	r21, Z+7	; 0x07
    1a5e:	60 85       	ldd	r22, Z+8	; 0x08
    1a60:	71 85       	ldd	r23, Z+9	; 0x09
    1a62:	04 17       	cp	r16, r20
    1a64:	15 07       	cpc	r17, r21
    1a66:	26 07       	cpc	r18, r22
    1a68:	37 07       	cpc	r19, r23
    1a6a:	8c f7       	brge	.-30     	; 0x1a4e <enqueueByDeadline+0x3a>
    1a6c:	ec 01       	movw	r28, r24
    1a6e:	f9 83       	std	Y+1, r31	; 0x01
    1a70:	e8 83       	st	Y, r30
    1a72:	10 97       	sbiw	r26, 0x00	; 0
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <enqueueByDeadline+0x6a>
    1a76:	f7 01       	movw	r30, r14
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <enqueueByDeadline+0x78>
    1a7e:	8d 93       	st	X+, r24
    1a80:	9c 93       	st	X, r25
    1a82:	04 c0       	rjmp	.+8      	; 0x1a8c <enqueueByDeadline+0x78>
    1a84:	ec 01       	movw	r28, r24
    1a86:	b9 83       	std	Y+1, r27	; 0x01
    1a88:	a8 83       	st	Y, r26
    1a8a:	f5 cf       	rjmp	.-22     	; 0x1a76 <enqueueByDeadline+0x62>
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	08 95       	ret

00001a9a <enqueueByBaseline>:
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	7b 01       	movw	r14, r22
    1aa8:	eb 01       	movw	r28, r22
    1aaa:	a8 81       	ld	r26, Y
    1aac:	b9 81       	ldd	r27, Y+1	; 0x01
    1aae:	10 97       	sbiw	r26, 0x00	; 0
    1ab0:	61 f1       	breq	.+88     	; 0x1b0a <enqueueByBaseline+0x70>
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	02 81       	ldd	r16, Z+2	; 0x02
    1ab6:	13 81       	ldd	r17, Z+3	; 0x03
    1ab8:	24 81       	ldd	r18, Z+4	; 0x04
    1aba:	35 81       	ldd	r19, Z+5	; 0x05
    1abc:	12 96       	adiw	r26, 0x02	; 2
    1abe:	4d 91       	ld	r20, X+
    1ac0:	5d 91       	ld	r21, X+
    1ac2:	6d 91       	ld	r22, X+
    1ac4:	7c 91       	ld	r23, X
    1ac6:	15 97       	sbiw	r26, 0x05	; 5
    1ac8:	04 17       	cp	r16, r20
    1aca:	15 07       	cpc	r17, r21
    1acc:	26 07       	cpc	r18, r22
    1ace:	37 07       	cpc	r19, r23
    1ad0:	14 f4       	brge	.+4      	; 0x1ad6 <enqueueByBaseline+0x3c>
    1ad2:	1b c0       	rjmp	.+54     	; 0x1b0a <enqueueByBaseline+0x70>
    1ad4:	df 01       	movw	r26, r30
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	11 97       	sbiw	r26, 0x01	; 1
    1adc:	30 97       	sbiw	r30, 0x00	; 0
    1ade:	49 f0       	breq	.+18     	; 0x1af2 <enqueueByBaseline+0x58>
    1ae0:	42 81       	ldd	r20, Z+2	; 0x02
    1ae2:	53 81       	ldd	r21, Z+3	; 0x03
    1ae4:	64 81       	ldd	r22, Z+4	; 0x04
    1ae6:	75 81       	ldd	r23, Z+5	; 0x05
    1ae8:	04 17       	cp	r16, r20
    1aea:	15 07       	cpc	r17, r21
    1aec:	26 07       	cpc	r18, r22
    1aee:	37 07       	cpc	r19, r23
    1af0:	8c f7       	brge	.-30     	; 0x1ad4 <enqueueByBaseline+0x3a>
    1af2:	ec 01       	movw	r28, r24
    1af4:	f9 83       	std	Y+1, r31	; 0x01
    1af6:	e8 83       	st	Y, r30
    1af8:	10 97       	sbiw	r26, 0x00	; 0
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <enqueueByBaseline+0x6a>
    1afc:	f7 01       	movw	r30, r14
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <enqueueByBaseline+0x78>
    1b04:	8d 93       	st	X+, r24
    1b06:	9c 93       	st	X, r25
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <enqueueByBaseline+0x78>
    1b0a:	ec 01       	movw	r28, r24
    1b0c:	b9 83       	std	Y+1, r27	; 0x01
    1b0e:	a8 83       	st	Y, r26
    1b10:	f5 cf       	rjmp	.-22     	; 0x1afc <enqueueByBaseline+0x62>
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	08 95       	ret

00001b20 <dequeue>:
    1b20:	dc 01       	movw	r26, r24
    1b22:	ed 91       	ld	r30, X+
    1b24:	fc 91       	ld	r31, X
    1b26:	11 97       	sbiw	r26, 0x01	; 1
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	59 f4       	brne	.+22     	; 0x1b42 <dequeue+0x22>
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1b32:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1b36:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	83 bf       	out	0x33, r24	; 51
    1b3e:	88 95       	sleep
    1b40:	fd cf       	rjmp	.-6      	; 0x1b3c <dequeue+0x1c>
    1b42:	20 81       	ld	r18, Z
    1b44:	31 81       	ldd	r19, Z+1	; 0x01
    1b46:	2d 93       	st	X+, r18
    1b48:	3c 93       	st	X, r19
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret

00001b4e <__vector_9>:
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	ef 93       	push	r30
    1b6a:	ff 93       	push	r31
    1b6c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <overflows>
    1b70:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <overflows+0x1>
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <overflows+0x1>
    1b7a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <overflows>
    1b7e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1b82:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1b86:	30 97       	sbiw	r30, 0x00	; 0
    1b88:	01 f1       	breq	.+64     	; 0x1bca <__vector_9+0x7c>
    1b8a:	42 81       	ldd	r20, Z+2	; 0x02
    1b8c:	53 81       	ldd	r21, Z+3	; 0x03
    1b8e:	64 81       	ldd	r22, Z+4	; 0x04
    1b90:	75 81       	ldd	r23, Z+5	; 0x05
    1b92:	86 17       	cp	r24, r22
    1b94:	97 07       	cpc	r25, r23
    1b96:	c9 f4       	brne	.+50     	; 0x1bca <__vector_9+0x7c>
    1b98:	ca 01       	movw	r24, r20
    1b9a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b9e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ba2:	42 1b       	sub	r20, r18
    1ba4:	53 0b       	sbc	r21, r19
    1ba6:	41 30       	cpi	r20, 0x01	; 1
    1ba8:	51 05       	cpc	r21, r1
    1baa:	29 f4       	brne	.+10     	; 0x1bb6 <__vector_9+0x68>
    1bac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bb0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1bba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1bbe:	ef e6       	ldi	r30, 0x6F	; 111
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	82 60       	ori	r24, 0x02	; 2
    1bc6:	80 83       	st	Z, r24
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <__vector_9+0x86>
    1bca:	ef e6       	ldi	r30, 0x6F	; 111
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8d 7f       	andi	r24, 0xFD	; 253
    1bd2:	80 83       	st	Z, r24
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	9f 91       	pop	r25
    1bda:	8f 91       	pop	r24
    1bdc:	7f 91       	pop	r23
    1bde:	6f 91       	pop	r22
    1be0:	5f 91       	pop	r21
    1be2:	4f 91       	pop	r20
    1be4:	3f 91       	pop	r19
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <__vector_7>:
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
    1c1c:	c0 90 49 01 	lds	r12, 0x0149	; 0x800149 <overflows>
    1c20:	d0 90 4a 01 	lds	r13, 0x014A	; 0x80014a <overflows+0x1>
    1c24:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c28:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c2c:	b0 99       	sbic	0x16, 0	; 22
    1c2e:	0f c0       	rjmp	.+30     	; 0x1c4e <__vector_7+0x5c>
    1c30:	0d 2c       	mov	r0, r13
    1c32:	00 0c       	add	r0, r0
    1c34:	ee 08       	sbc	r14, r14
    1c36:	ff 08       	sbc	r15, r15
    1c38:	d6 01       	movw	r26, r12
    1c3a:	99 27       	eor	r25, r25
    1c3c:	88 27       	eor	r24, r24
    1c3e:	69 01       	movw	r12, r18
    1c40:	e1 2c       	mov	r14, r1
    1c42:	f1 2c       	mov	r15, r1
    1c44:	c8 2a       	or	r12, r24
    1c46:	d9 2a       	or	r13, r25
    1c48:	ea 2a       	or	r14, r26
    1c4a:	fb 2a       	or	r15, r27
    1c4c:	15 c0       	rjmp	.+42     	; 0x1c78 <__vector_7+0x86>
    1c4e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c52:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	c8 1a       	sub	r12, r24
    1c5a:	d8 0a       	sbc	r13, r24
    1c5c:	0d 2c       	mov	r0, r13
    1c5e:	00 0c       	add	r0, r0
    1c60:	ee 08       	sbc	r14, r14
    1c62:	ff 08       	sbc	r15, r15
    1c64:	d6 01       	movw	r26, r12
    1c66:	99 27       	eor	r25, r25
    1c68:	88 27       	eor	r24, r24
    1c6a:	69 01       	movw	r12, r18
    1c6c:	e1 2c       	mov	r14, r1
    1c6e:	f1 2c       	mov	r15, r1
    1c70:	c8 2a       	or	r12, r24
    1c72:	d9 2a       	or	r13, r25
    1c74:	ea 2a       	or	r14, r26
    1c76:	fb 2a       	or	r15, r27
    1c78:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1c7c:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1c80:	30 97       	sbiw	r30, 0x00	; 0
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <__vector_7+0x94>
    1c84:	42 c0       	rjmp	.+132    	; 0x1d0a <__vector_7+0x118>
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c8e:	8c 19       	sub	r24, r12
    1c90:	9d 09       	sbc	r25, r13
    1c92:	ae 09       	sbc	r26, r14
    1c94:	bf 09       	sbc	r27, r15
    1c96:	18 16       	cp	r1, r24
    1c98:	19 06       	cpc	r1, r25
    1c9a:	1a 06       	cpc	r1, r26
    1c9c:	1b 06       	cpc	r1, r27
    1c9e:	ec f1       	brlt	.+122    	; 0x1d1a <__vector_7+0x128>
    1ca0:	8f e4       	ldi	r24, 0x4F	; 79
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <dequeue>
    1ca8:	61 e5       	ldi	r22, 0x51	; 81
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <enqueueByDeadline>
    1cb0:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1cb4:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1cb8:	30 97       	sbiw	r30, 0x00	; 0
    1cba:	39 f1       	breq	.+78     	; 0x1d0a <__vector_7+0x118>
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	a4 81       	ldd	r26, Z+4	; 0x04
    1cc2:	b5 81       	ldd	r27, Z+5	; 0x05
    1cc4:	8c 19       	sub	r24, r12
    1cc6:	9d 09       	sbc	r25, r13
    1cc8:	ae 09       	sbc	r26, r14
    1cca:	bf 09       	sbc	r27, r15
    1ccc:	18 16       	cp	r1, r24
    1cce:	19 06       	cpc	r1, r25
    1cd0:	1a 06       	cpc	r1, r26
    1cd2:	1b 06       	cpc	r1, r27
    1cd4:	2c f7       	brge	.-54     	; 0x1ca0 <__vector_7+0xae>
    1cd6:	21 c0       	rjmp	.+66     	; 0x1d1a <__vector_7+0x128>
    1cd8:	9c 01       	movw	r18, r24
    1cda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce2:	84 1b       	sub	r24, r20
    1ce4:	95 0b       	sbc	r25, r21
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	31 f4       	brne	.+12     	; 0x1cf6 <__vector_7+0x104>
    1cea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cfa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cfe:	ef e6       	ldi	r30, 0x6F	; 111
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	80 83       	st	Z, r24
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <__vector_7+0x122>
    1d0a:	ef e6       	ldi	r30, 0x6F	; 111
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8d 7f       	andi	r24, 0xFD	; 253
    1d12:	80 83       	st	Z, r24
    1d14:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    1d18:	0c c0       	rjmp	.+24     	; 0x1d32 <__vector_7+0x140>
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d20:	b5 81       	ldd	r27, Z+5	; 0x05
    1d22:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1d26:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1d2a:	2a 17       	cp	r18, r26
    1d2c:	3b 07       	cpc	r19, r27
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <__vector_7+0x118>
    1d30:	d3 cf       	rjmp	.-90     	; 0x1cd8 <__vector_7+0xe6>
    1d32:	ff 91       	pop	r31
    1d34:	ef 91       	pop	r30
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	0f 90       	pop	r0
    1d58:	1f 90       	pop	r1
    1d5a:	18 95       	reti

00001d5c <async>:
    1d5c:	3f 92       	push	r3
    1d5e:	4f 92       	push	r4
    1d60:	5f 92       	push	r5
    1d62:	6f 92       	push	r6
    1d64:	7f 92       	push	r7
    1d66:	8f 92       	push	r8
    1d68:	9f 92       	push	r9
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	2b 01       	movw	r4, r22
    1d80:	3c 01       	movw	r6, r24
    1d82:	49 01       	movw	r8, r18
    1d84:	5a 01       	movw	r10, r20
    1d86:	8f b7       	in	r24, 0x3f	; 63
    1d88:	80 78       	andi	r24, 0x80	; 128
    1d8a:	38 2e       	mov	r3, r24
    1d8c:	f8 94       	cli
    1d8e:	8d e2       	ldi	r24, 0x2D	; 45
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <dequeue>
    1d96:	ec 01       	movw	r28, r24
    1d98:	1b 87       	std	Y+11, r17	; 0x0b
    1d9a:	0a 87       	std	Y+10, r16	; 0x0a
    1d9c:	fd 86       	std	Y+13, r15	; 0x0d
    1d9e:	ec 86       	std	Y+12, r14	; 0x0c
    1da0:	df 86       	std	Y+15, r13	; 0x0f
    1da2:	ce 86       	std	Y+14, r12	; 0x0e
    1da4:	33 20       	and	r3, r3
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <async+0x64>
    1da8:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <current>
    1dac:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <current+0x1>
    1db0:	02 80       	ldd	r0, Z+2	; 0x02
    1db2:	f3 81       	ldd	r31, Z+3	; 0x03
    1db4:	e0 2d       	mov	r30, r0
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	a4 81       	ldd	r26, Z+4	; 0x04
    1dbc:	b5 81       	ldd	r27, Z+5	; 0x05
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <async+0x74>
    1dc0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <timestamp>
    1dc4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <timestamp+0x1>
    1dc8:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <timestamp+0x2>
    1dcc:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <timestamp+0x3>
    1dd0:	48 0e       	add	r4, r24
    1dd2:	59 1e       	adc	r5, r25
    1dd4:	6a 1e       	adc	r6, r26
    1dd6:	7b 1e       	adc	r7, r27
    1dd8:	4a 82       	std	Y+2, r4	; 0x02
    1dda:	5b 82       	std	Y+3, r5	; 0x03
    1ddc:	6c 82       	std	Y+4, r6	; 0x04
    1dde:	7d 82       	std	Y+5, r7	; 0x05
    1de0:	18 14       	cp	r1, r8
    1de2:	19 04       	cpc	r1, r9
    1de4:	1a 04       	cpc	r1, r10
    1de6:	1b 04       	cpc	r1, r11
    1de8:	44 f0       	brlt	.+16     	; 0x1dfa <async+0x9e>
    1dea:	0f 2e       	mov	r0, r31
    1dec:	88 24       	eor	r8, r8
    1dee:	8a 94       	dec	r8
    1df0:	98 2c       	mov	r9, r8
    1df2:	a8 2c       	mov	r10, r8
    1df4:	ff e7       	ldi	r31, 0x7F	; 127
    1df6:	bf 2e       	mov	r11, r31
    1df8:	f0 2d       	mov	r31, r0
    1dfa:	84 0c       	add	r8, r4
    1dfc:	95 1c       	adc	r9, r5
    1dfe:	a6 1c       	adc	r10, r6
    1e00:	b7 1c       	adc	r11, r7
    1e02:	8e 82       	std	Y+6, r8	; 0x06
    1e04:	9f 82       	std	Y+7, r9	; 0x07
    1e06:	a8 86       	std	Y+8, r10	; 0x08
    1e08:	b9 86       	std	Y+9, r11	; 0x09
    1e0a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <overflows>
    1e0e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <overflows+0x1>
    1e12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e1a:	b0 99       	sbic	0x16, 0	; 22
    1e1c:	0e c0       	rjmp	.+28     	; 0x1e3a <async+0xde>
    1e1e:	09 2e       	mov	r0, r25
    1e20:	00 0c       	add	r0, r0
    1e22:	aa 0b       	sbc	r26, r26
    1e24:	bb 0b       	sbc	r27, r27
    1e26:	dc 01       	movw	r26, r24
    1e28:	99 27       	eor	r25, r25
    1e2a:	88 27       	eor	r24, r24
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	84 2b       	or	r24, r20
    1e32:	95 2b       	or	r25, r21
    1e34:	a6 2b       	or	r26, r22
    1e36:	b7 2b       	or	r27, r23
    1e38:	13 c0       	rjmp	.+38     	; 0x1e60 <async+0x104>
    1e3a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e3e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	09 2e       	mov	r0, r25
    1e46:	00 0c       	add	r0, r0
    1e48:	aa 0b       	sbc	r26, r26
    1e4a:	bb 0b       	sbc	r27, r27
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	99 27       	eor	r25, r25
    1e50:	88 27       	eor	r24, r24
    1e52:	a9 01       	movw	r20, r18
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	84 2b       	or	r24, r20
    1e5a:	95 2b       	or	r25, r21
    1e5c:	a6 2b       	or	r26, r22
    1e5e:	b7 2b       	or	r27, r23
    1e60:	48 1a       	sub	r4, r24
    1e62:	59 0a       	sbc	r5, r25
    1e64:	6a 0a       	sbc	r6, r26
    1e66:	7b 0a       	sbc	r7, r27
    1e68:	14 14       	cp	r1, r4
    1e6a:	15 04       	cpc	r1, r5
    1e6c:	16 04       	cpc	r1, r6
    1e6e:	17 04       	cpc	r1, r7
    1e70:	ac f5       	brge	.+106    	; 0x1edc <async+0x180>
    1e72:	6f e4       	ldi	r22, 0x4F	; 79
    1e74:	71 e0       	ldi	r23, 0x01	; 1
    1e76:	ce 01       	movw	r24, r28
    1e78:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <enqueueByBaseline>
    1e7c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <timerQ>
    1e80:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <timerQ+0x1>
    1e84:	30 97       	sbiw	r30, 0x00	; 0
    1e86:	21 f1       	breq	.+72     	; 0x1ed0 <async+0x174>
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e8e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e90:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <overflows>
    1e94:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <overflows+0x1>
    1e98:	2a 17       	cp	r18, r26
    1e9a:	3b 07       	cpc	r19, r27
    1e9c:	c9 f4       	brne	.+50     	; 0x1ed0 <async+0x174>
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ea8:	84 1b       	sub	r24, r20
    1eaa:	95 0b       	sbc	r25, r21
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	31 f4       	brne	.+12     	; 0x1ebc <async+0x160>
    1eb0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eb4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eb8:	2f 5f       	subi	r18, 0xFF	; 255
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ec0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ec4:	ef e6       	ldi	r30, 0x6F	; 111
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	80 83       	st	Z, r24
    1ece:	41 c0       	rjmp	.+130    	; 0x1f52 <async+0x1f6>
    1ed0:	ef e6       	ldi	r30, 0x6F	; 111
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8d 7f       	andi	r24, 0xFD	; 253
    1ed8:	80 83       	st	Z, r24
    1eda:	3b c0       	rjmp	.+118    	; 0x1f52 <async+0x1f6>
    1edc:	61 e5       	ldi	r22, 0x51	; 81
    1ede:	71 e0       	ldi	r23, 0x01	; 1
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <enqueueByDeadline>
    1ee6:	33 20       	and	r3, r3
    1ee8:	b9 f1       	breq	.+110    	; 0x1f58 <async+0x1fc>
    1eea:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
    1eee:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	81 f1       	breq	.+96     	; 0x1f56 <async+0x1fa>
    1ef6:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <activeStack>
    1efa:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <activeStack+0x1>
    1efe:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <msgQ>
    1f02:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <msgQ+0x1>
    1f06:	02 81       	ldd	r16, Z+2	; 0x02
    1f08:	13 81       	ldd	r17, Z+3	; 0x03
    1f0a:	d9 01       	movw	r26, r18
    1f0c:	16 96       	adiw	r26, 0x06	; 6
    1f0e:	4d 91       	ld	r20, X+
    1f10:	5d 91       	ld	r21, X+
    1f12:	6d 91       	ld	r22, X+
    1f14:	7c 91       	ld	r23, X
    1f16:	19 97       	sbiw	r26, 0x09	; 9
    1f18:	d8 01       	movw	r26, r16
    1f1a:	16 96       	adiw	r26, 0x06	; 6
    1f1c:	0d 91       	ld	r16, X+
    1f1e:	1d 91       	ld	r17, X+
    1f20:	2d 91       	ld	r18, X+
    1f22:	3c 91       	ld	r19, X
    1f24:	19 97       	sbiw	r26, 0x09	; 9
    1f26:	40 1b       	sub	r20, r16
    1f28:	51 0b       	sbc	r21, r17
    1f2a:	62 0b       	sbc	r22, r18
    1f2c:	73 0b       	sbc	r23, r19
    1f2e:	9a f4       	brpl	.+38     	; 0x1f56 <async+0x1fa>
    1f30:	dc 01       	movw	r26, r24
    1f32:	2d 91       	ld	r18, X+
    1f34:	3c 91       	ld	r19, X
    1f36:	11 97       	sbiw	r26, 0x01	; 1
    1f38:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <threadPool+0x1>
    1f3c:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <threadPool>
    1f40:	ed 93       	st	X+, r30
    1f42:	fc 93       	st	X, r31
    1f44:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <activeStack+0x1>
    1f48:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <activeStack>
    1f4c:	0e 94 17 05 	call	0xa2e	; 0xa2e <dispatch>
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <async+0x1fa>
    1f52:	33 20       	and	r3, r3
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <async+0x1fc>
    1f56:	78 94       	sei
    1f58:	ce 01       	movw	r24, r28
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	9f 90       	pop	r9
    1f70:	8f 90       	pop	r8
    1f72:	7f 90       	pop	r7
    1f74:	6f 90       	pop	r6
    1f76:	5f 90       	pop	r5
    1f78:	4f 90       	pop	r4
    1f7a:	3f 90       	pop	r3
    1f7c:	08 95       	ret

00001f7e <sync>:
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	ec 01       	movw	r28, r24
    1f90:	7b 01       	movw	r14, r22
    1f92:	6a 01       	movw	r12, r20
    1f94:	1f b7       	in	r17, 0x3f	; 63
    1f96:	10 78       	andi	r17, 0x80	; 128
    1f98:	f8 94       	cli
    1f9a:	a8 81       	ld	r26, Y
    1f9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f9e:	10 97       	sbiw	r26, 0x00	; 0
    1fa0:	61 f1       	breq	.+88     	; 0x1ffa <sync+0x7c>
    1fa2:	14 96       	adiw	r26, 0x04	; 4
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	15 97       	sbiw	r26, 0x05	; 5
    1faa:	30 97       	sbiw	r30, 0x00	; 0
    1fac:	41 f0       	breq	.+16     	; 0x1fbe <sync+0x40>
    1fae:	a0 81       	ld	r26, Z
    1fb0:	b1 81       	ldd	r27, Z+1	; 0x01
    1fb2:	14 96       	adiw	r26, 0x04	; 4
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	15 97       	sbiw	r26, 0x05	; 5
    1fba:	30 97       	sbiw	r30, 0x00	; 0
    1fbc:	c1 f7       	brne	.-16     	; 0x1fae <sync+0x30>
    1fbe:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <current>
    1fc2:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <current+0x1>
    1fc6:	2a 17       	cp	r18, r26
    1fc8:	3b 07       	cpc	r19, r27
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <sync+0x56>
    1fcc:	11 23       	and	r17, r17
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <sync+0x54>
    1fd0:	3d c0       	rjmp	.+122    	; 0x204c <sync+0xce>
    1fd2:	07 c0       	rjmp	.+14     	; 0x1fe2 <sync+0x64>
    1fd4:	11 23       	and	r17, r17
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <sync+0x5c>
    1fd8:	3c c0       	rjmp	.+120    	; 0x2052 <sync+0xd4>
    1fda:	78 94       	sei
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	9f ef       	ldi	r25, 0xFF	; 255
    1fe0:	52 c0       	rjmp	.+164    	; 0x2086 <sync+0x108>
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	d1 f1       	breq	.+116    	; 0x205e <sync+0xe0>
    1fea:	fc 01       	movw	r30, r24
    1fec:	15 82       	std	Z+5, r1	; 0x05
    1fee:	14 82       	std	Z+4, r1	; 0x04
    1ff0:	36 c0       	rjmp	.+108    	; 0x205e <sync+0xe0>
    1ff2:	78 94       	sei
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	46 c0       	rjmp	.+140    	; 0x2086 <sync+0x108>
    1ffa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <current>
    1ffe:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <current+0x1>
    2002:	99 83       	std	Y+1, r25	; 0x01
    2004:	88 83       	st	Y, r24
    2006:	11 23       	and	r17, r17
    2008:	29 f0       	breq	.+10     	; 0x2014 <sync+0x96>
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	09 f0       	breq	.+2      	; 0x2014 <sync+0x96>
    2012:	78 94       	sei
    2014:	b6 01       	movw	r22, r12
    2016:	ce 01       	movw	r24, r28
    2018:	f7 01       	movw	r30, r14
    201a:	09 95       	icall
    201c:	f8 2e       	mov	r15, r24
    201e:	09 2f       	mov	r16, r25
    2020:	8f b7       	in	r24, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	19 82       	std	Y+1, r1	; 0x01
    2026:	18 82       	st	Y, r1
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	82 30       	cpi	r24, 0x02	; 2
    202e:	91 05       	cpc	r25, r1
    2030:	38 f0       	brcs	.+14     	; 0x2040 <sync+0xc2>
    2032:	1b 82       	std	Y+3, r1	; 0x03
    2034:	1a 82       	std	Y+2, r1	; 0x02
    2036:	fc 01       	movw	r30, r24
    2038:	15 82       	std	Z+5, r1	; 0x05
    203a:	14 82       	std	Z+4, r1	; 0x04
    203c:	0e 94 17 05 	call	0xa2e	; 0xa2e <dispatch>
    2040:	11 23       	and	r17, r17
    2042:	51 f0       	breq	.+20     	; 0x2058 <sync+0xda>
    2044:	78 94       	sei
    2046:	8f 2d       	mov	r24, r15
    2048:	90 2f       	mov	r25, r16
    204a:	1d c0       	rjmp	.+58     	; 0x2086 <sync+0x108>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	1a c0       	rjmp	.+52     	; 0x2086 <sync+0x108>
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	9f ef       	ldi	r25, 0xFF	; 255
    2056:	17 c0       	rjmp	.+46     	; 0x2086 <sync+0x108>
    2058:	8f 2d       	mov	r24, r15
    205a:	90 2f       	mov	r25, r16
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <sync+0x108>
    205e:	3b 83       	std	Y+3, r19	; 0x03
    2060:	2a 83       	std	Y+2, r18	; 0x02
    2062:	f9 01       	movw	r30, r18
    2064:	d5 83       	std	Z+5, r29	; 0x05
    2066:	c4 83       	std	Z+4, r28	; 0x04
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 17 05 	call	0xa2e	; 0xa2e <dispatch>
    206e:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <current>
    2072:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <current+0x1>
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	89 2b       	or	r24, r25
    207c:	09 f4       	brne	.+2      	; 0x2080 <sync+0x102>
    207e:	b9 cf       	rjmp	.-142    	; 0x1ff2 <sync+0x74>
    2080:	f9 83       	std	Y+1, r31	; 0x01
    2082:	e8 83       	st	Y, r30
    2084:	c2 cf       	rjmp	.-124    	; 0x200a <sync+0x8c>
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	08 95       	ret

00002098 <run>:
    2098:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <current>
    209c:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <current+0x1>
    20a0:	81 e5       	ldi	r24, 0x51	; 81
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <dequeue>
    20a8:	ec 01       	movw	r28, r24
    20aa:	d8 01       	movw	r26, r16
    20ac:	13 96       	adiw	r26, 0x03	; 3
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
    20b2:	12 97       	sbiw	r26, 0x02	; 2
    20b4:	78 94       	sei
    20b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    20b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    20ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    20bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    20be:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <sync>
    20c6:	8f b7       	in	r24, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <msgPool>
    20ce:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <msgPool+0x1>
    20d2:	99 83       	std	Y+1, r25	; 0x01
    20d4:	88 83       	st	Y, r24
    20d6:	d0 93 2e 01 	sts	0x012E, r29	; 0x80012e <msgPool+0x1>
    20da:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <msgPool>
    20de:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <activeStack>
    20e2:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <activeStack+0x1>
    20e6:	00 81       	ld	r16, Z
    20e8:	11 81       	ldd	r17, Z+1	; 0x01
    20ea:	e8 01       	movw	r28, r16
    20ec:	2a 81       	ldd	r18, Y+2	; 0x02
    20ee:	3b 81       	ldd	r19, Y+3	; 0x03
    20f0:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <msgQ>
    20f4:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <msgQ+0x1>
    20f8:	10 97       	sbiw	r26, 0x00	; 0
    20fa:	c1 f0       	breq	.+48     	; 0x212c <run+0x94>
    20fc:	21 15       	cp	r18, r1
    20fe:	31 05       	cpc	r19, r1
    2100:	59 f2       	breq	.-106    	; 0x2098 <run>
    2102:	16 96       	adiw	r26, 0x06	; 6
    2104:	8d 91       	ld	r24, X+
    2106:	9d 91       	ld	r25, X+
    2108:	0d 90       	ld	r0, X+
    210a:	bc 91       	ld	r27, X
    210c:	a0 2d       	mov	r26, r0
    210e:	e9 01       	movw	r28, r18
    2110:	4e 81       	ldd	r20, Y+6	; 0x06
    2112:	5f 81       	ldd	r21, Y+7	; 0x07
    2114:	68 85       	ldd	r22, Y+8	; 0x08
    2116:	79 85       	ldd	r23, Y+9	; 0x09
    2118:	84 1b       	sub	r24, r20
    211a:	95 0b       	sbc	r25, r21
    211c:	a6 0b       	sbc	r26, r22
    211e:	b7 0b       	sbc	r27, r23
    2120:	18 16       	cp	r1, r24
    2122:	19 06       	cpc	r1, r25
    2124:	1a 06       	cpc	r1, r26
    2126:	1b 06       	cpc	r1, r27
    2128:	0c f0       	brlt	.+2      	; 0x212c <run+0x94>
    212a:	b6 cf       	rjmp	.-148    	; 0x2098 <run>
    212c:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <activeStack+0x1>
    2130:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <activeStack>
    2134:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <threadPool>
    2138:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <threadPool+0x1>
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	f0 93 2c 01 	sts	0x012C, r31	; 0x80012c <threadPool+0x1>
    2144:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <threadPool>
    2148:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <activeStack>
    214c:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <activeStack+0x1>
    2150:	14 96       	adiw	r26, 0x04	; 4
    2152:	ed 91       	ld	r30, X+
    2154:	fc 91       	ld	r31, X
    2156:	15 97       	sbiw	r26, 0x05	; 5
    2158:	30 97       	sbiw	r30, 0x00	; 0
    215a:	41 f0       	breq	.+16     	; 0x216c <run+0xd4>
    215c:	a0 81       	ld	r26, Z
    215e:	b1 81       	ldd	r27, Z+1	; 0x01
    2160:	14 96       	adiw	r26, 0x04	; 4
    2162:	ed 91       	ld	r30, X+
    2164:	fc 91       	ld	r31, X
    2166:	15 97       	sbiw	r26, 0x05	; 5
    2168:	30 97       	sbiw	r30, 0x00	; 0
    216a:	c1 f7       	brne	.-16     	; 0x215c <run+0xc4>
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 17 05 	call	0xa2e	; 0xa2e <dispatch>
    2172:	92 cf       	rjmp	.-220    	; 0x2098 <run>

00002174 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2174:	42 31       	cpi	r20, 0x12	; 18
    2176:	b8 f4       	brcc	.+46     	; 0x21a6 <install+0x32>
        char status;
        DISABLE(status);
    2178:	2f b7       	in	r18, 0x3f	; 63
    217a:	f8 94       	cli
        otable[i] = obj;
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	44 0f       	add	r20, r20
    2180:	55 1f       	adc	r21, r21
    2182:	fa 01       	movw	r30, r20
    2184:	ed 5a       	subi	r30, 0xAD	; 173
    2186:	fe 4f       	sbci	r31, 0xFE	; 254
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
        mtable[i] = m;
    218c:	fa 01       	movw	r30, r20
    218e:	e5 51       	subi	r30, 0x15	; 21
    2190:	fe 4f       	sbci	r31, 0xFE	; 254
    2192:	71 83       	std	Z+1, r23	; 0x01
    2194:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	fc 01       	movw	r30, r24
    219c:	53 83       	std	Z+3, r21	; 0x03
    219e:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21a0:	22 23       	and	r18, r18
    21a2:	0c f4       	brge	.+2      	; 0x21a6 <install+0x32>
    21a4:	78 94       	sei
    21a6:	08 95       	ret

000021a8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21a8:	8c 01       	movw	r16, r24
    21aa:	7b 01       	movw	r14, r22
    21ac:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21ae:	8f b7       	in	r24, 0x3f	; 63
    21b0:	f8 94       	cli
    initialize();
    21b2:	0e 94 ac 04 	call	0x958	; 0x958 <initialize>
    ENABLE(1);
    21b6:	78 94       	sei
    if (m != NULL)
    21b8:	e1 14       	cp	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	41 f0       	breq	.+16     	; 0x21ce <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	a9 01       	movw	r20, r18
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	cb 01       	movw	r24, r22
    21ca:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <async>
    DISABLE(status);
    21ce:	8f b7       	in	r24, 0x3f	; 63
    21d0:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    21d2:	0e 94 37 05 	call	0xa6e	; 0xa6e <schedule>
    ENABLE(1);
    21d6:	78 94       	sei
    while (1) {
        SLEEP();
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	83 bf       	out	0x33, r24	; 51
    21dc:	88 95       	sleep
    21de:	fd cf       	rjmp	.-6      	; 0x21da <tinytimber+0x32>

000021e0 <writeBit>:
// writeBit() sätter eller rensar angiven bit i PORTE.
// 'arg' är ett packat heltal, där högbyte=bitnummer, lågbyte=0/1.
int writeBit(Writebit *self, int arg) {
	uint8_t bit = (arg >> 8) & 0xFF;
	uint8_t value = arg & 0xFF;
	if (value)
    21e0:	66 23       	and	r22, r22
    21e2:	59 f0       	breq	.+22     	; 0x21fa <writeBit+0x1a>
	PORTE |= (1 << bit);
    21e4:	2e b1       	in	r18, 0x0e	; 14
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <writeBit+0x10>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	7a 95       	dec	r23
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <writeBit+0xc>
    21f4:	82 2b       	or	r24, r18
    21f6:	8e b9       	out	0x0e, r24	; 14
    21f8:	0b c0       	rjmp	.+22     	; 0x2210 <writeBit+0x30>
	else
	PORTE &= ~(1 << bit);
    21fa:	2e b1       	in	r18, 0x0e	; 14
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <writeBit+0x26>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	7a 95       	dec	r23
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <writeBit+0x22>
    220a:	80 95       	com	r24
    220c:	82 23       	and	r24, r18
    220e:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	08 95       	ret

00002216 <__udivmodhi4>:
    2216:	aa 1b       	sub	r26, r26
    2218:	bb 1b       	sub	r27, r27
    221a:	51 e1       	ldi	r21, 0x11	; 17
    221c:	07 c0       	rjmp	.+14     	; 0x222c <__udivmodhi4_ep>

0000221e <__udivmodhi4_loop>:
    221e:	aa 1f       	adc	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	a6 17       	cp	r26, r22
    2224:	b7 07       	cpc	r27, r23
    2226:	10 f0       	brcs	.+4      	; 0x222c <__udivmodhi4_ep>
    2228:	a6 1b       	sub	r26, r22
    222a:	b7 0b       	sbc	r27, r23

0000222c <__udivmodhi4_ep>:
    222c:	88 1f       	adc	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	5a 95       	dec	r21
    2232:	a9 f7       	brne	.-22     	; 0x221e <__udivmodhi4_loop>
    2234:	80 95       	com	r24
    2236:	90 95       	com	r25
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	08 95       	ret

0000223e <__divmodsi4>:
    223e:	05 2e       	mov	r0, r21
    2240:	97 fb       	bst	r25, 7
    2242:	1e f4       	brtc	.+6      	; 0x224a <__divmodsi4+0xc>
    2244:	00 94       	com	r0
    2246:	0e 94 36 11 	call	0x226c	; 0x226c <__negsi2>
    224a:	57 fd       	sbrc	r21, 7
    224c:	07 d0       	rcall	.+14     	; 0x225c <__divmodsi4_neg2>
    224e:	0e 94 45 11 	call	0x228a	; 0x228a <__udivmodsi4>
    2252:	07 fc       	sbrc	r0, 7
    2254:	03 d0       	rcall	.+6      	; 0x225c <__divmodsi4_neg2>
    2256:	4e f4       	brtc	.+18     	; 0x226a <__divmodsi4_exit>
    2258:	0c 94 36 11 	jmp	0x226c	; 0x226c <__negsi2>

0000225c <__divmodsi4_neg2>:
    225c:	50 95       	com	r21
    225e:	40 95       	com	r20
    2260:	30 95       	com	r19
    2262:	21 95       	neg	r18
    2264:	3f 4f       	sbci	r19, 0xFF	; 255
    2266:	4f 4f       	sbci	r20, 0xFF	; 255
    2268:	5f 4f       	sbci	r21, 0xFF	; 255

0000226a <__divmodsi4_exit>:
    226a:	08 95       	ret

0000226c <__negsi2>:
    226c:	90 95       	com	r25
    226e:	80 95       	com	r24
    2270:	70 95       	com	r23
    2272:	61 95       	neg	r22
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	08 95       	ret

0000227c <__usmulhisi3>:
    227c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__umulhisi3>

00002280 <__usmulhisi3_tail>:
    2280:	b7 ff       	sbrs	r27, 7
    2282:	08 95       	ret
    2284:	82 1b       	sub	r24, r18
    2286:	93 0b       	sbc	r25, r19
    2288:	08 95       	ret

0000228a <__udivmodsi4>:
    228a:	a1 e2       	ldi	r26, 0x21	; 33
    228c:	1a 2e       	mov	r1, r26
    228e:	aa 1b       	sub	r26, r26
    2290:	bb 1b       	sub	r27, r27
    2292:	fd 01       	movw	r30, r26
    2294:	0d c0       	rjmp	.+26     	; 0x22b0 <__udivmodsi4_ep>

00002296 <__udivmodsi4_loop>:
    2296:	aa 1f       	adc	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	ee 1f       	adc	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	a2 17       	cp	r26, r18
    22a0:	b3 07       	cpc	r27, r19
    22a2:	e4 07       	cpc	r30, r20
    22a4:	f5 07       	cpc	r31, r21
    22a6:	20 f0       	brcs	.+8      	; 0x22b0 <__udivmodsi4_ep>
    22a8:	a2 1b       	sub	r26, r18
    22aa:	b3 0b       	sbc	r27, r19
    22ac:	e4 0b       	sbc	r30, r20
    22ae:	f5 0b       	sbc	r31, r21

000022b0 <__udivmodsi4_ep>:
    22b0:	66 1f       	adc	r22, r22
    22b2:	77 1f       	adc	r23, r23
    22b4:	88 1f       	adc	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	1a 94       	dec	r1
    22ba:	69 f7       	brne	.-38     	; 0x2296 <__udivmodsi4_loop>
    22bc:	60 95       	com	r22
    22be:	70 95       	com	r23
    22c0:	80 95       	com	r24
    22c2:	90 95       	com	r25
    22c4:	9b 01       	movw	r18, r22
    22c6:	ac 01       	movw	r20, r24
    22c8:	bd 01       	movw	r22, r26
    22ca:	cf 01       	movw	r24, r30
    22cc:	08 95       	ret

000022ce <__umulhisi3>:
    22ce:	a2 9f       	mul	r26, r18
    22d0:	b0 01       	movw	r22, r0
    22d2:	b3 9f       	mul	r27, r19
    22d4:	c0 01       	movw	r24, r0
    22d6:	a3 9f       	mul	r26, r19
    22d8:	70 0d       	add	r23, r0
    22da:	81 1d       	adc	r24, r1
    22dc:	11 24       	eor	r1, r1
    22de:	91 1d       	adc	r25, r1
    22e0:	b2 9f       	mul	r27, r18
    22e2:	70 0d       	add	r23, r0
    22e4:	81 1d       	adc	r24, r1
    22e6:	11 24       	eor	r1, r1
    22e8:	91 1d       	adc	r25, r1
    22ea:	08 95       	ret

000022ec <setjmp>:
    22ec:	dc 01       	movw	r26, r24
    22ee:	2d 92       	st	X+, r2
    22f0:	3d 92       	st	X+, r3
    22f2:	4d 92       	st	X+, r4
    22f4:	5d 92       	st	X+, r5
    22f6:	6d 92       	st	X+, r6
    22f8:	7d 92       	st	X+, r7
    22fa:	8d 92       	st	X+, r8
    22fc:	9d 92       	st	X+, r9
    22fe:	ad 92       	st	X+, r10
    2300:	bd 92       	st	X+, r11
    2302:	cd 92       	st	X+, r12
    2304:	dd 92       	st	X+, r13
    2306:	ed 92       	st	X+, r14
    2308:	fd 92       	st	X+, r15
    230a:	0d 93       	st	X+, r16
    230c:	1d 93       	st	X+, r17
    230e:	cd 93       	st	X+, r28
    2310:	dd 93       	st	X+, r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	8d b7       	in	r24, 0x3d	; 61
    2318:	8d 93       	st	X+, r24
    231a:	8e b7       	in	r24, 0x3e	; 62
    231c:	8d 93       	st	X+, r24
    231e:	8f b7       	in	r24, 0x3f	; 63
    2320:	8d 93       	st	X+, r24
    2322:	ed 93       	st	X+, r30
    2324:	fd 93       	st	X+, r31
    2326:	88 27       	eor	r24, r24
    2328:	99 27       	eor	r25, r25
    232a:	09 94       	ijmp

0000232c <longjmp>:
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	81 1d       	adc	r24, r1
    2336:	2d 90       	ld	r2, X+
    2338:	3d 90       	ld	r3, X+
    233a:	4d 90       	ld	r4, X+
    233c:	5d 90       	ld	r5, X+
    233e:	6d 90       	ld	r6, X+
    2340:	7d 90       	ld	r7, X+
    2342:	8d 90       	ld	r8, X+
    2344:	9d 90       	ld	r9, X+
    2346:	ad 90       	ld	r10, X+
    2348:	bd 90       	ld	r11, X+
    234a:	cd 90       	ld	r12, X+
    234c:	dd 90       	ld	r13, X+
    234e:	ed 90       	ld	r14, X+
    2350:	fd 90       	ld	r15, X+
    2352:	0d 91       	ld	r16, X+
    2354:	1d 91       	ld	r17, X+
    2356:	cd 91       	ld	r28, X+
    2358:	dd 91       	ld	r29, X+
    235a:	ed 91       	ld	r30, X+
    235c:	fd 91       	ld	r31, X+
    235e:	0d 90       	ld	r0, X+
    2360:	f8 94       	cli
    2362:	fe bf       	out	0x3e, r31	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	ed bf       	out	0x3d, r30	; 61
    2368:	ed 91       	ld	r30, X+
    236a:	fd 91       	ld	r31, X+
    236c:	09 94       	ijmp

0000236e <_exit>:
    236e:	f8 94       	cli

00002370 <__stop_program>:
    2370:	ff cf       	rjmp	.-2      	; 0x2370 <__stop_program>
