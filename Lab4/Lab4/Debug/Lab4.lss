
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000258a  0000261e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000258a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800154  00800154  00002672  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002672  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039e0  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012af  00000000  00000000  000063ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000199d  00000000  00000000  0000765b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e54  00000000  00000000  00008ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5a  00000000  00000000  00009e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032e6  00000000  00000000  0000a8a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000db8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_1>
       8:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_2>
       c:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_3>
      10:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_4>
      14:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_9>
      28:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_10>
      2c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_11>
      30:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_12>
      34:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__vector_13>
      38:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_14>
      3c:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_15>
      40:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_16>
      44:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_17>
      48:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_18>
      4c:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_19>
      50:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_20>
      54:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_21>
      58:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea e8       	ldi	r30, 0x8A	; 138
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 35       	cpi	r26, 0x54	; 84
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e5       	ldi	r26, 0x54	; 84
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 3a       	cpi	r26, 0xA7	; 167
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 9d 04 	call	0x93a	; 0x93a <main>
      92:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
}


// HoldcheckerUp() kontrollerar om knappen hålls nere och fortsätter att öka frekvensen.
int holdCheckerUp(Button *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
	if (!self->holdUpRunning) { // Om funktionen inte körs, avsluta
      aa:	fc 01       	movw	r30, r24
      ac:	20 85       	ldd	r18, Z+8	; 0x08
      ae:	22 23       	and	r18, r18
      b0:	41 f1       	breq	.+80     	; 0x102 <holdCheckerUp+0x68>
		return 0;
	}
	if (self->holdUpRunning && PRESSEDUP) { // Om knappen fortfarande hålls nere
      b2:	1e 99       	sbic	0x03, 6	; 3
      b4:	24 c0       	rjmp	.+72     	; 0xfe <holdCheckerUp+0x64>
      b6:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen
      b8:	04 81       	ldd	r16, Z+4	; 0x04
      ba:	15 81       	ldd	r17, Z+5	; 0x05
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	f3 e3       	ldi	r31, 0x33	; 51
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
		AFTER(MSEC(100), self, holdCheckerUp, 0); // En ny körning efter 1000ms
      dc:	0f 2e       	mov	r0, r31
      de:	fd e4       	ldi	r31, 0x4D	; 77
      e0:	ef 2e       	mov	r14, r31
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	8e 01       	movw	r16, r28
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	a9 01       	movw	r20, r18
      f0:	65 e3       	ldi	r22, 0x35	; 53
      f2:	7c e0       	ldi	r23, 0x0C	; 12
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <holdCheckerUp+0x68>
	}
	else { // Om knappen har släppts, avsluta håll-funktionen
		self->holdUpRunning = false;
      fe:	fc 01       	movw	r30, r24
     100:	10 86       	std	Z+8, r1	; 0x08
	}
	return 0;
}
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	1f 91       	pop	r17
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	df 90       	pop	r13
     114:	cf 90       	pop	r12
     116:	08 95       	ret

00000118 <holdCheckerDown>:

// HoldcheckerDown() kontrollerar om knappen hålls nere och fortsätter att minska frekvensen.
int holdCheckerDown(Button *self, int arg) {
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
	if (!self->holdDownRunning) { // Om funktionen inte körs, avsluta
     128:	fc 01       	movw	r30, r24
     12a:	21 85       	ldd	r18, Z+9	; 0x09
     12c:	22 23       	and	r18, r18
     12e:	41 f1       	breq	.+80     	; 0x180 <holdCheckerDown+0x68>
		return 0;
	}
	if (self->holdDownRunning && PRESSEDDN) { // Om knappen fortfarande hålls nere
     130:	1f 99       	sbic	0x03, 7	; 3
     132:	24 c0       	rjmp	.+72     	; 0x17c <holdCheckerDown+0x64>
     134:	ec 01       	movw	r28, r24
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen
     136:	04 81       	ldd	r16, Z+4	; 0x04
     138:	15 81       	ldd	r17, Z+5	; 0x05
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	0f 2e       	mov	r0, r31
     140:	f0 e8       	ldi	r31, 0x80	; 128
     142:	ef 2e       	mov	r14, r31
     144:	f3 e0       	ldi	r31, 0x03	; 3
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	a9 01       	movw	r20, r18
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	cb 01       	movw	r24, r22
     156:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
		AFTER(MSEC(100), self, holdCheckerDown, 0); // En ny körning efter 1000ms
     15a:	0f 2e       	mov	r0, r31
     15c:	fc e8       	ldi	r31, 0x8C	; 140
     15e:	ef 2e       	mov	r14, r31
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ff 2e       	mov	r15, r31
     164:	f0 2d       	mov	r31, r0
     166:	8e 01       	movw	r16, r28
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	a9 01       	movw	r20, r18
     16e:	65 e3       	ldi	r22, 0x35	; 53
     170:	7c e0       	ldi	r23, 0x0C	; 12
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     17a:	02 c0       	rjmp	.+4      	; 0x180 <holdCheckerDown+0x68>
	}
	else { // Om knappen har släppts, sätt Running till false.
		self->holdDownRunning = false;
     17c:	fc 01       	movw	r30, r24
     17e:	11 86       	std	Z+9, r1	; 0x09
	}
	return 0;
}
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	08 95       	ret

00000196 <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     196:	85 b1       	in	r24, 0x05	; 5
     198:	80 6d       	ori	r24, 0xD0	; 208
     19a:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     19c:	8e b1       	in	r24, 0x0e	; 14
     19e:	8c 60       	ori	r24, 0x0C	; 12
     1a0:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     1a2:	8d b3       	in	r24, 0x1d	; 29
     1a4:	80 6c       	ori	r24, 0xC0	; 192
     1a6:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a8:	eb e6       	ldi	r30, 0x6B	; 107
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8c 60       	ori	r24, 0x0C	; 12
     1b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1b2:	ec e6       	ldi	r30, 0x6C	; 108
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 6d       	ori	r24, 0xD0	; 208
     1ba:	80 83       	st	Z, r24
     1bc:	08 95       	ret

000001be <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
	if (PRESSEDLT) {
     1ca:	62 99       	sbic	0x0c, 2	; 12
     1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <leftdir+0x36>
     1ce:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     1d0:	04 81       	ldd	r16, Z+4	; 0x04
     1d2:	15 81       	ldd	r17, Z+5	; 0x05
     1d4:	c1 2c       	mov	r12, r1
     1d6:	d1 2c       	mov	r13, r1
     1d8:	0f 2e       	mov	r0, r31
     1da:	fd e0       	ldi	r31, 0x0D	; 13
     1dc:	ef 2e       	mov	r14, r31
     1de:	f3 e0       	ldi	r31, 0x03	; 3
     1e0:	ff 2e       	mov	r15, r31
     1e2:	f0 2d       	mov	r31, r0
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	}
	return 0;
}
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	08 95       	ret

00000206 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
	if (PRESSEDRT) {
     212:	63 99       	sbic	0x0c, 3	; 12
     214:	14 c0       	rjmp	.+40     	; 0x23e <rightdir+0x38>
     216:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     218:	04 81       	ldd	r16, Z+4	; 0x04
     21a:	15 81       	ldd	r17, Z+5	; 0x05
     21c:	cc 24       	eor	r12, r12
     21e:	c3 94       	inc	r12
     220:	d1 2c       	mov	r13, r1
     222:	0f 2e       	mov	r0, r31
     224:	fd e0       	ldi	r31, 0x0D	; 13
     226:	ef 2e       	mov	r14, r31
     228:	f3 e0       	ldi	r31, 0x03	; 3
     22a:	ff 2e       	mov	r15, r31
     22c:	f0 2d       	mov	r31, r0
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	a9 01       	movw	r20, r18
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	cb 01       	movw	r24, r22
     23a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	}
	return 0;
}
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	08 95       	ret

00000250 <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     256:	62 99       	sbic	0x0c, 2	; 12
     258:	04 c0       	rjmp	.+8      	; 0x262 <buttonCheckerLR+0x12>
		leftdir(self, 0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 df 00 	call	0x1be	; 0x1be <leftdir>
	}
	if (PRESSEDRT) {
     262:	63 99       	sbic	0x0c, 3	; 12
     264:	05 c0       	rjmp	.+10     	; 0x270 <buttonCheckerLR+0x20>
		rightdir(self, 0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	ce 01       	movw	r24, r28
     26c:	0e 94 03 01 	call	0x206	; 0x206 <rightdir>
	}
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     28a:	1e 99       	sbic	0x03, 6	; 3
     28c:	2f c0       	rjmp	.+94     	; 0x2ec <updir+0x72>
     28e:	fc 01       	movw	r30, r24
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	21 11       	cpse	r18, r1
     294:	2b c0       	rjmp	.+86     	; 0x2ec <updir+0x72>
     296:	ec 01       	movw	r28, r24
		self->heldUp = true; // Markera att knappen hålls nere
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     29c:	04 81       	ldd	r16, Z+4	; 0x04
     29e:	15 81       	ldd	r17, Z+5	; 0x05
     2a0:	c1 2c       	mov	r12, r1
     2a2:	d1 2c       	mov	r13, r1
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f3 e3       	ldi	r31, 0x33	; 51
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f3 e0       	ldi	r31, 0x03	; 3
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	cb 01       	movw	r24, r22
     2bc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     2c0:	88 85       	ldd	r24, Y+8	; 0x08
     2c2:	81 11       	cpse	r24, r1
     2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <updir+0x7a>
			self->holdUpRunning = true;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	88 87       	std	Y+8, r24	; 0x08
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     2ca:	0f 2e       	mov	r0, r31
     2cc:	fd e4       	ldi	r31, 0x4D	; 77
     2ce:	ef 2e       	mov	r14, r31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ff 2e       	mov	r15, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	8e 01       	movw	r16, r28
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	a9 01       	movw	r20, r18
     2de:	69 e0       	ldi	r22, 0x09	; 9
     2e0:	7d e3       	ldi	r23, 0x3D	; 61
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <updir+0x7a>
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     2ec:	1e 9b       	sbis	0x03, 6	; 3
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <updir+0x7a>
		self->heldUp = false;
     2f0:	fc 01       	movw	r30, r24
     2f2:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     31a:	1f 99       	sbic	0x03, 7	; 3
     31c:	2f c0       	rjmp	.+94     	; 0x37c <downdir+0x72>
     31e:	fc 01       	movw	r30, r24
     320:	27 81       	ldd	r18, Z+7	; 0x07
     322:	21 11       	cpse	r18, r1
     324:	2b c0       	rjmp	.+86     	; 0x37c <downdir+0x72>
     326:	ec 01       	movw	r28, r24
		self->heldDown = true; // Markera att knappen hålls nere
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	87 83       	std	Z+7, r24	; 0x07
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     32c:	04 81       	ldd	r16, Z+4	; 0x04
     32e:	15 81       	ldd	r17, Z+5	; 0x05
     330:	c1 2c       	mov	r12, r1
     332:	d1 2c       	mov	r13, r1
     334:	0f 2e       	mov	r0, r31
     336:	f0 e8       	ldi	r31, 0x80	; 128
     338:	ef 2e       	mov	r14, r31
     33a:	f3 e0       	ldi	r31, 0x03	; 3
     33c:	ff 2e       	mov	r15, r31
     33e:	f0 2d       	mov	r31, r0
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	a9 01       	movw	r20, r18
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	cb 01       	movw	r24, r22
     34c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     350:	89 85       	ldd	r24, Y+9	; 0x09
     352:	81 11       	cpse	r24, r1
     354:	17 c0       	rjmp	.+46     	; 0x384 <downdir+0x7a>
			self->holdDownRunning = true;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	89 87       	std	Y+9, r24	; 0x09
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     35a:	0f 2e       	mov	r0, r31
     35c:	fc e8       	ldi	r31, 0x8C	; 140
     35e:	ef 2e       	mov	r14, r31
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	8e 01       	movw	r16, r28
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	a9 01       	movw	r20, r18
     36e:	69 e0       	ldi	r22, 0x09	; 9
     370:	7d e3       	ldi	r23, 0x3D	; 61
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <downdir+0x7a>
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     37c:	1f 9b       	sbis	0x03, 7	; 3
     37e:	02 c0       	rjmp	.+4      	; 0x384 <downdir+0x7a>
		self->heldDown = false;
     380:	fc 01       	movw	r30, r24
     382:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <centerdir>:
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
	if (PRESSEDCN && !self->heldCenter) {
     3a6:	1c 99       	sbic	0x03, 4	; 3
     3a8:	19 c0       	rjmp	.+50     	; 0x3dc <centerdir+0x42>
     3aa:	fc 01       	movw	r30, r24
     3ac:	22 85       	ldd	r18, Z+10	; 0x0a
     3ae:	21 11       	cpse	r18, r1
     3b0:	15 c0       	rjmp	.+42     	; 0x3dc <centerdir+0x42>
		self->heldCenter = true;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	82 87       	std	Z+10, r24	; 0x0a
		ASYNC(self->gui, guiFrecReset, 0);
     3b6:	04 81       	ldd	r16, Z+4	; 0x04
     3b8:	15 81       	ldd	r17, Z+5	; 0x05
     3ba:	c1 2c       	mov	r12, r1
     3bc:	d1 2c       	mov	r13, r1
     3be:	0f 2e       	mov	r0, r31
     3c0:	fd ec       	ldi	r31, 0xCD	; 205
     3c2:	ef 2e       	mov	r14, r31
     3c4:	f3 e0       	ldi	r31, 0x03	; 3
     3c6:	ff 2e       	mov	r15, r31
     3c8:	f0 2d       	mov	r31, r0
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	a9 01       	movw	r20, r18
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	cb 01       	movw	r24, r22
     3d6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <centerdir+0x4a>
	}
	else if (!PRESSEDCN) {
     3dc:	1c 9b       	sbis	0x03, 4	; 3
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <centerdir+0x4a>
		self->heldCenter = false;
     3e0:	fc 01       	movw	r30, r24
     3e2:	12 86       	std	Z+10, r1	; 0x0a
	}
	return 0;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	08 95       	ret

000003f6 <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     3fc:	1e 99       	sbic	0x03, 6	; 3
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		updir(self, 0);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 3d 01 	call	0x27a	; 0x27a <updir>
     408:	01 c0       	rjmp	.+2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     40a:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN) {
     40c:	1f 99       	sbic	0x03, 7	; 3
     40e:	06 c0       	rjmp	.+12     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
		downdir(self, 0); // Hantera ner-knappen
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	ce 01       	movw	r24, r28
     416:	0e 94 85 01 	call	0x30a	; 0x30a <downdir>
     41a:	01 c0       	rjmp	.+2      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     41c:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN) {
     41e:	1c 99       	sbic	0x03, 4	; 3
     420:	06 c0       	rjmp	.+12     	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
		centerdir(self, 0);
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	ce 01       	movw	r24, r28
     428:	0e 94 cd 01 	call	0x39a	; 0x39a <centerdir>
     42c:	01 c0       	rjmp	.+2      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
	}
	else {
		self->heldCenter = false;
     42e:	1a 86       	std	Y+10, r1	; 0x0a
	}
	return 0;
}
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     43a:	80 ec       	ldi	r24, 0xC0	; 192
     43c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     440:	87 eb       	ldi	r24, 0xB7	; 183
     442:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     446:	8f e0       	ldi	r24, 0x0F	; 15
     448:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     44c:	08 95       	ret

0000044e <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     44e:	66 30       	cpi	r22, 0x06	; 6
     450:	71 05       	cpc	r23, r1
     452:	08 f0       	brcs	.+2      	; 0x456 <writeChar+0x8>
     454:	6b c0       	rjmp	.+214    	; 0x52c <__stack+0x2d>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     456:	90 ed       	ldi	r25, 0xD0	; 208
     458:	98 0f       	add	r25, r24
     45a:	9a 30       	cpi	r25, 0x0A	; 10
     45c:	48 f4       	brcc	.+18     	; 0x470 <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     45e:	e8 2f       	mov	r30, r24
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	e0 52       	subi	r30, 0x20	; 32
     468:	ff 4f       	sbci	r31, 0xFF	; 255
     46a:	20 81       	ld	r18, Z
     46c:	31 81       	ldd	r19, Z+1	; 0x01
     46e:	02 c0       	rjmp	.+4      	; 0x474 <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     474:	fb 01       	movw	r30, r22
     476:	77 23       	and	r23, r23
     478:	0c f4       	brge	.+2      	; 0x47c <writeChar+0x2e>
     47a:	31 96       	adiw	r30, 0x01	; 1
     47c:	f5 95       	asr	r31
     47e:	e7 95       	ror	r30
     480:	e4 51       	subi	r30, 0x14	; 20
     482:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     484:	61 70       	andi	r22, 0x01	; 1
     486:	70 78       	andi	r23, 0x80	; 128
     488:	77 23       	and	r23, r23
     48a:	34 f4       	brge	.+12     	; 0x498 <writeChar+0x4a>
     48c:	61 50       	subi	r22, 0x01	; 1
     48e:	71 09       	sbc	r23, r1
     490:	6e 6f       	ori	r22, 0xFE	; 254
     492:	7f 6f       	ori	r23, 0xFF	; 255
     494:	6f 5f       	subi	r22, 0xFF	; 255
     496:	7f 4f       	sbci	r23, 0xFF	; 255
     498:	66 0f       	add	r22, r22
     49a:	77 1f       	adc	r23, r23
     49c:	66 0f       	add	r22, r22
     49e:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     4a0:	8f e0       	ldi	r24, 0x0F	; 15
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	06 2e       	mov	r0, r22
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <writeChar+0x5e>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <writeChar+0x5a>
     4b0:	80 95       	com	r24
     4b2:	40 81       	ld	r20, Z
     4b4:	98 2f       	mov	r25, r24
     4b6:	94 23       	and	r25, r20
     4b8:	a9 01       	movw	r20, r18
     4ba:	4f 70       	andi	r20, 0x0F	; 15
     4bc:	55 27       	eor	r21, r21
     4be:	06 2e       	mov	r0, r22
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <writeChar+0x78>
     4c2:	44 0f       	add	r20, r20
     4c4:	55 1f       	adc	r21, r21
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <writeChar+0x74>
     4ca:	49 2b       	or	r20, r25
     4cc:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     4ce:	a9 01       	movw	r20, r18
     4d0:	52 95       	swap	r21
     4d2:	42 95       	swap	r20
     4d4:	4f 70       	andi	r20, 0x0F	; 15
     4d6:	45 27       	eor	r20, r21
     4d8:	5f 70       	andi	r21, 0x0F	; 15
     4da:	45 27       	eor	r20, r21
     4dc:	4f 70       	andi	r20, 0x0F	; 15
     4de:	55 27       	eor	r21, r21
     4e0:	06 2e       	mov	r0, r22
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <writeChar+0x9a>
     4e4:	44 0f       	add	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	0a 94       	dec	r0
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <writeChar+0x96>
     4ec:	95 81       	ldd	r25, Z+5	; 0x05
     4ee:	98 23       	and	r25, r24
     4f0:	49 2b       	or	r20, r25
     4f2:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     4f4:	43 2f       	mov	r20, r19
     4f6:	55 27       	eor	r21, r21
     4f8:	4f 70       	andi	r20, 0x0F	; 15
     4fa:	55 27       	eor	r21, r21
     4fc:	06 2e       	mov	r0, r22
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__stack+0x5>
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	0a 94       	dec	r0
     506:	e2 f7       	brpl	.-8      	; 0x500 <__stack+0x1>
     508:	92 85       	ldd	r25, Z+10	; 0x0a
     50a:	98 23       	and	r25, r24
     50c:	49 2b       	or	r20, r25
     50e:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     510:	47 85       	ldd	r20, Z+15	; 0x0f
     512:	48 23       	and	r20, r24
     514:	c9 01       	movw	r24, r18
     516:	89 2f       	mov	r24, r25
     518:	99 27       	eor	r25, r25
     51a:	82 95       	swap	r24
     51c:	8f 70       	andi	r24, 0x0F	; 15
     51e:	02 c0       	rjmp	.+4      	; 0x524 <__stack+0x25>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	6a 95       	dec	r22
     526:	e2 f7       	brpl	.-8      	; 0x520 <__stack+0x21>
     528:	84 2b       	or	r24, r20
     52a:	87 87       	std	Z+15, r24	; 0x0f
     52c:	08 95       	ret

0000052e <printAt>:
}

void printAt(long num, int pos) {
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	4b 01       	movw	r8, r22
     544:	5c 01       	movw	r10, r24
     546:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     548:	24 e6       	ldi	r18, 0x64	; 100
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	0e 94 17 12 	call	0x242e	; 0x242e <__divmodsi4>
     554:	0f 2e       	mov	r0, r31
     556:	fa e0       	ldi	r31, 0x0A	; 10
     558:	cf 2e       	mov	r12, r31
     55a:	d1 2c       	mov	r13, r1
     55c:	e1 2c       	mov	r14, r1
     55e:	f1 2c       	mov	r15, r1
     560:	f0 2d       	mov	r31, r0
     562:	a7 01       	movw	r20, r14
     564:	96 01       	movw	r18, r12
     566:	0e 94 17 12 	call	0x242e	; 0x242e <__divmodsi4>
     56a:	be 01       	movw	r22, r28
     56c:	80 e3       	ldi	r24, 0x30	; 48
     56e:	82 0f       	add	r24, r18
     570:	0e 94 27 02 	call	0x44e	; 0x44e <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     574:	21 96       	adiw	r28, 0x01	; 1
     576:	c5 01       	movw	r24, r10
     578:	b4 01       	movw	r22, r8
     57a:	a7 01       	movw	r20, r14
     57c:	96 01       	movw	r18, r12
     57e:	0e 94 17 12 	call	0x242e	; 0x242e <__divmodsi4>
     582:	86 2f       	mov	r24, r22
     584:	be 01       	movw	r22, r28
     586:	80 5d       	subi	r24, 0xD0	; 208
     588:	0e 94 27 02 	call	0x44e	; 0x44e <writeChar>
	
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	bf 90       	pop	r11
     59a:	af 90       	pop	r10
     59c:	9f 90       	pop	r9
     59e:	8f 90       	pop	r8
     5a0:	08 95       	ret

000005a2 <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	61 e3       	ldi	r22, 0x31	; 49
     5ae:	75 e0       	ldi	r23, 0x05	; 5
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
     5b2:	9d 81       	ldd	r25, Y+5	; 0x05
     5b4:	0e 94 a0 10 	call	0x2140	; 0x2140 <sync>
     5b8:	bc 01       	movw	r22, r24
     5ba:	99 0f       	add	r25, r25
     5bc:	88 0b       	sbc	r24, r24
     5be:	99 0b       	sbc	r25, r25
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	0e 94 97 02 	call	0x52e	; 0x52e <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	61 e3       	ldi	r22, 0x31	; 49
     5ce:	75 e0       	ldi	r23, 0x05	; 5
     5d0:	8e 81       	ldd	r24, Y+6	; 0x06
     5d2:	9f 81       	ldd	r25, Y+7	; 0x07
     5d4:	0e 94 a0 10 	call	0x2140	; 0x2140 <sync>
     5d8:	bc 01       	movw	r22, r24
     5da:	99 0f       	add	r25, r25
     5dc:	88 0b       	sbc	r24, r24
     5de:	99 0b       	sbc	r25, r25
     5e0:	44 e0       	ldi	r20, 0x04	; 4
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	0e 94 97 02 	call	0x52e	; 0x52e <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     5e8:	88 85       	ldd	r24, Y+8	; 0x08
     5ea:	81 11       	cpse	r24, r1
     5ec:	09 c0       	rjmp	.+18     	; 0x600 <updateDisplay+0x5e>
		printAt(10, 2);
     5ee:	42 e0       	ldi	r20, 0x02	; 2
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	6a e0       	ldi	r22, 0x0A	; 10
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 97 02 	call	0x52e	; 0x52e <printAt>
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     600:	42 e0       	ldi	r20, 0x02	; 2
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 97 02 	call	0x52e	; 0x52e <printAt>
	}
	return 0;
}
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	67 2b       	or	r22, r23
     62a:	09 f4       	brne	.+2      	; 0x62e <switchGen+0x14>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     632:	c1 2c       	mov	r12, r1
     634:	d1 2c       	mov	r13, r1
     636:	0f 2e       	mov	r0, r31
     638:	f1 ed       	ldi	r31, 0xD1	; 209
     63a:	ef 2e       	mov	r14, r31
     63c:	f2 e0       	ldi	r31, 0x02	; 2
     63e:	ff 2e       	mov	r15, r31
     640:	f0 2d       	mov	r31, r0
     642:	8c 01       	movw	r16, r24
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	cb 01       	movw	r24, r22
     650:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	return 0;
}
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	08 95       	ret

00000666 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     678:	88 85       	ldd	r24, Y+8	; 0x08
     67a:	81 11       	cpse	r24, r1
     67c:	13 c0       	rjmp	.+38     	; 0x6a4 <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     67e:	0c 81       	ldd	r16, Y+4	; 0x04
     680:	1d 81       	ldd	r17, Y+5	; 0x05
     682:	c1 2c       	mov	r12, r1
     684:	d1 2c       	mov	r13, r1
     686:	0f 2e       	mov	r0, r31
     688:	f5 e3       	ldi	r31, 0x35	; 53
     68a:	ef 2e       	mov	r14, r31
     68c:	f5 e0       	ldi	r31, 0x05	; 5
     68e:	ff 2e       	mov	r15, r31
     690:	f0 2d       	mov	r31, r0
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	a9 01       	movw	r20, r18
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	cb 01       	movw	r24, r22
     69e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     6a2:	12 c0       	rjmp	.+36     	; 0x6c8 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     6a4:	0e 81       	ldd	r16, Y+6	; 0x06
     6a6:	1f 81       	ldd	r17, Y+7	; 0x07
     6a8:	c1 2c       	mov	r12, r1
     6aa:	d1 2c       	mov	r13, r1
     6ac:	0f 2e       	mov	r0, r31
     6ae:	f5 e3       	ldi	r31, 0x35	; 53
     6b0:	ef 2e       	mov	r14, r31
     6b2:	f5 e0       	ldi	r31, 0x05	; 5
     6b4:	ff 2e       	mov	r15, r31
     6b6:	f0 2d       	mov	r31, r0
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	a9 01       	movw	r20, r18
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	cb 01       	movw	r24, r22
     6c4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	}
	ASYNC(self, updateDisplay, 0);
     6c8:	c1 2c       	mov	r12, r1
     6ca:	d1 2c       	mov	r13, r1
     6cc:	0f 2e       	mov	r0, r31
     6ce:	f1 ed       	ldi	r31, 0xD1	; 209
     6d0:	ef 2e       	mov	r14, r31
     6d2:	f2 e0       	ldi	r31, 0x02	; 2
     6d4:	ff 2e       	mov	r15, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	8e 01       	movw	r16, r28
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	a9 01       	movw	r20, r18
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	cb 01       	movw	r24, r22
     6e6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	return 0;

}
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	cf 90       	pop	r12
     6fe:	08 95       	ret

00000700 <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     712:	88 85       	ldd	r24, Y+8	; 0x08
     714:	81 11       	cpse	r24, r1
     716:	13 c0       	rjmp	.+38     	; 0x73e <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     718:	0c 81       	ldd	r16, Y+4	; 0x04
     71a:	1d 81       	ldd	r17, Y+5	; 0x05
     71c:	c1 2c       	mov	r12, r1
     71e:	d1 2c       	mov	r13, r1
     720:	0f 2e       	mov	r0, r31
     722:	fe e3       	ldi	r31, 0x3E	; 62
     724:	ef 2e       	mov	r14, r31
     726:	f5 e0       	ldi	r31, 0x05	; 5
     728:	ff 2e       	mov	r15, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	a9 01       	movw	r20, r18
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	cb 01       	movw	r24, r22
     738:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     73c:	12 c0       	rjmp	.+36     	; 0x762 <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     73e:	0e 81       	ldd	r16, Y+6	; 0x06
     740:	1f 81       	ldd	r17, Y+7	; 0x07
     742:	c1 2c       	mov	r12, r1
     744:	d1 2c       	mov	r13, r1
     746:	0f 2e       	mov	r0, r31
     748:	fe e3       	ldi	r31, 0x3E	; 62
     74a:	ef 2e       	mov	r14, r31
     74c:	f5 e0       	ldi	r31, 0x05	; 5
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	cb 01       	movw	r24, r22
     75e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	}
	ASYNC(self, updateDisplay, 0);
     762:	c1 2c       	mov	r12, r1
     764:	d1 2c       	mov	r13, r1
     766:	0f 2e       	mov	r0, r31
     768:	f1 ed       	ldi	r31, 0xD1	; 209
     76a:	ef 2e       	mov	r14, r31
     76c:	f2 e0       	ldi	r31, 0x02	; 2
     76e:	ff 2e       	mov	r15, r31
     770:	f0 2d       	mov	r31, r0
     772:	8e 01       	movw	r16, r28
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	a9 01       	movw	r20, r18
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	cb 01       	movw	r24, r22
     780:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	return 0;
}
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	08 95       	ret

0000079a <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     7ac:	88 85       	ldd	r24, Y+8	; 0x08
     7ae:	81 11       	cpse	r24, r1
     7b0:	13 c0       	rjmp	.+38     	; 0x7d8 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     7b2:	0c 81       	ldd	r16, Y+4	; 0x04
     7b4:	1d 81       	ldd	r17, Y+5	; 0x05
     7b6:	c1 2c       	mov	r12, r1
     7b8:	d1 2c       	mov	r13, r1
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f7 e4       	ldi	r31, 0x47	; 71
     7be:	ef 2e       	mov	r14, r31
     7c0:	f5 e0       	ldi	r31, 0x05	; 5
     7c2:	ff 2e       	mov	r15, r31
     7c4:	f0 2d       	mov	r31, r0
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	a9 01       	movw	r20, r18
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	cb 01       	movw	r24, r22
     7d2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     7d6:	12 c0       	rjmp	.+36     	; 0x7fc <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     7d8:	0e 81       	ldd	r16, Y+6	; 0x06
     7da:	1f 81       	ldd	r17, Y+7	; 0x07
     7dc:	c1 2c       	mov	r12, r1
     7de:	d1 2c       	mov	r13, r1
     7e0:	0f 2e       	mov	r0, r31
     7e2:	f7 e4       	ldi	r31, 0x47	; 71
     7e4:	ef 2e       	mov	r14, r31
     7e6:	f5 e0       	ldi	r31, 0x05	; 5
     7e8:	ff 2e       	mov	r15, r31
     7ea:	f0 2d       	mov	r31, r0
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	a9 01       	movw	r20, r18
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	cb 01       	movw	r24, r22
     7f8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	}
	ASYNC(self, updateDisplay, 0);
     7fc:	c1 2c       	mov	r12, r1
     7fe:	d1 2c       	mov	r13, r1
     800:	0f 2e       	mov	r0, r31
     802:	f1 ed       	ldi	r31, 0xD1	; 209
     804:	ef 2e       	mov	r14, r31
     806:	f2 e0       	ldi	r31, 0x02	; 2
     808:	ff 2e       	mov	r15, r31
     80a:	f0 2d       	mov	r31, r0
     80c:	8e 01       	movw	r16, r28
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	a9 01       	movw	r20, r18
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	cb 01       	movw	r24, r22
     81a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	return 0;
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	08 95       	ret

00000834 <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     840:	fc 01       	movw	r30, r24
     842:	04 81       	ldd	r16, Z+4	; 0x04
     844:	15 81       	ldd	r17, Z+5	; 0x05
     846:	c1 2c       	mov	r12, r1
     848:	d1 2c       	mov	r13, r1
     84a:	0f 2e       	mov	r0, r31
     84c:	f8 e2       	ldi	r31, 0x28	; 40
     84e:	ef 2e       	mov	r14, r31
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	ff 2e       	mov	r15, r31
     854:	f0 2d       	mov	r31, r0
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	a9 01       	movw	r20, r18
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	cb 01       	movw	r24, r22
     862:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	return 0;
}
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	08 95       	ret

00000878 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     884:	fc 01       	movw	r30, r24
     886:	04 81       	ldd	r16, Z+4	; 0x04
     888:	15 81       	ldd	r17, Z+5	; 0x05
     88a:	c1 2c       	mov	r12, r1
     88c:	d1 2c       	mov	r13, r1
     88e:	0f 2e       	mov	r0, r31
     890:	fb ef       	ldi	r31, 0xFB	; 251
     892:	ef 2e       	mov	r14, r31
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	ff 2e       	mov	r15, r31
     898:	f0 2d       	mov	r31, r0
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	a9 01       	movw	r20, r18
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	cb 01       	movw	r24, r22
     8a6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	return 0;
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	08 95       	ret

000008bc <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     8ce:	c1 2c       	mov	r12, r1
     8d0:	d1 2c       	mov	r13, r1
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fa eb       	ldi	r31, 0xBA	; 186
     8d6:	ef 2e       	mov	r14, r31
     8d8:	f4 e0       	ldi	r31, 0x04	; 4
     8da:	ff 2e       	mov	r15, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	04 e2       	ldi	r16, 0x24	; 36
     8e0:	11 e0       	ldi	r17, 0x01	; 1
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	a9 01       	movw	r20, r18
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	cb 01       	movw	r24, r22
     8ee:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	ASYNC(&pulseGen2, setPulse, 0);
     8f2:	0a e1       	ldi	r16, 0x1A	; 26
     8f4:	11 e0       	ldi	r17, 0x01	; 1
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	a9 01       	movw	r20, r18
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	cb 01       	movw	r24, r22
     902:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     906:	0f 2e       	mov	r0, r31
     908:	f1 ed       	ldi	r31, 0xD1	; 209
     90a:	ef 2e       	mov	r14, r31
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	ff 2e       	mov	r15, r31
     910:	f0 2d       	mov	r31, r0
     912:	8e 01       	movw	r16, r28
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	a9 01       	movw	r20, r18
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	cb 01       	movw	r24, r22
     920:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	
	return 0;
}
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     93a:	0e 94 71 05 	call	0xae2	; 0xae2 <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     93e:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     942:	0e 94 cb 00 	call	0x196	; 0x196 <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	6a e1       	ldi	r22, 0x1A	; 26
     94a:	74 e0       	ldi	r23, 0x04	; 4
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 9b 11 	call	0x2336	; 0x2336 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     954:	42 e0       	ldi	r20, 0x02	; 2
     956:	6c e3       	ldi	r22, 0x3C	; 60
     958:	74 e0       	ldi	r23, 0x04	; 4
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 9b 11 	call	0x2336	; 0x2336 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	6e e5       	ldi	r22, 0x5E	; 94
     968:	74 e0       	ldi	r23, 0x04	; 4
     96a:	81 e1       	ldi	r24, 0x11	; 17
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 b5 11 	call	0x236a	; 0x236a <tinytimber>
}
     972:	08 95       	ret

00000974 <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     986:	8c 81       	ldd	r24, Y+4	; 0x04
     988:	81 11       	cpse	r24, r1
     98a:	23 c0       	rjmp	.+70     	; 0x9d2 <setPulse+0x5e>
	    ASYNC(self->wbit, writeBit, 0);
     98c:	0f 81       	ldd	r16, Y+7	; 0x07
     98e:	18 85       	ldd	r17, Y+8	; 0x08
     990:	c1 2c       	mov	r12, r1
     992:	d1 2c       	mov	r13, r1
     994:	0f 2e       	mov	r0, r31
     996:	f1 ed       	ldi	r31, 0xD1	; 209
     998:	ef 2e       	mov	r14, r31
     99a:	f1 e1       	ldi	r31, 0x11	; 17
     99c:	ff 2e       	mov	r15, r31
     99e:	f0 2d       	mov	r31, r0
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	a9 01       	movw	r20, r18
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	cb 01       	movw	r24, r22
     9ac:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
		AFTER(MSEC(1000), self, setPulse, 0);
     9b0:	0f 2e       	mov	r0, r31
     9b2:	fa eb       	ldi	r31, 0xBA	; 186
     9b4:	ef 2e       	mov	r14, r31
     9b6:	f4 e0       	ldi	r31, 0x04	; 4
     9b8:	ff 2e       	mov	r15, r31
     9ba:	f0 2d       	mov	r31, r0
     9bc:	8e 01       	movw	r16, r28
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	a9 01       	movw	r20, r18
     9c4:	62 e1       	ldi	r22, 0x12	; 18
     9c6:	7a e7       	ldi	r23, 0x7A	; 122
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
     9d0:	3d c0       	rjmp	.+122    	; 0xa4c <setPulse+0xd8>
    }
	else {
		// Annars toggla outputHigh.
		ASYNC(self->wbit, toggleBit, 0);
     9d2:	0f 81       	ldd	r16, Y+7	; 0x07
     9d4:	18 85       	ldd	r17, Y+8	; 0x08
     9d6:	c1 2c       	mov	r12, r1
     9d8:	d1 2c       	mov	r13, r1
     9da:	0f 2e       	mov	r0, r31
     9dc:	f4 ef       	ldi	r31, 0xF4	; 244
     9de:	ef 2e       	mov	r14, r31
     9e0:	f1 e1       	ldi	r31, 0x11	; 17
     9e2:	ff 2e       	mov	r15, r31
     9e4:	f0 2d       	mov	r31, r0
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	a9 01       	movw	r20, r18
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	cb 01       	movw	r24, r22
     9f2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
		
		// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
		int delay = 1000 / self->frec;
		AFTER(MSEC(delay), self, setPulse, 0);
     9f6:	6c 81       	ldd	r22, Y+4	; 0x04
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	88 ee       	ldi	r24, 0xE8	; 232
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	0e 94 03 12 	call	0x2406	; 0x2406 <__divmodhi4>
     a02:	2d e7       	ldi	r18, 0x7D	; 125
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	db 01       	movw	r26, r22
     a08:	0e 94 36 12 	call	0x246c	; 0x246c <__usmulhisi3>
     a0c:	8b 01       	movw	r16, r22
     a0e:	9c 01       	movw	r18, r24
     a10:	99 23       	and	r25, r25
     a12:	24 f4       	brge	.+8      	; 0xa1c <setPulse+0xa8>
     a14:	0d 5f       	subi	r16, 0xFD	; 253
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	2f 4f       	sbci	r18, 0xFF	; 255
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	c9 01       	movw	r24, r18
     a1e:	b8 01       	movw	r22, r16
     a20:	95 95       	asr	r25
     a22:	87 95       	ror	r24
     a24:	77 95       	ror	r23
     a26:	67 95       	ror	r22
     a28:	95 95       	asr	r25
     a2a:	87 95       	ror	r24
     a2c:	77 95       	ror	r23
     a2e:	67 95       	ror	r22
     a30:	c1 2c       	mov	r12, r1
     a32:	d1 2c       	mov	r13, r1
     a34:	0f 2e       	mov	r0, r31
     a36:	fa eb       	ldi	r31, 0xBA	; 186
     a38:	ef 2e       	mov	r14, r31
     a3a:	f4 e0       	ldi	r31, 0x04	; 4
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
     a40:	8e 01       	movw	r16, r28
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	a9 01       	movw	r20, r18
     a48:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
	}
	return 0;
}
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     a62:	fc 01       	movw	r30, r24
     a64:	84 81       	ldd	r24, Z+4	; 0x04
}
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	08 95       	ret

00000a6a <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     a6a:	fc 01       	movw	r30, r24
    unsigned char old = self->frec;
    if (self->frec < 99) {
     a6c:	94 81       	ldd	r25, Z+4	; 0x04
     a6e:	93 36       	cpi	r25, 0x63	; 99
     a70:	10 f4       	brcc	.+4      	; 0xa76 <FrecInc+0xc>
	    self->frec++;
     a72:	9f 5f       	subi	r25, 0xFF	; 255
     a74:	94 83       	std	Z+4, r25	; 0x04
    }
    return 0;
    }
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	08 95       	ret

00000a7c <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     a7c:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     a7e:	94 81       	ldd	r25, Z+4	; 0x04
     a80:	99 23       	and	r25, r25
     a82:	11 f0       	breq	.+4      	; 0xa88 <FrecDec+0xc>
		self->frec--;
     a84:	91 50       	subi	r25, 0x01	; 1
     a86:	94 83       	std	Z+4, r25	; 0x04
	}
	return 0;
}
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	08 95       	ret

00000a8e <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     a9c:	84 81       	ldd	r24, Z+4	; 0x04
     a9e:	81 11       	cpse	r24, r1
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <FrecReset+0x1a>
	    self->frec = self->frec_old;
     aa2:	85 81       	ldd	r24, Z+5	; 0x05
     aa4:	84 83       	std	Z+4, r24	; 0x04
     aa6:	14 c0       	rjmp	.+40     	; 0xad0 <FrecReset+0x42>
	    } 
		else {
	    self->frec_old = self->frec;
     aa8:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     aaa:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     aac:	07 81       	ldd	r16, Z+7	; 0x07
     aae:	10 85       	ldd	r17, Z+8	; 0x08
     ab0:	c1 2c       	mov	r12, r1
     ab2:	d1 2c       	mov	r13, r1
     ab4:	0f 2e       	mov	r0, r31
     ab6:	f1 ed       	ldi	r31, 0xD1	; 209
     ab8:	ef 2e       	mov	r14, r31
     aba:	f1 e1       	ldi	r31, 0x11	; 17
     abc:	ff 2e       	mov	r15, r31
     abe:	f0 2d       	mov	r31, r0
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	a9 01       	movw	r20, r18
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	cb 01       	movw	r24, r22
     acc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
    }
    return 0;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	08 95       	ret

00000ae2 <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     ae2:	e1 e6       	ldi	r30, 0x61	; 97
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	80 83       	st	Z, r24
	CLKPR = 0x00;
     aea:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     aec:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     aee:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     af0:	e1 e8       	ldi	r30, 0x81	; 129
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	8d 60       	ori	r24, 0x0D	; 13
     af8:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     afa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     afe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     b02:	ef e6       	ldi	r30, 0x6F	; 111
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	82 60       	ori	r24, 0x02	; 2
     b0a:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     b0c:	82 ec       	ldi	r24, 0xC2	; 194
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     b14:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b18:	08 95       	ret

00000b1a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <initialize+0x6>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <initialize+0x8>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	87 e4       	ldi	r24, 0x47	; 71
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	27 e2       	ldi	r18, 0x27	; 39
     b2c:	33 e0       	ldi	r19, 0x03	; 3
     b2e:	fc 01       	movw	r30, r24
     b30:	70 97       	sbiw	r30, 0x10	; 16
     b32:	91 83       	std	Z+1, r25	; 0x01
     b34:	80 83       	st	Z, r24
     b36:	40 96       	adiw	r24, 0x10	; 16
     b38:	82 17       	cp	r24, r18
     b3a:	93 07       	cpc	r25, r19
     b3c:	c1 f7       	brne	.-16     	; 0xb2e <initialize+0x14>
     b3e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <messages+0xe1>
     b42:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <messages+0xe0>
     b46:	e2 e8       	ldi	r30, 0x82	; 130
     b48:	f1 e0       	ldi	r31, 0x01	; 1
     b4a:	8f e9       	ldi	r24, 0x9F	; 159
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	80 83       	st	Z, r24
     b52:	8c eb       	ldi	r24, 0xBC	; 188
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	96 8f       	std	Z+30, r25	; 0x1e
     b58:	85 8f       	std	Z+29, r24	; 0x1d
     b5a:	a9 ed       	ldi	r26, 0xD9	; 217
     b5c:	b1 e0       	ldi	r27, 0x01	; 1
     b5e:	b3 af       	std	Z+59, r27	; 0x3b
     b60:	a2 af       	std	Z+58, r26	; 0x3a
     b62:	1d 92       	st	X+, r1
     b64:	1c 92       	st	X, r1
     b66:	fa 83       	std	Y+2, r31	; 0x02
     b68:	e9 83       	std	Y+1, r30	; 0x01
     b6a:	e3 e8       	ldi	r30, 0x83	; 131
     b6c:	f3 e0       	ldi	r31, 0x03	; 3
     b6e:	fc 83       	std	Y+4, r31	; 0x04
     b70:	eb 83       	std	Y+3, r30	; 0x03
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	06 96       	adiw	r24, 0x06	; 6
     b78:	0e 94 82 12 	call	0x2504	; 0x2504 <setjmp>
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	97 8b       	std	Z+23, r25	; 0x17
     b86:	86 8b       	std	Z+22, r24	; 0x16
     b88:	91 8f       	std	Z+25, r25	; 0x19
     b8a:	80 8f       	std	Z+24, r24	; 0x18
     b8c:	8d e2       	ldi	r24, 0x2D	; 45
     b8e:	91 e1       	ldi	r25, 0x11	; 17
     b90:	94 8f       	std	Z+28, r25	; 0x1c
     b92:	83 8f       	std	Z+27, r24	; 0x1b
     b94:	15 82       	std	Z+5, r1	; 0x05
     b96:	14 82       	std	Z+4, r1	; 0x04
     b98:	7d 96       	adiw	r30, 0x1d	; 29
     b9a:	fa 83       	std	Y+2, r31	; 0x02
     b9c:	e9 83       	std	Y+1, r30	; 0x01
     b9e:	eb 81       	ldd	r30, Y+3	; 0x03
     ba0:	fc 81       	ldd	r31, Y+4	; 0x04
     ba2:	e0 5a       	subi	r30, 0xA0	; 160
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	fc 83       	std	Y+4, r31	; 0x04
     ba8:	eb 83       	std	Y+3, r30	; 0x03
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	86 5f       	subi	r24, 0xF6	; 246
     bb0:	91 40       	sbci	r25, 0x01	; 1
     bb2:	f9 f6       	brne	.-66     	; 0xb72 <initialize+0x58>
     bb4:	ea e1       	ldi	r30, 0x1A	; 26
     bb6:	f2 e0       	ldi	r31, 0x02	; 2
     bb8:	11 82       	std	Z+1, r1	; 0x01
     bba:	10 82       	st	Z, r1
     bbc:	15 82       	std	Z+5, r1	; 0x05
     bbe:	14 82       	std	Z+4, r1	; 0x04
     bc0:	13 82       	std	Z+3, r1	; 0x03
     bc2:	12 82       	std	Z+2, r1	; 0x02
     bc4:	e1 e6       	ldi	r30, 0x61	; 97
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 e8       	ldi	r24, 0x80	; 128
     bca:	80 83       	st	Z, r24
     bcc:	10 82       	st	Z, r1
     bce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bd2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <dispatch>:
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <dispatch+0x6>
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <current>
     c02:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <current+0x1>
     c06:	06 96       	adiw	r24, 0x06	; 6
     c08:	0e 94 82 12 	call	0x2504	; 0x2504 <setjmp>
     c0c:	89 2b       	or	r24, r25
     c0e:	59 f4       	brne	.+22     	; 0xc26 <dispatch+0x36>
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <current+0x1>
     c18:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <current>
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	06 96       	adiw	r24, 0x06	; 6
     c22:	0e 94 a2 12 	call	0x2544	; 0x2544 <longjmp>
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <schedule>:
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <msgQ>
     c3c:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <msgQ+0x1>
     c40:	30 97       	sbiw	r30, 0x00	; 0
     c42:	61 f1       	breq	.+88     	; 0xc9c <schedule+0x6c>
     c44:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <threadPool>
     c48:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <threadPool+0x1>
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	31 f1       	breq	.+76     	; 0xc9c <schedule+0x6c>
     c50:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <activeStack>
     c54:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <activeStack+0x1>
     c58:	aa 81       	ldd	r26, Y+2	; 0x02
     c5a:	bb 81       	ldd	r27, Y+3	; 0x03
     c5c:	10 97       	sbiw	r26, 0x00	; 0
     c5e:	79 f0       	breq	.+30     	; 0xc7e <schedule+0x4e>
     c60:	46 81       	ldd	r20, Z+6	; 0x06
     c62:	57 81       	ldd	r21, Z+7	; 0x07
     c64:	60 85       	ldd	r22, Z+8	; 0x08
     c66:	71 85       	ldd	r23, Z+9	; 0x09
     c68:	16 96       	adiw	r26, 0x06	; 6
     c6a:	0d 91       	ld	r16, X+
     c6c:	1d 91       	ld	r17, X+
     c6e:	2d 91       	ld	r18, X+
     c70:	3c 91       	ld	r19, X
     c72:	19 97       	sbiw	r26, 0x09	; 9
     c74:	40 1b       	sub	r20, r16
     c76:	51 0b       	sbc	r21, r17
     c78:	62 0b       	sbc	r22, r18
     c7a:	73 0b       	sbc	r23, r19
     c7c:	7a f4       	brpl	.+30     	; 0xc9c <schedule+0x6c>
     c7e:	fc 01       	movw	r30, r24
     c80:	20 81       	ld	r18, Z
     c82:	31 81       	ldd	r19, Z+1	; 0x01
     c84:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <threadPool+0x1>
     c88:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <threadPool>
     c8c:	d1 83       	std	Z+1, r29	; 0x01
     c8e:	c0 83       	st	Z, r28
     c90:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <activeStack+0x1>
     c94:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <activeStack>
     c98:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <dispatch>
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <__vector_1>:
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     ccc:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     cd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cd8:	c9 01       	movw	r24, r18
     cda:	03 2e       	mov	r0, r19
     cdc:	00 0c       	add	r0, r0
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	dc 01       	movw	r26, r24
     ce4:	99 27       	eor	r25, r25
     ce6:	88 27       	eor	r24, r24
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	84 2b       	or	r24, r20
     cee:	95 2b       	or	r25, r21
     cf0:	a6 2b       	or	r26, r22
     cf2:	b7 2b       	or	r27, r23
     cf4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     cf8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     cfc:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     d00:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     d04:	b0 9b       	sbis	0x16, 0	; 22
     d06:	1b c0       	rjmp	.+54     	; 0xd3e <__vector_1+0x98>
     d08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d10:	c9 01       	movw	r24, r18
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	09 2e       	mov	r0, r25
     d16:	00 0c       	add	r0, r0
     d18:	aa 0b       	sbc	r26, r26
     d1a:	bb 0b       	sbc	r27, r27
     d1c:	dc 01       	movw	r26, r24
     d1e:	99 27       	eor	r25, r25
     d20:	88 27       	eor	r24, r24
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	84 2b       	or	r24, r20
     d28:	95 2b       	or	r25, r21
     d2a:	a6 2b       	or	r26, r22
     d2c:	b7 2b       	or	r27, r23
     d2e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     d32:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     d36:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     d3a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     d3e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable>
     d42:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1>
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	39 f0       	breq	.+14     	; 0xd58 <__vector_1+0xb2>
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable>
     d52:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1>
     d56:	09 95       	icall
     d58:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_2>:
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     da4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     da8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     db0:	c9 01       	movw	r24, r18
     db2:	03 2e       	mov	r0, r19
     db4:	00 0c       	add	r0, r0
     db6:	aa 0b       	sbc	r26, r26
     db8:	bb 0b       	sbc	r27, r27
     dba:	dc 01       	movw	r26, r24
     dbc:	99 27       	eor	r25, r25
     dbe:	88 27       	eor	r24, r24
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	84 2b       	or	r24, r20
     dc6:	95 2b       	or	r25, r21
     dc8:	a6 2b       	or	r26, r22
     dca:	b7 2b       	or	r27, r23
     dcc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     dd0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     dd4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     dd8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     ddc:	b0 9b       	sbis	0x16, 0	; 22
     dde:	1b c0       	rjmp	.+54     	; 0xe16 <__vector_2+0x98>
     de0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     de4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     de8:	c9 01       	movw	r24, r18
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	09 2e       	mov	r0, r25
     dee:	00 0c       	add	r0, r0
     df0:	aa 0b       	sbc	r26, r26
     df2:	bb 0b       	sbc	r27, r27
     df4:	dc 01       	movw	r26, r24
     df6:	99 27       	eor	r25, r25
     df8:	88 27       	eor	r24, r24
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	84 2b       	or	r24, r20
     e00:	95 2b       	or	r25, r21
     e02:	a6 2b       	or	r26, r22
     e04:	b7 2b       	or	r27, r23
     e06:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     e0a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     e0e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     e12:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     e16:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x2>
     e1a:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x3>
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	39 f0       	breq	.+14     	; 0xe30 <__vector_2+0xb2>
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x2>
     e2a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x3>
     e2e:	09 95       	icall
     e30:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_3>:
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     e7c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     e80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e88:	c9 01       	movw	r24, r18
     e8a:	03 2e       	mov	r0, r19
     e8c:	00 0c       	add	r0, r0
     e8e:	aa 0b       	sbc	r26, r26
     e90:	bb 0b       	sbc	r27, r27
     e92:	dc 01       	movw	r26, r24
     e94:	99 27       	eor	r25, r25
     e96:	88 27       	eor	r24, r24
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	84 2b       	or	r24, r20
     e9e:	95 2b       	or	r25, r21
     ea0:	a6 2b       	or	r26, r22
     ea2:	b7 2b       	or	r27, r23
     ea4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     ea8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     eac:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     eb0:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     eb4:	b0 9b       	sbis	0x16, 0	; 22
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <__vector_3+0x98>
     eb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ebc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ec0:	c9 01       	movw	r24, r18
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	09 2e       	mov	r0, r25
     ec6:	00 0c       	add	r0, r0
     ec8:	aa 0b       	sbc	r26, r26
     eca:	bb 0b       	sbc	r27, r27
     ecc:	dc 01       	movw	r26, r24
     ece:	99 27       	eor	r25, r25
     ed0:	88 27       	eor	r24, r24
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	84 2b       	or	r24, r20
     ed8:	95 2b       	or	r25, r21
     eda:	a6 2b       	or	r26, r22
     edc:	b7 2b       	or	r27, r23
     ede:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     ee2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     ee6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     eea:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     eee:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x4>
     ef2:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x5>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	39 f0       	breq	.+14     	; 0xf08 <__vector_3+0xb2>
     efa:	62 e0       	ldi	r22, 0x02	; 2
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x4>
     f02:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x5>
     f06:	09 95       	icall
     f08:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_4>:
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     f54:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     f58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f60:	c9 01       	movw	r24, r18
     f62:	03 2e       	mov	r0, r19
     f64:	00 0c       	add	r0, r0
     f66:	aa 0b       	sbc	r26, r26
     f68:	bb 0b       	sbc	r27, r27
     f6a:	dc 01       	movw	r26, r24
     f6c:	99 27       	eor	r25, r25
     f6e:	88 27       	eor	r24, r24
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	84 2b       	or	r24, r20
     f76:	95 2b       	or	r25, r21
     f78:	a6 2b       	or	r26, r22
     f7a:	b7 2b       	or	r27, r23
     f7c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     f80:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     f84:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     f88:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     f8c:	b0 9b       	sbis	0x16, 0	; 22
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <__vector_4+0x98>
     f90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f98:	c9 01       	movw	r24, r18
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	09 2e       	mov	r0, r25
     f9e:	00 0c       	add	r0, r0
     fa0:	aa 0b       	sbc	r26, r26
     fa2:	bb 0b       	sbc	r27, r27
     fa4:	dc 01       	movw	r26, r24
     fa6:	99 27       	eor	r25, r25
     fa8:	88 27       	eor	r24, r24
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	84 2b       	or	r24, r20
     fb0:	95 2b       	or	r25, r21
     fb2:	a6 2b       	or	r26, r22
     fb4:	b7 2b       	or	r27, r23
     fb6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     fba:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     fbe:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     fc2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     fc6:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x6>
     fca:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x7>
     fce:	30 97       	sbiw	r30, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <__vector_4+0xb2>
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x6>
     fda:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x7>
     fde:	09 95       	icall
     fe0:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_5>:
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    102c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1030:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1034:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1038:	c9 01       	movw	r24, r18
    103a:	03 2e       	mov	r0, r19
    103c:	00 0c       	add	r0, r0
    103e:	aa 0b       	sbc	r26, r26
    1040:	bb 0b       	sbc	r27, r27
    1042:	dc 01       	movw	r26, r24
    1044:	99 27       	eor	r25, r25
    1046:	88 27       	eor	r24, r24
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	84 2b       	or	r24, r20
    104e:	95 2b       	or	r25, r21
    1050:	a6 2b       	or	r26, r22
    1052:	b7 2b       	or	r27, r23
    1054:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1058:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    105c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1060:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1064:	b0 9b       	sbis	0x16, 0	; 22
    1066:	1b c0       	rjmp	.+54     	; 0x109e <__vector_5+0x98>
    1068:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    106c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1070:	c9 01       	movw	r24, r18
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	09 2e       	mov	r0, r25
    1076:	00 0c       	add	r0, r0
    1078:	aa 0b       	sbc	r26, r26
    107a:	bb 0b       	sbc	r27, r27
    107c:	dc 01       	movw	r26, r24
    107e:	99 27       	eor	r25, r25
    1080:	88 27       	eor	r24, r24
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	84 2b       	or	r24, r20
    1088:	95 2b       	or	r25, r21
    108a:	a6 2b       	or	r26, r22
    108c:	b7 2b       	or	r27, r23
    108e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1092:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1096:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    109a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    109e:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x8>
    10a2:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x9>
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <__vector_5+0xb2>
    10aa:	64 e0       	ldi	r22, 0x04	; 4
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x8>
    10b2:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x9>
    10b6:	09 95       	icall
    10b8:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_10>:
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
    1100:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1104:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1108:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    110c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1110:	c9 01       	movw	r24, r18
    1112:	03 2e       	mov	r0, r19
    1114:	00 0c       	add	r0, r0
    1116:	aa 0b       	sbc	r26, r26
    1118:	bb 0b       	sbc	r27, r27
    111a:	dc 01       	movw	r26, r24
    111c:	99 27       	eor	r25, r25
    111e:	88 27       	eor	r24, r24
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	84 2b       	or	r24, r20
    1126:	95 2b       	or	r25, r21
    1128:	a6 2b       	or	r26, r22
    112a:	b7 2b       	or	r27, r23
    112c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1130:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1134:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1138:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    113c:	b0 9b       	sbis	0x16, 0	; 22
    113e:	1b c0       	rjmp	.+54     	; 0x1176 <__vector_10+0x98>
    1140:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1144:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1148:	c9 01       	movw	r24, r18
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	09 2e       	mov	r0, r25
    114e:	00 0c       	add	r0, r0
    1150:	aa 0b       	sbc	r26, r26
    1152:	bb 0b       	sbc	r27, r27
    1154:	dc 01       	movw	r26, r24
    1156:	99 27       	eor	r25, r25
    1158:	88 27       	eor	r24, r24
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	84 2b       	or	r24, r20
    1160:	95 2b       	or	r25, r21
    1162:	a6 2b       	or	r26, r22
    1164:	b7 2b       	or	r27, r23
    1166:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    116a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    116e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1172:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1176:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0xa>
    117a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0xb>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	39 f0       	breq	.+14     	; 0x1190 <__vector_10+0xb2>
    1182:	65 e0       	ldi	r22, 0x05	; 5
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xa>
    118a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xb>
    118e:	09 95       	icall
    1190:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_11>:
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    11dc:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    11e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11e8:	c9 01       	movw	r24, r18
    11ea:	03 2e       	mov	r0, r19
    11ec:	00 0c       	add	r0, r0
    11ee:	aa 0b       	sbc	r26, r26
    11f0:	bb 0b       	sbc	r27, r27
    11f2:	dc 01       	movw	r26, r24
    11f4:	99 27       	eor	r25, r25
    11f6:	88 27       	eor	r24, r24
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	84 2b       	or	r24, r20
    11fe:	95 2b       	or	r25, r21
    1200:	a6 2b       	or	r26, r22
    1202:	b7 2b       	or	r27, r23
    1204:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1208:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    120c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1210:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1214:	b0 9b       	sbis	0x16, 0	; 22
    1216:	1b c0       	rjmp	.+54     	; 0x124e <__vector_11+0x98>
    1218:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    121c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1220:	c9 01       	movw	r24, r18
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	09 2e       	mov	r0, r25
    1226:	00 0c       	add	r0, r0
    1228:	aa 0b       	sbc	r26, r26
    122a:	bb 0b       	sbc	r27, r27
    122c:	dc 01       	movw	r26, r24
    122e:	99 27       	eor	r25, r25
    1230:	88 27       	eor	r24, r24
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	84 2b       	or	r24, r20
    1238:	95 2b       	or	r25, r21
    123a:	a6 2b       	or	r26, r22
    123c:	b7 2b       	or	r27, r23
    123e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1242:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1246:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    124a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    124e:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xc>
    1252:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xd>
    1256:	30 97       	sbiw	r30, 0x00	; 0
    1258:	39 f0       	breq	.+14     	; 0x1268 <__vector_11+0xb2>
    125a:	66 e0       	ldi	r22, 0x06	; 6
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xc>
    1262:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xd>
    1266:	09 95       	icall
    1268:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_12>:
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    12b4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    12b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12c0:	c9 01       	movw	r24, r18
    12c2:	03 2e       	mov	r0, r19
    12c4:	00 0c       	add	r0, r0
    12c6:	aa 0b       	sbc	r26, r26
    12c8:	bb 0b       	sbc	r27, r27
    12ca:	dc 01       	movw	r26, r24
    12cc:	99 27       	eor	r25, r25
    12ce:	88 27       	eor	r24, r24
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	84 2b       	or	r24, r20
    12d6:	95 2b       	or	r25, r21
    12d8:	a6 2b       	or	r26, r22
    12da:	b7 2b       	or	r27, r23
    12dc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    12e0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    12e4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    12e8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    12ec:	b0 9b       	sbis	0x16, 0	; 22
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <__vector_12+0x98>
    12f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f8:	c9 01       	movw	r24, r18
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	09 2e       	mov	r0, r25
    12fe:	00 0c       	add	r0, r0
    1300:	aa 0b       	sbc	r26, r26
    1302:	bb 0b       	sbc	r27, r27
    1304:	dc 01       	movw	r26, r24
    1306:	99 27       	eor	r25, r25
    1308:	88 27       	eor	r24, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	84 2b       	or	r24, r20
    1310:	95 2b       	or	r25, r21
    1312:	a6 2b       	or	r26, r22
    1314:	b7 2b       	or	r27, r23
    1316:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    131a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    131e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1322:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1326:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xe>
    132a:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xf>
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	39 f0       	breq	.+14     	; 0x1340 <__vector_12+0xb2>
    1332:	67 e0       	ldi	r22, 0x07	; 7
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xe>
    133a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xf>
    133e:	09 95       	icall
    1340:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <__vector_13>:
    1366:	1f 92       	push	r1
    1368:	0f 92       	push	r0
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	0f 92       	push	r0
    136e:	11 24       	eor	r1, r1
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	4f 93       	push	r20
    1376:	5f 93       	push	r21
    1378:	6f 93       	push	r22
    137a:	7f 93       	push	r23
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
    1388:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    138c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1390:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1394:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1398:	c9 01       	movw	r24, r18
    139a:	03 2e       	mov	r0, r19
    139c:	00 0c       	add	r0, r0
    139e:	aa 0b       	sbc	r26, r26
    13a0:	bb 0b       	sbc	r27, r27
    13a2:	dc 01       	movw	r26, r24
    13a4:	99 27       	eor	r25, r25
    13a6:	88 27       	eor	r24, r24
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	84 2b       	or	r24, r20
    13ae:	95 2b       	or	r25, r21
    13b0:	a6 2b       	or	r26, r22
    13b2:	b7 2b       	or	r27, r23
    13b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    13b8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    13bc:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    13c0:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    13c4:	b0 9b       	sbis	0x16, 0	; 22
    13c6:	1b c0       	rjmp	.+54     	; 0x13fe <__vector_13+0x98>
    13c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d0:	c9 01       	movw	r24, r18
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	09 2e       	mov	r0, r25
    13d6:	00 0c       	add	r0, r0
    13d8:	aa 0b       	sbc	r26, r26
    13da:	bb 0b       	sbc	r27, r27
    13dc:	dc 01       	movw	r26, r24
    13de:	99 27       	eor	r25, r25
    13e0:	88 27       	eor	r24, r24
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	84 2b       	or	r24, r20
    13e8:	95 2b       	or	r25, r21
    13ea:	a6 2b       	or	r26, r22
    13ec:	b7 2b       	or	r27, r23
    13ee:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    13f2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    13f6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    13fa:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    13fe:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x10>
    1402:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x11>
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	39 f0       	breq	.+14     	; 0x1418 <__vector_13+0xb2>
    140a:	68 e0       	ldi	r22, 0x08	; 8
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x10>
    1412:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x11>
    1416:	09 95       	icall
    1418:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <__vector_14>:
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
    1460:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1464:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1468:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    146c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1470:	c9 01       	movw	r24, r18
    1472:	03 2e       	mov	r0, r19
    1474:	00 0c       	add	r0, r0
    1476:	aa 0b       	sbc	r26, r26
    1478:	bb 0b       	sbc	r27, r27
    147a:	dc 01       	movw	r26, r24
    147c:	99 27       	eor	r25, r25
    147e:	88 27       	eor	r24, r24
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	84 2b       	or	r24, r20
    1486:	95 2b       	or	r25, r21
    1488:	a6 2b       	or	r26, r22
    148a:	b7 2b       	or	r27, r23
    148c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1490:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1494:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1498:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    149c:	b0 9b       	sbis	0x16, 0	; 22
    149e:	1b c0       	rjmp	.+54     	; 0x14d6 <__vector_14+0x98>
    14a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14a8:	c9 01       	movw	r24, r18
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	09 2e       	mov	r0, r25
    14ae:	00 0c       	add	r0, r0
    14b0:	aa 0b       	sbc	r26, r26
    14b2:	bb 0b       	sbc	r27, r27
    14b4:	dc 01       	movw	r26, r24
    14b6:	99 27       	eor	r25, r25
    14b8:	88 27       	eor	r24, r24
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	84 2b       	or	r24, r20
    14c0:	95 2b       	or	r25, r21
    14c2:	a6 2b       	or	r26, r22
    14c4:	b7 2b       	or	r27, r23
    14c6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    14ca:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    14ce:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    14d2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    14d6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x12>
    14da:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x13>
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	39 f0       	breq	.+14     	; 0x14f0 <__vector_14+0xb2>
    14e2:	69 e0       	ldi	r22, 0x09	; 9
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x12>
    14ea:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x13>
    14ee:	09 95       	icall
    14f0:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <__vector_15>:
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    153c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1540:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1544:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1548:	c9 01       	movw	r24, r18
    154a:	03 2e       	mov	r0, r19
    154c:	00 0c       	add	r0, r0
    154e:	aa 0b       	sbc	r26, r26
    1550:	bb 0b       	sbc	r27, r27
    1552:	dc 01       	movw	r26, r24
    1554:	99 27       	eor	r25, r25
    1556:	88 27       	eor	r24, r24
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	84 2b       	or	r24, r20
    155e:	95 2b       	or	r25, r21
    1560:	a6 2b       	or	r26, r22
    1562:	b7 2b       	or	r27, r23
    1564:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1568:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    156c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1570:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1574:	b0 9b       	sbis	0x16, 0	; 22
    1576:	1b c0       	rjmp	.+54     	; 0x15ae <__vector_15+0x98>
    1578:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    157c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1580:	c9 01       	movw	r24, r18
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	09 2e       	mov	r0, r25
    1586:	00 0c       	add	r0, r0
    1588:	aa 0b       	sbc	r26, r26
    158a:	bb 0b       	sbc	r27, r27
    158c:	dc 01       	movw	r26, r24
    158e:	99 27       	eor	r25, r25
    1590:	88 27       	eor	r24, r24
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	84 2b       	or	r24, r20
    1598:	95 2b       	or	r25, r21
    159a:	a6 2b       	or	r26, r22
    159c:	b7 2b       	or	r27, r23
    159e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    15a2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    15a6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    15aa:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    15ae:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x14>
    15b2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x15>
    15b6:	30 97       	sbiw	r30, 0x00	; 0
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <__vector_15+0xb2>
    15ba:	6a e0       	ldi	r22, 0x0A	; 10
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x14>
    15c2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x15>
    15c6:	09 95       	icall
    15c8:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_16>:
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1614:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1618:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    161c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1620:	c9 01       	movw	r24, r18
    1622:	03 2e       	mov	r0, r19
    1624:	00 0c       	add	r0, r0
    1626:	aa 0b       	sbc	r26, r26
    1628:	bb 0b       	sbc	r27, r27
    162a:	dc 01       	movw	r26, r24
    162c:	99 27       	eor	r25, r25
    162e:	88 27       	eor	r24, r24
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	84 2b       	or	r24, r20
    1636:	95 2b       	or	r25, r21
    1638:	a6 2b       	or	r26, r22
    163a:	b7 2b       	or	r27, r23
    163c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1640:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1644:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1648:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    164c:	b0 9b       	sbis	0x16, 0	; 22
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <__vector_16+0x98>
    1650:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1654:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1658:	c9 01       	movw	r24, r18
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	09 2e       	mov	r0, r25
    165e:	00 0c       	add	r0, r0
    1660:	aa 0b       	sbc	r26, r26
    1662:	bb 0b       	sbc	r27, r27
    1664:	dc 01       	movw	r26, r24
    1666:	99 27       	eor	r25, r25
    1668:	88 27       	eor	r24, r24
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	84 2b       	or	r24, r20
    1670:	95 2b       	or	r25, r21
    1672:	a6 2b       	or	r26, r22
    1674:	b7 2b       	or	r27, r23
    1676:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    167a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    167e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1682:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1686:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x16>
    168a:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x17>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	39 f0       	breq	.+14     	; 0x16a0 <__vector_16+0xb2>
    1692:	6b e0       	ldi	r22, 0x0B	; 11
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x16>
    169a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x17>
    169e:	09 95       	icall
    16a0:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <__vector_17>:
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	7f 93       	push	r23
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	af 93       	push	r26
    16e2:	bf 93       	push	r27
    16e4:	ef 93       	push	r30
    16e6:	ff 93       	push	r31
    16e8:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    16ec:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    16f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16f8:	c9 01       	movw	r24, r18
    16fa:	03 2e       	mov	r0, r19
    16fc:	00 0c       	add	r0, r0
    16fe:	aa 0b       	sbc	r26, r26
    1700:	bb 0b       	sbc	r27, r27
    1702:	dc 01       	movw	r26, r24
    1704:	99 27       	eor	r25, r25
    1706:	88 27       	eor	r24, r24
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	84 2b       	or	r24, r20
    170e:	95 2b       	or	r25, r21
    1710:	a6 2b       	or	r26, r22
    1712:	b7 2b       	or	r27, r23
    1714:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1718:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    171c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1720:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1724:	b0 9b       	sbis	0x16, 0	; 22
    1726:	1b c0       	rjmp	.+54     	; 0x175e <__vector_17+0x98>
    1728:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    172c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1730:	c9 01       	movw	r24, r18
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	09 2e       	mov	r0, r25
    1736:	00 0c       	add	r0, r0
    1738:	aa 0b       	sbc	r26, r26
    173a:	bb 0b       	sbc	r27, r27
    173c:	dc 01       	movw	r26, r24
    173e:	99 27       	eor	r25, r25
    1740:	88 27       	eor	r24, r24
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	84 2b       	or	r24, r20
    1748:	95 2b       	or	r25, r21
    174a:	a6 2b       	or	r26, r22
    174c:	b7 2b       	or	r27, r23
    174e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1752:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1756:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    175a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    175e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x18>
    1762:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x19>
    1766:	30 97       	sbiw	r30, 0x00	; 0
    1768:	39 f0       	breq	.+14     	; 0x1778 <__vector_17+0xb2>
    176a:	6c e0       	ldi	r22, 0x0C	; 12
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x18>
    1772:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x19>
    1776:	09 95       	icall
    1778:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_18>:
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	2f 93       	push	r18
    17aa:	3f 93       	push	r19
    17ac:	4f 93       	push	r20
    17ae:	5f 93       	push	r21
    17b0:	6f 93       	push	r22
    17b2:	7f 93       	push	r23
    17b4:	8f 93       	push	r24
    17b6:	9f 93       	push	r25
    17b8:	af 93       	push	r26
    17ba:	bf 93       	push	r27
    17bc:	ef 93       	push	r30
    17be:	ff 93       	push	r31
    17c0:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    17c4:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    17c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17d0:	c9 01       	movw	r24, r18
    17d2:	03 2e       	mov	r0, r19
    17d4:	00 0c       	add	r0, r0
    17d6:	aa 0b       	sbc	r26, r26
    17d8:	bb 0b       	sbc	r27, r27
    17da:	dc 01       	movw	r26, r24
    17dc:	99 27       	eor	r25, r25
    17de:	88 27       	eor	r24, r24
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	84 2b       	or	r24, r20
    17e6:	95 2b       	or	r25, r21
    17e8:	a6 2b       	or	r26, r22
    17ea:	b7 2b       	or	r27, r23
    17ec:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    17f0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    17f4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    17f8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    17fc:	b0 9b       	sbis	0x16, 0	; 22
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <__vector_18+0x98>
    1800:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1804:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1808:	c9 01       	movw	r24, r18
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	09 2e       	mov	r0, r25
    180e:	00 0c       	add	r0, r0
    1810:	aa 0b       	sbc	r26, r26
    1812:	bb 0b       	sbc	r27, r27
    1814:	dc 01       	movw	r26, r24
    1816:	99 27       	eor	r25, r25
    1818:	88 27       	eor	r24, r24
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	84 2b       	or	r24, r20
    1820:	95 2b       	or	r25, r21
    1822:	a6 2b       	or	r26, r22
    1824:	b7 2b       	or	r27, r23
    1826:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    182a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    182e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1832:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1836:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x1a>
    183a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x1b>
    183e:	30 97       	sbiw	r30, 0x00	; 0
    1840:	39 f0       	breq	.+14     	; 0x1850 <__vector_18+0xb2>
    1842:	6d e0       	ldi	r22, 0x0D	; 13
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1a>
    184a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1b>
    184e:	09 95       	icall
    1850:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_19>:
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
    1898:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    189c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    18a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a8:	c9 01       	movw	r24, r18
    18aa:	03 2e       	mov	r0, r19
    18ac:	00 0c       	add	r0, r0
    18ae:	aa 0b       	sbc	r26, r26
    18b0:	bb 0b       	sbc	r27, r27
    18b2:	dc 01       	movw	r26, r24
    18b4:	99 27       	eor	r25, r25
    18b6:	88 27       	eor	r24, r24
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	84 2b       	or	r24, r20
    18be:	95 2b       	or	r25, r21
    18c0:	a6 2b       	or	r26, r22
    18c2:	b7 2b       	or	r27, r23
    18c4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    18c8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    18cc:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    18d0:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    18d4:	b0 9b       	sbis	0x16, 0	; 22
    18d6:	1b c0       	rjmp	.+54     	; 0x190e <__vector_19+0x98>
    18d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e0:	c9 01       	movw	r24, r18
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	09 2e       	mov	r0, r25
    18e6:	00 0c       	add	r0, r0
    18e8:	aa 0b       	sbc	r26, r26
    18ea:	bb 0b       	sbc	r27, r27
    18ec:	dc 01       	movw	r26, r24
    18ee:	99 27       	eor	r25, r25
    18f0:	88 27       	eor	r24, r24
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	84 2b       	or	r24, r20
    18f8:	95 2b       	or	r25, r21
    18fa:	a6 2b       	or	r26, r22
    18fc:	b7 2b       	or	r27, r23
    18fe:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1902:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1906:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    190a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    190e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1c>
    1912:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1d>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	39 f0       	breq	.+14     	; 0x1928 <__vector_19+0xb2>
    191a:	6e e0       	ldi	r22, 0x0E	; 14
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1c>
    1922:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1d>
    1926:	09 95       	icall
    1928:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_20>:
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
    1970:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1974:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1978:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    197c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1980:	c9 01       	movw	r24, r18
    1982:	03 2e       	mov	r0, r19
    1984:	00 0c       	add	r0, r0
    1986:	aa 0b       	sbc	r26, r26
    1988:	bb 0b       	sbc	r27, r27
    198a:	dc 01       	movw	r26, r24
    198c:	99 27       	eor	r25, r25
    198e:	88 27       	eor	r24, r24
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	84 2b       	or	r24, r20
    1996:	95 2b       	or	r25, r21
    1998:	a6 2b       	or	r26, r22
    199a:	b7 2b       	or	r27, r23
    199c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    19a0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    19a4:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    19a8:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    19ac:	b0 9b       	sbis	0x16, 0	; 22
    19ae:	1b c0       	rjmp	.+54     	; 0x19e6 <__vector_20+0x98>
    19b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19b8:	c9 01       	movw	r24, r18
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	09 2e       	mov	r0, r25
    19be:	00 0c       	add	r0, r0
    19c0:	aa 0b       	sbc	r26, r26
    19c2:	bb 0b       	sbc	r27, r27
    19c4:	dc 01       	movw	r26, r24
    19c6:	99 27       	eor	r25, r25
    19c8:	88 27       	eor	r24, r24
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	84 2b       	or	r24, r20
    19d0:	95 2b       	or	r25, r21
    19d2:	a6 2b       	or	r26, r22
    19d4:	b7 2b       	or	r27, r23
    19d6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    19da:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    19de:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    19e2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    19e6:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1e>
    19ea:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1f>
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	39 f0       	breq	.+14     	; 0x1a00 <__vector_20+0xb2>
    19f2:	6f e0       	ldi	r22, 0x0F	; 15
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1e>
    19fa:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1f>
    19fe:	09 95       	icall
    1a00:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	0f 90       	pop	r0
    1a22:	1f 90       	pop	r1
    1a24:	18 95       	reti

00001a26 <__vector_21>:
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1a4c:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1a50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a58:	c9 01       	movw	r24, r18
    1a5a:	03 2e       	mov	r0, r19
    1a5c:	00 0c       	add	r0, r0
    1a5e:	aa 0b       	sbc	r26, r26
    1a60:	bb 0b       	sbc	r27, r27
    1a62:	dc 01       	movw	r26, r24
    1a64:	99 27       	eor	r25, r25
    1a66:	88 27       	eor	r24, r24
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	84 2b       	or	r24, r20
    1a6e:	95 2b       	or	r25, r21
    1a70:	a6 2b       	or	r26, r22
    1a72:	b7 2b       	or	r27, r23
    1a74:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1a78:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1a7c:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1a80:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1a84:	b0 9b       	sbis	0x16, 0	; 22
    1a86:	1b c0       	rjmp	.+54     	; 0x1abe <__vector_21+0x98>
    1a88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a90:	c9 01       	movw	r24, r18
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	09 2e       	mov	r0, r25
    1a96:	00 0c       	add	r0, r0
    1a98:	aa 0b       	sbc	r26, r26
    1a9a:	bb 0b       	sbc	r27, r27
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	99 27       	eor	r25, r25
    1aa0:	88 27       	eor	r24, r24
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	84 2b       	or	r24, r20
    1aa8:	95 2b       	or	r25, r21
    1aaa:	a6 2b       	or	r26, r22
    1aac:	b7 2b       	or	r27, r23
    1aae:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1ab2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1ab6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1aba:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1abe:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x20>
    1ac2:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x21>
    1ac6:	30 97       	sbiw	r30, 0x00	; 0
    1ac8:	39 f0       	breq	.+14     	; 0x1ad8 <__vector_21+0xb2>
    1aca:	60 e1       	ldi	r22, 0x10	; 16
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x20>
    1ad2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x21>
    1ad6:	09 95       	icall
    1ad8:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	7f 91       	pop	r23
    1aea:	6f 91       	pop	r22
    1aec:	5f 91       	pop	r21
    1aee:	4f 91       	pop	r20
    1af0:	3f 91       	pop	r19
    1af2:	2f 91       	pop	r18
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <__vector_22>:
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    1b20:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1b24:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1b28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b30:	c9 01       	movw	r24, r18
    1b32:	03 2e       	mov	r0, r19
    1b34:	00 0c       	add	r0, r0
    1b36:	aa 0b       	sbc	r26, r26
    1b38:	bb 0b       	sbc	r27, r27
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	99 27       	eor	r25, r25
    1b3e:	88 27       	eor	r24, r24
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	84 2b       	or	r24, r20
    1b46:	95 2b       	or	r25, r21
    1b48:	a6 2b       	or	r26, r22
    1b4a:	b7 2b       	or	r27, r23
    1b4c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1b50:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1b54:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1b58:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1b5c:	b0 9b       	sbis	0x16, 0	; 22
    1b5e:	1b c0       	rjmp	.+54     	; 0x1b96 <__vector_22+0x98>
    1b60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b68:	c9 01       	movw	r24, r18
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	09 2e       	mov	r0, r25
    1b6e:	00 0c       	add	r0, r0
    1b70:	aa 0b       	sbc	r26, r26
    1b72:	bb 0b       	sbc	r27, r27
    1b74:	dc 01       	movw	r26, r24
    1b76:	99 27       	eor	r25, r25
    1b78:	88 27       	eor	r24, r24
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	84 2b       	or	r24, r20
    1b80:	95 2b       	or	r25, r21
    1b82:	a6 2b       	or	r26, r22
    1b84:	b7 2b       	or	r27, r23
    1b86:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1b8a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1b8e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1b92:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1b96:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x22>
    1b9a:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x23>
    1b9e:	30 97       	sbiw	r30, 0x00	; 0
    1ba0:	39 f0       	breq	.+14     	; 0x1bb0 <__vector_22+0xb2>
    1ba2:	61 e1       	ldi	r22, 0x11	; 17
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x22>
    1baa:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x23>
    1bae:	09 95       	icall
    1bb0:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	0f 90       	pop	r0
    1bd2:	1f 90       	pop	r1
    1bd4:	18 95       	reti

00001bd6 <enqueueByDeadline>:
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	7b 01       	movw	r14, r22
    1be4:	eb 01       	movw	r28, r22
    1be6:	a8 81       	ld	r26, Y
    1be8:	b9 81       	ldd	r27, Y+1	; 0x01
    1bea:	10 97       	sbiw	r26, 0x00	; 0
    1bec:	61 f1       	breq	.+88     	; 0x1c46 <enqueueByDeadline+0x70>
    1bee:	fc 01       	movw	r30, r24
    1bf0:	06 81       	ldd	r16, Z+6	; 0x06
    1bf2:	17 81       	ldd	r17, Z+7	; 0x07
    1bf4:	20 85       	ldd	r18, Z+8	; 0x08
    1bf6:	31 85       	ldd	r19, Z+9	; 0x09
    1bf8:	16 96       	adiw	r26, 0x06	; 6
    1bfa:	4d 91       	ld	r20, X+
    1bfc:	5d 91       	ld	r21, X+
    1bfe:	6d 91       	ld	r22, X+
    1c00:	7c 91       	ld	r23, X
    1c02:	19 97       	sbiw	r26, 0x09	; 9
    1c04:	04 17       	cp	r16, r20
    1c06:	15 07       	cpc	r17, r21
    1c08:	26 07       	cpc	r18, r22
    1c0a:	37 07       	cpc	r19, r23
    1c0c:	14 f4       	brge	.+4      	; 0x1c12 <enqueueByDeadline+0x3c>
    1c0e:	1b c0       	rjmp	.+54     	; 0x1c46 <enqueueByDeadline+0x70>
    1c10:	df 01       	movw	r26, r30
    1c12:	ed 91       	ld	r30, X+
    1c14:	fc 91       	ld	r31, X
    1c16:	11 97       	sbiw	r26, 0x01	; 1
    1c18:	30 97       	sbiw	r30, 0x00	; 0
    1c1a:	49 f0       	breq	.+18     	; 0x1c2e <enqueueByDeadline+0x58>
    1c1c:	46 81       	ldd	r20, Z+6	; 0x06
    1c1e:	57 81       	ldd	r21, Z+7	; 0x07
    1c20:	60 85       	ldd	r22, Z+8	; 0x08
    1c22:	71 85       	ldd	r23, Z+9	; 0x09
    1c24:	04 17       	cp	r16, r20
    1c26:	15 07       	cpc	r17, r21
    1c28:	26 07       	cpc	r18, r22
    1c2a:	37 07       	cpc	r19, r23
    1c2c:	8c f7       	brge	.-30     	; 0x1c10 <enqueueByDeadline+0x3a>
    1c2e:	ec 01       	movw	r28, r24
    1c30:	f9 83       	std	Y+1, r31	; 0x01
    1c32:	e8 83       	st	Y, r30
    1c34:	10 97       	sbiw	r26, 0x00	; 0
    1c36:	21 f4       	brne	.+8      	; 0x1c40 <enqueueByDeadline+0x6a>
    1c38:	f7 01       	movw	r30, r14
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	07 c0       	rjmp	.+14     	; 0x1c4e <enqueueByDeadline+0x78>
    1c40:	8d 93       	st	X+, r24
    1c42:	9c 93       	st	X, r25
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <enqueueByDeadline+0x78>
    1c46:	ec 01       	movw	r28, r24
    1c48:	b9 83       	std	Y+1, r27	; 0x01
    1c4a:	a8 83       	st	Y, r26
    1c4c:	f5 cf       	rjmp	.-22     	; 0x1c38 <enqueueByDeadline+0x62>
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	08 95       	ret

00001c5c <enqueueByBaseline>:
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	7b 01       	movw	r14, r22
    1c6a:	eb 01       	movw	r28, r22
    1c6c:	a8 81       	ld	r26, Y
    1c6e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c70:	10 97       	sbiw	r26, 0x00	; 0
    1c72:	61 f1       	breq	.+88     	; 0x1ccc <enqueueByBaseline+0x70>
    1c74:	fc 01       	movw	r30, r24
    1c76:	02 81       	ldd	r16, Z+2	; 0x02
    1c78:	13 81       	ldd	r17, Z+3	; 0x03
    1c7a:	24 81       	ldd	r18, Z+4	; 0x04
    1c7c:	35 81       	ldd	r19, Z+5	; 0x05
    1c7e:	12 96       	adiw	r26, 0x02	; 2
    1c80:	4d 91       	ld	r20, X+
    1c82:	5d 91       	ld	r21, X+
    1c84:	6d 91       	ld	r22, X+
    1c86:	7c 91       	ld	r23, X
    1c88:	15 97       	sbiw	r26, 0x05	; 5
    1c8a:	04 17       	cp	r16, r20
    1c8c:	15 07       	cpc	r17, r21
    1c8e:	26 07       	cpc	r18, r22
    1c90:	37 07       	cpc	r19, r23
    1c92:	14 f4       	brge	.+4      	; 0x1c98 <enqueueByBaseline+0x3c>
    1c94:	1b c0       	rjmp	.+54     	; 0x1ccc <enqueueByBaseline+0x70>
    1c96:	df 01       	movw	r26, r30
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	11 97       	sbiw	r26, 0x01	; 1
    1c9e:	30 97       	sbiw	r30, 0x00	; 0
    1ca0:	49 f0       	breq	.+18     	; 0x1cb4 <enqueueByBaseline+0x58>
    1ca2:	42 81       	ldd	r20, Z+2	; 0x02
    1ca4:	53 81       	ldd	r21, Z+3	; 0x03
    1ca6:	64 81       	ldd	r22, Z+4	; 0x04
    1ca8:	75 81       	ldd	r23, Z+5	; 0x05
    1caa:	04 17       	cp	r16, r20
    1cac:	15 07       	cpc	r17, r21
    1cae:	26 07       	cpc	r18, r22
    1cb0:	37 07       	cpc	r19, r23
    1cb2:	8c f7       	brge	.-30     	; 0x1c96 <enqueueByBaseline+0x3a>
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	f9 83       	std	Y+1, r31	; 0x01
    1cb8:	e8 83       	st	Y, r30
    1cba:	10 97       	sbiw	r26, 0x00	; 0
    1cbc:	21 f4       	brne	.+8      	; 0x1cc6 <enqueueByBaseline+0x6a>
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	07 c0       	rjmp	.+14     	; 0x1cd4 <enqueueByBaseline+0x78>
    1cc6:	8d 93       	st	X+, r24
    1cc8:	9c 93       	st	X, r25
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <enqueueByBaseline+0x78>
    1ccc:	ec 01       	movw	r28, r24
    1cce:	b9 83       	std	Y+1, r27	; 0x01
    1cd0:	a8 83       	st	Y, r26
    1cd2:	f5 cf       	rjmp	.-22     	; 0x1cbe <enqueueByBaseline+0x62>
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	08 95       	ret

00001ce2 <dequeue>:
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	59 f4       	brne	.+22     	; 0x1d04 <dequeue+0x22>
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1cf4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1cf8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	83 bf       	out	0x33, r24	; 51
    1d00:	88 95       	sleep
    1d02:	fd cf       	rjmp	.-6      	; 0x1cfe <dequeue+0x1c>
    1d04:	20 81       	ld	r18, Z
    1d06:	31 81       	ldd	r19, Z+1	; 0x01
    1d08:	2d 93       	st	X+, r18
    1d0a:	3c 93       	st	X, r19
    1d0c:	cf 01       	movw	r24, r30
    1d0e:	08 95       	ret

00001d10 <__vector_9>:
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	2f 93       	push	r18
    1d1c:	3f 93       	push	r19
    1d1e:	4f 93       	push	r20
    1d20:	5f 93       	push	r21
    1d22:	6f 93       	push	r22
    1d24:	7f 93       	push	r23
    1d26:	8f 93       	push	r24
    1d28:	9f 93       	push	r25
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    1d32:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
    1d3c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
    1d40:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1d44:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1d48:	30 97       	sbiw	r30, 0x00	; 0
    1d4a:	01 f1       	breq	.+64     	; 0x1d8c <__vector_9+0x7c>
    1d4c:	42 81       	ldd	r20, Z+2	; 0x02
    1d4e:	53 81       	ldd	r21, Z+3	; 0x03
    1d50:	64 81       	ldd	r22, Z+4	; 0x04
    1d52:	75 81       	ldd	r23, Z+5	; 0x05
    1d54:	86 17       	cp	r24, r22
    1d56:	97 07       	cpc	r25, r23
    1d58:	c9 f4       	brne	.+50     	; 0x1d8c <__vector_9+0x7c>
    1d5a:	ca 01       	movw	r24, r20
    1d5c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d60:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d64:	42 1b       	sub	r20, r18
    1d66:	53 0b       	sbc	r21, r19
    1d68:	41 30       	cpi	r20, 0x01	; 1
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	29 f4       	brne	.+10     	; 0x1d78 <__vector_9+0x68>
    1d6e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d72:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d7c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d80:	ef e6       	ldi	r30, 0x6F	; 111
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	82 60       	ori	r24, 0x02	; 2
    1d88:	80 83       	st	Z, r24
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <__vector_9+0x86>
    1d8c:	ef e6       	ldi	r30, 0x6F	; 111
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8d 7f       	andi	r24, 0xFD	; 253
    1d94:	80 83       	st	Z, r24
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	7f 91       	pop	r23
    1da0:	6f 91       	pop	r22
    1da2:	5f 91       	pop	r21
    1da4:	4f 91       	pop	r20
    1da6:	3f 91       	pop	r19
    1da8:	2f 91       	pop	r18
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <__vector_7>:
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	cf 92       	push	r12
    1dc0:	df 92       	push	r13
    1dc2:	ef 92       	push	r14
    1dc4:	ff 92       	push	r15
    1dc6:	2f 93       	push	r18
    1dc8:	3f 93       	push	r19
    1dca:	4f 93       	push	r20
    1dcc:	5f 93       	push	r21
    1dce:	6f 93       	push	r22
    1dd0:	7f 93       	push	r23
    1dd2:	8f 93       	push	r24
    1dd4:	9f 93       	push	r25
    1dd6:	af 93       	push	r26
    1dd8:	bf 93       	push	r27
    1dda:	ef 93       	push	r30
    1ddc:	ff 93       	push	r31
    1dde:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <__data_end>
    1de2:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <__data_end+0x1>
    1de6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dea:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dee:	b0 99       	sbic	0x16, 0	; 22
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <__vector_7+0x5c>
    1df2:	0d 2c       	mov	r0, r13
    1df4:	00 0c       	add	r0, r0
    1df6:	ee 08       	sbc	r14, r14
    1df8:	ff 08       	sbc	r15, r15
    1dfa:	d6 01       	movw	r26, r12
    1dfc:	99 27       	eor	r25, r25
    1dfe:	88 27       	eor	r24, r24
    1e00:	69 01       	movw	r12, r18
    1e02:	e1 2c       	mov	r14, r1
    1e04:	f1 2c       	mov	r15, r1
    1e06:	c8 2a       	or	r12, r24
    1e08:	d9 2a       	or	r13, r25
    1e0a:	ea 2a       	or	r14, r26
    1e0c:	fb 2a       	or	r15, r27
    1e0e:	15 c0       	rjmp	.+42     	; 0x1e3a <__vector_7+0x86>
    1e10:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e14:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	c8 1a       	sub	r12, r24
    1e1c:	d8 0a       	sbc	r13, r24
    1e1e:	0d 2c       	mov	r0, r13
    1e20:	00 0c       	add	r0, r0
    1e22:	ee 08       	sbc	r14, r14
    1e24:	ff 08       	sbc	r15, r15
    1e26:	d6 01       	movw	r26, r12
    1e28:	99 27       	eor	r25, r25
    1e2a:	88 27       	eor	r24, r24
    1e2c:	69 01       	movw	r12, r18
    1e2e:	e1 2c       	mov	r14, r1
    1e30:	f1 2c       	mov	r15, r1
    1e32:	c8 2a       	or	r12, r24
    1e34:	d9 2a       	or	r13, r25
    1e36:	ea 2a       	or	r14, r26
    1e38:	fb 2a       	or	r15, r27
    1e3a:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1e3e:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1e42:	30 97       	sbiw	r30, 0x00	; 0
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <__vector_7+0x94>
    1e46:	42 c0       	rjmp	.+132    	; 0x1ecc <__vector_7+0x118>
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e4e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e50:	8c 19       	sub	r24, r12
    1e52:	9d 09       	sbc	r25, r13
    1e54:	ae 09       	sbc	r26, r14
    1e56:	bf 09       	sbc	r27, r15
    1e58:	18 16       	cp	r1, r24
    1e5a:	19 06       	cpc	r1, r25
    1e5c:	1a 06       	cpc	r1, r26
    1e5e:	1b 06       	cpc	r1, r27
    1e60:	ec f1       	brlt	.+122    	; 0x1edc <__vector_7+0x128>
    1e62:	8a e5       	ldi	r24, 0x5A	; 90
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <dequeue>
    1e6a:	6c e5       	ldi	r22, 0x5C	; 92
    1e6c:	71 e0       	ldi	r23, 0x01	; 1
    1e6e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <enqueueByDeadline>
    1e72:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1e76:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1e7a:	30 97       	sbiw	r30, 0x00	; 0
    1e7c:	39 f1       	breq	.+78     	; 0x1ecc <__vector_7+0x118>
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	a4 81       	ldd	r26, Z+4	; 0x04
    1e84:	b5 81       	ldd	r27, Z+5	; 0x05
    1e86:	8c 19       	sub	r24, r12
    1e88:	9d 09       	sbc	r25, r13
    1e8a:	ae 09       	sbc	r26, r14
    1e8c:	bf 09       	sbc	r27, r15
    1e8e:	18 16       	cp	r1, r24
    1e90:	19 06       	cpc	r1, r25
    1e92:	1a 06       	cpc	r1, r26
    1e94:	1b 06       	cpc	r1, r27
    1e96:	2c f7       	brge	.-54     	; 0x1e62 <__vector_7+0xae>
    1e98:	21 c0       	rjmp	.+66     	; 0x1edc <__vector_7+0x128>
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ea4:	84 1b       	sub	r24, r20
    1ea6:	95 0b       	sbc	r25, r21
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	31 f4       	brne	.+12     	; 0x1eb8 <__vector_7+0x104>
    1eac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eb0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eb4:	2f 5f       	subi	r18, 0xFF	; 255
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ebc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ec0:	ef e6       	ldi	r30, 0x6F	; 111
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 60       	ori	r24, 0x02	; 2
    1ec8:	80 83       	st	Z, r24
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <__vector_7+0x122>
    1ecc:	ef e6       	ldi	r30, 0x6F	; 111
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8d 7f       	andi	r24, 0xFD	; 253
    1ed4:	80 83       	st	Z, r24
    1ed6:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    1eda:	0c c0       	rjmp	.+24     	; 0x1ef4 <__vector_7+0x140>
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ee2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ee4:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1ee8:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1eec:	2a 17       	cp	r18, r26
    1eee:	3b 07       	cpc	r19, r27
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <__vector_7+0x118>
    1ef2:	d3 cf       	rjmp	.-90     	; 0x1e9a <__vector_7+0xe6>
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	bf 91       	pop	r27
    1efa:	af 91       	pop	r26
    1efc:	9f 91       	pop	r25
    1efe:	8f 91       	pop	r24
    1f00:	7f 91       	pop	r23
    1f02:	6f 91       	pop	r22
    1f04:	5f 91       	pop	r21
    1f06:	4f 91       	pop	r20
    1f08:	3f 91       	pop	r19
    1f0a:	2f 91       	pop	r18
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <async>:
    1f1e:	3f 92       	push	r3
    1f20:	4f 92       	push	r4
    1f22:	5f 92       	push	r5
    1f24:	6f 92       	push	r6
    1f26:	7f 92       	push	r7
    1f28:	8f 92       	push	r8
    1f2a:	9f 92       	push	r9
    1f2c:	af 92       	push	r10
    1f2e:	bf 92       	push	r11
    1f30:	cf 92       	push	r12
    1f32:	df 92       	push	r13
    1f34:	ef 92       	push	r14
    1f36:	ff 92       	push	r15
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	2b 01       	movw	r4, r22
    1f42:	3c 01       	movw	r6, r24
    1f44:	49 01       	movw	r8, r18
    1f46:	5a 01       	movw	r10, r20
    1f48:	8f b7       	in	r24, 0x3f	; 63
    1f4a:	80 78       	andi	r24, 0x80	; 128
    1f4c:	38 2e       	mov	r3, r24
    1f4e:	f8 94       	cli
    1f50:	8e e3       	ldi	r24, 0x3E	; 62
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <dequeue>
    1f58:	ec 01       	movw	r28, r24
    1f5a:	1b 87       	std	Y+11, r17	; 0x0b
    1f5c:	0a 87       	std	Y+10, r16	; 0x0a
    1f5e:	fd 86       	std	Y+13, r15	; 0x0d
    1f60:	ec 86       	std	Y+12, r14	; 0x0c
    1f62:	df 86       	std	Y+15, r13	; 0x0f
    1f64:	ce 86       	std	Y+14, r12	; 0x0e
    1f66:	33 20       	and	r3, r3
    1f68:	61 f0       	breq	.+24     	; 0x1f82 <async+0x64>
    1f6a:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <current>
    1f6e:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <current+0x1>
    1f72:	02 80       	ldd	r0, Z+2	; 0x02
    1f74:	f3 81       	ldd	r31, Z+3	; 0x03
    1f76:	e0 2d       	mov	r30, r0
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	a4 81       	ldd	r26, Z+4	; 0x04
    1f7e:	b5 81       	ldd	r27, Z+5	; 0x05
    1f80:	08 c0       	rjmp	.+16     	; 0x1f92 <async+0x74>
    1f82:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timestamp>
    1f86:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timestamp+0x1>
    1f8a:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <timestamp+0x2>
    1f8e:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <timestamp+0x3>
    1f92:	48 0e       	add	r4, r24
    1f94:	59 1e       	adc	r5, r25
    1f96:	6a 1e       	adc	r6, r26
    1f98:	7b 1e       	adc	r7, r27
    1f9a:	4a 82       	std	Y+2, r4	; 0x02
    1f9c:	5b 82       	std	Y+3, r5	; 0x03
    1f9e:	6c 82       	std	Y+4, r6	; 0x04
    1fa0:	7d 82       	std	Y+5, r7	; 0x05
    1fa2:	18 14       	cp	r1, r8
    1fa4:	19 04       	cpc	r1, r9
    1fa6:	1a 04       	cpc	r1, r10
    1fa8:	1b 04       	cpc	r1, r11
    1faa:	44 f0       	brlt	.+16     	; 0x1fbc <async+0x9e>
    1fac:	0f 2e       	mov	r0, r31
    1fae:	88 24       	eor	r8, r8
    1fb0:	8a 94       	dec	r8
    1fb2:	98 2c       	mov	r9, r8
    1fb4:	a8 2c       	mov	r10, r8
    1fb6:	ff e7       	ldi	r31, 0x7F	; 127
    1fb8:	bf 2e       	mov	r11, r31
    1fba:	f0 2d       	mov	r31, r0
    1fbc:	84 0c       	add	r8, r4
    1fbe:	95 1c       	adc	r9, r5
    1fc0:	a6 1c       	adc	r10, r6
    1fc2:	b7 1c       	adc	r11, r7
    1fc4:	8e 82       	std	Y+6, r8	; 0x06
    1fc6:	9f 82       	std	Y+7, r9	; 0x07
    1fc8:	a8 86       	std	Y+8, r10	; 0x08
    1fca:	b9 86       	std	Y+9, r11	; 0x09
    1fcc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    1fd0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    1fd4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fd8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fdc:	b0 99       	sbic	0x16, 0	; 22
    1fde:	0e c0       	rjmp	.+28     	; 0x1ffc <async+0xde>
    1fe0:	09 2e       	mov	r0, r25
    1fe2:	00 0c       	add	r0, r0
    1fe4:	aa 0b       	sbc	r26, r26
    1fe6:	bb 0b       	sbc	r27, r27
    1fe8:	dc 01       	movw	r26, r24
    1fea:	99 27       	eor	r25, r25
    1fec:	88 27       	eor	r24, r24
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	84 2b       	or	r24, r20
    1ff4:	95 2b       	or	r25, r21
    1ff6:	a6 2b       	or	r26, r22
    1ff8:	b7 2b       	or	r27, r23
    1ffa:	13 c0       	rjmp	.+38     	; 0x2022 <async+0x104>
    1ffc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2000:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	09 2e       	mov	r0, r25
    2008:	00 0c       	add	r0, r0
    200a:	aa 0b       	sbc	r26, r26
    200c:	bb 0b       	sbc	r27, r27
    200e:	dc 01       	movw	r26, r24
    2010:	99 27       	eor	r25, r25
    2012:	88 27       	eor	r24, r24
    2014:	a9 01       	movw	r20, r18
    2016:	60 e0       	ldi	r22, 0x00	; 0
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	84 2b       	or	r24, r20
    201c:	95 2b       	or	r25, r21
    201e:	a6 2b       	or	r26, r22
    2020:	b7 2b       	or	r27, r23
    2022:	48 1a       	sub	r4, r24
    2024:	59 0a       	sbc	r5, r25
    2026:	6a 0a       	sbc	r6, r26
    2028:	7b 0a       	sbc	r7, r27
    202a:	14 14       	cp	r1, r4
    202c:	15 04       	cpc	r1, r5
    202e:	16 04       	cpc	r1, r6
    2030:	17 04       	cpc	r1, r7
    2032:	ac f5       	brge	.+106    	; 0x209e <async+0x180>
    2034:	6a e5       	ldi	r22, 0x5A	; 90
    2036:	71 e0       	ldi	r23, 0x01	; 1
    2038:	ce 01       	movw	r24, r28
    203a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <enqueueByBaseline>
    203e:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    2042:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    2046:	30 97       	sbiw	r30, 0x00	; 0
    2048:	21 f1       	breq	.+72     	; 0x2092 <async+0x174>
    204a:	82 81       	ldd	r24, Z+2	; 0x02
    204c:	93 81       	ldd	r25, Z+3	; 0x03
    204e:	a4 81       	ldd	r26, Z+4	; 0x04
    2050:	b5 81       	ldd	r27, Z+5	; 0x05
    2052:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    2056:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    205a:	2a 17       	cp	r18, r26
    205c:	3b 07       	cpc	r19, r27
    205e:	c9 f4       	brne	.+50     	; 0x2092 <async+0x174>
    2060:	9c 01       	movw	r18, r24
    2062:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2066:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    206a:	84 1b       	sub	r24, r20
    206c:	95 0b       	sbc	r25, r21
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	31 f4       	brne	.+12     	; 0x207e <async+0x160>
    2072:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2076:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    207a:	2f 5f       	subi	r18, 0xFF	; 255
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    2082:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2086:	ef e6       	ldi	r30, 0x6F	; 111
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	82 60       	ori	r24, 0x02	; 2
    208e:	80 83       	st	Z, r24
    2090:	41 c0       	rjmp	.+130    	; 0x2114 <async+0x1f6>
    2092:	ef e6       	ldi	r30, 0x6F	; 111
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8d 7f       	andi	r24, 0xFD	; 253
    209a:	80 83       	st	Z, r24
    209c:	3b c0       	rjmp	.+118    	; 0x2114 <async+0x1f6>
    209e:	6c e5       	ldi	r22, 0x5C	; 92
    20a0:	71 e0       	ldi	r23, 0x01	; 1
    20a2:	ce 01       	movw	r24, r28
    20a4:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <enqueueByDeadline>
    20a8:	33 20       	and	r3, r3
    20aa:	b9 f1       	breq	.+110    	; 0x211a <async+0x1fc>
    20ac:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <threadPool>
    20b0:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <threadPool+0x1>
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	81 f1       	breq	.+96     	; 0x2118 <async+0x1fa>
    20b8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <activeStack>
    20bc:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <activeStack+0x1>
    20c0:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <msgQ>
    20c4:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <msgQ+0x1>
    20c8:	02 81       	ldd	r16, Z+2	; 0x02
    20ca:	13 81       	ldd	r17, Z+3	; 0x03
    20cc:	d9 01       	movw	r26, r18
    20ce:	16 96       	adiw	r26, 0x06	; 6
    20d0:	4d 91       	ld	r20, X+
    20d2:	5d 91       	ld	r21, X+
    20d4:	6d 91       	ld	r22, X+
    20d6:	7c 91       	ld	r23, X
    20d8:	19 97       	sbiw	r26, 0x09	; 9
    20da:	d8 01       	movw	r26, r16
    20dc:	16 96       	adiw	r26, 0x06	; 6
    20de:	0d 91       	ld	r16, X+
    20e0:	1d 91       	ld	r17, X+
    20e2:	2d 91       	ld	r18, X+
    20e4:	3c 91       	ld	r19, X
    20e6:	19 97       	sbiw	r26, 0x09	; 9
    20e8:	40 1b       	sub	r20, r16
    20ea:	51 0b       	sbc	r21, r17
    20ec:	62 0b       	sbc	r22, r18
    20ee:	73 0b       	sbc	r23, r19
    20f0:	9a f4       	brpl	.+38     	; 0x2118 <async+0x1fa>
    20f2:	dc 01       	movw	r26, r24
    20f4:	2d 91       	ld	r18, X+
    20f6:	3c 91       	ld	r19, X
    20f8:	11 97       	sbiw	r26, 0x01	; 1
    20fa:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <threadPool+0x1>
    20fe:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <threadPool>
    2102:	ed 93       	st	X+, r30
    2104:	fc 93       	st	X, r31
    2106:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <activeStack+0x1>
    210a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <activeStack>
    210e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <dispatch>
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <async+0x1fa>
    2114:	33 20       	and	r3, r3
    2116:	09 f0       	breq	.+2      	; 0x211a <async+0x1fc>
    2118:	78 94       	sei
    211a:	ce 01       	movw	r24, r28
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	bf 90       	pop	r11
    212e:	af 90       	pop	r10
    2130:	9f 90       	pop	r9
    2132:	8f 90       	pop	r8
    2134:	7f 90       	pop	r7
    2136:	6f 90       	pop	r6
    2138:	5f 90       	pop	r5
    213a:	4f 90       	pop	r4
    213c:	3f 90       	pop	r3
    213e:	08 95       	ret

00002140 <sync>:
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	7b 01       	movw	r14, r22
    2154:	6a 01       	movw	r12, r20
    2156:	1f b7       	in	r17, 0x3f	; 63
    2158:	10 78       	andi	r17, 0x80	; 128
    215a:	f8 94       	cli
    215c:	a8 81       	ld	r26, Y
    215e:	b9 81       	ldd	r27, Y+1	; 0x01
    2160:	10 97       	sbiw	r26, 0x00	; 0
    2162:	61 f1       	breq	.+88     	; 0x21bc <sync+0x7c>
    2164:	14 96       	adiw	r26, 0x04	; 4
    2166:	ed 91       	ld	r30, X+
    2168:	fc 91       	ld	r31, X
    216a:	15 97       	sbiw	r26, 0x05	; 5
    216c:	30 97       	sbiw	r30, 0x00	; 0
    216e:	41 f0       	breq	.+16     	; 0x2180 <sync+0x40>
    2170:	a0 81       	ld	r26, Z
    2172:	b1 81       	ldd	r27, Z+1	; 0x01
    2174:	14 96       	adiw	r26, 0x04	; 4
    2176:	ed 91       	ld	r30, X+
    2178:	fc 91       	ld	r31, X
    217a:	15 97       	sbiw	r26, 0x05	; 5
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	c1 f7       	brne	.-16     	; 0x2170 <sync+0x30>
    2180:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <current>
    2184:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <current+0x1>
    2188:	2a 17       	cp	r18, r26
    218a:	3b 07       	cpc	r19, r27
    218c:	21 f0       	breq	.+8      	; 0x2196 <sync+0x56>
    218e:	11 23       	and	r17, r17
    2190:	09 f4       	brne	.+2      	; 0x2194 <sync+0x54>
    2192:	3d c0       	rjmp	.+122    	; 0x220e <sync+0xce>
    2194:	07 c0       	rjmp	.+14     	; 0x21a4 <sync+0x64>
    2196:	11 23       	and	r17, r17
    2198:	09 f4       	brne	.+2      	; 0x219c <sync+0x5c>
    219a:	3c c0       	rjmp	.+120    	; 0x2214 <sync+0xd4>
    219c:	78 94       	sei
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	9f ef       	ldi	r25, 0xFF	; 255
    21a2:	52 c0       	rjmp	.+164    	; 0x2248 <sync+0x108>
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	d1 f1       	breq	.+116    	; 0x2220 <sync+0xe0>
    21ac:	fc 01       	movw	r30, r24
    21ae:	15 82       	std	Z+5, r1	; 0x05
    21b0:	14 82       	std	Z+4, r1	; 0x04
    21b2:	36 c0       	rjmp	.+108    	; 0x2220 <sync+0xe0>
    21b4:	78 94       	sei
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	46 c0       	rjmp	.+140    	; 0x2248 <sync+0x108>
    21bc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <current>
    21c0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <current+0x1>
    21c4:	99 83       	std	Y+1, r25	; 0x01
    21c6:	88 83       	st	Y, r24
    21c8:	11 23       	and	r17, r17
    21ca:	29 f0       	breq	.+10     	; 0x21d6 <sync+0x96>
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <sync+0x96>
    21d4:	78 94       	sei
    21d6:	b6 01       	movw	r22, r12
    21d8:	ce 01       	movw	r24, r28
    21da:	f7 01       	movw	r30, r14
    21dc:	09 95       	icall
    21de:	f8 2e       	mov	r15, r24
    21e0:	09 2f       	mov	r16, r25
    21e2:	8f b7       	in	r24, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	19 82       	std	Y+1, r1	; 0x01
    21e8:	18 82       	st	Y, r1
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	91 05       	cpc	r25, r1
    21f2:	38 f0       	brcs	.+14     	; 0x2202 <sync+0xc2>
    21f4:	1b 82       	std	Y+3, r1	; 0x03
    21f6:	1a 82       	std	Y+2, r1	; 0x02
    21f8:	fc 01       	movw	r30, r24
    21fa:	15 82       	std	Z+5, r1	; 0x05
    21fc:	14 82       	std	Z+4, r1	; 0x04
    21fe:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <dispatch>
    2202:	11 23       	and	r17, r17
    2204:	51 f0       	breq	.+20     	; 0x221a <sync+0xda>
    2206:	78 94       	sei
    2208:	8f 2d       	mov	r24, r15
    220a:	90 2f       	mov	r25, r16
    220c:	1d c0       	rjmp	.+58     	; 0x2248 <sync+0x108>
    220e:	8f ef       	ldi	r24, 0xFF	; 255
    2210:	9f ef       	ldi	r25, 0xFF	; 255
    2212:	1a c0       	rjmp	.+52     	; 0x2248 <sync+0x108>
    2214:	8f ef       	ldi	r24, 0xFF	; 255
    2216:	9f ef       	ldi	r25, 0xFF	; 255
    2218:	17 c0       	rjmp	.+46     	; 0x2248 <sync+0x108>
    221a:	8f 2d       	mov	r24, r15
    221c:	90 2f       	mov	r25, r16
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <sync+0x108>
    2220:	3b 83       	std	Y+3, r19	; 0x03
    2222:	2a 83       	std	Y+2, r18	; 0x02
    2224:	f9 01       	movw	r30, r18
    2226:	d5 83       	std	Z+5, r29	; 0x05
    2228:	c4 83       	std	Z+4, r28	; 0x04
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <dispatch>
    2230:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <current>
    2234:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <current+0x1>
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	89 2b       	or	r24, r25
    223e:	09 f4       	brne	.+2      	; 0x2242 <sync+0x102>
    2240:	b9 cf       	rjmp	.-142    	; 0x21b4 <sync+0x74>
    2242:	f9 83       	std	Y+1, r31	; 0x01
    2244:	e8 83       	st	Y, r30
    2246:	c2 cf       	rjmp	.-124    	; 0x21cc <sync+0x8c>
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	08 95       	ret

0000225a <run>:
    225a:	00 91 38 01 	lds	r16, 0x0138	; 0x800138 <current>
    225e:	10 91 39 01 	lds	r17, 0x0139	; 0x800139 <current+0x1>
    2262:	8c e5       	ldi	r24, 0x5C	; 92
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <dequeue>
    226a:	ec 01       	movw	r28, r24
    226c:	d8 01       	movw	r26, r16
    226e:	13 96       	adiw	r26, 0x03	; 3
    2270:	9c 93       	st	X, r25
    2272:	8e 93       	st	-X, r24
    2274:	12 97       	sbiw	r26, 0x02	; 2
    2276:	78 94       	sei
    2278:	4e 85       	ldd	r20, Y+14	; 0x0e
    227a:	5f 85       	ldd	r21, Y+15	; 0x0f
    227c:	6c 85       	ldd	r22, Y+12	; 0x0c
    227e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2280:	8a 85       	ldd	r24, Y+10	; 0x0a
    2282:	9b 85       	ldd	r25, Y+11	; 0x0b
    2284:	0e 94 a0 10 	call	0x2140	; 0x2140 <sync>
    2288:	8f b7       	in	r24, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <msgPool>
    2290:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <msgPool+0x1>
    2294:	99 83       	std	Y+1, r25	; 0x01
    2296:	88 83       	st	Y, r24
    2298:	d0 93 3f 01 	sts	0x013F, r29	; 0x80013f <msgPool+0x1>
    229c:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <msgPool>
    22a0:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <activeStack>
    22a4:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <activeStack+0x1>
    22a8:	00 81       	ld	r16, Z
    22aa:	11 81       	ldd	r17, Z+1	; 0x01
    22ac:	e8 01       	movw	r28, r16
    22ae:	2a 81       	ldd	r18, Y+2	; 0x02
    22b0:	3b 81       	ldd	r19, Y+3	; 0x03
    22b2:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <msgQ>
    22b6:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <msgQ+0x1>
    22ba:	10 97       	sbiw	r26, 0x00	; 0
    22bc:	c1 f0       	breq	.+48     	; 0x22ee <run+0x94>
    22be:	21 15       	cp	r18, r1
    22c0:	31 05       	cpc	r19, r1
    22c2:	59 f2       	breq	.-106    	; 0x225a <run>
    22c4:	16 96       	adiw	r26, 0x06	; 6
    22c6:	8d 91       	ld	r24, X+
    22c8:	9d 91       	ld	r25, X+
    22ca:	0d 90       	ld	r0, X+
    22cc:	bc 91       	ld	r27, X
    22ce:	a0 2d       	mov	r26, r0
    22d0:	e9 01       	movw	r28, r18
    22d2:	4e 81       	ldd	r20, Y+6	; 0x06
    22d4:	5f 81       	ldd	r21, Y+7	; 0x07
    22d6:	68 85       	ldd	r22, Y+8	; 0x08
    22d8:	79 85       	ldd	r23, Y+9	; 0x09
    22da:	84 1b       	sub	r24, r20
    22dc:	95 0b       	sbc	r25, r21
    22de:	a6 0b       	sbc	r26, r22
    22e0:	b7 0b       	sbc	r27, r23
    22e2:	18 16       	cp	r1, r24
    22e4:	19 06       	cpc	r1, r25
    22e6:	1a 06       	cpc	r1, r26
    22e8:	1b 06       	cpc	r1, r27
    22ea:	0c f0       	brlt	.+2      	; 0x22ee <run+0x94>
    22ec:	b6 cf       	rjmp	.-148    	; 0x225a <run>
    22ee:	10 93 3b 01 	sts	0x013B, r17	; 0x80013b <activeStack+0x1>
    22f2:	00 93 3a 01 	sts	0x013A, r16	; 0x80013a <activeStack>
    22f6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <threadPool>
    22fa:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <threadPool+0x1>
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
    2302:	f0 93 3d 01 	sts	0x013D, r31	; 0x80013d <threadPool+0x1>
    2306:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <threadPool>
    230a:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <activeStack>
    230e:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <activeStack+0x1>
    2312:	14 96       	adiw	r26, 0x04	; 4
    2314:	ed 91       	ld	r30, X+
    2316:	fc 91       	ld	r31, X
    2318:	15 97       	sbiw	r26, 0x05	; 5
    231a:	30 97       	sbiw	r30, 0x00	; 0
    231c:	41 f0       	breq	.+16     	; 0x232e <run+0xd4>
    231e:	a0 81       	ld	r26, Z
    2320:	b1 81       	ldd	r27, Z+1	; 0x01
    2322:	14 96       	adiw	r26, 0x04	; 4
    2324:	ed 91       	ld	r30, X+
    2326:	fc 91       	ld	r31, X
    2328:	15 97       	sbiw	r26, 0x05	; 5
    232a:	30 97       	sbiw	r30, 0x00	; 0
    232c:	c1 f7       	brne	.-16     	; 0x231e <run+0xc4>
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <dispatch>
    2334:	92 cf       	rjmp	.-220    	; 0x225a <run>

00002336 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2336:	42 31       	cpi	r20, 0x12	; 18
    2338:	b8 f4       	brcc	.+46     	; 0x2368 <install+0x32>
        char status;
        DISABLE(status);
    233a:	2f b7       	in	r18, 0x3f	; 63
    233c:	f8 94       	cli
        otable[i] = obj;
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	44 0f       	add	r20, r20
    2342:	55 1f       	adc	r21, r21
    2344:	fa 01       	movw	r30, r20
    2346:	e2 5a       	subi	r30, 0xA2	; 162
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
        mtable[i] = m;
    234e:	fa 01       	movw	r30, r20
    2350:	ea 50       	subi	r30, 0x0A	; 10
    2352:	fe 4f       	sbci	r31, 0xFE	; 254
    2354:	71 83       	std	Z+1, r23	; 0x01
    2356:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	fc 01       	movw	r30, r24
    235e:	53 83       	std	Z+3, r21	; 0x03
    2360:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2362:	22 23       	and	r18, r18
    2364:	0c f4       	brge	.+2      	; 0x2368 <install+0x32>
    2366:	78 94       	sei
    2368:	08 95       	ret

0000236a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    236a:	8c 01       	movw	r16, r24
    236c:	7b 01       	movw	r14, r22
    236e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2370:	8f b7       	in	r24, 0x3f	; 63
    2372:	f8 94       	cli
    initialize();
    2374:	0e 94 8d 05 	call	0xb1a	; 0xb1a <initialize>
    ENABLE(1);
    2378:	78 94       	sei
    if (m != NULL)
    237a:	e1 14       	cp	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	41 f0       	breq	.+16     	; 0x2390 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	a9 01       	movw	r20, r18
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	cb 01       	movw	r24, r22
    238c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <async>
    DISABLE(status);
    2390:	8f b7       	in	r24, 0x3f	; 63
    2392:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2394:	0e 94 18 06 	call	0xc30	; 0xc30 <schedule>
    ENABLE(1);
    2398:	78 94       	sei
    while (1) {
        SLEEP();
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	83 bf       	out	0x33, r24	; 51
    239e:	88 95       	sleep
    23a0:	fd cf       	rjmp	.-6      	; 0x239c <tinytimber+0x32>

000023a2 <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    23a2:	67 2b       	or	r22, r23
    23a4:	79 f0       	breq	.+30     	; 0x23c4 <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    23a6:	4e b1       	in	r20, 0x0e	; 14
    23a8:	21 e0       	ldi	r18, 0x01	; 1
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	b9 01       	movw	r22, r18
    23ae:	fc 01       	movw	r30, r24
    23b0:	04 80       	ldd	r0, Z+4	; 0x04
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <writeBit+0x16>
    23b4:	66 0f       	add	r22, r22
    23b6:	77 1f       	adc	r23, r23
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <writeBit+0x12>
    23bc:	cb 01       	movw	r24, r22
    23be:	84 2b       	or	r24, r20
    23c0:	8e b9       	out	0x0e, r24	; 14
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    23c4:	4e b1       	in	r20, 0x0e	; 14
    23c6:	21 e0       	ldi	r18, 0x01	; 1
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	b9 01       	movw	r22, r18
    23cc:	fc 01       	movw	r30, r24
    23ce:	04 80       	ldd	r0, Z+4	; 0x04
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <writeBit+0x34>
    23d2:	66 0f       	add	r22, r22
    23d4:	77 1f       	adc	r23, r23
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <writeBit+0x30>
    23da:	cb 01       	movw	r24, r22
    23dc:	80 95       	com	r24
    23de:	84 23       	and	r24, r20
    23e0:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	08 95       	ret

000023e8 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    23e8:	4e b1       	in	r20, 0x0e	; 14
    23ea:	21 e0       	ldi	r18, 0x01	; 1
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	fc 01       	movw	r30, r24
    23f0:	04 80       	ldd	r0, Z+4	; 0x04
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <toggleBit+0x10>
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <toggleBit+0xc>
    23fc:	24 27       	eor	r18, r20
    23fe:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	08 95       	ret

00002406 <__divmodhi4>:
    2406:	97 fb       	bst	r25, 7
    2408:	07 2e       	mov	r0, r23
    240a:	16 f4       	brtc	.+4      	; 0x2410 <__divmodhi4+0xa>
    240c:	00 94       	com	r0
    240e:	07 d0       	rcall	.+14     	; 0x241e <__divmodhi4_neg1>
    2410:	77 fd       	sbrc	r23, 7
    2412:	09 d0       	rcall	.+18     	; 0x2426 <__divmodhi4_neg2>
    2414:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodhi4>
    2418:	07 fc       	sbrc	r0, 7
    241a:	05 d0       	rcall	.+10     	; 0x2426 <__divmodhi4_neg2>
    241c:	3e f4       	brtc	.+14     	; 0x242c <__divmodhi4_exit>

0000241e <__divmodhi4_neg1>:
    241e:	90 95       	com	r25
    2420:	81 95       	neg	r24
    2422:	9f 4f       	sbci	r25, 0xFF	; 255
    2424:	08 95       	ret

00002426 <__divmodhi4_neg2>:
    2426:	70 95       	com	r23
    2428:	61 95       	neg	r22
    242a:	7f 4f       	sbci	r23, 0xFF	; 255

0000242c <__divmodhi4_exit>:
    242c:	08 95       	ret

0000242e <__divmodsi4>:
    242e:	05 2e       	mov	r0, r21
    2430:	97 fb       	bst	r25, 7
    2432:	1e f4       	brtc	.+6      	; 0x243a <__divmodsi4+0xc>
    2434:	00 94       	com	r0
    2436:	0e 94 2e 12 	call	0x245c	; 0x245c <__negsi2>
    243a:	57 fd       	sbrc	r21, 7
    243c:	07 d0       	rcall	.+14     	; 0x244c <__divmodsi4_neg2>
    243e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__udivmodsi4>
    2442:	07 fc       	sbrc	r0, 7
    2444:	03 d0       	rcall	.+6      	; 0x244c <__divmodsi4_neg2>
    2446:	4e f4       	brtc	.+18     	; 0x245a <__divmodsi4_exit>
    2448:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__negsi2>

0000244c <__divmodsi4_neg2>:
    244c:	50 95       	com	r21
    244e:	40 95       	com	r20
    2450:	30 95       	com	r19
    2452:	21 95       	neg	r18
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	4f 4f       	sbci	r20, 0xFF	; 255
    2458:	5f 4f       	sbci	r21, 0xFF	; 255

0000245a <__divmodsi4_exit>:
    245a:	08 95       	ret

0000245c <__negsi2>:
    245c:	90 95       	com	r25
    245e:	80 95       	com	r24
    2460:	70 95       	com	r23
    2462:	61 95       	neg	r22
    2464:	7f 4f       	sbci	r23, 0xFF	; 255
    2466:	8f 4f       	sbci	r24, 0xFF	; 255
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	08 95       	ret

0000246c <__usmulhisi3>:
    246c:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__umulhisi3>

00002470 <__usmulhisi3_tail>:
    2470:	b7 ff       	sbrs	r27, 7
    2472:	08 95       	ret
    2474:	82 1b       	sub	r24, r18
    2476:	93 0b       	sbc	r25, r19
    2478:	08 95       	ret

0000247a <__udivmodhi4>:
    247a:	aa 1b       	sub	r26, r26
    247c:	bb 1b       	sub	r27, r27
    247e:	51 e1       	ldi	r21, 0x11	; 17
    2480:	07 c0       	rjmp	.+14     	; 0x2490 <__udivmodhi4_ep>

00002482 <__udivmodhi4_loop>:
    2482:	aa 1f       	adc	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	a6 17       	cp	r26, r22
    2488:	b7 07       	cpc	r27, r23
    248a:	10 f0       	brcs	.+4      	; 0x2490 <__udivmodhi4_ep>
    248c:	a6 1b       	sub	r26, r22
    248e:	b7 0b       	sbc	r27, r23

00002490 <__udivmodhi4_ep>:
    2490:	88 1f       	adc	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	5a 95       	dec	r21
    2496:	a9 f7       	brne	.-22     	; 0x2482 <__udivmodhi4_loop>
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	08 95       	ret

000024a2 <__udivmodsi4>:
    24a2:	a1 e2       	ldi	r26, 0x21	; 33
    24a4:	1a 2e       	mov	r1, r26
    24a6:	aa 1b       	sub	r26, r26
    24a8:	bb 1b       	sub	r27, r27
    24aa:	fd 01       	movw	r30, r26
    24ac:	0d c0       	rjmp	.+26     	; 0x24c8 <__udivmodsi4_ep>

000024ae <__udivmodsi4_loop>:
    24ae:	aa 1f       	adc	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	ee 1f       	adc	r30, r30
    24b4:	ff 1f       	adc	r31, r31
    24b6:	a2 17       	cp	r26, r18
    24b8:	b3 07       	cpc	r27, r19
    24ba:	e4 07       	cpc	r30, r20
    24bc:	f5 07       	cpc	r31, r21
    24be:	20 f0       	brcs	.+8      	; 0x24c8 <__udivmodsi4_ep>
    24c0:	a2 1b       	sub	r26, r18
    24c2:	b3 0b       	sbc	r27, r19
    24c4:	e4 0b       	sbc	r30, r20
    24c6:	f5 0b       	sbc	r31, r21

000024c8 <__udivmodsi4_ep>:
    24c8:	66 1f       	adc	r22, r22
    24ca:	77 1f       	adc	r23, r23
    24cc:	88 1f       	adc	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	1a 94       	dec	r1
    24d2:	69 f7       	brne	.-38     	; 0x24ae <__udivmodsi4_loop>
    24d4:	60 95       	com	r22
    24d6:	70 95       	com	r23
    24d8:	80 95       	com	r24
    24da:	90 95       	com	r25
    24dc:	9b 01       	movw	r18, r22
    24de:	ac 01       	movw	r20, r24
    24e0:	bd 01       	movw	r22, r26
    24e2:	cf 01       	movw	r24, r30
    24e4:	08 95       	ret

000024e6 <__umulhisi3>:
    24e6:	a2 9f       	mul	r26, r18
    24e8:	b0 01       	movw	r22, r0
    24ea:	b3 9f       	mul	r27, r19
    24ec:	c0 01       	movw	r24, r0
    24ee:	a3 9f       	mul	r26, r19
    24f0:	70 0d       	add	r23, r0
    24f2:	81 1d       	adc	r24, r1
    24f4:	11 24       	eor	r1, r1
    24f6:	91 1d       	adc	r25, r1
    24f8:	b2 9f       	mul	r27, r18
    24fa:	70 0d       	add	r23, r0
    24fc:	81 1d       	adc	r24, r1
    24fe:	11 24       	eor	r1, r1
    2500:	91 1d       	adc	r25, r1
    2502:	08 95       	ret

00002504 <setjmp>:
    2504:	dc 01       	movw	r26, r24
    2506:	2d 92       	st	X+, r2
    2508:	3d 92       	st	X+, r3
    250a:	4d 92       	st	X+, r4
    250c:	5d 92       	st	X+, r5
    250e:	6d 92       	st	X+, r6
    2510:	7d 92       	st	X+, r7
    2512:	8d 92       	st	X+, r8
    2514:	9d 92       	st	X+, r9
    2516:	ad 92       	st	X+, r10
    2518:	bd 92       	st	X+, r11
    251a:	cd 92       	st	X+, r12
    251c:	dd 92       	st	X+, r13
    251e:	ed 92       	st	X+, r14
    2520:	fd 92       	st	X+, r15
    2522:	0d 93       	st	X+, r16
    2524:	1d 93       	st	X+, r17
    2526:	cd 93       	st	X+, r28
    2528:	dd 93       	st	X+, r29
    252a:	ff 91       	pop	r31
    252c:	ef 91       	pop	r30
    252e:	8d b7       	in	r24, 0x3d	; 61
    2530:	8d 93       	st	X+, r24
    2532:	8e b7       	in	r24, 0x3e	; 62
    2534:	8d 93       	st	X+, r24
    2536:	8f b7       	in	r24, 0x3f	; 63
    2538:	8d 93       	st	X+, r24
    253a:	ed 93       	st	X+, r30
    253c:	fd 93       	st	X+, r31
    253e:	88 27       	eor	r24, r24
    2540:	99 27       	eor	r25, r25
    2542:	09 94       	ijmp

00002544 <longjmp>:
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	91 05       	cpc	r25, r1
    254c:	81 1d       	adc	r24, r1
    254e:	2d 90       	ld	r2, X+
    2550:	3d 90       	ld	r3, X+
    2552:	4d 90       	ld	r4, X+
    2554:	5d 90       	ld	r5, X+
    2556:	6d 90       	ld	r6, X+
    2558:	7d 90       	ld	r7, X+
    255a:	8d 90       	ld	r8, X+
    255c:	9d 90       	ld	r9, X+
    255e:	ad 90       	ld	r10, X+
    2560:	bd 90       	ld	r11, X+
    2562:	cd 90       	ld	r12, X+
    2564:	dd 90       	ld	r13, X+
    2566:	ed 90       	ld	r14, X+
    2568:	fd 90       	ld	r15, X+
    256a:	0d 91       	ld	r16, X+
    256c:	1d 91       	ld	r17, X+
    256e:	cd 91       	ld	r28, X+
    2570:	dd 91       	ld	r29, X+
    2572:	ed 91       	ld	r30, X+
    2574:	fd 91       	ld	r31, X+
    2576:	0d 90       	ld	r0, X+
    2578:	f8 94       	cli
    257a:	fe bf       	out	0x3e, r31	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	ed bf       	out	0x3d, r30	; 61
    2580:	ed 91       	ld	r30, X+
    2582:	fd 91       	ld	r31, X+
    2584:	09 94       	ijmp

00002586 <_exit>:
    2586:	f8 94       	cli

00002588 <__stop_program>:
    2588:	ff cf       	rjmp	.-2      	; 0x2588 <__stop_program>
