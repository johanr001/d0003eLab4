
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002574  00002608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800154  00800154  0000265c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000268c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f43  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012be  00000000  00000000  000068ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a02  00000000  00000000  00007bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e8c  00000000  00000000  000095c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a65  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033a1  00000000  00000000  0000aeb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000e252  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_1>
       8:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_2>
       c:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_3>
      10:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_4>
      14:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_9>
      28:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_10>
      2c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_11>
      30:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_12>
      34:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_13>
      38:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_14>
      3c:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_15>
      40:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_16>
      44:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__vector_17>
      48:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_18>
      4c:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_19>
      50:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_20>
      54:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__vector_21>
      58:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e7       	ldi	r30, 0x74	; 116
      70:	f5 e2       	ldi	r31, 0x25	; 37
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 35       	cpi	r26, 0x54	; 84
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e5       	ldi	r26, 0x54	; 84
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 3a       	cpi	r26, 0xA7	; 167
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 92 04 	call	0x924	; 0x924 <main>
      92:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <holdCheckerUp>:
	}
	toggle = !toggle;
	AFTER(MSEC(50), self, pressSimulator, 0);
	
	return 0;
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	fc 01       	movw	r30, r24
      ac:	20 85       	ldd	r18, Z+8	; 0x08
      ae:	22 23       	and	r18, r18
      b0:	41 f1       	breq	.+80     	; 0x102 <holdCheckerUp+0x68>
      b2:	1e 99       	sbic	0x03, 6	; 3
      b4:	24 c0       	rjmp	.+72     	; 0xfe <holdCheckerUp+0x64>
      b6:	ec 01       	movw	r28, r24
      b8:	04 81       	ldd	r16, Z+4	; 0x04
      ba:	15 81       	ldd	r17, Z+5	; 0x05
      bc:	c1 2c       	mov	r12, r1
      be:	d1 2c       	mov	r13, r1
      c0:	0f 2e       	mov	r0, r31
      c2:	f8 e2       	ldi	r31, 0x28	; 40
      c4:	ef 2e       	mov	r14, r31
      c6:	f3 e0       	ldi	r31, 0x03	; 3
      c8:	ff 2e       	mov	r15, r31
      ca:	f0 2d       	mov	r31, r0
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	a9 01       	movw	r20, r18
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	cb 01       	movw	r24, r22
      d8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
      dc:	0f 2e       	mov	r0, r31
      de:	fd e4       	ldi	r31, 0x4D	; 77
      e0:	ef 2e       	mov	r14, r31
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ff 2e       	mov	r15, r31
      e6:	f0 2d       	mov	r31, r0
      e8:	8e 01       	movw	r16, r28
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	a9 01       	movw	r20, r18
      f0:	65 e3       	ldi	r22, 0x35	; 53
      f2:	7c e0       	ldi	r23, 0x0C	; 12
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
      fc:	02 c0       	rjmp	.+4      	; 0x102 <holdCheckerUp+0x68>
      fe:	fc 01       	movw	r30, r24
     100:	10 86       	std	Z+8, r1	; 0x08
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	1f 91       	pop	r17
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	df 90       	pop	r13
     114:	cf 90       	pop	r12
     116:	08 95       	ret

00000118 <holdCheckerDown>:
     118:	cf 92       	push	r12
     11a:	df 92       	push	r13
     11c:	ef 92       	push	r14
     11e:	ff 92       	push	r15
     120:	0f 93       	push	r16
     122:	1f 93       	push	r17
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	fc 01       	movw	r30, r24
     12a:	21 85       	ldd	r18, Z+9	; 0x09
     12c:	22 23       	and	r18, r18
     12e:	41 f1       	breq	.+80     	; 0x180 <holdCheckerDown+0x68>
     130:	1f 99       	sbic	0x03, 7	; 3
     132:	24 c0       	rjmp	.+72     	; 0x17c <holdCheckerDown+0x64>
     134:	ec 01       	movw	r28, r24
     136:	04 81       	ldd	r16, Z+4	; 0x04
     138:	15 81       	ldd	r17, Z+5	; 0x05
     13a:	c1 2c       	mov	r12, r1
     13c:	d1 2c       	mov	r13, r1
     13e:	0f 2e       	mov	r0, r31
     140:	f5 e7       	ldi	r31, 0x75	; 117
     142:	ef 2e       	mov	r14, r31
     144:	f3 e0       	ldi	r31, 0x03	; 3
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	a9 01       	movw	r20, r18
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	cb 01       	movw	r24, r22
     156:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     15a:	0f 2e       	mov	r0, r31
     15c:	fc e8       	ldi	r31, 0x8C	; 140
     15e:	ef 2e       	mov	r14, r31
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ff 2e       	mov	r15, r31
     164:	f0 2d       	mov	r31, r0
     166:	8e 01       	movw	r16, r28
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	a9 01       	movw	r20, r18
     16e:	65 e3       	ldi	r22, 0x35	; 53
     170:	7c e0       	ldi	r23, 0x0C	; 12
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     17a:	02 c0       	rjmp	.+4      	; 0x180 <holdCheckerDown+0x68>
     17c:	fc 01       	movw	r30, r24
     17e:	11 86       	std	Z+9, r1	; 0x09
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	08 95       	ret

00000196 <btn_init>:

// btn_init() sätter upp ingångar med pull-ups och aktiverar pin change interrupts.
// Detta gör att knapptryckningar kan generera avbrott och anropa checkButtons.
void btn_init(){
	// Aktivera intern pull-up på PB7, PB6, PB4 samt PE3, PE2.
	PORTB |= (1<<PB7) | (1<<PB6) | (1<<PB4);
     196:	85 b1       	in	r24, 0x05	; 5
     198:	80 6d       	ori	r24, 0xD0	; 208
     19a:	85 b9       	out	0x05, r24	; 5
	PORTE |= (1<<PE3) | (1<<PE2);
     19c:	8e b1       	in	r24, 0x0e	; 14
     19e:	8c 60       	ori	r24, 0x0C	; 12
     1a0:	8e b9       	out	0x0e, r24	; 14
	
	// Slå på pin change interrupts för PCIE1, PCIE0.
	EIMSK |= (1<<PCIE1) | (1<<PCIE0);
     1a2:	8d b3       	in	r24, 0x1d	; 29
     1a4:	80 6c       	ori	r24, 0xC0	; 192
     1a6:	8d bb       	out	0x1d, r24	; 29
	
	// Masker för vilka pinnar som ska övervakas av PCINT0 och PCINT1.
	PCMSK0 |= (1<<PCINT3) | (1<<PCINT2);
     1a8:	eb e6       	ldi	r30, 0x6B	; 107
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8c 60       	ori	r24, 0x0C	; 12
     1b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     1b2:	ec e6       	ldi	r30, 0x6C	; 108
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 6d       	ori	r24, 0xD0	; 208
     1ba:	80 83       	st	Z, r24
     1bc:	08 95       	ret

000001be <leftdir>:
	}
	return 0;
}

// leftdir() => anropar switchGen(0) för att välja vänster generator.
int leftdir(Button *self, int arg) {
     1be:	cf 92       	push	r12
     1c0:	df 92       	push	r13
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
	if (PRESSEDLT) {
     1ca:	62 99       	sbic	0x0c, 2	; 12
     1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <leftdir+0x36>
     1ce:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 0);
     1d0:	04 81       	ldd	r16, Z+4	; 0x04
     1d2:	15 81       	ldd	r17, Z+5	; 0x05
     1d4:	c1 2c       	mov	r12, r1
     1d6:	d1 2c       	mov	r13, r1
     1d8:	0f 2e       	mov	r0, r31
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	ef 2e       	mov	r14, r31
     1de:	f3 e0       	ldi	r31, 0x03	; 3
     1e0:	ff 2e       	mov	r15, r31
     1e2:	f0 2d       	mov	r31, r0
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	cb 01       	movw	r24, r22
     1f0:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	return 0;
}
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	df 90       	pop	r13
     202:	cf 90       	pop	r12
     204:	08 95       	ret

00000206 <rightdir>:

// rightdir() => anropar switchGen(1) för höger generator.
int rightdir(Button *self, int arg) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
	if (PRESSEDRT) {
     212:	63 99       	sbic	0x0c, 3	; 12
     214:	14 c0       	rjmp	.+40     	; 0x23e <rightdir+0x38>
     216:	fc 01       	movw	r30, r24
		ASYNC(self->gui, switchGen, 1);
     218:	04 81       	ldd	r16, Z+4	; 0x04
     21a:	15 81       	ldd	r17, Z+5	; 0x05
     21c:	cc 24       	eor	r12, r12
     21e:	c3 94       	inc	r12
     220:	d1 2c       	mov	r13, r1
     222:	0f 2e       	mov	r0, r31
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	ef 2e       	mov	r14, r31
     228:	f3 e0       	ldi	r31, 0x03	; 3
     22a:	ff 2e       	mov	r15, r31
     22c:	f0 2d       	mov	r31, r0
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	a9 01       	movw	r20, r18
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	cb 01       	movw	r24, r22
     23a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	return 0;
}
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	08 95       	ret

00000250 <buttonCheckerLR>:
	}
	return 0;
}

// buttonCheckerLR() kontrollerar om vänster eller höger knappen har blivit tryckt.
int buttonCheckerLR(Button *self, int arg) {
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ec 01       	movw	r28, r24
	if (PRESSEDLT) {
     256:	62 99       	sbic	0x0c, 2	; 12
     258:	04 c0       	rjmp	.+8      	; 0x262 <buttonCheckerLR+0x12>
		leftdir(self, 0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 df 00 	call	0x1be	; 0x1be <leftdir>
	}
	if (PRESSEDRT) {
     262:	63 99       	sbic	0x0c, 3	; 12
     264:	05 c0       	rjmp	.+10     	; 0x270 <buttonCheckerLR+0x20>
		rightdir(self, 0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	ce 01       	movw	r24, r28
     26c:	0e 94 03 01 	call	0x206	; 0x206 <rightdir>
	}
	return 0;
}
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <updir>:
	}
	return 0;
}

// updir() => anropar guiFrecInc() för att öka frekvensen.
int updir(Button *self, int arg) {
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	0f 93       	push	r16
     284:	1f 93       	push	r17
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
	// Kontrollera om "UP" är nedtryckt och inte redan held
	if (PRESSEDUP && !self->heldUp) {
     28a:	1e 99       	sbic	0x03, 6	; 3
     28c:	2f c0       	rjmp	.+94     	; 0x2ec <updir+0x72>
     28e:	fc 01       	movw	r30, r24
     290:	26 81       	ldd	r18, Z+6	; 0x06
     292:	21 11       	cpse	r18, r1
     294:	2b c0       	rjmp	.+86     	; 0x2ec <updir+0x72>
     296:	ec 01       	movw	r28, r24
		self->heldUp = true; // Markera att knappen hålls nere
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self->gui, guiFrecInc, 0); // Öka frekvensen direkt vid första trycket
     29c:	04 81       	ldd	r16, Z+4	; 0x04
     29e:	15 81       	ldd	r17, Z+5	; 0x05
     2a0:	c1 2c       	mov	r12, r1
     2a2:	d1 2c       	mov	r13, r1
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f8 e2       	ldi	r31, 0x28	; 40
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f3 e0       	ldi	r31, 0x03	; 3
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	a9 01       	movw	r20, r18
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	cb 01       	movw	r24, r22
     2bc:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
		if (!self->holdUpRunning) { // Checka om hold funktionen redan körs
     2c0:	88 85       	ldd	r24, Y+8	; 0x08
     2c2:	81 11       	cpse	r24, r1
     2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <updir+0x7a>
			self->holdUpRunning = true;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	88 87       	std	Y+8, r24	; 0x08
			AFTER(MSEC(500), self, holdCheckerUp, 0); // Starta holdCheckerUp efter 500ms
     2ca:	0f 2e       	mov	r0, r31
     2cc:	fd e4       	ldi	r31, 0x4D	; 77
     2ce:	ef 2e       	mov	r14, r31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ff 2e       	mov	r15, r31
     2d4:	f0 2d       	mov	r31, r0
     2d6:	8e 01       	movw	r16, r28
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	a9 01       	movw	r20, r18
     2de:	69 e0       	ldi	r22, 0x09	; 9
     2e0:	7d e3       	ldi	r23, 0x3D	; 61
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <updir+0x7a>
		}
	}
	else if (!PRESSEDUP) { // När knappen släpps, återställ flaggan
     2ec:	1e 9b       	sbis	0x03, 6	; 3
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <updir+0x7a>
		self->heldUp = false;
     2f0:	fc 01       	movw	r30, r24
     2f2:	16 82       	std	Z+6, r1	; 0x06
	}
	return 0;
}
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	df 90       	pop	r13
     306:	cf 90       	pop	r12
     308:	08 95       	ret

0000030a <downdir>:

// downdir() => anropar guiFrecDec() för att minska frekvensen.
int downdir(Button *self, int arg) {
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	// Kontrollera om "DOWN" är nedtryckt och inte redan held
	if (PRESSEDDN && !self->heldDown) {
     31a:	1f 99       	sbic	0x03, 7	; 3
     31c:	2f c0       	rjmp	.+94     	; 0x37c <downdir+0x72>
     31e:	fc 01       	movw	r30, r24
     320:	27 81       	ldd	r18, Z+7	; 0x07
     322:	21 11       	cpse	r18, r1
     324:	2b c0       	rjmp	.+86     	; 0x37c <downdir+0x72>
     326:	ec 01       	movw	r28, r24
		self->heldDown = true; // Markera att knappen hålls nere
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	87 83       	std	Z+7, r24	; 0x07
		ASYNC(self->gui, guiFrecDec, 0); // Minska frekvensen direkt vid första trycket
     32c:	04 81       	ldd	r16, Z+4	; 0x04
     32e:	15 81       	ldd	r17, Z+5	; 0x05
     330:	c1 2c       	mov	r12, r1
     332:	d1 2c       	mov	r13, r1
     334:	0f 2e       	mov	r0, r31
     336:	f5 e7       	ldi	r31, 0x75	; 117
     338:	ef 2e       	mov	r14, r31
     33a:	f3 e0       	ldi	r31, 0x03	; 3
     33c:	ff 2e       	mov	r15, r31
     33e:	f0 2d       	mov	r31, r0
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	a9 01       	movw	r20, r18
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	cb 01       	movw	r24, r22
     34c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
		if (!self->holdDownRunning) { // Kontrollera om hold funktionen redan körs
     350:	89 85       	ldd	r24, Y+9	; 0x09
     352:	81 11       	cpse	r24, r1
     354:	17 c0       	rjmp	.+46     	; 0x384 <downdir+0x7a>
			self->holdDownRunning = true;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	89 87       	std	Y+9, r24	; 0x09
			AFTER(MSEC(500), self, holdCheckerDown, 0); // Starta holdCheckerDown efter 500ms
     35a:	0f 2e       	mov	r0, r31
     35c:	fc e8       	ldi	r31, 0x8C	; 140
     35e:	ef 2e       	mov	r14, r31
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	8e 01       	movw	r16, r28
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	a9 01       	movw	r20, r18
     36e:	69 e0       	ldi	r22, 0x09	; 9
     370:	7d e3       	ldi	r23, 0x3D	; 61
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <downdir+0x7a>
		}
	}
	else if (!PRESSEDDN) { // När knappen släpps, återställ flaggan
     37c:	1f 9b       	sbis	0x03, 7	; 3
     37e:	02 c0       	rjmp	.+4      	; 0x384 <downdir+0x7a>
		self->heldDown = false;
     380:	fc 01       	movw	r30, r24
     382:	17 82       	std	Z+7, r1	; 0x07
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	08 95       	ret

0000039a <centerdir>:
// centerdir() => anropar guiFrecReset() för att växla mellan lagrad/återställd frekvens.
int centerdir(Button *self, int arg) {
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
	if (PRESSEDCN) {
     3a6:	1c 99       	sbic	0x03, 4	; 3
     3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <centerdir+0x38>
     3aa:	fc 01       	movw	r30, r24
		AFTER(MSEC(100),self->gui, guiFrecReset, 0);
     3ac:	04 81       	ldd	r16, Z+4	; 0x04
     3ae:	15 81       	ldd	r17, Z+5	; 0x05
     3b0:	c1 2c       	mov	r12, r1
     3b2:	d1 2c       	mov	r13, r1
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f2 ec       	ldi	r31, 0xC2	; 194
     3b8:	ef 2e       	mov	r14, r31
     3ba:	f3 e0       	ldi	r31, 0x03	; 3
     3bc:	ff 2e       	mov	r15, r31
     3be:	f0 2d       	mov	r31, r0
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	a9 01       	movw	r20, r18
     3c6:	65 e3       	ldi	r22, 0x35	; 53
     3c8:	7c e0       	ldi	r23, 0x0C	; 12
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	return 0;
}
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <buttonCheckerUDC>:
	return 0;
}


// buttonCheckerUDC() kontrollerar om upp, ner eller center knappen har blivit tryckt.
int buttonCheckerUDC(Button *self, int arg) {
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	ec 01       	movw	r28, r24
	if (PRESSEDUP) {
     3ea:	1e 99       	sbic	0x03, 6	; 3
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <buttonCheckerUDC+0x14>
		updir(self, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 3d 01 	call	0x27a	; 0x27a <updir>
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <buttonCheckerUDC+0x16>
	}
	else {
		self->heldUp = false; // Om knappen inte är nedtryckt, sätt heldUp till False
     3f8:	1e 82       	std	Y+6, r1	; 0x06
	}
	if (PRESSEDDN) {
     3fa:	1f 99       	sbic	0x03, 7	; 3
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		downdir(self, 0); // Hantera ner-knappen
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	ce 01       	movw	r24, r28
     404:	0e 94 85 01 	call	0x30a	; 0x30a <downdir>
     408:	01 c0       	rjmp	.+2      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	}
	else {
		self->heldDown = false; // Om knappen inte är nedtryckt, sätt heldDown till False
     40a:	1f 82       	std	Y+7, r1	; 0x07
	}
	if (PRESSEDCN) {
     40c:	1c 99       	sbic	0x03, 4	; 3
     40e:	05 c0       	rjmp	.+10     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		centerdir(self, 0);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	ce 01       	movw	r24, r28
     416:	0e 94 cd 01 	call	0x39a	; 0x39a <centerdir>
	}
	return 0;
}
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     424:	80 ec       	ldi	r24, 0xC0	; 192
     426:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     42a:	87 eb       	ldi	r24, 0xB7	; 183
     42c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     436:	08 95       	ret

00000438 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     438:	66 30       	cpi	r22, 0x06	; 6
     43a:	71 05       	cpc	r23, r1
     43c:	08 f0       	brcs	.+2      	; 0x440 <writeChar+0x8>
     43e:	6b c0       	rjmp	.+214    	; 0x516 <__stack+0x17>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     440:	90 ed       	ldi	r25, 0xD0	; 208
     442:	98 0f       	add	r25, r24
     444:	9a 30       	cpi	r25, 0x0A	; 10
     446:	48 f4       	brcc	.+18     	; 0x45a <writeChar+0x22>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     448:	e8 2f       	mov	r30, r24
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	e1 52       	subi	r30, 0x21	; 33
     452:	ff 4f       	sbci	r31, 0xFF	; 255
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	02 c0       	rjmp	.+4      	; 0x45e <writeChar+0x26>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     45e:	fb 01       	movw	r30, r22
     460:	77 23       	and	r23, r23
     462:	0c f4       	brge	.+2      	; 0x466 <writeChar+0x2e>
     464:	31 96       	adiw	r30, 0x01	; 1
     466:	f5 95       	asr	r31
     468:	e7 95       	ror	r30
     46a:	e4 51       	subi	r30, 0x14	; 20
     46c:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     46e:	61 70       	andi	r22, 0x01	; 1
     470:	70 78       	andi	r23, 0x80	; 128
     472:	77 23       	and	r23, r23
     474:	34 f4       	brge	.+12     	; 0x482 <writeChar+0x4a>
     476:	61 50       	subi	r22, 0x01	; 1
     478:	71 09       	sbc	r23, r1
     47a:	6e 6f       	ori	r22, 0xFE	; 254
     47c:	7f 6f       	ori	r23, 0xFF	; 255
     47e:	6f 5f       	subi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	66 0f       	add	r22, r22
     488:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	06 2e       	mov	r0, r22
     490:	02 c0       	rjmp	.+4      	; 0x496 <writeChar+0x5e>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <writeChar+0x5a>
     49a:	80 95       	com	r24
     49c:	40 81       	ld	r20, Z
     49e:	98 2f       	mov	r25, r24
     4a0:	94 23       	and	r25, r20
     4a2:	a9 01       	movw	r20, r18
     4a4:	4f 70       	andi	r20, 0x0F	; 15
     4a6:	55 27       	eor	r21, r21
     4a8:	06 2e       	mov	r0, r22
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <writeChar+0x78>
     4ac:	44 0f       	add	r20, r20
     4ae:	55 1f       	adc	r21, r21
     4b0:	0a 94       	dec	r0
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <writeChar+0x74>
     4b4:	49 2b       	or	r20, r25
     4b6:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     4b8:	a9 01       	movw	r20, r18
     4ba:	52 95       	swap	r21
     4bc:	42 95       	swap	r20
     4be:	4f 70       	andi	r20, 0x0F	; 15
     4c0:	45 27       	eor	r20, r21
     4c2:	5f 70       	andi	r21, 0x0F	; 15
     4c4:	45 27       	eor	r20, r21
     4c6:	4f 70       	andi	r20, 0x0F	; 15
     4c8:	55 27       	eor	r21, r21
     4ca:	06 2e       	mov	r0, r22
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <writeChar+0x9a>
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	0a 94       	dec	r0
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <writeChar+0x96>
     4d6:	95 81       	ldd	r25, Z+5	; 0x05
     4d8:	98 23       	and	r25, r24
     4da:	49 2b       	or	r20, r25
     4dc:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     4de:	43 2f       	mov	r20, r19
     4e0:	55 27       	eor	r21, r21
     4e2:	4f 70       	andi	r20, 0x0F	; 15
     4e4:	55 27       	eor	r21, r21
     4e6:	06 2e       	mov	r0, r22
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <writeChar+0xb6>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	0a 94       	dec	r0
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <writeChar+0xb2>
     4f2:	92 85       	ldd	r25, Z+10	; 0x0a
     4f4:	98 23       	and	r25, r24
     4f6:	49 2b       	or	r20, r25
     4f8:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     4fa:	47 85       	ldd	r20, Z+15	; 0x0f
     4fc:	48 23       	and	r20, r24
     4fe:	c9 01       	movw	r24, r18
     500:	89 2f       	mov	r24, r25
     502:	99 27       	eor	r25, r25
     504:	82 95       	swap	r24
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	02 c0       	rjmp	.+4      	; 0x50e <__stack+0xf>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	6a 95       	dec	r22
     510:	e2 f7       	brpl	.-8      	; 0x50a <__stack+0xb>
     512:	84 2b       	or	r24, r20
     514:	87 87       	std	Z+15, r24	; 0x0f
     516:	08 95       	ret

00000518 <printAt>:
}

void printAt(long num, int pos) {
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	4b 01       	movw	r8, r22
     52e:	5c 01       	movw	r10, r24
     530:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     532:	24 e6       	ldi	r18, 0x64	; 100
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 0c 12 	call	0x2418	; 0x2418 <__divmodsi4>
     53e:	0f 2e       	mov	r0, r31
     540:	fa e0       	ldi	r31, 0x0A	; 10
     542:	cf 2e       	mov	r12, r31
     544:	d1 2c       	mov	r13, r1
     546:	e1 2c       	mov	r14, r1
     548:	f1 2c       	mov	r15, r1
     54a:	f0 2d       	mov	r31, r0
     54c:	a7 01       	movw	r20, r14
     54e:	96 01       	movw	r18, r12
     550:	0e 94 0c 12 	call	0x2418	; 0x2418 <__divmodsi4>
     554:	be 01       	movw	r22, r28
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	82 0f       	add	r24, r18
     55a:	0e 94 1c 02 	call	0x438	; 0x438 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     55e:	21 96       	adiw	r28, 0x01	; 1
     560:	c5 01       	movw	r24, r10
     562:	b4 01       	movw	r22, r8
     564:	a7 01       	movw	r20, r14
     566:	96 01       	movw	r18, r12
     568:	0e 94 0c 12 	call	0x2418	; 0x2418 <__divmodsi4>
     56c:	86 2f       	mov	r24, r22
     56e:	be 01       	movw	r22, r28
     570:	80 5d       	subi	r24, 0xD0	; 208
     572:	0e 94 1c 02 	call	0x438	; 0x438 <writeChar>
	
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	9f 90       	pop	r9
     588:	8f 90       	pop	r8
     58a:	08 95       	ret

0000058c <updateDisplay>:
	return 0;
}

// updateDisplay() hämtar generatorernas frekvenser
// och visar dem på LCD. Mittpositionen visar vilken som är aktiv.
int updateDisplay(GUI *self, int arg) {
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	// Vänstra sidan: frekvens för gen1
	printAt((SYNC(self->gen1, getFrec, 0)), 0);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	66 e2       	ldi	r22, 0x26	; 38
     598:	75 e0       	ldi	r23, 0x05	; 5
     59a:	8c 81       	ldd	r24, Y+4	; 0x04
     59c:	9d 81       	ldd	r25, Y+5	; 0x05
     59e:	0e 94 95 10 	call	0x212a	; 0x212a <sync>
     5a2:	bc 01       	movw	r22, r24
     5a4:	99 0f       	add	r25, r25
     5a6:	88 0b       	sbc	r24, r24
     5a8:	99 0b       	sbc	r25, r25
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>

	// Högra sidan: frekvens för gen2
	printAt((SYNC(self->gen2, getFrec, 0)), 4);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	66 e2       	ldi	r22, 0x26	; 38
     5b8:	75 e0       	ldi	r23, 0x05	; 5
     5ba:	8e 81       	ldd	r24, Y+6	; 0x06
     5bc:	9f 81       	ldd	r25, Y+7	; 0x07
     5be:	0e 94 95 10 	call	0x212a	; 0x212a <sync>
     5c2:	bc 01       	movw	r22, r24
     5c4:	99 0f       	add	r25, r25
     5c6:	88 0b       	sbc	r24, r24
     5c8:	99 0b       	sbc	r25, r25
     5ca:	44 e0       	ldi	r20, 0x04	; 4
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
	// Mitten: visa vilken generator som är aktiv, visar "10" om gen1 är vald, "01" om gen2 är vald.
	if (self->midPos == 0) {
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	81 11       	cpse	r24, r1
     5d6:	09 c0       	rjmp	.+18     	; 0x5ea <updateDisplay+0x5e>
		printAt(10, 2);
     5d8:	42 e0       	ldi	r20, 0x02	; 2
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	6a e0       	ldi	r22, 0x0A	; 10
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <updateDisplay+0x6e>
		} else {
		printAt(1, 2);
     5ea:	42 e0       	ldi	r20, 0x02	; 2
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 8c 02 	call	0x518	; 0x518 <printAt>
	}
	return 0;
}
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <switchGen>:
}


// switchGen() byter vilken generator (left=0, right=1) som är aktiv.
// Om redan rätt generator är vald, gör inget. Annars uppdatera midPos och kalla updateDisplay.
int switchGen(GUI *self, int arg) {
     604:	cf 92       	push	r12
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
	if (self->midPos == arg) {
		// Om samma generator redan är aktiv, gör inget.
	}
	self->midPos = arg;
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	67 2b       	or	r22, r23
     614:	09 f4       	brne	.+2      	; 0x618 <switchGen+0x14>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	20 87       	std	Z+8, r18	; 0x08
	// Använder ASYNC för att anropa updateDisplay()
	ASYNC(self, updateDisplay, 0);
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
     620:	0f 2e       	mov	r0, r31
     622:	f6 ec       	ldi	r31, 0xC6	; 198
     624:	ef 2e       	mov	r14, r31
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	ff 2e       	mov	r15, r31
     62a:	f0 2d       	mov	r31, r0
     62c:	8c 01       	movw	r16, r24
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	cb 01       	movw	r24, r22
     63a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	return 0;
}
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	08 95       	ret

00000650 <guiFrecInc>:
	return 0;
}

// guiFrecInc() ökar frekvensen för den aktiva generatorn via ASYNC,
// och anropar sedan updateDisplay för att visa den nya frekvensen.
int guiFrecInc(GUI *self, int arg) {
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     662:	88 85       	ldd	r24, Y+8	; 0x08
     664:	81 11       	cpse	r24, r1
     666:	13 c0       	rjmp	.+38     	; 0x68e <guiFrecInc+0x3e>
		ASYNC(self->gen1, FrecInc, 0);
     668:	0c 81       	ldd	r16, Y+4	; 0x04
     66a:	1d 81       	ldd	r17, Y+5	; 0x05
     66c:	c1 2c       	mov	r12, r1
     66e:	d1 2c       	mov	r13, r1
     670:	0f 2e       	mov	r0, r31
     672:	fa e2       	ldi	r31, 0x2A	; 42
     674:	ef 2e       	mov	r14, r31
     676:	f5 e0       	ldi	r31, 0x05	; 5
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	cb 01       	movw	r24, r22
     688:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     68c:	12 c0       	rjmp	.+36     	; 0x6b2 <guiFrecInc+0x62>
		} else {
		ASYNC(self->gen2, FrecInc, 0);
     68e:	0e 81       	ldd	r16, Y+6	; 0x06
     690:	1f 81       	ldd	r17, Y+7	; 0x07
     692:	c1 2c       	mov	r12, r1
     694:	d1 2c       	mov	r13, r1
     696:	0f 2e       	mov	r0, r31
     698:	fa e2       	ldi	r31, 0x2A	; 42
     69a:	ef 2e       	mov	r14, r31
     69c:	f5 e0       	ldi	r31, 0x05	; 5
     69e:	ff 2e       	mov	r15, r31
     6a0:	f0 2d       	mov	r31, r0
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	a9 01       	movw	r20, r18
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	cb 01       	movw	r24, r22
     6ae:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	ASYNC(self, updateDisplay, 0);
     6b2:	c1 2c       	mov	r12, r1
     6b4:	d1 2c       	mov	r13, r1
     6b6:	0f 2e       	mov	r0, r31
     6b8:	f6 ec       	ldi	r31, 0xC6	; 198
     6ba:	ef 2e       	mov	r14, r31
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	ff 2e       	mov	r15, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	8e 01       	movw	r16, r28
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	cb 01       	movw	r24, r22
     6d0:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	return 0;

}
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <guiFrecDec>:

// guiFrecDec() minskar frekvensen för den aktiva generatorn,
// sedan uppdateras displayen.
int guiFrecDec(GUI *self, int arg) {
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     6fc:	88 85       	ldd	r24, Y+8	; 0x08
     6fe:	81 11       	cpse	r24, r1
     700:	13 c0       	rjmp	.+38     	; 0x728 <guiFrecDec+0x3e>
		ASYNC(self->gen1, FrecDec, 0);
     702:	0c 81       	ldd	r16, Y+4	; 0x04
     704:	1d 81       	ldd	r17, Y+5	; 0x05
     706:	c1 2c       	mov	r12, r1
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	f3 e3       	ldi	r31, 0x33	; 51
     70e:	ef 2e       	mov	r14, r31
     710:	f5 e0       	ldi	r31, 0x05	; 5
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     726:	12 c0       	rjmp	.+36     	; 0x74c <guiFrecDec+0x62>
		} else {
		ASYNC(self->gen2, FrecDec, 0);
     728:	0e 81       	ldd	r16, Y+6	; 0x06
     72a:	1f 81       	ldd	r17, Y+7	; 0x07
     72c:	c1 2c       	mov	r12, r1
     72e:	d1 2c       	mov	r13, r1
     730:	0f 2e       	mov	r0, r31
     732:	f3 e3       	ldi	r31, 0x33	; 51
     734:	ef 2e       	mov	r14, r31
     736:	f5 e0       	ldi	r31, 0x05	; 5
     738:	ff 2e       	mov	r15, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	a9 01       	movw	r20, r18
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	cb 01       	movw	r24, r22
     748:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	ASYNC(self, updateDisplay, 0);
     74c:	c1 2c       	mov	r12, r1
     74e:	d1 2c       	mov	r13, r1
     750:	0f 2e       	mov	r0, r31
     752:	f6 ec       	ldi	r31, 0xC6	; 198
     754:	ef 2e       	mov	r14, r31
     756:	f2 e0       	ldi	r31, 0x02	; 2
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	8e 01       	movw	r16, r28
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	return 0;
}
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	08 95       	ret

00000784 <guiFrecReset>:

// guiFrecReset() växlar mellan lagrad och nuvarande frekvens.
// Efteråt uppdateras displayen för att visa förändringen.
int guiFrecReset(GUI *self, int arg) {
     784:	cf 92       	push	r12
     786:	df 92       	push	r13
     788:	ef 92       	push	r14
     78a:	ff 92       	push	r15
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
	if (self->midPos == 0) {
     796:	88 85       	ldd	r24, Y+8	; 0x08
     798:	81 11       	cpse	r24, r1
     79a:	13 c0       	rjmp	.+38     	; 0x7c2 <guiFrecReset+0x3e>
		ASYNC(self->gen1, FrecReset, 0);
     79c:	0c 81       	ldd	r16, Y+4	; 0x04
     79e:	1d 81       	ldd	r17, Y+5	; 0x05
     7a0:	c1 2c       	mov	r12, r1
     7a2:	d1 2c       	mov	r13, r1
     7a4:	0f 2e       	mov	r0, r31
     7a6:	fc e3       	ldi	r31, 0x3C	; 60
     7a8:	ef 2e       	mov	r14, r31
     7aa:	f5 e0       	ldi	r31, 0x05	; 5
     7ac:	ff 2e       	mov	r15, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	a9 01       	movw	r20, r18
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
     7bc:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <guiFrecReset+0x62>
		} else {
		ASYNC(self->gen2, FrecReset, 0);
     7c2:	0e 81       	ldd	r16, Y+6	; 0x06
     7c4:	1f 81       	ldd	r17, Y+7	; 0x07
     7c6:	c1 2c       	mov	r12, r1
     7c8:	d1 2c       	mov	r13, r1
     7ca:	0f 2e       	mov	r0, r31
     7cc:	fc e3       	ldi	r31, 0x3C	; 60
     7ce:	ef 2e       	mov	r14, r31
     7d0:	f5 e0       	ldi	r31, 0x05	; 5
     7d2:	ff 2e       	mov	r15, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	a9 01       	movw	r20, r18
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	cb 01       	movw	r24, r22
     7e2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	ASYNC(self, updateDisplay, 0);
     7e6:	c1 2c       	mov	r12, r1
     7e8:	d1 2c       	mov	r13, r1
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f6 ec       	ldi	r31, 0xC6	; 198
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
     7f6:	8e 01       	movw	r16, r28
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a9 01       	movw	r20, r18
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	cb 01       	movw	r24, r22
     804:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	return 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <horizontal>:

#include "button.h"

#include "interruptHandler.h"

int horizontal(Interrupthandler *self, int arg) {
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerLR, 0);
     82a:	fc 01       	movw	r30, r24
     82c:	04 81       	ldd	r16, Z+4	; 0x04
     82e:	15 81       	ldd	r17, Z+5	; 0x05
     830:	c1 2c       	mov	r12, r1
     832:	d1 2c       	mov	r13, r1
     834:	0f 2e       	mov	r0, r31
     836:	f8 e2       	ldi	r31, 0x28	; 40
     838:	ef 2e       	mov	r14, r31
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	ff 2e       	mov	r15, r31
     83e:	f0 2d       	mov	r31, r0
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	cb 01       	movw	r24, r22
     84c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	return 0;
}
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	08 95       	ret

00000862 <vertandcent>:

int vertandcent(Interrupthandler *self, int arg) {
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
	
	ASYNC(self->button, buttonCheckerUDC, 0);
     86e:	fc 01       	movw	r30, r24
     870:	04 81       	ldd	r16, Z+4	; 0x04
     872:	15 81       	ldd	r17, Z+5	; 0x05
     874:	c1 2c       	mov	r12, r1
     876:	d1 2c       	mov	r13, r1
     878:	0f 2e       	mov	r0, r31
     87a:	f2 ef       	ldi	r31, 0xF2	; 242
     87c:	ef 2e       	mov	r14, r31
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	ff 2e       	mov	r15, r31
     882:	f0 2d       	mov	r31, r0
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a9 01       	movw	r20, r18
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	cb 01       	movw	r24, r22
     890:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	return 0;
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <startProgram>:
// Skapar ett InterruptHandler-objekt som kopplas till button för att kunna calla button funktionerna.
Interrupthandler interrupt = initInterruptHandler(&button);

// startProgram() körs vid uppstart. Den startar genereringen av pulser
// och anropar updateDisplay vid start.
int startProgram(GUI *self) {
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	// Starta båda pulsgeneratorerna direkt (ASYNC så att vi inte blockerar).
	ASYNC(&pulseGen1, setPulse, 0);
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
     8bc:	0f 2e       	mov	r0, r31
     8be:	ff ea       	ldi	r31, 0xAF	; 175
     8c0:	ef 2e       	mov	r14, r31
     8c2:	f4 e0       	ldi	r31, 0x04	; 4
     8c4:	ff 2e       	mov	r15, r31
     8c6:	f0 2d       	mov	r31, r0
     8c8:	03 e2       	ldi	r16, 0x23	; 35
     8ca:	11 e0       	ldi	r17, 0x01	; 1
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	cb 01       	movw	r24, r22
     8d8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	ASYNC(&pulseGen2, setPulse, 0);
     8dc:	09 e1       	ldi	r16, 0x19	; 25
     8de:	11 e0       	ldi	r17, 0x01	; 1
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	a9 01       	movw	r20, r18
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	cb 01       	movw	r24, r22
     8ec:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>

	// Uppdatera displayen omedelbart så vi ser initialfrekvenser (0).
	ASYNC(self, updateDisplay, 0);
     8f0:	0f 2e       	mov	r0, r31
     8f2:	f6 ec       	ldi	r31, 0xC6	; 198
     8f4:	ef 2e       	mov	r14, r31
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	ff 2e       	mov	r15, r31
     8fa:	f0 2d       	mov	r31, r0
     8fc:	8e 01       	movw	r16, r28
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	cb 01       	movw	r24, r22
     90a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	
	//AFTER(MSEC(500), &button, pressSimulator, 0);
	
	return 0;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	df 90       	pop	r13
     920:	cf 90       	pop	r12
     922:	08 95       	ret

00000924 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     924:	0e 94 66 05 	call	0xacc	; 0xacc <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     928:	0e 94 12 02 	call	0x424	; 0x424 <lcd_init>
	
	// Initiera knappar (pullups + pin change interrupt).
	btn_init();
     92c:	0e 94 cb 00 	call	0x196	; 0x196 <btn_init>

	// Installera knappobjektet som interrupthandler för PCINT0 och PCINT1.

	INSTALL(&interrupt, horizontal, IRQ_PCINT0);
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	6f e0       	ldi	r22, 0x0F	; 15
     934:	74 e0       	ldi	r23, 0x04	; 4
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 90 11 	call	0x2320	; 0x2320 <install>
	INSTALL(&interrupt, vertandcent, IRQ_PCINT1);
     93e:	42 e0       	ldi	r20, 0x02	; 2
     940:	61 e3       	ldi	r22, 0x31	; 49
     942:	74 e0       	ldi	r23, 0x04	; 4
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 90 11 	call	0x2320	; 0x2320 <install>

	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	63 e5       	ldi	r22, 0x53	; 83
     952:	74 e0       	ldi	r23, 0x04	; 4
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 aa 11 	call	0x2354	; 0x2354 <tinytimber>
}
     95c:	08 95       	ret

0000095e <setPulse>:
#include "pulsegen.h"
#include "writeBit.h"
#include "TinyTimber.h"

// setPulse() togglar utgången och schemalägger nästa toggling.
int setPulse(Pulsegenerator *self, int arg) {
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
	// Om frekvens=0, sätt porten låg och sluta toggla.
    if (self->frec == 0) {
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	81 11       	cpse	r24, r1
     974:	23 c0       	rjmp	.+70     	; 0x9bc <setPulse+0x5e>
	    ASYNC(self->wbit, writeBit, 0);
     976:	0f 81       	ldd	r16, Y+7	; 0x07
     978:	18 85       	ldd	r17, Y+8	; 0x08
     97a:	c1 2c       	mov	r12, r1
     97c:	d1 2c       	mov	r13, r1
     97e:	0f 2e       	mov	r0, r31
     980:	f6 ec       	ldi	r31, 0xC6	; 198
     982:	ef 2e       	mov	r14, r31
     984:	f1 e1       	ldi	r31, 0x11	; 17
     986:	ff 2e       	mov	r15, r31
     988:	f0 2d       	mov	r31, r0
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	cb 01       	movw	r24, r22
     996:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
		AFTER(MSEC(1000), self, setPulse, 0);
     99a:	0f 2e       	mov	r0, r31
     99c:	ff ea       	ldi	r31, 0xAF	; 175
     99e:	ef 2e       	mov	r14, r31
     9a0:	f4 e0       	ldi	r31, 0x04	; 4
     9a2:	ff 2e       	mov	r15, r31
     9a4:	f0 2d       	mov	r31, r0
     9a6:	8e 01       	movw	r16, r28
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	a9 01       	movw	r20, r18
     9ae:	62 e1       	ldi	r22, 0x12	; 18
     9b0:	7a e7       	ldi	r23, 0x7A	; 122
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
     9ba:	3d c0       	rjmp	.+122    	; 0xa36 <setPulse+0xd8>
    }
	else {
		// Annars toggla outputHigh.
		ASYNC(self->wbit, toggleBit, 0);
     9bc:	0f 81       	ldd	r16, Y+7	; 0x07
     9be:	18 85       	ldd	r17, Y+8	; 0x08
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
     9c4:	0f 2e       	mov	r0, r31
     9c6:	f9 ee       	ldi	r31, 0xE9	; 233
     9c8:	ef 2e       	mov	r14, r31
     9ca:	f1 e1       	ldi	r31, 0x11	; 17
     9cc:	ff 2e       	mov	r15, r31
     9ce:	f0 2d       	mov	r31, r0
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	cb 01       	movw	r24, r22
     9dc:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
		
		// Delay = 1000 / frekvens => period i ms, AFTER planerar nästa anrop.
		int delay = 1000 / self->frec;
		AFTER(MSEC(delay), self, setPulse, 0);
     9e0:	6c 81       	ldd	r22, Y+4	; 0x04
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	88 ee       	ldi	r24, 0xE8	; 232
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__divmodhi4>
     9ec:	2d e7       	ldi	r18, 0x7D	; 125
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	db 01       	movw	r26, r22
     9f2:	0e 94 2b 12 	call	0x2456	; 0x2456 <__usmulhisi3>
     9f6:	8b 01       	movw	r16, r22
     9f8:	9c 01       	movw	r18, r24
     9fa:	99 23       	and	r25, r25
     9fc:	24 f4       	brge	.+8      	; 0xa06 <setPulse+0xa8>
     9fe:	0d 5f       	subi	r16, 0xFD	; 253
     a00:	1f 4f       	sbci	r17, 0xFF	; 255
     a02:	2f 4f       	sbci	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	c9 01       	movw	r24, r18
     a08:	b8 01       	movw	r22, r16
     a0a:	95 95       	asr	r25
     a0c:	87 95       	ror	r24
     a0e:	77 95       	ror	r23
     a10:	67 95       	ror	r22
     a12:	95 95       	asr	r25
     a14:	87 95       	ror	r24
     a16:	77 95       	ror	r23
     a18:	67 95       	ror	r22
     a1a:	c1 2c       	mov	r12, r1
     a1c:	d1 2c       	mov	r13, r1
     a1e:	0f 2e       	mov	r0, r31
     a20:	ff ea       	ldi	r31, 0xAF	; 175
     a22:	ef 2e       	mov	r14, r31
     a24:	f4 e0       	ldi	r31, 0x04	; 4
     a26:	ff 2e       	mov	r15, r31
     a28:	f0 2d       	mov	r31, r0
     a2a:	8e 01       	movw	r16, r28
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	a9 01       	movw	r20, r18
     a32:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
	}
	return 0;
}
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	df 90       	pop	r13
     a48:	cf 90       	pop	r12
     a4a:	08 95       	ret

00000a4c <getFrec>:

// getFrec() returnerar aktuell frekvens.
int getFrec(Pulsegenerator *self, int arg) {
	return self->frec;
     a4c:	fc 01       	movw	r30, r24
     a4e:	84 81       	ldd	r24, Z+4	; 0x04
}
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	08 95       	ret

00000a54 <FrecInc>:

// FrecInc() ökar frekvensen upp till max 99.
int FrecInc(Pulsegenerator *self, int arg) {
     a54:	fc 01       	movw	r30, r24
    unsigned char old = self->frec;
    if (self->frec < 99) {
     a56:	94 81       	ldd	r25, Z+4	; 0x04
     a58:	93 36       	cpi	r25, 0x63	; 99
     a5a:	10 f4       	brcc	.+4      	; 0xa60 <FrecInc+0xc>
	    self->frec++;
     a5c:	9f 5f       	subi	r25, 0xFF	; 255
     a5e:	94 83       	std	Z+4, r25	; 0x04
    }
    return 0;
    }
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	08 95       	ret

00000a66 <FrecDec>:


// FrecDec() minskar frekvensen ned till minst 0 (stoppa togglingen om den blir 0).
int FrecDec(Pulsegenerator *self, int arg) {
     a66:	fc 01       	movw	r30, r24
	if (self->frec > 0) {
     a68:	94 81       	ldd	r25, Z+4	; 0x04
     a6a:	99 23       	and	r25, r25
     a6c:	11 f0       	breq	.+4      	; 0xa72 <FrecDec+0xc>
		self->frec--;
     a6e:	91 50       	subi	r25, 0x01	; 1
     a70:	94 83       	std	Z+4, r25	; 0x04
	}
	return 0;
}
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	08 95       	ret

00000a78 <FrecReset>:

// FrecReset() växlar om frekvens=0 => återställ gammal frekvens,
// annars spara nuvarande i frec_old, nollställ frec, sätt output low.
int FrecReset(Pulsegenerator *self, int arg) {
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	fc 01       	movw	r30, r24
    if (self->frec == 0) {
     a86:	84 81       	ldd	r24, Z+4	; 0x04
     a88:	81 11       	cpse	r24, r1
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <FrecReset+0x1a>
	    self->frec = self->frec_old;
     a8c:	85 81       	ldd	r24, Z+5	; 0x05
     a8e:	84 83       	std	Z+4, r24	; 0x04
     a90:	14 c0       	rjmp	.+40     	; 0xaba <FrecReset+0x42>
	    } 
		else {
	    self->frec_old = self->frec;
     a92:	85 83       	std	Z+5, r24	; 0x05
	    self->frec = 0;
     a94:	14 82       	std	Z+4, r1	; 0x04
	    ASYNC(self->wbit, writeBit, 0);
     a96:	07 81       	ldd	r16, Z+7	; 0x07
     a98:	10 85       	ldd	r17, Z+8	; 0x08
     a9a:	c1 2c       	mov	r12, r1
     a9c:	d1 2c       	mov	r13, r1
     a9e:	0f 2e       	mov	r0, r31
     aa0:	f6 ec       	ldi	r31, 0xC6	; 198
     aa2:	ef 2e       	mov	r14, r31
     aa4:	f1 e1       	ldi	r31, 0x11	; 17
     aa6:	ff 2e       	mov	r15, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	a9 01       	movw	r20, r18
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	cb 01       	movw	r24, r22
     ab6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
    }
    return 0;
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	df 90       	pop	r13
     ac8:	cf 90       	pop	r12
     aca:	08 95       	ret

00000acc <avr_init>:
#include <avr/io.h>
#include "avr_init.h"

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
     acc:	e1 e6       	ldi	r30, 0x61	; 97
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 e8       	ldi	r24, 0x80	; 128
     ad2:	80 83       	st	Z, r24
	CLKPR = 0x00;
     ad4:	10 82       	st	Z, r1
	
	DDRB &= ~(1 << DDB7); // PB7 som input (Sätt till DDB7 till 0)
     ad6:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);  // Pull up resistor på PB7
     ad8:	2f 9a       	sbi	0x05, 7	; 5
	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
     ada:	e1 e8       	ldi	r30, 0x81	; 129
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8d 60       	ori	r24, 0x0D	; 13
     ae2:	80 83       	st	Z, r24
	
	TCNT1 = 0;
     ae4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ae8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
     aec:	ef e6       	ldi	r30, 0x6F	; 111
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
     af6:	82 ec       	ldi	r24, 0xC2	; 194
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
     afe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
     b02:	08 95       	ret

00000b04 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	00 d0       	rcall	.+0      	; 0xb0a <initialize+0x6>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <initialize+0x8>
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	87 e4       	ldi	r24, 0x47	; 71
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	27 e2       	ldi	r18, 0x27	; 39
     b16:	33 e0       	ldi	r19, 0x03	; 3
     b18:	fc 01       	movw	r30, r24
     b1a:	70 97       	sbiw	r30, 0x10	; 16
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	80 83       	st	Z, r24
     b20:	40 96       	adiw	r24, 0x10	; 16
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	c1 f7       	brne	.-16     	; 0xb18 <initialize+0x14>
     b28:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <messages+0xe1>
     b2c:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <messages+0xe0>
     b30:	e2 e8       	ldi	r30, 0x82	; 130
     b32:	f1 e0       	ldi	r31, 0x01	; 1
     b34:	8f e9       	ldi	r24, 0x9F	; 159
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	91 83       	std	Z+1, r25	; 0x01
     b3a:	80 83       	st	Z, r24
     b3c:	8c eb       	ldi	r24, 0xBC	; 188
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	96 8f       	std	Z+30, r25	; 0x1e
     b42:	85 8f       	std	Z+29, r24	; 0x1d
     b44:	a9 ed       	ldi	r26, 0xD9	; 217
     b46:	b1 e0       	ldi	r27, 0x01	; 1
     b48:	b3 af       	std	Z+59, r27	; 0x3b
     b4a:	a2 af       	std	Z+58, r26	; 0x3a
     b4c:	1d 92       	st	X+, r1
     b4e:	1c 92       	st	X, r1
     b50:	fa 83       	std	Y+2, r31	; 0x02
     b52:	e9 83       	std	Y+1, r30	; 0x01
     b54:	e3 e8       	ldi	r30, 0x83	; 131
     b56:	f3 e0       	ldi	r31, 0x03	; 3
     b58:	fc 83       	std	Y+4, r31	; 0x04
     b5a:	eb 83       	std	Y+3, r30	; 0x03
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	06 96       	adiw	r24, 0x06	; 6
     b62:	0e 94 77 12 	call	0x24ee	; 0x24ee <setjmp>
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	e9 81       	ldd	r30, Y+1	; 0x01
     b6c:	fa 81       	ldd	r31, Y+2	; 0x02
     b6e:	97 8b       	std	Z+23, r25	; 0x17
     b70:	86 8b       	std	Z+22, r24	; 0x16
     b72:	91 8f       	std	Z+25, r25	; 0x19
     b74:	80 8f       	std	Z+24, r24	; 0x18
     b76:	82 e2       	ldi	r24, 0x22	; 34
     b78:	91 e1       	ldi	r25, 0x11	; 17
     b7a:	94 8f       	std	Z+28, r25	; 0x1c
     b7c:	83 8f       	std	Z+27, r24	; 0x1b
     b7e:	15 82       	std	Z+5, r1	; 0x05
     b80:	14 82       	std	Z+4, r1	; 0x04
     b82:	7d 96       	adiw	r30, 0x1d	; 29
     b84:	fa 83       	std	Y+2, r31	; 0x02
     b86:	e9 83       	std	Y+1, r30	; 0x01
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	e0 5a       	subi	r30, 0xA0	; 160
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	fc 83       	std	Y+4, r31	; 0x04
     b92:	eb 83       	std	Y+3, r30	; 0x03
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	86 5f       	subi	r24, 0xF6	; 246
     b9a:	91 40       	sbci	r25, 0x01	; 1
     b9c:	f9 f6       	brne	.-66     	; 0xb5c <initialize+0x58>
     b9e:	ea e1       	ldi	r30, 0x1A	; 26
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
     ba2:	11 82       	std	Z+1, r1	; 0x01
     ba4:	10 82       	st	Z, r1
     ba6:	15 82       	std	Z+5, r1	; 0x05
     ba8:	14 82       	std	Z+4, r1	; 0x04
     baa:	13 82       	std	Z+3, r1	; 0x03
     bac:	12 82       	std	Z+2, r1	; 0x02
     bae:	e1 e6       	ldi	r30, 0x61	; 97
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 e8       	ldi	r24, 0x80	; 128
     bb4:	80 83       	st	Z, r24
     bb6:	10 82       	st	Z, r1
     bb8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bbc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <dispatch>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <dispatch+0x6>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current>
     bec:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <current+0x1>
     bf0:	06 96       	adiw	r24, 0x06	; 6
     bf2:	0e 94 77 12 	call	0x24ee	; 0x24ee <setjmp>
     bf6:	89 2b       	or	r24, r25
     bf8:	59 f4       	brne	.+22     	; 0xc10 <dispatch+0x36>
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <current+0x1>
     c02:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <current>
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	06 96       	adiw	r24, 0x06	; 6
     c0c:	0e 94 97 12 	call	0x252e	; 0x252e <longjmp>
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <schedule>:
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <msgQ>
     c26:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <msgQ+0x1>
     c2a:	30 97       	sbiw	r30, 0x00	; 0
     c2c:	61 f1       	breq	.+88     	; 0xc86 <schedule+0x6c>
     c2e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
     c32:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	31 f1       	breq	.+76     	; 0xc86 <schedule+0x6c>
     c3a:	c0 91 39 01 	lds	r28, 0x0139	; 0x800139 <activeStack>
     c3e:	d0 91 3a 01 	lds	r29, 0x013A	; 0x80013a <activeStack+0x1>
     c42:	aa 81       	ldd	r26, Y+2	; 0x02
     c44:	bb 81       	ldd	r27, Y+3	; 0x03
     c46:	10 97       	sbiw	r26, 0x00	; 0
     c48:	79 f0       	breq	.+30     	; 0xc68 <schedule+0x4e>
     c4a:	46 81       	ldd	r20, Z+6	; 0x06
     c4c:	57 81       	ldd	r21, Z+7	; 0x07
     c4e:	60 85       	ldd	r22, Z+8	; 0x08
     c50:	71 85       	ldd	r23, Z+9	; 0x09
     c52:	16 96       	adiw	r26, 0x06	; 6
     c54:	0d 91       	ld	r16, X+
     c56:	1d 91       	ld	r17, X+
     c58:	2d 91       	ld	r18, X+
     c5a:	3c 91       	ld	r19, X
     c5c:	19 97       	sbiw	r26, 0x09	; 9
     c5e:	40 1b       	sub	r20, r16
     c60:	51 0b       	sbc	r21, r17
     c62:	62 0b       	sbc	r22, r18
     c64:	73 0b       	sbc	r23, r19
     c66:	7a f4       	brpl	.+30     	; 0xc86 <schedule+0x6c>
     c68:	fc 01       	movw	r30, r24
     c6a:	20 81       	ld	r18, Z
     c6c:	31 81       	ldd	r19, Z+1	; 0x01
     c6e:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <threadPool+0x1>
     c72:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <threadPool>
     c76:	d1 83       	std	Z+1, r29	; 0x01
     c78:	c0 83       	st	Z, r28
     c7a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <activeStack+0x1>
     c7e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <activeStack>
     c82:	0e 94 ed 05 	call	0xbda	; 0xbda <dispatch>
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <__vector_1>:
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     cb6:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     cba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cbe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cc2:	c9 01       	movw	r24, r18
     cc4:	03 2e       	mov	r0, r19
     cc6:	00 0c       	add	r0, r0
     cc8:	aa 0b       	sbc	r26, r26
     cca:	bb 0b       	sbc	r27, r27
     ccc:	dc 01       	movw	r26, r24
     cce:	99 27       	eor	r25, r25
     cd0:	88 27       	eor	r24, r24
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	84 2b       	or	r24, r20
     cd8:	95 2b       	or	r25, r21
     cda:	a6 2b       	or	r26, r22
     cdc:	b7 2b       	or	r27, r23
     cde:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     ce2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     ce6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     cea:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     cee:	b0 9b       	sbis	0x16, 0	; 22
     cf0:	1b c0       	rjmp	.+54     	; 0xd28 <__vector_1+0x98>
     cf2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cf6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cfa:	c9 01       	movw	r24, r18
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	09 2e       	mov	r0, r25
     d00:	00 0c       	add	r0, r0
     d02:	aa 0b       	sbc	r26, r26
     d04:	bb 0b       	sbc	r27, r27
     d06:	dc 01       	movw	r26, r24
     d08:	99 27       	eor	r25, r25
     d0a:	88 27       	eor	r24, r24
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	84 2b       	or	r24, r20
     d12:	95 2b       	or	r25, r21
     d14:	a6 2b       	or	r26, r22
     d16:	b7 2b       	or	r27, r23
     d18:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     d1c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     d20:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     d24:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     d28:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable>
     d2c:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	39 f0       	breq	.+14     	; 0xd42 <__vector_1+0xb2>
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable>
     d3c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1>
     d40:	09 95       	icall
     d42:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_2>:
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     d8e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     d92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d9a:	c9 01       	movw	r24, r18
     d9c:	03 2e       	mov	r0, r19
     d9e:	00 0c       	add	r0, r0
     da0:	aa 0b       	sbc	r26, r26
     da2:	bb 0b       	sbc	r27, r27
     da4:	dc 01       	movw	r26, r24
     da6:	99 27       	eor	r25, r25
     da8:	88 27       	eor	r24, r24
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	84 2b       	or	r24, r20
     db0:	95 2b       	or	r25, r21
     db2:	a6 2b       	or	r26, r22
     db4:	b7 2b       	or	r27, r23
     db6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     dba:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     dbe:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     dc2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     dc6:	b0 9b       	sbis	0x16, 0	; 22
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <__vector_2+0x98>
     dca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd2:	c9 01       	movw	r24, r18
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	09 2e       	mov	r0, r25
     dd8:	00 0c       	add	r0, r0
     dda:	aa 0b       	sbc	r26, r26
     ddc:	bb 0b       	sbc	r27, r27
     dde:	dc 01       	movw	r26, r24
     de0:	99 27       	eor	r25, r25
     de2:	88 27       	eor	r24, r24
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	84 2b       	or	r24, r20
     dea:	95 2b       	or	r25, r21
     dec:	a6 2b       	or	r26, r22
     dee:	b7 2b       	or	r27, r23
     df0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     df4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     df8:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     dfc:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     e00:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x2>
     e04:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x3>
     e08:	30 97       	sbiw	r30, 0x00	; 0
     e0a:	39 f0       	breq	.+14     	; 0xe1a <__vector_2+0xb2>
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x2>
     e14:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x3>
     e18:	09 95       	icall
     e1a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_3>:
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     e66:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     e6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e72:	c9 01       	movw	r24, r18
     e74:	03 2e       	mov	r0, r19
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	dc 01       	movw	r26, r24
     e7e:	99 27       	eor	r25, r25
     e80:	88 27       	eor	r24, r24
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	84 2b       	or	r24, r20
     e88:	95 2b       	or	r25, r21
     e8a:	a6 2b       	or	r26, r22
     e8c:	b7 2b       	or	r27, r23
     e8e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     e92:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     e96:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     e9a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     e9e:	b0 9b       	sbis	0x16, 0	; 22
     ea0:	1b c0       	rjmp	.+54     	; 0xed8 <__vector_3+0x98>
     ea2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ea6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eaa:	c9 01       	movw	r24, r18
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	09 2e       	mov	r0, r25
     eb0:	00 0c       	add	r0, r0
     eb2:	aa 0b       	sbc	r26, r26
     eb4:	bb 0b       	sbc	r27, r27
     eb6:	dc 01       	movw	r26, r24
     eb8:	99 27       	eor	r25, r25
     eba:	88 27       	eor	r24, r24
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	84 2b       	or	r24, r20
     ec2:	95 2b       	or	r25, r21
     ec4:	a6 2b       	or	r26, r22
     ec6:	b7 2b       	or	r27, r23
     ec8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     ecc:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     ed0:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     ed4:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     ed8:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x4>
     edc:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x5>
     ee0:	30 97       	sbiw	r30, 0x00	; 0
     ee2:	39 f0       	breq	.+14     	; 0xef2 <__vector_3+0xb2>
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x4>
     eec:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x5>
     ef0:	09 95       	icall
     ef2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_4>:
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
     f3e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
     f42:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f46:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f4a:	c9 01       	movw	r24, r18
     f4c:	03 2e       	mov	r0, r19
     f4e:	00 0c       	add	r0, r0
     f50:	aa 0b       	sbc	r26, r26
     f52:	bb 0b       	sbc	r27, r27
     f54:	dc 01       	movw	r26, r24
     f56:	99 27       	eor	r25, r25
     f58:	88 27       	eor	r24, r24
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	84 2b       	or	r24, r20
     f60:	95 2b       	or	r25, r21
     f62:	a6 2b       	or	r26, r22
     f64:	b7 2b       	or	r27, r23
     f66:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     f6a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     f6e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     f72:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     f76:	b0 9b       	sbis	0x16, 0	; 22
     f78:	1b c0       	rjmp	.+54     	; 0xfb0 <__vector_4+0x98>
     f7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f82:	c9 01       	movw	r24, r18
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	09 2e       	mov	r0, r25
     f88:	00 0c       	add	r0, r0
     f8a:	aa 0b       	sbc	r26, r26
     f8c:	bb 0b       	sbc	r27, r27
     f8e:	dc 01       	movw	r26, r24
     f90:	99 27       	eor	r25, r25
     f92:	88 27       	eor	r24, r24
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 2b       	or	r24, r20
     f9a:	95 2b       	or	r25, r21
     f9c:	a6 2b       	or	r26, r22
     f9e:	b7 2b       	or	r27, r23
     fa0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
     fa4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
     fa8:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
     fac:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
     fb0:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x6>
     fb4:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x7>
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	39 f0       	breq	.+14     	; 0xfca <__vector_4+0xb2>
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x6>
     fc4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x7>
     fc8:	09 95       	icall
     fca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_5>:
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1016:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    101a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    101e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1022:	c9 01       	movw	r24, r18
    1024:	03 2e       	mov	r0, r19
    1026:	00 0c       	add	r0, r0
    1028:	aa 0b       	sbc	r26, r26
    102a:	bb 0b       	sbc	r27, r27
    102c:	dc 01       	movw	r26, r24
    102e:	99 27       	eor	r25, r25
    1030:	88 27       	eor	r24, r24
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	84 2b       	or	r24, r20
    1038:	95 2b       	or	r25, r21
    103a:	a6 2b       	or	r26, r22
    103c:	b7 2b       	or	r27, r23
    103e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1042:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1046:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    104a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    104e:	b0 9b       	sbis	0x16, 0	; 22
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <__vector_5+0x98>
    1052:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1056:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    105a:	c9 01       	movw	r24, r18
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	09 2e       	mov	r0, r25
    1060:	00 0c       	add	r0, r0
    1062:	aa 0b       	sbc	r26, r26
    1064:	bb 0b       	sbc	r27, r27
    1066:	dc 01       	movw	r26, r24
    1068:	99 27       	eor	r25, r25
    106a:	88 27       	eor	r24, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	84 2b       	or	r24, r20
    1072:	95 2b       	or	r25, r21
    1074:	a6 2b       	or	r26, r22
    1076:	b7 2b       	or	r27, r23
    1078:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    107c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1080:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1084:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1088:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x8>
    108c:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x9>
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	39 f0       	breq	.+14     	; 0x10a2 <__vector_5+0xb2>
    1094:	64 e0       	ldi	r22, 0x04	; 4
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x8>
    109c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x9>
    10a0:	09 95       	icall
    10a2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_10>:
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    10ee:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    10f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fa:	c9 01       	movw	r24, r18
    10fc:	03 2e       	mov	r0, r19
    10fe:	00 0c       	add	r0, r0
    1100:	aa 0b       	sbc	r26, r26
    1102:	bb 0b       	sbc	r27, r27
    1104:	dc 01       	movw	r26, r24
    1106:	99 27       	eor	r25, r25
    1108:	88 27       	eor	r24, r24
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	84 2b       	or	r24, r20
    1110:	95 2b       	or	r25, r21
    1112:	a6 2b       	or	r26, r22
    1114:	b7 2b       	or	r27, r23
    1116:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    111a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    111e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1122:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1126:	b0 9b       	sbis	0x16, 0	; 22
    1128:	1b c0       	rjmp	.+54     	; 0x1160 <__vector_10+0x98>
    112a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    112e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1132:	c9 01       	movw	r24, r18
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	09 2e       	mov	r0, r25
    1138:	00 0c       	add	r0, r0
    113a:	aa 0b       	sbc	r26, r26
    113c:	bb 0b       	sbc	r27, r27
    113e:	dc 01       	movw	r26, r24
    1140:	99 27       	eor	r25, r25
    1142:	88 27       	eor	r24, r24
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	84 2b       	or	r24, r20
    114a:	95 2b       	or	r25, r21
    114c:	a6 2b       	or	r26, r22
    114e:	b7 2b       	or	r27, r23
    1150:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1154:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1158:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    115c:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1160:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0xa>
    1164:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0xb>
    1168:	30 97       	sbiw	r30, 0x00	; 0
    116a:	39 f0       	breq	.+14     	; 0x117a <__vector_10+0xb2>
    116c:	65 e0       	ldi	r22, 0x05	; 5
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0xa>
    1174:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0xb>
    1178:	09 95       	icall
    117a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_11>:
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    11c6:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    11ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11d2:	c9 01       	movw	r24, r18
    11d4:	03 2e       	mov	r0, r19
    11d6:	00 0c       	add	r0, r0
    11d8:	aa 0b       	sbc	r26, r26
    11da:	bb 0b       	sbc	r27, r27
    11dc:	dc 01       	movw	r26, r24
    11de:	99 27       	eor	r25, r25
    11e0:	88 27       	eor	r24, r24
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	84 2b       	or	r24, r20
    11e8:	95 2b       	or	r25, r21
    11ea:	a6 2b       	or	r26, r22
    11ec:	b7 2b       	or	r27, r23
    11ee:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    11f2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    11f6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    11fa:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    11fe:	b0 9b       	sbis	0x16, 0	; 22
    1200:	1b c0       	rjmp	.+54     	; 0x1238 <__vector_11+0x98>
    1202:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1206:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    120a:	c9 01       	movw	r24, r18
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	09 2e       	mov	r0, r25
    1210:	00 0c       	add	r0, r0
    1212:	aa 0b       	sbc	r26, r26
    1214:	bb 0b       	sbc	r27, r27
    1216:	dc 01       	movw	r26, r24
    1218:	99 27       	eor	r25, r25
    121a:	88 27       	eor	r24, r24
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	84 2b       	or	r24, r20
    1222:	95 2b       	or	r25, r21
    1224:	a6 2b       	or	r26, r22
    1226:	b7 2b       	or	r27, r23
    1228:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    122c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1230:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1234:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1238:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0xc>
    123c:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0xd>
    1240:	30 97       	sbiw	r30, 0x00	; 0
    1242:	39 f0       	breq	.+14     	; 0x1252 <__vector_11+0xb2>
    1244:	66 e0       	ldi	r22, 0x06	; 6
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0xc>
    124c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0xd>
    1250:	09 95       	icall
    1252:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_12>:
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    129e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    12a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12aa:	c9 01       	movw	r24, r18
    12ac:	03 2e       	mov	r0, r19
    12ae:	00 0c       	add	r0, r0
    12b0:	aa 0b       	sbc	r26, r26
    12b2:	bb 0b       	sbc	r27, r27
    12b4:	dc 01       	movw	r26, r24
    12b6:	99 27       	eor	r25, r25
    12b8:	88 27       	eor	r24, r24
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	84 2b       	or	r24, r20
    12c0:	95 2b       	or	r25, r21
    12c2:	a6 2b       	or	r26, r22
    12c4:	b7 2b       	or	r27, r23
    12c6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    12ca:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    12ce:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    12d2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    12d6:	b0 9b       	sbis	0x16, 0	; 22
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <__vector_12+0x98>
    12da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12e2:	c9 01       	movw	r24, r18
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	09 2e       	mov	r0, r25
    12e8:	00 0c       	add	r0, r0
    12ea:	aa 0b       	sbc	r26, r26
    12ec:	bb 0b       	sbc	r27, r27
    12ee:	dc 01       	movw	r26, r24
    12f0:	99 27       	eor	r25, r25
    12f2:	88 27       	eor	r24, r24
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	84 2b       	or	r24, r20
    12fa:	95 2b       	or	r25, r21
    12fc:	a6 2b       	or	r26, r22
    12fe:	b7 2b       	or	r27, r23
    1300:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1304:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1308:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    130c:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1310:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0xe>
    1314:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0xf>
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	39 f0       	breq	.+14     	; 0x132a <__vector_12+0xb2>
    131c:	67 e0       	ldi	r22, 0x07	; 7
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0xe>
    1324:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0xf>
    1328:	09 95       	icall
    132a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_13>:
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31
    1372:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1376:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    137a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    137e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1382:	c9 01       	movw	r24, r18
    1384:	03 2e       	mov	r0, r19
    1386:	00 0c       	add	r0, r0
    1388:	aa 0b       	sbc	r26, r26
    138a:	bb 0b       	sbc	r27, r27
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	84 2b       	or	r24, r20
    1398:	95 2b       	or	r25, r21
    139a:	a6 2b       	or	r26, r22
    139c:	b7 2b       	or	r27, r23
    139e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    13a2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    13a6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    13aa:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    13ae:	b0 9b       	sbis	0x16, 0	; 22
    13b0:	1b c0       	rjmp	.+54     	; 0x13e8 <__vector_13+0x98>
    13b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ba:	c9 01       	movw	r24, r18
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	09 2e       	mov	r0, r25
    13c0:	00 0c       	add	r0, r0
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	bb 0b       	sbc	r27, r27
    13c6:	dc 01       	movw	r26, r24
    13c8:	99 27       	eor	r25, r25
    13ca:	88 27       	eor	r24, r24
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	84 2b       	or	r24, r20
    13d2:	95 2b       	or	r25, r21
    13d4:	a6 2b       	or	r26, r22
    13d6:	b7 2b       	or	r27, r23
    13d8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    13dc:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    13e0:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    13e4:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    13e8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x10>
    13ec:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x11>
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	39 f0       	breq	.+14     	; 0x1402 <__vector_13+0xb2>
    13f4:	68 e0       	ldi	r22, 0x08	; 8
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x10>
    13fc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x11>
    1400:	09 95       	icall
    1402:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <__vector_14>:
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	2f 93       	push	r18
    1434:	3f 93       	push	r19
    1436:	4f 93       	push	r20
    1438:	5f 93       	push	r21
    143a:	6f 93       	push	r22
    143c:	7f 93       	push	r23
    143e:	8f 93       	push	r24
    1440:	9f 93       	push	r25
    1442:	af 93       	push	r26
    1444:	bf 93       	push	r27
    1446:	ef 93       	push	r30
    1448:	ff 93       	push	r31
    144a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    144e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1452:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1456:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    145a:	c9 01       	movw	r24, r18
    145c:	03 2e       	mov	r0, r19
    145e:	00 0c       	add	r0, r0
    1460:	aa 0b       	sbc	r26, r26
    1462:	bb 0b       	sbc	r27, r27
    1464:	dc 01       	movw	r26, r24
    1466:	99 27       	eor	r25, r25
    1468:	88 27       	eor	r24, r24
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	84 2b       	or	r24, r20
    1470:	95 2b       	or	r25, r21
    1472:	a6 2b       	or	r26, r22
    1474:	b7 2b       	or	r27, r23
    1476:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    147a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    147e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1482:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1486:	b0 9b       	sbis	0x16, 0	; 22
    1488:	1b c0       	rjmp	.+54     	; 0x14c0 <__vector_14+0x98>
    148a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    148e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1492:	c9 01       	movw	r24, r18
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	09 2e       	mov	r0, r25
    1498:	00 0c       	add	r0, r0
    149a:	aa 0b       	sbc	r26, r26
    149c:	bb 0b       	sbc	r27, r27
    149e:	dc 01       	movw	r26, r24
    14a0:	99 27       	eor	r25, r25
    14a2:	88 27       	eor	r24, r24
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	84 2b       	or	r24, r20
    14aa:	95 2b       	or	r25, r21
    14ac:	a6 2b       	or	r26, r22
    14ae:	b7 2b       	or	r27, r23
    14b0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    14b4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    14b8:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    14bc:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    14c0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x12>
    14c4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x13>
    14c8:	30 97       	sbiw	r30, 0x00	; 0
    14ca:	39 f0       	breq	.+14     	; 0x14da <__vector_14+0xb2>
    14cc:	69 e0       	ldi	r22, 0x09	; 9
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x12>
    14d4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x13>
    14d8:	09 95       	icall
    14da:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <__vector_15>:
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1526:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    152a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    152e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1532:	c9 01       	movw	r24, r18
    1534:	03 2e       	mov	r0, r19
    1536:	00 0c       	add	r0, r0
    1538:	aa 0b       	sbc	r26, r26
    153a:	bb 0b       	sbc	r27, r27
    153c:	dc 01       	movw	r26, r24
    153e:	99 27       	eor	r25, r25
    1540:	88 27       	eor	r24, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	84 2b       	or	r24, r20
    1548:	95 2b       	or	r25, r21
    154a:	a6 2b       	or	r26, r22
    154c:	b7 2b       	or	r27, r23
    154e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1552:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1556:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    155a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    155e:	b0 9b       	sbis	0x16, 0	; 22
    1560:	1b c0       	rjmp	.+54     	; 0x1598 <__vector_15+0x98>
    1562:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1566:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    156a:	c9 01       	movw	r24, r18
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	09 2e       	mov	r0, r25
    1570:	00 0c       	add	r0, r0
    1572:	aa 0b       	sbc	r26, r26
    1574:	bb 0b       	sbc	r27, r27
    1576:	dc 01       	movw	r26, r24
    1578:	99 27       	eor	r25, r25
    157a:	88 27       	eor	r24, r24
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	84 2b       	or	r24, r20
    1582:	95 2b       	or	r25, r21
    1584:	a6 2b       	or	r26, r22
    1586:	b7 2b       	or	r27, r23
    1588:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    158c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1590:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1594:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1598:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x14>
    159c:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x15>
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <__vector_15+0xb2>
    15a4:	6a e0       	ldi	r22, 0x0A	; 10
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x14>
    15ac:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x15>
    15b0:	09 95       	icall
    15b2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_16>:
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	2f 93       	push	r18
    15e4:	3f 93       	push	r19
    15e6:	4f 93       	push	r20
    15e8:	5f 93       	push	r21
    15ea:	6f 93       	push	r22
    15ec:	7f 93       	push	r23
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
    15f2:	af 93       	push	r26
    15f4:	bf 93       	push	r27
    15f6:	ef 93       	push	r30
    15f8:	ff 93       	push	r31
    15fa:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    15fe:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1602:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1606:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    160a:	c9 01       	movw	r24, r18
    160c:	03 2e       	mov	r0, r19
    160e:	00 0c       	add	r0, r0
    1610:	aa 0b       	sbc	r26, r26
    1612:	bb 0b       	sbc	r27, r27
    1614:	dc 01       	movw	r26, r24
    1616:	99 27       	eor	r25, r25
    1618:	88 27       	eor	r24, r24
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	84 2b       	or	r24, r20
    1620:	95 2b       	or	r25, r21
    1622:	a6 2b       	or	r26, r22
    1624:	b7 2b       	or	r27, r23
    1626:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    162a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    162e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1632:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1636:	b0 9b       	sbis	0x16, 0	; 22
    1638:	1b c0       	rjmp	.+54     	; 0x1670 <__vector_16+0x98>
    163a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    163e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1642:	c9 01       	movw	r24, r18
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	09 2e       	mov	r0, r25
    1648:	00 0c       	add	r0, r0
    164a:	aa 0b       	sbc	r26, r26
    164c:	bb 0b       	sbc	r27, r27
    164e:	dc 01       	movw	r26, r24
    1650:	99 27       	eor	r25, r25
    1652:	88 27       	eor	r24, r24
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	84 2b       	or	r24, r20
    165a:	95 2b       	or	r25, r21
    165c:	a6 2b       	or	r26, r22
    165e:	b7 2b       	or	r27, r23
    1660:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1664:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1668:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    166c:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1670:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x16>
    1674:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x17>
    1678:	30 97       	sbiw	r30, 0x00	; 0
    167a:	39 f0       	breq	.+14     	; 0x168a <__vector_16+0xb2>
    167c:	6b e0       	ldi	r22, 0x0B	; 11
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x16>
    1684:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x17>
    1688:	09 95       	icall
    168a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <__vector_17>:
    16b0:	1f 92       	push	r1
    16b2:	0f 92       	push	r0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	0f 92       	push	r0
    16b8:	11 24       	eor	r1, r1
    16ba:	2f 93       	push	r18
    16bc:	3f 93       	push	r19
    16be:	4f 93       	push	r20
    16c0:	5f 93       	push	r21
    16c2:	6f 93       	push	r22
    16c4:	7f 93       	push	r23
    16c6:	8f 93       	push	r24
    16c8:	9f 93       	push	r25
    16ca:	af 93       	push	r26
    16cc:	bf 93       	push	r27
    16ce:	ef 93       	push	r30
    16d0:	ff 93       	push	r31
    16d2:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    16d6:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    16da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e2:	c9 01       	movw	r24, r18
    16e4:	03 2e       	mov	r0, r19
    16e6:	00 0c       	add	r0, r0
    16e8:	aa 0b       	sbc	r26, r26
    16ea:	bb 0b       	sbc	r27, r27
    16ec:	dc 01       	movw	r26, r24
    16ee:	99 27       	eor	r25, r25
    16f0:	88 27       	eor	r24, r24
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	84 2b       	or	r24, r20
    16f8:	95 2b       	or	r25, r21
    16fa:	a6 2b       	or	r26, r22
    16fc:	b7 2b       	or	r27, r23
    16fe:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1702:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1706:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    170a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    170e:	b0 9b       	sbis	0x16, 0	; 22
    1710:	1b c0       	rjmp	.+54     	; 0x1748 <__vector_17+0x98>
    1712:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1716:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    171a:	c9 01       	movw	r24, r18
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	09 2e       	mov	r0, r25
    1720:	00 0c       	add	r0, r0
    1722:	aa 0b       	sbc	r26, r26
    1724:	bb 0b       	sbc	r27, r27
    1726:	dc 01       	movw	r26, r24
    1728:	99 27       	eor	r25, r25
    172a:	88 27       	eor	r24, r24
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	84 2b       	or	r24, r20
    1732:	95 2b       	or	r25, r21
    1734:	a6 2b       	or	r26, r22
    1736:	b7 2b       	or	r27, r23
    1738:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    173c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1740:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1744:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1748:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0x18>
    174c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0x19>
    1750:	30 97       	sbiw	r30, 0x00	; 0
    1752:	39 f0       	breq	.+14     	; 0x1762 <__vector_17+0xb2>
    1754:	6c e0       	ldi	r22, 0x0C	; 12
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0x18>
    175c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0x19>
    1760:	09 95       	icall
    1762:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_18>:
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	2f 93       	push	r18
    1794:	3f 93       	push	r19
    1796:	4f 93       	push	r20
    1798:	5f 93       	push	r21
    179a:	6f 93       	push	r22
    179c:	7f 93       	push	r23
    179e:	8f 93       	push	r24
    17a0:	9f 93       	push	r25
    17a2:	af 93       	push	r26
    17a4:	bf 93       	push	r27
    17a6:	ef 93       	push	r30
    17a8:	ff 93       	push	r31
    17aa:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    17ae:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    17b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ba:	c9 01       	movw	r24, r18
    17bc:	03 2e       	mov	r0, r19
    17be:	00 0c       	add	r0, r0
    17c0:	aa 0b       	sbc	r26, r26
    17c2:	bb 0b       	sbc	r27, r27
    17c4:	dc 01       	movw	r26, r24
    17c6:	99 27       	eor	r25, r25
    17c8:	88 27       	eor	r24, r24
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	84 2b       	or	r24, r20
    17d0:	95 2b       	or	r25, r21
    17d2:	a6 2b       	or	r26, r22
    17d4:	b7 2b       	or	r27, r23
    17d6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    17da:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    17de:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    17e2:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    17e6:	b0 9b       	sbis	0x16, 0	; 22
    17e8:	1b c0       	rjmp	.+54     	; 0x1820 <__vector_18+0x98>
    17ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17f2:	c9 01       	movw	r24, r18
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	09 2e       	mov	r0, r25
    17f8:	00 0c       	add	r0, r0
    17fa:	aa 0b       	sbc	r26, r26
    17fc:	bb 0b       	sbc	r27, r27
    17fe:	dc 01       	movw	r26, r24
    1800:	99 27       	eor	r25, r25
    1802:	88 27       	eor	r24, r24
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	84 2b       	or	r24, r20
    180a:	95 2b       	or	r25, r21
    180c:	a6 2b       	or	r26, r22
    180e:	b7 2b       	or	r27, r23
    1810:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1814:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1818:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    181c:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1820:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0x1a>
    1824:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0x1b>
    1828:	30 97       	sbiw	r30, 0x00	; 0
    182a:	39 f0       	breq	.+14     	; 0x183a <__vector_18+0xb2>
    182c:	6d e0       	ldi	r22, 0x0D	; 13
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0x1a>
    1834:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0x1b>
    1838:	09 95       	icall
    183a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    183e:	ff 91       	pop	r31
    1840:	ef 91       	pop	r30
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	0f 90       	pop	r0
    185c:	1f 90       	pop	r1
    185e:	18 95       	reti

00001860 <__vector_19>:
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
    1882:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1886:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    188a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    188e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1892:	c9 01       	movw	r24, r18
    1894:	03 2e       	mov	r0, r19
    1896:	00 0c       	add	r0, r0
    1898:	aa 0b       	sbc	r26, r26
    189a:	bb 0b       	sbc	r27, r27
    189c:	dc 01       	movw	r26, r24
    189e:	99 27       	eor	r25, r25
    18a0:	88 27       	eor	r24, r24
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	84 2b       	or	r24, r20
    18a8:	95 2b       	or	r25, r21
    18aa:	a6 2b       	or	r26, r22
    18ac:	b7 2b       	or	r27, r23
    18ae:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    18b2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    18b6:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    18ba:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    18be:	b0 9b       	sbis	0x16, 0	; 22
    18c0:	1b c0       	rjmp	.+54     	; 0x18f8 <__vector_19+0x98>
    18c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ca:	c9 01       	movw	r24, r18
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	09 2e       	mov	r0, r25
    18d0:	00 0c       	add	r0, r0
    18d2:	aa 0b       	sbc	r26, r26
    18d4:	bb 0b       	sbc	r27, r27
    18d6:	dc 01       	movw	r26, r24
    18d8:	99 27       	eor	r25, r25
    18da:	88 27       	eor	r24, r24
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	84 2b       	or	r24, r20
    18e2:	95 2b       	or	r25, r21
    18e4:	a6 2b       	or	r26, r22
    18e6:	b7 2b       	or	r27, r23
    18e8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    18ec:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    18f0:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    18f4:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    18f8:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x1c>
    18fc:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x1d>
    1900:	30 97       	sbiw	r30, 0x00	; 0
    1902:	39 f0       	breq	.+14     	; 0x1912 <__vector_19+0xb2>
    1904:	6e e0       	ldi	r22, 0x0E	; 14
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x1c>
    190c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x1d>
    1910:	09 95       	icall
    1912:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1916:	ff 91       	pop	r31
    1918:	ef 91       	pop	r30
    191a:	bf 91       	pop	r27
    191c:	af 91       	pop	r26
    191e:	9f 91       	pop	r25
    1920:	8f 91       	pop	r24
    1922:	7f 91       	pop	r23
    1924:	6f 91       	pop	r22
    1926:	5f 91       	pop	r21
    1928:	4f 91       	pop	r20
    192a:	3f 91       	pop	r19
    192c:	2f 91       	pop	r18
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <__vector_20>:
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
    195a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    195e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1962:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1966:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    196a:	c9 01       	movw	r24, r18
    196c:	03 2e       	mov	r0, r19
    196e:	00 0c       	add	r0, r0
    1970:	aa 0b       	sbc	r26, r26
    1972:	bb 0b       	sbc	r27, r27
    1974:	dc 01       	movw	r26, r24
    1976:	99 27       	eor	r25, r25
    1978:	88 27       	eor	r24, r24
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	84 2b       	or	r24, r20
    1980:	95 2b       	or	r25, r21
    1982:	a6 2b       	or	r26, r22
    1984:	b7 2b       	or	r27, r23
    1986:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    198a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    198e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1992:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1996:	b0 9b       	sbis	0x16, 0	; 22
    1998:	1b c0       	rjmp	.+54     	; 0x19d0 <__vector_20+0x98>
    199a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    199e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19a2:	c9 01       	movw	r24, r18
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	09 2e       	mov	r0, r25
    19a8:	00 0c       	add	r0, r0
    19aa:	aa 0b       	sbc	r26, r26
    19ac:	bb 0b       	sbc	r27, r27
    19ae:	dc 01       	movw	r26, r24
    19b0:	99 27       	eor	r25, r25
    19b2:	88 27       	eor	r24, r24
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	84 2b       	or	r24, r20
    19ba:	95 2b       	or	r25, r21
    19bc:	a6 2b       	or	r26, r22
    19be:	b7 2b       	or	r27, r23
    19c0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    19c4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    19c8:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    19cc:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    19d0:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x1e>
    19d4:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x1f>
    19d8:	30 97       	sbiw	r30, 0x00	; 0
    19da:	39 f0       	breq	.+14     	; 0x19ea <__vector_20+0xb2>
    19dc:	6f e0       	ldi	r22, 0x0F	; 15
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x1e>
    19e4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x1f>
    19e8:	09 95       	icall
    19ea:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	0f 90       	pop	r0
    1a0c:	1f 90       	pop	r1
    1a0e:	18 95       	reti

00001a10 <__vector_21>:
    1a10:	1f 92       	push	r1
    1a12:	0f 92       	push	r0
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	0f 92       	push	r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	2f 93       	push	r18
    1a1c:	3f 93       	push	r19
    1a1e:	4f 93       	push	r20
    1a20:	5f 93       	push	r21
    1a22:	6f 93       	push	r22
    1a24:	7f 93       	push	r23
    1a26:	8f 93       	push	r24
    1a28:	9f 93       	push	r25
    1a2a:	af 93       	push	r26
    1a2c:	bf 93       	push	r27
    1a2e:	ef 93       	push	r30
    1a30:	ff 93       	push	r31
    1a32:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1a36:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1a3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a42:	c9 01       	movw	r24, r18
    1a44:	03 2e       	mov	r0, r19
    1a46:	00 0c       	add	r0, r0
    1a48:	aa 0b       	sbc	r26, r26
    1a4a:	bb 0b       	sbc	r27, r27
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	99 27       	eor	r25, r25
    1a50:	88 27       	eor	r24, r24
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	84 2b       	or	r24, r20
    1a58:	95 2b       	or	r25, r21
    1a5a:	a6 2b       	or	r26, r22
    1a5c:	b7 2b       	or	r27, r23
    1a5e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1a62:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1a66:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1a6a:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1a6e:	b0 9b       	sbis	0x16, 0	; 22
    1a70:	1b c0       	rjmp	.+54     	; 0x1aa8 <__vector_21+0x98>
    1a72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a7a:	c9 01       	movw	r24, r18
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	09 2e       	mov	r0, r25
    1a80:	00 0c       	add	r0, r0
    1a82:	aa 0b       	sbc	r26, r26
    1a84:	bb 0b       	sbc	r27, r27
    1a86:	dc 01       	movw	r26, r24
    1a88:	99 27       	eor	r25, r25
    1a8a:	88 27       	eor	r24, r24
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	84 2b       	or	r24, r20
    1a92:	95 2b       	or	r25, r21
    1a94:	a6 2b       	or	r26, r22
    1a96:	b7 2b       	or	r27, r23
    1a98:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1a9c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1aa0:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1aa4:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1aa8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x20>
    1aac:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x21>
    1ab0:	30 97       	sbiw	r30, 0x00	; 0
    1ab2:	39 f0       	breq	.+14     	; 0x1ac2 <__vector_21+0xb2>
    1ab4:	60 e1       	ldi	r22, 0x10	; 16
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x20>
    1abc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x21>
    1ac0:	09 95       	icall
    1ac2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1ac6:	ff 91       	pop	r31
    1ac8:	ef 91       	pop	r30
    1aca:	bf 91       	pop	r27
    1acc:	af 91       	pop	r26
    1ace:	9f 91       	pop	r25
    1ad0:	8f 91       	pop	r24
    1ad2:	7f 91       	pop	r23
    1ad4:	6f 91       	pop	r22
    1ad6:	5f 91       	pop	r21
    1ad8:	4f 91       	pop	r20
    1ada:	3f 91       	pop	r19
    1adc:	2f 91       	pop	r18
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	0f 90       	pop	r0
    1ae4:	1f 90       	pop	r1
    1ae6:	18 95       	reti

00001ae8 <__vector_22>:
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
    1b0a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1b0e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1b12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b1a:	c9 01       	movw	r24, r18
    1b1c:	03 2e       	mov	r0, r19
    1b1e:	00 0c       	add	r0, r0
    1b20:	aa 0b       	sbc	r26, r26
    1b22:	bb 0b       	sbc	r27, r27
    1b24:	dc 01       	movw	r26, r24
    1b26:	99 27       	eor	r25, r25
    1b28:	88 27       	eor	r24, r24
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	84 2b       	or	r24, r20
    1b30:	95 2b       	or	r25, r21
    1b32:	a6 2b       	or	r26, r22
    1b34:	b7 2b       	or	r27, r23
    1b36:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1b3a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1b3e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1b42:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1b46:	b0 9b       	sbis	0x16, 0	; 22
    1b48:	1b c0       	rjmp	.+54     	; 0x1b80 <__vector_22+0x98>
    1b4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b52:	c9 01       	movw	r24, r18
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	09 2e       	mov	r0, r25
    1b58:	00 0c       	add	r0, r0
    1b5a:	aa 0b       	sbc	r26, r26
    1b5c:	bb 0b       	sbc	r27, r27
    1b5e:	dc 01       	movw	r26, r24
    1b60:	99 27       	eor	r25, r25
    1b62:	88 27       	eor	r24, r24
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	84 2b       	or	r24, r20
    1b6a:	95 2b       	or	r25, r21
    1b6c:	a6 2b       	or	r26, r22
    1b6e:	b7 2b       	or	r27, r23
    1b70:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <timestamp>
    1b74:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <timestamp+0x1>
    1b78:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <timestamp+0x2>
    1b7c:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <timestamp+0x3>
    1b80:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x22>
    1b84:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x23>
    1b88:	30 97       	sbiw	r30, 0x00	; 0
    1b8a:	39 f0       	breq	.+14     	; 0x1b9a <__vector_22+0xb2>
    1b8c:	61 e1       	ldi	r22, 0x11	; 17
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x22>
    1b94:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x23>
    1b98:	09 95       	icall
    1b9a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <enqueueByDeadline>:
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	7b 01       	movw	r14, r22
    1bce:	eb 01       	movw	r28, r22
    1bd0:	a8 81       	ld	r26, Y
    1bd2:	b9 81       	ldd	r27, Y+1	; 0x01
    1bd4:	10 97       	sbiw	r26, 0x00	; 0
    1bd6:	61 f1       	breq	.+88     	; 0x1c30 <enqueueByDeadline+0x70>
    1bd8:	fc 01       	movw	r30, r24
    1bda:	06 81       	ldd	r16, Z+6	; 0x06
    1bdc:	17 81       	ldd	r17, Z+7	; 0x07
    1bde:	20 85       	ldd	r18, Z+8	; 0x08
    1be0:	31 85       	ldd	r19, Z+9	; 0x09
    1be2:	16 96       	adiw	r26, 0x06	; 6
    1be4:	4d 91       	ld	r20, X+
    1be6:	5d 91       	ld	r21, X+
    1be8:	6d 91       	ld	r22, X+
    1bea:	7c 91       	ld	r23, X
    1bec:	19 97       	sbiw	r26, 0x09	; 9
    1bee:	04 17       	cp	r16, r20
    1bf0:	15 07       	cpc	r17, r21
    1bf2:	26 07       	cpc	r18, r22
    1bf4:	37 07       	cpc	r19, r23
    1bf6:	14 f4       	brge	.+4      	; 0x1bfc <enqueueByDeadline+0x3c>
    1bf8:	1b c0       	rjmp	.+54     	; 0x1c30 <enqueueByDeadline+0x70>
    1bfa:	df 01       	movw	r26, r30
    1bfc:	ed 91       	ld	r30, X+
    1bfe:	fc 91       	ld	r31, X
    1c00:	11 97       	sbiw	r26, 0x01	; 1
    1c02:	30 97       	sbiw	r30, 0x00	; 0
    1c04:	49 f0       	breq	.+18     	; 0x1c18 <enqueueByDeadline+0x58>
    1c06:	46 81       	ldd	r20, Z+6	; 0x06
    1c08:	57 81       	ldd	r21, Z+7	; 0x07
    1c0a:	60 85       	ldd	r22, Z+8	; 0x08
    1c0c:	71 85       	ldd	r23, Z+9	; 0x09
    1c0e:	04 17       	cp	r16, r20
    1c10:	15 07       	cpc	r17, r21
    1c12:	26 07       	cpc	r18, r22
    1c14:	37 07       	cpc	r19, r23
    1c16:	8c f7       	brge	.-30     	; 0x1bfa <enqueueByDeadline+0x3a>
    1c18:	ec 01       	movw	r28, r24
    1c1a:	f9 83       	std	Y+1, r31	; 0x01
    1c1c:	e8 83       	st	Y, r30
    1c1e:	10 97       	sbiw	r26, 0x00	; 0
    1c20:	21 f4       	brne	.+8      	; 0x1c2a <enqueueByDeadline+0x6a>
    1c22:	f7 01       	movw	r30, r14
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <enqueueByDeadline+0x78>
    1c2a:	8d 93       	st	X+, r24
    1c2c:	9c 93       	st	X, r25
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <enqueueByDeadline+0x78>
    1c30:	ec 01       	movw	r28, r24
    1c32:	b9 83       	std	Y+1, r27	; 0x01
    1c34:	a8 83       	st	Y, r26
    1c36:	f5 cf       	rjmp	.-22     	; 0x1c22 <enqueueByDeadline+0x62>
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	08 95       	ret

00001c46 <enqueueByBaseline>:
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	7b 01       	movw	r14, r22
    1c54:	eb 01       	movw	r28, r22
    1c56:	a8 81       	ld	r26, Y
    1c58:	b9 81       	ldd	r27, Y+1	; 0x01
    1c5a:	10 97       	sbiw	r26, 0x00	; 0
    1c5c:	61 f1       	breq	.+88     	; 0x1cb6 <enqueueByBaseline+0x70>
    1c5e:	fc 01       	movw	r30, r24
    1c60:	02 81       	ldd	r16, Z+2	; 0x02
    1c62:	13 81       	ldd	r17, Z+3	; 0x03
    1c64:	24 81       	ldd	r18, Z+4	; 0x04
    1c66:	35 81       	ldd	r19, Z+5	; 0x05
    1c68:	12 96       	adiw	r26, 0x02	; 2
    1c6a:	4d 91       	ld	r20, X+
    1c6c:	5d 91       	ld	r21, X+
    1c6e:	6d 91       	ld	r22, X+
    1c70:	7c 91       	ld	r23, X
    1c72:	15 97       	sbiw	r26, 0x05	; 5
    1c74:	04 17       	cp	r16, r20
    1c76:	15 07       	cpc	r17, r21
    1c78:	26 07       	cpc	r18, r22
    1c7a:	37 07       	cpc	r19, r23
    1c7c:	14 f4       	brge	.+4      	; 0x1c82 <enqueueByBaseline+0x3c>
    1c7e:	1b c0       	rjmp	.+54     	; 0x1cb6 <enqueueByBaseline+0x70>
    1c80:	df 01       	movw	r26, r30
    1c82:	ed 91       	ld	r30, X+
    1c84:	fc 91       	ld	r31, X
    1c86:	11 97       	sbiw	r26, 0x01	; 1
    1c88:	30 97       	sbiw	r30, 0x00	; 0
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <enqueueByBaseline+0x58>
    1c8c:	42 81       	ldd	r20, Z+2	; 0x02
    1c8e:	53 81       	ldd	r21, Z+3	; 0x03
    1c90:	64 81       	ldd	r22, Z+4	; 0x04
    1c92:	75 81       	ldd	r23, Z+5	; 0x05
    1c94:	04 17       	cp	r16, r20
    1c96:	15 07       	cpc	r17, r21
    1c98:	26 07       	cpc	r18, r22
    1c9a:	37 07       	cpc	r19, r23
    1c9c:	8c f7       	brge	.-30     	; 0x1c80 <enqueueByBaseline+0x3a>
    1c9e:	ec 01       	movw	r28, r24
    1ca0:	f9 83       	std	Y+1, r31	; 0x01
    1ca2:	e8 83       	st	Y, r30
    1ca4:	10 97       	sbiw	r26, 0x00	; 0
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <enqueueByBaseline+0x6a>
    1ca8:	f7 01       	movw	r30, r14
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <enqueueByBaseline+0x78>
    1cb0:	8d 93       	st	X+, r24
    1cb2:	9c 93       	st	X, r25
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <enqueueByBaseline+0x78>
    1cb6:	ec 01       	movw	r28, r24
    1cb8:	b9 83       	std	Y+1, r27	; 0x01
    1cba:	a8 83       	st	Y, r26
    1cbc:	f5 cf       	rjmp	.-22     	; 0x1ca8 <enqueueByBaseline+0x62>
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	08 95       	ret

00001ccc <dequeue>:
    1ccc:	dc 01       	movw	r26, r24
    1cce:	ed 91       	ld	r30, X+
    1cd0:	fc 91       	ld	r31, X
    1cd2:	11 97       	sbiw	r26, 0x01	; 1
    1cd4:	30 97       	sbiw	r30, 0x00	; 0
    1cd6:	59 f4       	brne	.+22     	; 0x1cee <dequeue+0x22>
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    1cde:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    1ce2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	83 bf       	out	0x33, r24	; 51
    1cea:	88 95       	sleep
    1cec:	fd cf       	rjmp	.-6      	; 0x1ce8 <dequeue+0x1c>
    1cee:	20 81       	ld	r18, Z
    1cf0:	31 81       	ldd	r19, Z+1	; 0x01
    1cf2:	2d 93       	st	X+, r18
    1cf4:	3c 93       	st	X, r19
    1cf6:	cf 01       	movw	r24, r30
    1cf8:	08 95       	ret

00001cfa <__vector_9>:
    1cfa:	1f 92       	push	r1
    1cfc:	0f 92       	push	r0
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	0f 92       	push	r0
    1d02:	11 24       	eor	r1, r1
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	ef 93       	push	r30
    1d16:	ff 93       	push	r31
    1d18:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    1d1c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
    1d26:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
    1d2a:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1d2e:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1d32:	30 97       	sbiw	r30, 0x00	; 0
    1d34:	01 f1       	breq	.+64     	; 0x1d76 <__vector_9+0x7c>
    1d36:	42 81       	ldd	r20, Z+2	; 0x02
    1d38:	53 81       	ldd	r21, Z+3	; 0x03
    1d3a:	64 81       	ldd	r22, Z+4	; 0x04
    1d3c:	75 81       	ldd	r23, Z+5	; 0x05
    1d3e:	86 17       	cp	r24, r22
    1d40:	97 07       	cpc	r25, r23
    1d42:	c9 f4       	brne	.+50     	; 0x1d76 <__vector_9+0x7c>
    1d44:	ca 01       	movw	r24, r20
    1d46:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d4a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d4e:	42 1b       	sub	r20, r18
    1d50:	53 0b       	sbc	r21, r19
    1d52:	41 30       	cpi	r20, 0x01	; 1
    1d54:	51 05       	cpc	r21, r1
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <__vector_9+0x68>
    1d58:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d5c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d66:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d6a:	ef e6       	ldi	r30, 0x6F	; 111
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	82 60       	ori	r24, 0x02	; 2
    1d72:	80 83       	st	Z, r24
    1d74:	05 c0       	rjmp	.+10     	; 0x1d80 <__vector_9+0x86>
    1d76:	ef e6       	ldi	r30, 0x6F	; 111
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8d 7f       	andi	r24, 0xFD	; 253
    1d7e:	80 83       	st	Z, r24
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	9f 91       	pop	r25
    1d86:	8f 91       	pop	r24
    1d88:	7f 91       	pop	r23
    1d8a:	6f 91       	pop	r22
    1d8c:	5f 91       	pop	r21
    1d8e:	4f 91       	pop	r20
    1d90:	3f 91       	pop	r19
    1d92:	2f 91       	pop	r18
    1d94:	0f 90       	pop	r0
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	0f 90       	pop	r0
    1d9a:	1f 90       	pop	r1
    1d9c:	18 95       	reti

00001d9e <__vector_7>:
    1d9e:	1f 92       	push	r1
    1da0:	0f 92       	push	r0
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	0f 92       	push	r0
    1da6:	11 24       	eor	r1, r1
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	2f 93       	push	r18
    1db2:	3f 93       	push	r19
    1db4:	4f 93       	push	r20
    1db6:	5f 93       	push	r21
    1db8:	6f 93       	push	r22
    1dba:	7f 93       	push	r23
    1dbc:	8f 93       	push	r24
    1dbe:	9f 93       	push	r25
    1dc0:	af 93       	push	r26
    1dc2:	bf 93       	push	r27
    1dc4:	ef 93       	push	r30
    1dc6:	ff 93       	push	r31
    1dc8:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <__data_end>
    1dcc:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <__data_end+0x1>
    1dd0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dd4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1dd8:	b0 99       	sbic	0x16, 0	; 22
    1dda:	0f c0       	rjmp	.+30     	; 0x1dfa <__vector_7+0x5c>
    1ddc:	0d 2c       	mov	r0, r13
    1dde:	00 0c       	add	r0, r0
    1de0:	ee 08       	sbc	r14, r14
    1de2:	ff 08       	sbc	r15, r15
    1de4:	d6 01       	movw	r26, r12
    1de6:	99 27       	eor	r25, r25
    1de8:	88 27       	eor	r24, r24
    1dea:	69 01       	movw	r12, r18
    1dec:	e1 2c       	mov	r14, r1
    1dee:	f1 2c       	mov	r15, r1
    1df0:	c8 2a       	or	r12, r24
    1df2:	d9 2a       	or	r13, r25
    1df4:	ea 2a       	or	r14, r26
    1df6:	fb 2a       	or	r15, r27
    1df8:	15 c0       	rjmp	.+42     	; 0x1e24 <__vector_7+0x86>
    1dfa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dfe:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	c8 1a       	sub	r12, r24
    1e06:	d8 0a       	sbc	r13, r24
    1e08:	0d 2c       	mov	r0, r13
    1e0a:	00 0c       	add	r0, r0
    1e0c:	ee 08       	sbc	r14, r14
    1e0e:	ff 08       	sbc	r15, r15
    1e10:	d6 01       	movw	r26, r12
    1e12:	99 27       	eor	r25, r25
    1e14:	88 27       	eor	r24, r24
    1e16:	69 01       	movw	r12, r18
    1e18:	e1 2c       	mov	r14, r1
    1e1a:	f1 2c       	mov	r15, r1
    1e1c:	c8 2a       	or	r12, r24
    1e1e:	d9 2a       	or	r13, r25
    1e20:	ea 2a       	or	r14, r26
    1e22:	fb 2a       	or	r15, r27
    1e24:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1e28:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1e2c:	30 97       	sbiw	r30, 0x00	; 0
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <__vector_7+0x94>
    1e30:	42 c0       	rjmp	.+132    	; 0x1eb6 <__vector_7+0x118>
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	a4 81       	ldd	r26, Z+4	; 0x04
    1e38:	b5 81       	ldd	r27, Z+5	; 0x05
    1e3a:	8c 19       	sub	r24, r12
    1e3c:	9d 09       	sbc	r25, r13
    1e3e:	ae 09       	sbc	r26, r14
    1e40:	bf 09       	sbc	r27, r15
    1e42:	18 16       	cp	r1, r24
    1e44:	19 06       	cpc	r1, r25
    1e46:	1a 06       	cpc	r1, r26
    1e48:	1b 06       	cpc	r1, r27
    1e4a:	ec f1       	brlt	.+122    	; 0x1ec6 <__vector_7+0x128>
    1e4c:	8a e5       	ldi	r24, 0x5A	; 90
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <dequeue>
    1e54:	6c e5       	ldi	r22, 0x5C	; 92
    1e56:	71 e0       	ldi	r23, 0x01	; 1
    1e58:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <enqueueByDeadline>
    1e5c:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    1e60:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    1e64:	30 97       	sbiw	r30, 0x00	; 0
    1e66:	39 f1       	breq	.+78     	; 0x1eb6 <__vector_7+0x118>
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e6e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e70:	8c 19       	sub	r24, r12
    1e72:	9d 09       	sbc	r25, r13
    1e74:	ae 09       	sbc	r26, r14
    1e76:	bf 09       	sbc	r27, r15
    1e78:	18 16       	cp	r1, r24
    1e7a:	19 06       	cpc	r1, r25
    1e7c:	1a 06       	cpc	r1, r26
    1e7e:	1b 06       	cpc	r1, r27
    1e80:	2c f7       	brge	.-54     	; 0x1e4c <__vector_7+0xae>
    1e82:	21 c0       	rjmp	.+66     	; 0x1ec6 <__vector_7+0x128>
    1e84:	9c 01       	movw	r18, r24
    1e86:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e8a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e8e:	84 1b       	sub	r24, r20
    1e90:	95 0b       	sbc	r25, r21
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	31 f4       	brne	.+12     	; 0x1ea2 <__vector_7+0x104>
    1e96:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e9a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ea6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1eaa:	ef e6       	ldi	r30, 0x6F	; 111
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	82 60       	ori	r24, 0x02	; 2
    1eb2:	80 83       	st	Z, r24
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <__vector_7+0x122>
    1eb6:	ef e6       	ldi	r30, 0x6F	; 111
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8d 7f       	andi	r24, 0xFD	; 253
    1ebe:	80 83       	st	Z, r24
    1ec0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    1ec4:	0c c0       	rjmp	.+24     	; 0x1ede <__vector_7+0x140>
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	a4 81       	ldd	r26, Z+4	; 0x04
    1ecc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ece:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    1ed2:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    1ed6:	2a 17       	cp	r18, r26
    1ed8:	3b 07       	cpc	r19, r27
    1eda:	69 f7       	brne	.-38     	; 0x1eb6 <__vector_7+0x118>
    1edc:	d3 cf       	rjmp	.-90     	; 0x1e84 <__vector_7+0xe6>
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	df 90       	pop	r13
    1efc:	cf 90       	pop	r12
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <async>:
    1f08:	3f 92       	push	r3
    1f0a:	4f 92       	push	r4
    1f0c:	5f 92       	push	r5
    1f0e:	6f 92       	push	r6
    1f10:	7f 92       	push	r7
    1f12:	8f 92       	push	r8
    1f14:	9f 92       	push	r9
    1f16:	af 92       	push	r10
    1f18:	bf 92       	push	r11
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	2b 01       	movw	r4, r22
    1f2c:	3c 01       	movw	r6, r24
    1f2e:	49 01       	movw	r8, r18
    1f30:	5a 01       	movw	r10, r20
    1f32:	8f b7       	in	r24, 0x3f	; 63
    1f34:	80 78       	andi	r24, 0x80	; 128
    1f36:	38 2e       	mov	r3, r24
    1f38:	f8 94       	cli
    1f3a:	8d e3       	ldi	r24, 0x3D	; 61
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <dequeue>
    1f42:	ec 01       	movw	r28, r24
    1f44:	1b 87       	std	Y+11, r17	; 0x0b
    1f46:	0a 87       	std	Y+10, r16	; 0x0a
    1f48:	fd 86       	std	Y+13, r15	; 0x0d
    1f4a:	ec 86       	std	Y+12, r14	; 0x0c
    1f4c:	df 86       	std	Y+15, r13	; 0x0f
    1f4e:	ce 86       	std	Y+14, r12	; 0x0e
    1f50:	33 20       	and	r3, r3
    1f52:	61 f0       	breq	.+24     	; 0x1f6c <async+0x64>
    1f54:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <current>
    1f58:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <current+0x1>
    1f5c:	02 80       	ldd	r0, Z+2	; 0x02
    1f5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f60:	e0 2d       	mov	r30, r0
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	a4 81       	ldd	r26, Z+4	; 0x04
    1f68:	b5 81       	ldd	r27, Z+5	; 0x05
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <async+0x74>
    1f6c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <timestamp>
    1f70:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <timestamp+0x1>
    1f74:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <timestamp+0x2>
    1f78:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <timestamp+0x3>
    1f7c:	48 0e       	add	r4, r24
    1f7e:	59 1e       	adc	r5, r25
    1f80:	6a 1e       	adc	r6, r26
    1f82:	7b 1e       	adc	r7, r27
    1f84:	4a 82       	std	Y+2, r4	; 0x02
    1f86:	5b 82       	std	Y+3, r5	; 0x03
    1f88:	6c 82       	std	Y+4, r6	; 0x04
    1f8a:	7d 82       	std	Y+5, r7	; 0x05
    1f8c:	18 14       	cp	r1, r8
    1f8e:	19 04       	cpc	r1, r9
    1f90:	1a 04       	cpc	r1, r10
    1f92:	1b 04       	cpc	r1, r11
    1f94:	44 f0       	brlt	.+16     	; 0x1fa6 <async+0x9e>
    1f96:	0f 2e       	mov	r0, r31
    1f98:	88 24       	eor	r8, r8
    1f9a:	8a 94       	dec	r8
    1f9c:	98 2c       	mov	r9, r8
    1f9e:	a8 2c       	mov	r10, r8
    1fa0:	ff e7       	ldi	r31, 0x7F	; 127
    1fa2:	bf 2e       	mov	r11, r31
    1fa4:	f0 2d       	mov	r31, r0
    1fa6:	84 0c       	add	r8, r4
    1fa8:	95 1c       	adc	r9, r5
    1faa:	a6 1c       	adc	r10, r6
    1fac:	b7 1c       	adc	r11, r7
    1fae:	8e 82       	std	Y+6, r8	; 0x06
    1fb0:	9f 82       	std	Y+7, r9	; 0x07
    1fb2:	a8 86       	std	Y+8, r10	; 0x08
    1fb4:	b9 86       	std	Y+9, r11	; 0x09
    1fb6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
    1fba:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
    1fbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fc6:	b0 99       	sbic	0x16, 0	; 22
    1fc8:	0e c0       	rjmp	.+28     	; 0x1fe6 <async+0xde>
    1fca:	09 2e       	mov	r0, r25
    1fcc:	00 0c       	add	r0, r0
    1fce:	aa 0b       	sbc	r26, r26
    1fd0:	bb 0b       	sbc	r27, r27
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	99 27       	eor	r25, r25
    1fd6:	88 27       	eor	r24, r24
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	84 2b       	or	r24, r20
    1fde:	95 2b       	or	r25, r21
    1fe0:	a6 2b       	or	r26, r22
    1fe2:	b7 2b       	or	r27, r23
    1fe4:	13 c0       	rjmp	.+38     	; 0x200c <async+0x104>
    1fe6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1fea:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	09 2e       	mov	r0, r25
    1ff2:	00 0c       	add	r0, r0
    1ff4:	aa 0b       	sbc	r26, r26
    1ff6:	bb 0b       	sbc	r27, r27
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	99 27       	eor	r25, r25
    1ffc:	88 27       	eor	r24, r24
    1ffe:	a9 01       	movw	r20, r18
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	84 2b       	or	r24, r20
    2006:	95 2b       	or	r25, r21
    2008:	a6 2b       	or	r26, r22
    200a:	b7 2b       	or	r27, r23
    200c:	48 1a       	sub	r4, r24
    200e:	59 0a       	sbc	r5, r25
    2010:	6a 0a       	sbc	r6, r26
    2012:	7b 0a       	sbc	r7, r27
    2014:	14 14       	cp	r1, r4
    2016:	15 04       	cpc	r1, r5
    2018:	16 04       	cpc	r1, r6
    201a:	17 04       	cpc	r1, r7
    201c:	ac f5       	brge	.+106    	; 0x2088 <async+0x180>
    201e:	6a e5       	ldi	r22, 0x5A	; 90
    2020:	71 e0       	ldi	r23, 0x01	; 1
    2022:	ce 01       	movw	r24, r28
    2024:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <enqueueByBaseline>
    2028:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <timerQ>
    202c:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <timerQ+0x1>
    2030:	30 97       	sbiw	r30, 0x00	; 0
    2032:	21 f1       	breq	.+72     	; 0x207c <async+0x174>
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	a4 81       	ldd	r26, Z+4	; 0x04
    203a:	b5 81       	ldd	r27, Z+5	; 0x05
    203c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__data_end>
    2040:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__data_end+0x1>
    2044:	2a 17       	cp	r18, r26
    2046:	3b 07       	cpc	r19, r27
    2048:	c9 f4       	brne	.+50     	; 0x207c <async+0x174>
    204a:	9c 01       	movw	r18, r24
    204c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2050:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2054:	84 1b       	sub	r24, r20
    2056:	95 0b       	sbc	r25, r21
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	31 f4       	brne	.+12     	; 0x2068 <async+0x160>
    205c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2060:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2064:	2f 5f       	subi	r18, 0xFF	; 255
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    206c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    2070:	ef e6       	ldi	r30, 0x6F	; 111
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	80 83       	st	Z, r24
    207a:	41 c0       	rjmp	.+130    	; 0x20fe <async+0x1f6>
    207c:	ef e6       	ldi	r30, 0x6F	; 111
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	8d 7f       	andi	r24, 0xFD	; 253
    2084:	80 83       	st	Z, r24
    2086:	3b c0       	rjmp	.+118    	; 0x20fe <async+0x1f6>
    2088:	6c e5       	ldi	r22, 0x5C	; 92
    208a:	71 e0       	ldi	r23, 0x01	; 1
    208c:	ce 01       	movw	r24, r28
    208e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <enqueueByDeadline>
    2092:	33 20       	and	r3, r3
    2094:	b9 f1       	breq	.+110    	; 0x2104 <async+0x1fc>
    2096:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
    209a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	81 f1       	breq	.+96     	; 0x2102 <async+0x1fa>
    20a2:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
    20a6:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
    20aa:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <msgQ>
    20ae:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <msgQ+0x1>
    20b2:	02 81       	ldd	r16, Z+2	; 0x02
    20b4:	13 81       	ldd	r17, Z+3	; 0x03
    20b6:	d9 01       	movw	r26, r18
    20b8:	16 96       	adiw	r26, 0x06	; 6
    20ba:	4d 91       	ld	r20, X+
    20bc:	5d 91       	ld	r21, X+
    20be:	6d 91       	ld	r22, X+
    20c0:	7c 91       	ld	r23, X
    20c2:	19 97       	sbiw	r26, 0x09	; 9
    20c4:	d8 01       	movw	r26, r16
    20c6:	16 96       	adiw	r26, 0x06	; 6
    20c8:	0d 91       	ld	r16, X+
    20ca:	1d 91       	ld	r17, X+
    20cc:	2d 91       	ld	r18, X+
    20ce:	3c 91       	ld	r19, X
    20d0:	19 97       	sbiw	r26, 0x09	; 9
    20d2:	40 1b       	sub	r20, r16
    20d4:	51 0b       	sbc	r21, r17
    20d6:	62 0b       	sbc	r22, r18
    20d8:	73 0b       	sbc	r23, r19
    20da:	9a f4       	brpl	.+38     	; 0x2102 <async+0x1fa>
    20dc:	dc 01       	movw	r26, r24
    20de:	2d 91       	ld	r18, X+
    20e0:	3c 91       	ld	r19, X
    20e2:	11 97       	sbiw	r26, 0x01	; 1
    20e4:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <threadPool+0x1>
    20e8:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <threadPool>
    20ec:	ed 93       	st	X+, r30
    20ee:	fc 93       	st	X, r31
    20f0:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <activeStack+0x1>
    20f4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <activeStack>
    20f8:	0e 94 ed 05 	call	0xbda	; 0xbda <dispatch>
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <async+0x1fa>
    20fe:	33 20       	and	r3, r3
    2100:	09 f0       	breq	.+2      	; 0x2104 <async+0x1fc>
    2102:	78 94       	sei
    2104:	ce 01       	movw	r24, r28
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	7f 90       	pop	r7
    2120:	6f 90       	pop	r6
    2122:	5f 90       	pop	r5
    2124:	4f 90       	pop	r4
    2126:	3f 90       	pop	r3
    2128:	08 95       	ret

0000212a <sync>:
    212a:	cf 92       	push	r12
    212c:	df 92       	push	r13
    212e:	ef 92       	push	r14
    2130:	ff 92       	push	r15
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	ec 01       	movw	r28, r24
    213c:	7b 01       	movw	r14, r22
    213e:	6a 01       	movw	r12, r20
    2140:	1f b7       	in	r17, 0x3f	; 63
    2142:	10 78       	andi	r17, 0x80	; 128
    2144:	f8 94       	cli
    2146:	a8 81       	ld	r26, Y
    2148:	b9 81       	ldd	r27, Y+1	; 0x01
    214a:	10 97       	sbiw	r26, 0x00	; 0
    214c:	61 f1       	breq	.+88     	; 0x21a6 <sync+0x7c>
    214e:	14 96       	adiw	r26, 0x04	; 4
    2150:	ed 91       	ld	r30, X+
    2152:	fc 91       	ld	r31, X
    2154:	15 97       	sbiw	r26, 0x05	; 5
    2156:	30 97       	sbiw	r30, 0x00	; 0
    2158:	41 f0       	breq	.+16     	; 0x216a <sync+0x40>
    215a:	a0 81       	ld	r26, Z
    215c:	b1 81       	ldd	r27, Z+1	; 0x01
    215e:	14 96       	adiw	r26, 0x04	; 4
    2160:	ed 91       	ld	r30, X+
    2162:	fc 91       	ld	r31, X
    2164:	15 97       	sbiw	r26, 0x05	; 5
    2166:	30 97       	sbiw	r30, 0x00	; 0
    2168:	c1 f7       	brne	.-16     	; 0x215a <sync+0x30>
    216a:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <current>
    216e:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <current+0x1>
    2172:	2a 17       	cp	r18, r26
    2174:	3b 07       	cpc	r19, r27
    2176:	21 f0       	breq	.+8      	; 0x2180 <sync+0x56>
    2178:	11 23       	and	r17, r17
    217a:	09 f4       	brne	.+2      	; 0x217e <sync+0x54>
    217c:	3d c0       	rjmp	.+122    	; 0x21f8 <sync+0xce>
    217e:	07 c0       	rjmp	.+14     	; 0x218e <sync+0x64>
    2180:	11 23       	and	r17, r17
    2182:	09 f4       	brne	.+2      	; 0x2186 <sync+0x5c>
    2184:	3c c0       	rjmp	.+120    	; 0x21fe <sync+0xd4>
    2186:	78 94       	sei
    2188:	8f ef       	ldi	r24, 0xFF	; 255
    218a:	9f ef       	ldi	r25, 0xFF	; 255
    218c:	52 c0       	rjmp	.+164    	; 0x2232 <sync+0x108>
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	d1 f1       	breq	.+116    	; 0x220a <sync+0xe0>
    2196:	fc 01       	movw	r30, r24
    2198:	15 82       	std	Z+5, r1	; 0x05
    219a:	14 82       	std	Z+4, r1	; 0x04
    219c:	36 c0       	rjmp	.+108    	; 0x220a <sync+0xe0>
    219e:	78 94       	sei
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	46 c0       	rjmp	.+140    	; 0x2232 <sync+0x108>
    21a6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <current>
    21aa:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <current+0x1>
    21ae:	99 83       	std	Y+1, r25	; 0x01
    21b0:	88 83       	st	Y, r24
    21b2:	11 23       	and	r17, r17
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <sync+0x96>
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <sync+0x96>
    21be:	78 94       	sei
    21c0:	b6 01       	movw	r22, r12
    21c2:	ce 01       	movw	r24, r28
    21c4:	f7 01       	movw	r30, r14
    21c6:	09 95       	icall
    21c8:	f8 2e       	mov	r15, r24
    21ca:	09 2f       	mov	r16, r25
    21cc:	8f b7       	in	r24, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	18 82       	st	Y, r1
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	9b 81       	ldd	r25, Y+3	; 0x03
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	91 05       	cpc	r25, r1
    21dc:	38 f0       	brcs	.+14     	; 0x21ec <sync+0xc2>
    21de:	1b 82       	std	Y+3, r1	; 0x03
    21e0:	1a 82       	std	Y+2, r1	; 0x02
    21e2:	fc 01       	movw	r30, r24
    21e4:	15 82       	std	Z+5, r1	; 0x05
    21e6:	14 82       	std	Z+4, r1	; 0x04
    21e8:	0e 94 ed 05 	call	0xbda	; 0xbda <dispatch>
    21ec:	11 23       	and	r17, r17
    21ee:	51 f0       	breq	.+20     	; 0x2204 <sync+0xda>
    21f0:	78 94       	sei
    21f2:	8f 2d       	mov	r24, r15
    21f4:	90 2f       	mov	r25, r16
    21f6:	1d c0       	rjmp	.+58     	; 0x2232 <sync+0x108>
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	9f ef       	ldi	r25, 0xFF	; 255
    21fc:	1a c0       	rjmp	.+52     	; 0x2232 <sync+0x108>
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	9f ef       	ldi	r25, 0xFF	; 255
    2202:	17 c0       	rjmp	.+46     	; 0x2232 <sync+0x108>
    2204:	8f 2d       	mov	r24, r15
    2206:	90 2f       	mov	r25, r16
    2208:	14 c0       	rjmp	.+40     	; 0x2232 <sync+0x108>
    220a:	3b 83       	std	Y+3, r19	; 0x03
    220c:	2a 83       	std	Y+2, r18	; 0x02
    220e:	f9 01       	movw	r30, r18
    2210:	d5 83       	std	Z+5, r29	; 0x05
    2212:	c4 83       	std	Z+4, r28	; 0x04
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 ed 05 	call	0xbda	; 0xbda <dispatch>
    221a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <current>
    221e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <current+0x1>
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	89 2b       	or	r24, r25
    2228:	09 f4       	brne	.+2      	; 0x222c <sync+0x102>
    222a:	b9 cf       	rjmp	.-142    	; 0x219e <sync+0x74>
    222c:	f9 83       	std	Y+1, r31	; 0x01
    222e:	e8 83       	st	Y, r30
    2230:	c2 cf       	rjmp	.-124    	; 0x21b6 <sync+0x8c>
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	08 95       	ret

00002244 <run>:
    2244:	00 91 37 01 	lds	r16, 0x0137	; 0x800137 <current>
    2248:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <current+0x1>
    224c:	8c e5       	ldi	r24, 0x5C	; 92
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <dequeue>
    2254:	ec 01       	movw	r28, r24
    2256:	d8 01       	movw	r26, r16
    2258:	13 96       	adiw	r26, 0x03	; 3
    225a:	9c 93       	st	X, r25
    225c:	8e 93       	st	-X, r24
    225e:	12 97       	sbiw	r26, 0x02	; 2
    2260:	78 94       	sei
    2262:	4e 85       	ldd	r20, Y+14	; 0x0e
    2264:	5f 85       	ldd	r21, Y+15	; 0x0f
    2266:	6c 85       	ldd	r22, Y+12	; 0x0c
    2268:	7d 85       	ldd	r23, Y+13	; 0x0d
    226a:	8a 85       	ldd	r24, Y+10	; 0x0a
    226c:	9b 85       	ldd	r25, Y+11	; 0x0b
    226e:	0e 94 95 10 	call	0x212a	; 0x212a <sync>
    2272:	8f b7       	in	r24, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <msgPool>
    227a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <msgPool+0x1>
    227e:	99 83       	std	Y+1, r25	; 0x01
    2280:	88 83       	st	Y, r24
    2282:	d0 93 3e 01 	sts	0x013E, r29	; 0x80013e <msgPool+0x1>
    2286:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <msgPool>
    228a:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <activeStack>
    228e:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <activeStack+0x1>
    2292:	00 81       	ld	r16, Z
    2294:	11 81       	ldd	r17, Z+1	; 0x01
    2296:	e8 01       	movw	r28, r16
    2298:	2a 81       	ldd	r18, Y+2	; 0x02
    229a:	3b 81       	ldd	r19, Y+3	; 0x03
    229c:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <msgQ>
    22a0:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <msgQ+0x1>
    22a4:	10 97       	sbiw	r26, 0x00	; 0
    22a6:	c1 f0       	breq	.+48     	; 0x22d8 <run+0x94>
    22a8:	21 15       	cp	r18, r1
    22aa:	31 05       	cpc	r19, r1
    22ac:	59 f2       	breq	.-106    	; 0x2244 <run>
    22ae:	16 96       	adiw	r26, 0x06	; 6
    22b0:	8d 91       	ld	r24, X+
    22b2:	9d 91       	ld	r25, X+
    22b4:	0d 90       	ld	r0, X+
    22b6:	bc 91       	ld	r27, X
    22b8:	a0 2d       	mov	r26, r0
    22ba:	e9 01       	movw	r28, r18
    22bc:	4e 81       	ldd	r20, Y+6	; 0x06
    22be:	5f 81       	ldd	r21, Y+7	; 0x07
    22c0:	68 85       	ldd	r22, Y+8	; 0x08
    22c2:	79 85       	ldd	r23, Y+9	; 0x09
    22c4:	84 1b       	sub	r24, r20
    22c6:	95 0b       	sbc	r25, r21
    22c8:	a6 0b       	sbc	r26, r22
    22ca:	b7 0b       	sbc	r27, r23
    22cc:	18 16       	cp	r1, r24
    22ce:	19 06       	cpc	r1, r25
    22d0:	1a 06       	cpc	r1, r26
    22d2:	1b 06       	cpc	r1, r27
    22d4:	0c f0       	brlt	.+2      	; 0x22d8 <run+0x94>
    22d6:	b6 cf       	rjmp	.-148    	; 0x2244 <run>
    22d8:	10 93 3a 01 	sts	0x013A, r17	; 0x80013a <activeStack+0x1>
    22dc:	00 93 39 01 	sts	0x0139, r16	; 0x800139 <activeStack>
    22e0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <threadPool>
    22e4:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <threadPool+0x1>
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
    22ec:	f0 93 3c 01 	sts	0x013C, r31	; 0x80013c <threadPool+0x1>
    22f0:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <threadPool>
    22f4:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <activeStack>
    22f8:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <activeStack+0x1>
    22fc:	14 96       	adiw	r26, 0x04	; 4
    22fe:	ed 91       	ld	r30, X+
    2300:	fc 91       	ld	r31, X
    2302:	15 97       	sbiw	r26, 0x05	; 5
    2304:	30 97       	sbiw	r30, 0x00	; 0
    2306:	41 f0       	breq	.+16     	; 0x2318 <run+0xd4>
    2308:	a0 81       	ld	r26, Z
    230a:	b1 81       	ldd	r27, Z+1	; 0x01
    230c:	14 96       	adiw	r26, 0x04	; 4
    230e:	ed 91       	ld	r30, X+
    2310:	fc 91       	ld	r31, X
    2312:	15 97       	sbiw	r26, 0x05	; 5
    2314:	30 97       	sbiw	r30, 0x00	; 0
    2316:	c1 f7       	brne	.-16     	; 0x2308 <run+0xc4>
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 ed 05 	call	0xbda	; 0xbda <dispatch>
    231e:	92 cf       	rjmp	.-220    	; 0x2244 <run>

00002320 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2320:	42 31       	cpi	r20, 0x12	; 18
    2322:	b8 f4       	brcc	.+46     	; 0x2352 <install+0x32>
        char status;
        DISABLE(status);
    2324:	2f b7       	in	r18, 0x3f	; 63
    2326:	f8 94       	cli
        otable[i] = obj;
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	44 0f       	add	r20, r20
    232c:	55 1f       	adc	r21, r21
    232e:	fa 01       	movw	r30, r20
    2330:	e2 5a       	subi	r30, 0xA2	; 162
    2332:	fe 4f       	sbci	r31, 0xFE	; 254
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
        mtable[i] = m;
    2338:	fa 01       	movw	r30, r20
    233a:	ea 50       	subi	r30, 0x0A	; 10
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	71 83       	std	Z+1, r23	; 0x01
    2340:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	fc 01       	movw	r30, r24
    2348:	53 83       	std	Z+3, r21	; 0x03
    234a:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    234c:	22 23       	and	r18, r18
    234e:	0c f4       	brge	.+2      	; 0x2352 <install+0x32>
    2350:	78 94       	sei
    2352:	08 95       	ret

00002354 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2354:	8c 01       	movw	r16, r24
    2356:	7b 01       	movw	r14, r22
    2358:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    235a:	8f b7       	in	r24, 0x3f	; 63
    235c:	f8 94       	cli
    initialize();
    235e:	0e 94 82 05 	call	0xb04	; 0xb04 <initialize>
    ENABLE(1);
    2362:	78 94       	sei
    if (m != NULL)
    2364:	e1 14       	cp	r14, r1
    2366:	f1 04       	cpc	r15, r1
    2368:	41 f0       	breq	.+16     	; 0x237a <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	a9 01       	movw	r20, r18
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	cb 01       	movw	r24, r22
    2376:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <async>
    DISABLE(status);
    237a:	8f b7       	in	r24, 0x3f	; 63
    237c:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    237e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <schedule>
    ENABLE(1);
    2382:	78 94       	sei
    while (1) {
        SLEEP();
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	83 bf       	out	0x33, r24	; 51
    2388:	88 95       	sleep
    238a:	fd cf       	rjmp	.-6      	; 0x2386 <tinytimber+0x32>

0000238c <writeBit>:
#include <avr/io.h>
#include "TinyTimber.h"

// writeBit() sätter eller rensar angiven bit i PORTE.
int writeBit(Writebit *self, int arg) {
	if (arg)
    238c:	67 2b       	or	r22, r23
    238e:	79 f0       	breq	.+30     	; 0x23ae <writeBit+0x22>
	PORTE |= (1 << self->portBit);
    2390:	4e b1       	in	r20, 0x0e	; 14
    2392:	21 e0       	ldi	r18, 0x01	; 1
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	b9 01       	movw	r22, r18
    2398:	fc 01       	movw	r30, r24
    239a:	04 80       	ldd	r0, Z+4	; 0x04
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <writeBit+0x16>
    239e:	66 0f       	add	r22, r22
    23a0:	77 1f       	adc	r23, r23
    23a2:	0a 94       	dec	r0
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <writeBit+0x12>
    23a6:	cb 01       	movw	r24, r22
    23a8:	84 2b       	or	r24, r20
    23aa:	8e b9       	out	0x0e, r24	; 14
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <writeBit+0x40>
	else
	PORTE &= ~(1 << self->portBit);
    23ae:	4e b1       	in	r20, 0x0e	; 14
    23b0:	21 e0       	ldi	r18, 0x01	; 1
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	b9 01       	movw	r22, r18
    23b6:	fc 01       	movw	r30, r24
    23b8:	04 80       	ldd	r0, Z+4	; 0x04
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <writeBit+0x34>
    23bc:	66 0f       	add	r22, r22
    23be:	77 1f       	adc	r23, r23
    23c0:	0a 94       	dec	r0
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <writeBit+0x30>
    23c4:	cb 01       	movw	r24, r22
    23c6:	80 95       	com	r24
    23c8:	84 23       	and	r24, r20
    23ca:	8e b9       	out	0x0e, r24	; 14
	return 0;
}
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	08 95       	ret

000023d2 <toggleBit>:

// toggleBit() vänder bit i PORTE motsvarande self->portBit.
int toggleBit(Writebit *self, int arg) {
	PORTE ^= (1 << self->portBit);
    23d2:	4e b1       	in	r20, 0x0e	; 14
    23d4:	21 e0       	ldi	r18, 0x01	; 1
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	04 80       	ldd	r0, Z+4	; 0x04
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <toggleBit+0x10>
    23de:	22 0f       	add	r18, r18
    23e0:	33 1f       	adc	r19, r19
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <toggleBit+0xc>
    23e6:	24 27       	eor	r18, r20
    23e8:	2e b9       	out	0x0e, r18	; 14
	return 0;
}
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <__divmodhi4>:
    23f0:	97 fb       	bst	r25, 7
    23f2:	07 2e       	mov	r0, r23
    23f4:	16 f4       	brtc	.+4      	; 0x23fa <__divmodhi4+0xa>
    23f6:	00 94       	com	r0
    23f8:	07 d0       	rcall	.+14     	; 0x2408 <__divmodhi4_neg1>
    23fa:	77 fd       	sbrc	r23, 7
    23fc:	09 d0       	rcall	.+18     	; 0x2410 <__divmodhi4_neg2>
    23fe:	0e 94 32 12 	call	0x2464	; 0x2464 <__udivmodhi4>
    2402:	07 fc       	sbrc	r0, 7
    2404:	05 d0       	rcall	.+10     	; 0x2410 <__divmodhi4_neg2>
    2406:	3e f4       	brtc	.+14     	; 0x2416 <__divmodhi4_exit>

00002408 <__divmodhi4_neg1>:
    2408:	90 95       	com	r25
    240a:	81 95       	neg	r24
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	08 95       	ret

00002410 <__divmodhi4_neg2>:
    2410:	70 95       	com	r23
    2412:	61 95       	neg	r22
    2414:	7f 4f       	sbci	r23, 0xFF	; 255

00002416 <__divmodhi4_exit>:
    2416:	08 95       	ret

00002418 <__divmodsi4>:
    2418:	05 2e       	mov	r0, r21
    241a:	97 fb       	bst	r25, 7
    241c:	1e f4       	brtc	.+6      	; 0x2424 <__divmodsi4+0xc>
    241e:	00 94       	com	r0
    2420:	0e 94 23 12 	call	0x2446	; 0x2446 <__negsi2>
    2424:	57 fd       	sbrc	r21, 7
    2426:	07 d0       	rcall	.+14     	; 0x2436 <__divmodsi4_neg2>
    2428:	0e 94 46 12 	call	0x248c	; 0x248c <__udivmodsi4>
    242c:	07 fc       	sbrc	r0, 7
    242e:	03 d0       	rcall	.+6      	; 0x2436 <__divmodsi4_neg2>
    2430:	4e f4       	brtc	.+18     	; 0x2444 <__divmodsi4_exit>
    2432:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__negsi2>

00002436 <__divmodsi4_neg2>:
    2436:	50 95       	com	r21
    2438:	40 95       	com	r20
    243a:	30 95       	com	r19
    243c:	21 95       	neg	r18
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	4f 4f       	sbci	r20, 0xFF	; 255
    2442:	5f 4f       	sbci	r21, 0xFF	; 255

00002444 <__divmodsi4_exit>:
    2444:	08 95       	ret

00002446 <__negsi2>:
    2446:	90 95       	com	r25
    2448:	80 95       	com	r24
    244a:	70 95       	com	r23
    244c:	61 95       	neg	r22
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	08 95       	ret

00002456 <__usmulhisi3>:
    2456:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__umulhisi3>

0000245a <__usmulhisi3_tail>:
    245a:	b7 ff       	sbrs	r27, 7
    245c:	08 95       	ret
    245e:	82 1b       	sub	r24, r18
    2460:	93 0b       	sbc	r25, r19
    2462:	08 95       	ret

00002464 <__udivmodhi4>:
    2464:	aa 1b       	sub	r26, r26
    2466:	bb 1b       	sub	r27, r27
    2468:	51 e1       	ldi	r21, 0x11	; 17
    246a:	07 c0       	rjmp	.+14     	; 0x247a <__udivmodhi4_ep>

0000246c <__udivmodhi4_loop>:
    246c:	aa 1f       	adc	r26, r26
    246e:	bb 1f       	adc	r27, r27
    2470:	a6 17       	cp	r26, r22
    2472:	b7 07       	cpc	r27, r23
    2474:	10 f0       	brcs	.+4      	; 0x247a <__udivmodhi4_ep>
    2476:	a6 1b       	sub	r26, r22
    2478:	b7 0b       	sbc	r27, r23

0000247a <__udivmodhi4_ep>:
    247a:	88 1f       	adc	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	5a 95       	dec	r21
    2480:	a9 f7       	brne	.-22     	; 0x246c <__udivmodhi4_loop>
    2482:	80 95       	com	r24
    2484:	90 95       	com	r25
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	08 95       	ret

0000248c <__udivmodsi4>:
    248c:	a1 e2       	ldi	r26, 0x21	; 33
    248e:	1a 2e       	mov	r1, r26
    2490:	aa 1b       	sub	r26, r26
    2492:	bb 1b       	sub	r27, r27
    2494:	fd 01       	movw	r30, r26
    2496:	0d c0       	rjmp	.+26     	; 0x24b2 <__udivmodsi4_ep>

00002498 <__udivmodsi4_loop>:
    2498:	aa 1f       	adc	r26, r26
    249a:	bb 1f       	adc	r27, r27
    249c:	ee 1f       	adc	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	a2 17       	cp	r26, r18
    24a2:	b3 07       	cpc	r27, r19
    24a4:	e4 07       	cpc	r30, r20
    24a6:	f5 07       	cpc	r31, r21
    24a8:	20 f0       	brcs	.+8      	; 0x24b2 <__udivmodsi4_ep>
    24aa:	a2 1b       	sub	r26, r18
    24ac:	b3 0b       	sbc	r27, r19
    24ae:	e4 0b       	sbc	r30, r20
    24b0:	f5 0b       	sbc	r31, r21

000024b2 <__udivmodsi4_ep>:
    24b2:	66 1f       	adc	r22, r22
    24b4:	77 1f       	adc	r23, r23
    24b6:	88 1f       	adc	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	1a 94       	dec	r1
    24bc:	69 f7       	brne	.-38     	; 0x2498 <__udivmodsi4_loop>
    24be:	60 95       	com	r22
    24c0:	70 95       	com	r23
    24c2:	80 95       	com	r24
    24c4:	90 95       	com	r25
    24c6:	9b 01       	movw	r18, r22
    24c8:	ac 01       	movw	r20, r24
    24ca:	bd 01       	movw	r22, r26
    24cc:	cf 01       	movw	r24, r30
    24ce:	08 95       	ret

000024d0 <__umulhisi3>:
    24d0:	a2 9f       	mul	r26, r18
    24d2:	b0 01       	movw	r22, r0
    24d4:	b3 9f       	mul	r27, r19
    24d6:	c0 01       	movw	r24, r0
    24d8:	a3 9f       	mul	r26, r19
    24da:	70 0d       	add	r23, r0
    24dc:	81 1d       	adc	r24, r1
    24de:	11 24       	eor	r1, r1
    24e0:	91 1d       	adc	r25, r1
    24e2:	b2 9f       	mul	r27, r18
    24e4:	70 0d       	add	r23, r0
    24e6:	81 1d       	adc	r24, r1
    24e8:	11 24       	eor	r1, r1
    24ea:	91 1d       	adc	r25, r1
    24ec:	08 95       	ret

000024ee <setjmp>:
    24ee:	dc 01       	movw	r26, r24
    24f0:	2d 92       	st	X+, r2
    24f2:	3d 92       	st	X+, r3
    24f4:	4d 92       	st	X+, r4
    24f6:	5d 92       	st	X+, r5
    24f8:	6d 92       	st	X+, r6
    24fa:	7d 92       	st	X+, r7
    24fc:	8d 92       	st	X+, r8
    24fe:	9d 92       	st	X+, r9
    2500:	ad 92       	st	X+, r10
    2502:	bd 92       	st	X+, r11
    2504:	cd 92       	st	X+, r12
    2506:	dd 92       	st	X+, r13
    2508:	ed 92       	st	X+, r14
    250a:	fd 92       	st	X+, r15
    250c:	0d 93       	st	X+, r16
    250e:	1d 93       	st	X+, r17
    2510:	cd 93       	st	X+, r28
    2512:	dd 93       	st	X+, r29
    2514:	ff 91       	pop	r31
    2516:	ef 91       	pop	r30
    2518:	8d b7       	in	r24, 0x3d	; 61
    251a:	8d 93       	st	X+, r24
    251c:	8e b7       	in	r24, 0x3e	; 62
    251e:	8d 93       	st	X+, r24
    2520:	8f b7       	in	r24, 0x3f	; 63
    2522:	8d 93       	st	X+, r24
    2524:	ed 93       	st	X+, r30
    2526:	fd 93       	st	X+, r31
    2528:	88 27       	eor	r24, r24
    252a:	99 27       	eor	r25, r25
    252c:	09 94       	ijmp

0000252e <longjmp>:
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	81 30       	cpi	r24, 0x01	; 1
    2534:	91 05       	cpc	r25, r1
    2536:	81 1d       	adc	r24, r1
    2538:	2d 90       	ld	r2, X+
    253a:	3d 90       	ld	r3, X+
    253c:	4d 90       	ld	r4, X+
    253e:	5d 90       	ld	r5, X+
    2540:	6d 90       	ld	r6, X+
    2542:	7d 90       	ld	r7, X+
    2544:	8d 90       	ld	r8, X+
    2546:	9d 90       	ld	r9, X+
    2548:	ad 90       	ld	r10, X+
    254a:	bd 90       	ld	r11, X+
    254c:	cd 90       	ld	r12, X+
    254e:	dd 90       	ld	r13, X+
    2550:	ed 90       	ld	r14, X+
    2552:	fd 90       	ld	r15, X+
    2554:	0d 91       	ld	r16, X+
    2556:	1d 91       	ld	r17, X+
    2558:	cd 91       	ld	r28, X+
    255a:	dd 91       	ld	r29, X+
    255c:	ed 91       	ld	r30, X+
    255e:	fd 91       	ld	r31, X+
    2560:	0d 90       	ld	r0, X+
    2562:	f8 94       	cli
    2564:	fe bf       	out	0x3e, r31	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	ed bf       	out	0x3d, r30	; 61
    256a:	ed 91       	ld	r30, X+
    256c:	fd 91       	ld	r31, X+
    256e:	09 94       	ijmp

00002570 <_exit>:
    2570:	f8 94       	cli

00002572 <__stop_program>:
    2572:	ff cf       	rjmp	.-2      	; 0x2572 <__stop_program>
